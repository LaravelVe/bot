[{
		"type": "Namespace",
		"link": "Illuminate.html",
		"name": "Illuminate",
		"doc": "Namespace Illuminate"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Auth.html",
		"name": "Illuminate\\Auth",
		"doc": "Namespace Illuminate\\Auth"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Auth/Access.html",
		"name": "Illuminate\\Auth\\Access",
		"doc": "Namespace Illuminate\\Auth\\Access"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Auth/Console.html",
		"name": "Illuminate\\Auth\\Console",
		"doc": "Namespace Illuminate\\Auth\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Auth/Events.html",
		"name": "Illuminate\\Auth\\Events",
		"doc": "Namespace Illuminate\\Auth\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Auth/Listeners.html",
		"name": "Illuminate\\Auth\\Listeners",
		"doc": "Namespace Illuminate\\Auth\\Listeners"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Auth/Middleware.html",
		"name": "Illuminate\\Auth\\Middleware",
		"doc": "Namespace Illuminate\\Auth\\Middleware"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Auth/Notifications.html",
		"name": "Illuminate\\Auth\\Notifications",
		"doc": "Namespace Illuminate\\Auth\\Notifications"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Auth/Passwords.html",
		"name": "Illuminate\\Auth\\Passwords",
		"doc": "Namespace Illuminate\\Auth\\Passwords"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Broadcasting.html",
		"name": "Illuminate\\Broadcasting",
		"doc": "Namespace Illuminate\\Broadcasting"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Broadcasting/Broadcasters.html",
		"name": "Illuminate\\Broadcasting\\Broadcasters",
		"doc": "Namespace Illuminate\\Broadcasting\\Broadcasters"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Bus.html",
		"name": "Illuminate\\Bus",
		"doc": "Namespace Illuminate\\Bus"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Bus/Events.html",
		"name": "Illuminate\\Bus\\Events",
		"doc": "Namespace Illuminate\\Bus\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Cache.html",
		"name": "Illuminate\\Cache",
		"doc": "Namespace Illuminate\\Cache"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Cache/Console.html",
		"name": "Illuminate\\Cache\\Console",
		"doc": "Namespace Illuminate\\Cache\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Cache/Events.html",
		"name": "Illuminate\\Cache\\Events",
		"doc": "Namespace Illuminate\\Cache\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Cache/RateLimiting.html",
		"name": "Illuminate\\Cache\\RateLimiting",
		"doc": "Namespace Illuminate\\Cache\\RateLimiting"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Config.html",
		"name": "Illuminate\\Config",
		"doc": "Namespace Illuminate\\Config"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Console.html",
		"name": "Illuminate\\Console",
		"doc": "Namespace Illuminate\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Console/Concerns.html",
		"name": "Illuminate\\Console\\Concerns",
		"doc": "Namespace Illuminate\\Console\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Console/Events.html",
		"name": "Illuminate\\Console\\Events",
		"doc": "Namespace Illuminate\\Console\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Console/Scheduling.html",
		"name": "Illuminate\\Console\\Scheduling",
		"doc": "Namespace Illuminate\\Console\\Scheduling"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Container.html",
		"name": "Illuminate\\Container",
		"doc": "Namespace Illuminate\\Container"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts.html",
		"name": "Illuminate\\Contracts",
		"doc": "Namespace Illuminate\\Contracts"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Auth.html",
		"name": "Illuminate\\Contracts\\Auth",
		"doc": "Namespace Illuminate\\Contracts\\Auth"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Auth/Access.html",
		"name": "Illuminate\\Contracts\\Auth\\Access",
		"doc": "Namespace Illuminate\\Contracts\\Auth\\Access"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Auth/Middleware.html",
		"name": "Illuminate\\Contracts\\Auth\\Middleware",
		"doc": "Namespace Illuminate\\Contracts\\Auth\\Middleware"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Broadcasting.html",
		"name": "Illuminate\\Contracts\\Broadcasting",
		"doc": "Namespace Illuminate\\Contracts\\Broadcasting"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Bus.html",
		"name": "Illuminate\\Contracts\\Bus",
		"doc": "Namespace Illuminate\\Contracts\\Bus"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Cache.html",
		"name": "Illuminate\\Contracts\\Cache",
		"doc": "Namespace Illuminate\\Contracts\\Cache"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Config.html",
		"name": "Illuminate\\Contracts\\Config",
		"doc": "Namespace Illuminate\\Contracts\\Config"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Console.html",
		"name": "Illuminate\\Contracts\\Console",
		"doc": "Namespace Illuminate\\Contracts\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Container.html",
		"name": "Illuminate\\Contracts\\Container",
		"doc": "Namespace Illuminate\\Contracts\\Container"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Cookie.html",
		"name": "Illuminate\\Contracts\\Cookie",
		"doc": "Namespace Illuminate\\Contracts\\Cookie"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Database.html",
		"name": "Illuminate\\Contracts\\Database",
		"doc": "Namespace Illuminate\\Contracts\\Database"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Database/Eloquent.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent",
		"doc": "Namespace Illuminate\\Contracts\\Database\\Eloquent"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Database/Events.html",
		"name": "Illuminate\\Contracts\\Database\\Events",
		"doc": "Namespace Illuminate\\Contracts\\Database\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Debug.html",
		"name": "Illuminate\\Contracts\\Debug",
		"doc": "Namespace Illuminate\\Contracts\\Debug"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Encryption.html",
		"name": "Illuminate\\Contracts\\Encryption",
		"doc": "Namespace Illuminate\\Contracts\\Encryption"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Events.html",
		"name": "Illuminate\\Contracts\\Events",
		"doc": "Namespace Illuminate\\Contracts\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Filesystem.html",
		"name": "Illuminate\\Contracts\\Filesystem",
		"doc": "Namespace Illuminate\\Contracts\\Filesystem"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Foundation.html",
		"name": "Illuminate\\Contracts\\Foundation",
		"doc": "Namespace Illuminate\\Contracts\\Foundation"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Hashing.html",
		"name": "Illuminate\\Contracts\\Hashing",
		"doc": "Namespace Illuminate\\Contracts\\Hashing"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Http.html",
		"name": "Illuminate\\Contracts\\Http",
		"doc": "Namespace Illuminate\\Contracts\\Http"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Mail.html",
		"name": "Illuminate\\Contracts\\Mail",
		"doc": "Namespace Illuminate\\Contracts\\Mail"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Notifications.html",
		"name": "Illuminate\\Contracts\\Notifications",
		"doc": "Namespace Illuminate\\Contracts\\Notifications"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Pagination.html",
		"name": "Illuminate\\Contracts\\Pagination",
		"doc": "Namespace Illuminate\\Contracts\\Pagination"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Pipeline.html",
		"name": "Illuminate\\Contracts\\Pipeline",
		"doc": "Namespace Illuminate\\Contracts\\Pipeline"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Queue.html",
		"name": "Illuminate\\Contracts\\Queue",
		"doc": "Namespace Illuminate\\Contracts\\Queue"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Redis.html",
		"name": "Illuminate\\Contracts\\Redis",
		"doc": "Namespace Illuminate\\Contracts\\Redis"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Routing.html",
		"name": "Illuminate\\Contracts\\Routing",
		"doc": "Namespace Illuminate\\Contracts\\Routing"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Session.html",
		"name": "Illuminate\\Contracts\\Session",
		"doc": "Namespace Illuminate\\Contracts\\Session"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Support.html",
		"name": "Illuminate\\Contracts\\Support",
		"doc": "Namespace Illuminate\\Contracts\\Support"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Translation.html",
		"name": "Illuminate\\Contracts\\Translation",
		"doc": "Namespace Illuminate\\Contracts\\Translation"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/Validation.html",
		"name": "Illuminate\\Contracts\\Validation",
		"doc": "Namespace Illuminate\\Contracts\\Validation"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Contracts/View.html",
		"name": "Illuminate\\Contracts\\View",
		"doc": "Namespace Illuminate\\Contracts\\View"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Cookie.html",
		"name": "Illuminate\\Cookie",
		"doc": "Namespace Illuminate\\Cookie"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Cookie/Middleware.html",
		"name": "Illuminate\\Cookie\\Middleware",
		"doc": "Namespace Illuminate\\Cookie\\Middleware"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database.html",
		"name": "Illuminate\\Database",
		"doc": "Namespace Illuminate\\Database"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Capsule.html",
		"name": "Illuminate\\Database\\Capsule",
		"doc": "Namespace Illuminate\\Database\\Capsule"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Concerns.html",
		"name": "Illuminate\\Database\\Concerns",
		"doc": "Namespace Illuminate\\Database\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Connectors.html",
		"name": "Illuminate\\Database\\Connectors",
		"doc": "Namespace Illuminate\\Database\\Connectors"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Console.html",
		"name": "Illuminate\\Database\\Console",
		"doc": "Namespace Illuminate\\Database\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Console/Factories.html",
		"name": "Illuminate\\Database\\Console\\Factories",
		"doc": "Namespace Illuminate\\Database\\Console\\Factories"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Console/Migrations.html",
		"name": "Illuminate\\Database\\Console\\Migrations",
		"doc": "Namespace Illuminate\\Database\\Console\\Migrations"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Console/Seeds.html",
		"name": "Illuminate\\Database\\Console\\Seeds",
		"doc": "Namespace Illuminate\\Database\\Console\\Seeds"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Eloquent.html",
		"name": "Illuminate\\Database\\Eloquent",
		"doc": "Namespace Illuminate\\Database\\Eloquent"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Eloquent/Concerns.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns",
		"doc": "Namespace Illuminate\\Database\\Eloquent\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Eloquent/Factories.html",
		"name": "Illuminate\\Database\\Eloquent\\Factories",
		"doc": "Namespace Illuminate\\Database\\Eloquent\\Factories"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Eloquent/Relations.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations",
		"doc": "Namespace Illuminate\\Database\\Eloquent\\Relations"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns",
		"doc": "Namespace Illuminate\\Database\\Eloquent\\Relations\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Events.html",
		"name": "Illuminate\\Database\\Events",
		"doc": "Namespace Illuminate\\Database\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Migrations.html",
		"name": "Illuminate\\Database\\Migrations",
		"doc": "Namespace Illuminate\\Database\\Migrations"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/PDO.html",
		"name": "Illuminate\\Database\\PDO",
		"doc": "Namespace Illuminate\\Database\\PDO"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/PDO/Concerns.html",
		"name": "Illuminate\\Database\\PDO\\Concerns",
		"doc": "Namespace Illuminate\\Database\\PDO\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Query.html",
		"name": "Illuminate\\Database\\Query",
		"doc": "Namespace Illuminate\\Database\\Query"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Query/Grammars.html",
		"name": "Illuminate\\Database\\Query\\Grammars",
		"doc": "Namespace Illuminate\\Database\\Query\\Grammars"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Query/Processors.html",
		"name": "Illuminate\\Database\\Query\\Processors",
		"doc": "Namespace Illuminate\\Database\\Query\\Processors"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Schema.html",
		"name": "Illuminate\\Database\\Schema",
		"doc": "Namespace Illuminate\\Database\\Schema"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Database/Schema/Grammars.html",
		"name": "Illuminate\\Database\\Schema\\Grammars",
		"doc": "Namespace Illuminate\\Database\\Schema\\Grammars"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Encryption.html",
		"name": "Illuminate\\Encryption",
		"doc": "Namespace Illuminate\\Encryption"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Events.html",
		"name": "Illuminate\\Events",
		"doc": "Namespace Illuminate\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Filesystem.html",
		"name": "Illuminate\\Filesystem",
		"doc": "Namespace Illuminate\\Filesystem"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation.html",
		"name": "Illuminate\\Foundation",
		"doc": "Namespace Illuminate\\Foundation"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Auth.html",
		"name": "Illuminate\\Foundation\\Auth",
		"doc": "Namespace Illuminate\\Foundation\\Auth"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Auth/Access.html",
		"name": "Illuminate\\Foundation\\Auth\\Access",
		"doc": "Namespace Illuminate\\Foundation\\Auth\\Access"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Bootstrap.html",
		"name": "Illuminate\\Foundation\\Bootstrap",
		"doc": "Namespace Illuminate\\Foundation\\Bootstrap"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Bus.html",
		"name": "Illuminate\\Foundation\\Bus",
		"doc": "Namespace Illuminate\\Foundation\\Bus"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Console.html",
		"name": "Illuminate\\Foundation\\Console",
		"doc": "Namespace Illuminate\\Foundation\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Events.html",
		"name": "Illuminate\\Foundation\\Events",
		"doc": "Namespace Illuminate\\Foundation\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Exceptions.html",
		"name": "Illuminate\\Foundation\\Exceptions",
		"doc": "Namespace Illuminate\\Foundation\\Exceptions"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Http.html",
		"name": "Illuminate\\Foundation\\Http",
		"doc": "Namespace Illuminate\\Foundation\\Http"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Http/Events.html",
		"name": "Illuminate\\Foundation\\Http\\Events",
		"doc": "Namespace Illuminate\\Foundation\\Http\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Http/Exceptions.html",
		"name": "Illuminate\\Foundation\\Http\\Exceptions",
		"doc": "Namespace Illuminate\\Foundation\\Http\\Exceptions"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Http/Middleware.html",
		"name": "Illuminate\\Foundation\\Http\\Middleware",
		"doc": "Namespace Illuminate\\Foundation\\Http\\Middleware"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Providers.html",
		"name": "Illuminate\\Foundation\\Providers",
		"doc": "Namespace Illuminate\\Foundation\\Providers"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Support.html",
		"name": "Illuminate\\Foundation\\Support",
		"doc": "Namespace Illuminate\\Foundation\\Support"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Support/Providers.html",
		"name": "Illuminate\\Foundation\\Support\\Providers",
		"doc": "Namespace Illuminate\\Foundation\\Support\\Providers"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Testing.html",
		"name": "Illuminate\\Foundation\\Testing",
		"doc": "Namespace Illuminate\\Foundation\\Testing"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Testing/Concerns.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns",
		"doc": "Namespace Illuminate\\Foundation\\Testing\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Foundation/Validation.html",
		"name": "Illuminate\\Foundation\\Validation",
		"doc": "Namespace Illuminate\\Foundation\\Validation"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Hashing.html",
		"name": "Illuminate\\Hashing",
		"doc": "Namespace Illuminate\\Hashing"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Http.html",
		"name": "Illuminate\\Http",
		"doc": "Namespace Illuminate\\Http"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Http/Client.html",
		"name": "Illuminate\\Http\\Client",
		"doc": "Namespace Illuminate\\Http\\Client"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Http/Concerns.html",
		"name": "Illuminate\\Http\\Concerns",
		"doc": "Namespace Illuminate\\Http\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Http/Exceptions.html",
		"name": "Illuminate\\Http\\Exceptions",
		"doc": "Namespace Illuminate\\Http\\Exceptions"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Http/Middleware.html",
		"name": "Illuminate\\Http\\Middleware",
		"doc": "Namespace Illuminate\\Http\\Middleware"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Http/Resources.html",
		"name": "Illuminate\\Http\\Resources",
		"doc": "Namespace Illuminate\\Http\\Resources"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Http/Resources/Json.html",
		"name": "Illuminate\\Http\\Resources\\Json",
		"doc": "Namespace Illuminate\\Http\\Resources\\Json"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Http/Testing.html",
		"name": "Illuminate\\Http\\Testing",
		"doc": "Namespace Illuminate\\Http\\Testing"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Log.html",
		"name": "Illuminate\\Log",
		"doc": "Namespace Illuminate\\Log"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Log/Events.html",
		"name": "Illuminate\\Log\\Events",
		"doc": "Namespace Illuminate\\Log\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Mail.html",
		"name": "Illuminate\\Mail",
		"doc": "Namespace Illuminate\\Mail"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Mail/Events.html",
		"name": "Illuminate\\Mail\\Events",
		"doc": "Namespace Illuminate\\Mail\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Mail/Transport.html",
		"name": "Illuminate\\Mail\\Transport",
		"doc": "Namespace Illuminate\\Mail\\Transport"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Notifications.html",
		"name": "Illuminate\\Notifications",
		"doc": "Namespace Illuminate\\Notifications"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Notifications/Channels.html",
		"name": "Illuminate\\Notifications\\Channels",
		"doc": "Namespace Illuminate\\Notifications\\Channels"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Notifications/Console.html",
		"name": "Illuminate\\Notifications\\Console",
		"doc": "Namespace Illuminate\\Notifications\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Notifications/Events.html",
		"name": "Illuminate\\Notifications\\Events",
		"doc": "Namespace Illuminate\\Notifications\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Notifications/Messages.html",
		"name": "Illuminate\\Notifications\\Messages",
		"doc": "Namespace Illuminate\\Notifications\\Messages"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Pagination.html",
		"name": "Illuminate\\Pagination",
		"doc": "Namespace Illuminate\\Pagination"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Pipeline.html",
		"name": "Illuminate\\Pipeline",
		"doc": "Namespace Illuminate\\Pipeline"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Queue.html",
		"name": "Illuminate\\Queue",
		"doc": "Namespace Illuminate\\Queue"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Queue/Capsule.html",
		"name": "Illuminate\\Queue\\Capsule",
		"doc": "Namespace Illuminate\\Queue\\Capsule"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Queue/Connectors.html",
		"name": "Illuminate\\Queue\\Connectors",
		"doc": "Namespace Illuminate\\Queue\\Connectors"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Queue/Console.html",
		"name": "Illuminate\\Queue\\Console",
		"doc": "Namespace Illuminate\\Queue\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Queue/Events.html",
		"name": "Illuminate\\Queue\\Events",
		"doc": "Namespace Illuminate\\Queue\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Queue/Failed.html",
		"name": "Illuminate\\Queue\\Failed",
		"doc": "Namespace Illuminate\\Queue\\Failed"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Queue/Jobs.html",
		"name": "Illuminate\\Queue\\Jobs",
		"doc": "Namespace Illuminate\\Queue\\Jobs"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Queue/Middleware.html",
		"name": "Illuminate\\Queue\\Middleware",
		"doc": "Namespace Illuminate\\Queue\\Middleware"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Redis.html",
		"name": "Illuminate\\Redis",
		"doc": "Namespace Illuminate\\Redis"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Redis/Connections.html",
		"name": "Illuminate\\Redis\\Connections",
		"doc": "Namespace Illuminate\\Redis\\Connections"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Redis/Connectors.html",
		"name": "Illuminate\\Redis\\Connectors",
		"doc": "Namespace Illuminate\\Redis\\Connectors"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Redis/Events.html",
		"name": "Illuminate\\Redis\\Events",
		"doc": "Namespace Illuminate\\Redis\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Redis/Limiters.html",
		"name": "Illuminate\\Redis\\Limiters",
		"doc": "Namespace Illuminate\\Redis\\Limiters"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Routing.html",
		"name": "Illuminate\\Routing",
		"doc": "Namespace Illuminate\\Routing"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Routing/Console.html",
		"name": "Illuminate\\Routing\\Console",
		"doc": "Namespace Illuminate\\Routing\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Routing/Contracts.html",
		"name": "Illuminate\\Routing\\Contracts",
		"doc": "Namespace Illuminate\\Routing\\Contracts"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Routing/Events.html",
		"name": "Illuminate\\Routing\\Events",
		"doc": "Namespace Illuminate\\Routing\\Events"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Routing/Exceptions.html",
		"name": "Illuminate\\Routing\\Exceptions",
		"doc": "Namespace Illuminate\\Routing\\Exceptions"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Routing/Matching.html",
		"name": "Illuminate\\Routing\\Matching",
		"doc": "Namespace Illuminate\\Routing\\Matching"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Routing/Middleware.html",
		"name": "Illuminate\\Routing\\Middleware",
		"doc": "Namespace Illuminate\\Routing\\Middleware"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Session.html",
		"name": "Illuminate\\Session",
		"doc": "Namespace Illuminate\\Session"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Session/Console.html",
		"name": "Illuminate\\Session\\Console",
		"doc": "Namespace Illuminate\\Session\\Console"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Session/Middleware.html",
		"name": "Illuminate\\Session\\Middleware",
		"doc": "Namespace Illuminate\\Session\\Middleware"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Support.html",
		"name": "Illuminate\\Support",
		"doc": "Namespace Illuminate\\Support"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Support/Facades.html",
		"name": "Illuminate\\Support\\Facades",
		"doc": "Namespace Illuminate\\Support\\Facades"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Support/Testing.html",
		"name": "Illuminate\\Support\\Testing",
		"doc": "Namespace Illuminate\\Support\\Testing"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Support/Testing/Fakes.html",
		"name": "Illuminate\\Support\\Testing\\Fakes",
		"doc": "Namespace Illuminate\\Support\\Testing\\Fakes"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Support/Traits.html",
		"name": "Illuminate\\Support\\Traits",
		"doc": "Namespace Illuminate\\Support\\Traits"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Testing.html",
		"name": "Illuminate\\Testing",
		"doc": "Namespace Illuminate\\Testing"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Testing/Constraints.html",
		"name": "Illuminate\\Testing\\Constraints",
		"doc": "Namespace Illuminate\\Testing\\Constraints"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Translation.html",
		"name": "Illuminate\\Translation",
		"doc": "Namespace Illuminate\\Translation"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Validation.html",
		"name": "Illuminate\\Validation",
		"doc": "Namespace Illuminate\\Validation"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Validation/Concerns.html",
		"name": "Illuminate\\Validation\\Concerns",
		"doc": "Namespace Illuminate\\Validation\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/Validation/Rules.html",
		"name": "Illuminate\\Validation\\Rules",
		"doc": "Namespace Illuminate\\Validation\\Rules"
	}, {
		"type": "Namespace",
		"link": "Illuminate/View.html",
		"name": "Illuminate\\View",
		"doc": "Namespace Illuminate\\View"
	}, {
		"type": "Namespace",
		"link": "Illuminate/View/Compilers.html",
		"name": "Illuminate\\View\\Compilers",
		"doc": "Namespace Illuminate\\View\\Compilers"
	}, {
		"type": "Namespace",
		"link": "Illuminate/View/Compilers/Concerns.html",
		"name": "Illuminate\\View\\Compilers\\Concerns",
		"doc": "Namespace Illuminate\\View\\Compilers\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/View/Concerns.html",
		"name": "Illuminate\\View\\Concerns",
		"doc": "Namespace Illuminate\\View\\Concerns"
	}, {
		"type": "Namespace",
		"link": "Illuminate/View/Engines.html",
		"name": "Illuminate\\View\\Engines",
		"doc": "Namespace Illuminate\\View\\Engines"
	}, {
		"type": "Namespace",
		"link": "Illuminate/View/Middleware.html",
		"name": "Illuminate\\View\\Middleware",
		"doc": "Namespace Illuminate\\View\\Middleware"
	}, {
		"type": "Interface",
		"fromName": "Illuminate\\Auth\\Passwords",
		"fromLink": "Illuminate/Auth/Passwords.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_create",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::create",
		"doc": "Create a new token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_exists",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::exists",
		"doc": "Determine if a token record exists and is valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_recentlyCreatedToken",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::recentlyCreatedToken",
		"doc": "Determine if the given user recently created a password reset token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_delete",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::delete",
		"doc": "Delete a token record."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_deleteExpired",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::deleteExpired",
		"doc": "Delete expired tokens."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/BatchRepository.html",
		"name": "Illuminate\\Bus\\BatchRepository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_get",
		"name": "Illuminate\\Bus\\BatchRepository::get",
		"doc": "Retrieve a list of batches."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_find",
		"name": "Illuminate\\Bus\\BatchRepository::find",
		"doc": "Retrieve information about an existing batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_store",
		"name": "Illuminate\\Bus\\BatchRepository::store",
		"doc": "Store a new pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_incrementTotalJobs",
		"name": "Illuminate\\Bus\\BatchRepository::incrementTotalJobs",
		"doc": "Increment the total number of jobs within the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_decrementPendingJobs",
		"name": "Illuminate\\Bus\\BatchRepository::decrementPendingJobs",
		"doc": "Decrement the total number of pending jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_incrementFailedJobs",
		"name": "Illuminate\\Bus\\BatchRepository::incrementFailedJobs",
		"doc": "Increment the total number of failed jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_markAsFinished",
		"name": "Illuminate\\Bus\\BatchRepository::markAsFinished",
		"doc": "Mark the batch that has the given ID as finished."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_cancel",
		"name": "Illuminate\\Bus\\BatchRepository::cancel",
		"doc": "Cancel the batch that has the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_delete",
		"name": "Illuminate\\Bus\\BatchRepository::delete",
		"doc": "Delete the batch that has the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_transaction",
		"name": "Illuminate\\Bus\\BatchRepository::transaction",
		"doc": "Execute the given Closure within a storage specific transaction."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/CacheAware.html",
		"name": "Illuminate\\Console\\Scheduling\\CacheAware",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheAware",
		"fromLink": "Illuminate/Console/Scheduling/CacheAware.html",
		"link": "Illuminate/Console/Scheduling/CacheAware.html#method_useStore",
		"name": "Illuminate\\Console\\Scheduling\\CacheAware::useStore",
		"doc": "Specify the cache store that should be used."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/EventMutex.html",
		"name": "Illuminate\\Console\\Scheduling\\EventMutex",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\EventMutex",
		"fromLink": "Illuminate/Console/Scheduling/EventMutex.html",
		"link": "Illuminate/Console/Scheduling/EventMutex.html#method_create",
		"name": "Illuminate\\Console\\Scheduling\\EventMutex::create",
		"doc": "Attempt to obtain an event mutex for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\EventMutex",
		"fromLink": "Illuminate/Console/Scheduling/EventMutex.html",
		"link": "Illuminate/Console/Scheduling/EventMutex.html#method_exists",
		"name": "Illuminate\\Console\\Scheduling\\EventMutex::exists",
		"doc": "Determine if an event mutex exists for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\EventMutex",
		"fromLink": "Illuminate/Console/Scheduling/EventMutex.html",
		"link": "Illuminate/Console/Scheduling/EventMutex.html#method_forget",
		"name": "Illuminate\\Console\\Scheduling\\EventMutex::forget",
		"doc": "Clear the event mutex for the given event."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/SchedulingMutex.html",
		"name": "Illuminate\\Console\\Scheduling\\SchedulingMutex",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\SchedulingMutex",
		"fromLink": "Illuminate/Console/Scheduling/SchedulingMutex.html",
		"link": "Illuminate/Console/Scheduling/SchedulingMutex.html#method_create",
		"name": "Illuminate\\Console\\Scheduling\\SchedulingMutex::create",
		"doc": "Attempt to obtain a scheduling mutex for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\SchedulingMutex",
		"fromLink": "Illuminate/Console/Scheduling/SchedulingMutex.html",
		"link": "Illuminate/Console/Scheduling/SchedulingMutex.html#method_exists",
		"name": "Illuminate\\Console\\Scheduling\\SchedulingMutex::exists",
		"doc": "Determine if a scheduling mutex exists for the given event."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth\\Access",
		"fromLink": "Illuminate/Contracts/Auth/Access.html",
		"link": "Illuminate/Contracts/Auth/Access/Authorizable.html",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Authorizable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Authorizable",
		"fromLink": "Illuminate/Contracts/Auth/Access/Authorizable.html",
		"link": "Illuminate/Contracts/Auth/Access/Authorizable.html#method_can",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Authorizable::can",
		"doc": "Determine if the entity has a given ability."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth\\Access",
		"fromLink": "Illuminate/Contracts/Auth/Access.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_has",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::has",
		"doc": "Determine if a given ability has been defined."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_define",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::define",
		"doc": "Define a new ability."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_resource",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::resource",
		"doc": "Define abilities for a resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_policy",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::policy",
		"doc": "Define a policy class for a given class type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_before",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::before",
		"doc": "Register a callback to run before all Gate checks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_after",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::after",
		"doc": "Register a callback to run after all Gate checks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_allows",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::allows",
		"doc": "Determine if the given ability should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_denies",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::denies",
		"doc": "Determine if the given ability should be denied for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_check",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::check",
		"doc": "Determine if all of the given abilities should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_any",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::any",
		"doc": "Determine if any one of the given abilities should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_authorize",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::authorize",
		"doc": "Determine if the given ability should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_inspect",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::inspect",
		"doc": "Inspect the user for the given ability."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_raw",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::raw",
		"doc": "Get the raw result from the authorization callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_getPolicyFor",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::getPolicyFor",
		"doc": "Get a policy instance for a given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_forUser",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::forUser",
		"doc": "Get a guard instance for the given user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_abilities",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::abilities",
		"doc": "Get all of the defined abilities."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getAuthIdentifierName",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getAuthIdentifierName",
		"doc": "Get the name of the unique identifier for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getAuthIdentifier",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getAuthIdentifier",
		"doc": "Get the unique identifier for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getAuthPassword",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getAuthPassword",
		"doc": "Get the password for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getRememberToken",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getRememberToken",
		"doc": "Get the token value for the \"remember me\" session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_setRememberToken",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::setRememberToken",
		"doc": "Set the token value for the \"remember me\" session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getRememberTokenName",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getRememberTokenName",
		"doc": "Get the column name for the \"remember me\" token."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/CanResetPassword.html",
		"name": "Illuminate\\Contracts\\Auth\\CanResetPassword",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\CanResetPassword",
		"fromLink": "Illuminate/Contracts/Auth/CanResetPassword.html",
		"link": "Illuminate/Contracts/Auth/CanResetPassword.html#method_getEmailForPasswordReset",
		"name": "Illuminate\\Contracts\\Auth\\CanResetPassword::getEmailForPasswordReset",
		"doc": "Get the e-mail address where password reset links are sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\CanResetPassword",
		"fromLink": "Illuminate/Contracts/Auth/CanResetPassword.html",
		"link": "Illuminate/Contracts/Auth/CanResetPassword.html#method_sendPasswordResetNotification",
		"name": "Illuminate\\Contracts\\Auth\\CanResetPassword::sendPasswordResetNotification",
		"doc": "Send the password reset notification."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/Factory.html",
		"name": "Illuminate\\Contracts\\Auth\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Factory",
		"fromLink": "Illuminate/Contracts/Auth/Factory.html",
		"link": "Illuminate/Contracts/Auth/Factory.html#method_guard",
		"name": "Illuminate\\Contracts\\Auth\\Factory::guard",
		"doc": "Get a guard instance by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Factory",
		"fromLink": "Illuminate/Contracts/Auth/Factory.html",
		"link": "Illuminate/Contracts/Auth/Factory.html#method_shouldUse",
		"name": "Illuminate\\Contracts\\Auth\\Factory::shouldUse",
		"doc": "Set the default guard the factory should serve."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/Guard.html",
		"name": "Illuminate\\Contracts\\Auth\\Guard",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_check",
		"name": "Illuminate\\Contracts\\Auth\\Guard::check",
		"doc": "Determine if the current user is authenticated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_guest",
		"name": "Illuminate\\Contracts\\Auth\\Guard::guest",
		"doc": "Determine if the current user is a guest."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_user",
		"name": "Illuminate\\Contracts\\Auth\\Guard::user",
		"doc": "Get the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_id",
		"name": "Illuminate\\Contracts\\Auth\\Guard::id",
		"doc": "Get the ID for the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_validate",
		"name": "Illuminate\\Contracts\\Auth\\Guard::validate",
		"doc": "Validate a user's credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_setUser",
		"name": "Illuminate\\Contracts\\Auth\\Guard::setUser",
		"doc": "Set the current user."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth\\Middleware",
		"fromLink": "Illuminate/Contracts/Auth/Middleware.html",
		"link": "Illuminate/Contracts/Auth/Middleware/AuthenticatesRequests.html",
		"name": "Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests",
		"doc": null
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html#method_hasVerifiedEmail",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail::hasVerifiedEmail",
		"doc": "Determine if the user has verified their email address."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html#method_markEmailAsVerified",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail::markEmailAsVerified",
		"doc": "Mark the given user's email as verified."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html#method_sendEmailVerificationNotification",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail::sendEmailVerificationNotification",
		"doc": "Send the email verification notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html#method_getEmailForVerification",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail::getEmailForVerification",
		"doc": "Get the email address that should be used for verification."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/PasswordBroker.html",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBroker",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\PasswordBroker",
		"fromLink": "Illuminate/Contracts/Auth/PasswordBroker.html",
		"link": "Illuminate/Contracts/Auth/PasswordBroker.html#method_sendResetLink",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBroker::sendResetLink",
		"doc": "Send a password reset link to a user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\PasswordBroker",
		"fromLink": "Illuminate/Contracts/Auth/PasswordBroker.html",
		"link": "Illuminate/Contracts/Auth/PasswordBroker.html#method_reset",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBroker::reset",
		"doc": "Reset the password for the given token."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/PasswordBrokerFactory.html",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBrokerFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\PasswordBrokerFactory",
		"fromLink": "Illuminate/Contracts/Auth/PasswordBrokerFactory.html",
		"link": "Illuminate/Contracts/Auth/PasswordBrokerFactory.html#method_broker",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBrokerFactory::broker",
		"doc": "Get a password broker instance by name."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_attempt",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::attempt",
		"doc": "Attempt to authenticate a user using the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_once",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::once",
		"doc": "Log a user into the application without sessions or cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_login",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::login",
		"doc": "Log a user into the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_loginUsingId",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::loginUsingId",
		"doc": "Log the given user ID into the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_onceUsingId",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::onceUsingId",
		"doc": "Log the given user ID into the application without sessions or cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_viaRemember",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::viaRemember",
		"doc": "Determine if the user was authenticated via \"remember me\" cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_logout",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::logout",
		"doc": "Log the user out of the application."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/SupportsBasicAuth.html",
		"name": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth",
		"fromLink": "Illuminate/Contracts/Auth/SupportsBasicAuth.html",
		"link": "Illuminate/Contracts/Auth/SupportsBasicAuth.html#method_basic",
		"name": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth::basic",
		"doc": "Attempt to authenticate using HTTP Basic Auth."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth",
		"fromLink": "Illuminate/Contracts/Auth/SupportsBasicAuth.html",
		"link": "Illuminate/Contracts/Auth/SupportsBasicAuth.html#method_onceBasic",
		"name": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth::onceBasic",
		"doc": "Perform a stateless HTTP Basic login attempt."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_retrieveById",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::retrieveById",
		"doc": "Retrieve a user by their unique identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_retrieveByToken",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::retrieveByToken",
		"doc": "Retrieve a user by their unique identifier and \"remember me\" token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_updateRememberToken",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::updateRememberToken",
		"doc": "Update the \"remember me\" token for the given user in storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_retrieveByCredentials",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::retrieveByCredentials",
		"doc": "Retrieve a user by the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_validateCredentials",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::validateCredentials",
		"doc": "Validate a user against the given credentials."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Broadcasting",
		"fromLink": "Illuminate/Contracts/Broadcasting.html",
		"link": "Illuminate/Contracts/Broadcasting/Broadcaster.html",
		"name": "Illuminate\\Contracts\\Broadcasting\\Broadcaster",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\Broadcaster",
		"fromLink": "Illuminate/Contracts/Broadcasting/Broadcaster.html",
		"link": "Illuminate/Contracts/Broadcasting/Broadcaster.html#method_auth",
		"name": "Illuminate\\Contracts\\Broadcasting\\Broadcaster::auth",
		"doc": "Authenticate the incoming request for a given channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\Broadcaster",
		"fromLink": "Illuminate/Contracts/Broadcasting/Broadcaster.html",
		"link": "Illuminate/Contracts/Broadcasting/Broadcaster.html#method_validAuthenticationResponse",
		"name": "Illuminate\\Contracts\\Broadcasting\\Broadcaster::validAuthenticationResponse",
		"doc": "Return the valid authentication response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\Broadcaster",
		"fromLink": "Illuminate/Contracts/Broadcasting/Broadcaster.html",
		"link": "Illuminate/Contracts/Broadcasting/Broadcaster.html#method_broadcast",
		"name": "Illuminate\\Contracts\\Broadcasting\\Broadcaster::broadcast",
		"doc": "Broadcast the given event."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Broadcasting",
		"fromLink": "Illuminate/Contracts/Broadcasting.html",
		"link": "Illuminate/Contracts/Broadcasting/Factory.html",
		"name": "Illuminate\\Contracts\\Broadcasting\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\Factory",
		"fromLink": "Illuminate/Contracts/Broadcasting/Factory.html",
		"link": "Illuminate/Contracts/Broadcasting/Factory.html#method_connection",
		"name": "Illuminate\\Contracts\\Broadcasting\\Factory::connection",
		"doc": "Get a broadcaster implementation by name."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Broadcasting",
		"fromLink": "Illuminate/Contracts/Broadcasting.html",
		"link": "Illuminate/Contracts/Broadcasting/ShouldBroadcast.html",
		"name": "Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast",
		"fromLink": "Illuminate/Contracts/Broadcasting/ShouldBroadcast.html",
		"link": "Illuminate/Contracts/Broadcasting/ShouldBroadcast.html#method_broadcastOn",
		"name": "Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast::broadcastOn",
		"doc": "Get the channels the event should broadcast on."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Broadcasting",
		"fromLink": "Illuminate/Contracts/Broadcasting.html",
		"link": "Illuminate/Contracts/Broadcasting/ShouldBroadcastNow.html",
		"name": "Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow",
		"doc": null
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Bus",
		"fromLink": "Illuminate/Contracts/Bus.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_dispatch",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::dispatch",
		"doc": "Dispatch a command to its appropriate handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_dispatchSync",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::dispatchSync",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_dispatchNow",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::dispatchNow",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_hasCommandHandler",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::hasCommandHandler",
		"doc": "Determine if the given command has a handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_getCommandHandler",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::getCommandHandler",
		"doc": "Retrieve the handler for a command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_pipeThrough",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::pipeThrough",
		"doc": "Set the pipes commands should be piped through before dispatching."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_map",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::map",
		"doc": "Map a command to a handler."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Bus",
		"fromLink": "Illuminate/Contracts/Bus.html",
		"link": "Illuminate/Contracts/Bus/QueueingDispatcher.html",
		"name": "Illuminate\\Contracts\\Bus\\QueueingDispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\QueueingDispatcher",
		"fromLink": "Illuminate/Contracts/Bus/QueueingDispatcher.html",
		"link": "Illuminate/Contracts/Bus/QueueingDispatcher.html#method_findBatch",
		"name": "Illuminate\\Contracts\\Bus\\QueueingDispatcher::findBatch",
		"doc": "Attempt to find the batch with the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\QueueingDispatcher",
		"fromLink": "Illuminate/Contracts/Bus/QueueingDispatcher.html",
		"link": "Illuminate/Contracts/Bus/QueueingDispatcher.html#method_batch",
		"name": "Illuminate\\Contracts\\Bus\\QueueingDispatcher::batch",
		"doc": "Create a new batch of queueable jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\QueueingDispatcher",
		"fromLink": "Illuminate/Contracts/Bus/QueueingDispatcher.html",
		"link": "Illuminate/Contracts/Bus/QueueingDispatcher.html#method_dispatchToQueue",
		"name": "Illuminate\\Contracts\\Bus\\QueueingDispatcher::dispatchToQueue",
		"doc": "Dispatch a command to its appropriate handler behind a queue."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/Factory.html",
		"name": "Illuminate\\Contracts\\Cache\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Factory",
		"fromLink": "Illuminate/Contracts/Cache/Factory.html",
		"link": "Illuminate/Contracts/Cache/Factory.html#method_store",
		"name": "Illuminate\\Contracts\\Cache\\Factory::store",
		"doc": "Get a cache store instance by name."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/Lock.html",
		"name": "Illuminate\\Contracts\\Cache\\Lock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_get",
		"name": "Illuminate\\Contracts\\Cache\\Lock::get",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_block",
		"name": "Illuminate\\Contracts\\Cache\\Lock::block",
		"doc": "Attempt to acquire the lock for the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_release",
		"name": "Illuminate\\Contracts\\Cache\\Lock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_owner",
		"name": "Illuminate\\Contracts\\Cache\\Lock::owner",
		"doc": "Returns the current owner of the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_forceRelease",
		"name": "Illuminate\\Contracts\\Cache\\Lock::forceRelease",
		"doc": "Releases this lock in disregard of ownership."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/LockProvider.html",
		"name": "Illuminate\\Contracts\\Cache\\LockProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\LockProvider",
		"fromLink": "Illuminate/Contracts/Cache/LockProvider.html",
		"link": "Illuminate/Contracts/Cache/LockProvider.html#method_lock",
		"name": "Illuminate\\Contracts\\Cache\\LockProvider::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\LockProvider",
		"fromLink": "Illuminate/Contracts/Cache/LockProvider.html",
		"link": "Illuminate/Contracts/Cache/LockProvider.html#method_restoreLock",
		"name": "Illuminate\\Contracts\\Cache\\LockProvider::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/Repository.html",
		"name": "Illuminate\\Contracts\\Cache\\Repository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_pull",
		"name": "Illuminate\\Contracts\\Cache\\Repository::pull",
		"doc": "Retrieve an item from the cache and delete it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_put",
		"name": "Illuminate\\Contracts\\Cache\\Repository::put",
		"doc": "Store an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_add",
		"name": "Illuminate\\Contracts\\Cache\\Repository::add",
		"doc": "Store an item in the cache if the key does not exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_increment",
		"name": "Illuminate\\Contracts\\Cache\\Repository::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_decrement",
		"name": "Illuminate\\Contracts\\Cache\\Repository::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_forever",
		"name": "Illuminate\\Contracts\\Cache\\Repository::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_remember",
		"name": "Illuminate\\Contracts\\Cache\\Repository::remember",
		"doc": "Get an item from the cache, or execute the given Closure and store the result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_sear",
		"name": "Illuminate\\Contracts\\Cache\\Repository::sear",
		"doc": "Get an item from the cache, or execute the given Closure and store the result forever."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_rememberForever",
		"name": "Illuminate\\Contracts\\Cache\\Repository::rememberForever",
		"doc": "Get an item from the cache, or execute the given Closure and store the result forever."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_forget",
		"name": "Illuminate\\Contracts\\Cache\\Repository::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_getStore",
		"name": "Illuminate\\Contracts\\Cache\\Repository::getStore",
		"doc": "Get the cache store implementation."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/Store.html",
		"name": "Illuminate\\Contracts\\Cache\\Store",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_get",
		"name": "Illuminate\\Contracts\\Cache\\Store::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_many",
		"name": "Illuminate\\Contracts\\Cache\\Store::many",
		"doc": "Retrieve multiple items from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_put",
		"name": "Illuminate\\Contracts\\Cache\\Store::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_putMany",
		"name": "Illuminate\\Contracts\\Cache\\Store::putMany",
		"doc": "Store multiple items in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_increment",
		"name": "Illuminate\\Contracts\\Cache\\Store::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_decrement",
		"name": "Illuminate\\Contracts\\Cache\\Store::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_forever",
		"name": "Illuminate\\Contracts\\Cache\\Store::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_forget",
		"name": "Illuminate\\Contracts\\Cache\\Store::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_flush",
		"name": "Illuminate\\Contracts\\Cache\\Store::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_getPrefix",
		"name": "Illuminate\\Contracts\\Cache\\Store::getPrefix",
		"doc": "Get the cache key prefix."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Config",
		"fromLink": "Illuminate/Contracts/Config.html",
		"link": "Illuminate/Contracts/Config/Repository.html",
		"name": "Illuminate\\Contracts\\Config\\Repository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_has",
		"name": "Illuminate\\Contracts\\Config\\Repository::has",
		"doc": "Determine if the given configuration value exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_get",
		"name": "Illuminate\\Contracts\\Config\\Repository::get",
		"doc": "Get the specified configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_all",
		"name": "Illuminate\\Contracts\\Config\\Repository::all",
		"doc": "Get all of the configuration items for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_set",
		"name": "Illuminate\\Contracts\\Config\\Repository::set",
		"doc": "Set a given configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_prepend",
		"name": "Illuminate\\Contracts\\Config\\Repository::prepend",
		"doc": "Prepend a value onto an array configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_push",
		"name": "Illuminate\\Contracts\\Config\\Repository::push",
		"doc": "Push a value onto an array configuration value."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Console",
		"fromLink": "Illuminate/Contracts/Console.html",
		"link": "Illuminate/Contracts/Console/Application.html",
		"name": "Illuminate\\Contracts\\Console\\Application",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Application",
		"fromLink": "Illuminate/Contracts/Console/Application.html",
		"link": "Illuminate/Contracts/Console/Application.html#method_call",
		"name": "Illuminate\\Contracts\\Console\\Application::call",
		"doc": "Run an Artisan console command by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Application",
		"fromLink": "Illuminate/Contracts/Console/Application.html",
		"link": "Illuminate/Contracts/Console/Application.html#method_output",
		"name": "Illuminate\\Contracts\\Console\\Application::output",
		"doc": "Get the output from the last command."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Console",
		"fromLink": "Illuminate/Contracts/Console.html",
		"link": "Illuminate/Contracts/Console/Kernel.html",
		"name": "Illuminate\\Contracts\\Console\\Kernel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_bootstrap",
		"name": "Illuminate\\Contracts\\Console\\Kernel::bootstrap",
		"doc": "Bootstrap the application for artisan commands."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_handle",
		"name": "Illuminate\\Contracts\\Console\\Kernel::handle",
		"doc": "Handle an incoming console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_call",
		"name": "Illuminate\\Contracts\\Console\\Kernel::call",
		"doc": "Run an Artisan console command by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_queue",
		"name": "Illuminate\\Contracts\\Console\\Kernel::queue",
		"doc": "Queue an Artisan console command by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_all",
		"name": "Illuminate\\Contracts\\Console\\Kernel::all",
		"doc": "Get all of the commands registered with the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_output",
		"name": "Illuminate\\Contracts\\Console\\Kernel::output",
		"doc": "Get the output for the last run command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_terminate",
		"name": "Illuminate\\Contracts\\Console\\Kernel::terminate",
		"doc": "Terminate the application."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Container",
		"fromLink": "Illuminate/Contracts/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html",
		"name": "Illuminate\\Contracts\\Container\\Container",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_bound",
		"name": "Illuminate\\Contracts\\Container\\Container::bound",
		"doc": "Determine if the given abstract type has been bound."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_alias",
		"name": "Illuminate\\Contracts\\Container\\Container::alias",
		"doc": "Alias a type to a different name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_tag",
		"name": "Illuminate\\Contracts\\Container\\Container::tag",
		"doc": "Assign a set of tags to a given binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_tagged",
		"name": "Illuminate\\Contracts\\Container\\Container::tagged",
		"doc": "Resolve all of the bindings for a given tag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_bind",
		"name": "Illuminate\\Contracts\\Container\\Container::bind",
		"doc": "Register a binding with the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_bindIf",
		"name": "Illuminate\\Contracts\\Container\\Container::bindIf",
		"doc": "Register a binding if it hasn't already been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_singleton",
		"name": "Illuminate\\Contracts\\Container\\Container::singleton",
		"doc": "Register a shared binding in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_singletonIf",
		"name": "Illuminate\\Contracts\\Container\\Container::singletonIf",
		"doc": "Register a shared binding if it hasn't already been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_extend",
		"name": "Illuminate\\Contracts\\Container\\Container::extend",
		"doc": "\"Extend\" an abstract type in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_instance",
		"name": "Illuminate\\Contracts\\Container\\Container::instance",
		"doc": "Register an existing instance as shared in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_addContextualBinding",
		"name": "Illuminate\\Contracts\\Container\\Container::addContextualBinding",
		"doc": "Add a contextual binding to the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_when",
		"name": "Illuminate\\Contracts\\Container\\Container::when",
		"doc": "Define a contextual binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_factory",
		"name": "Illuminate\\Contracts\\Container\\Container::factory",
		"doc": "Get a closure to resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_flush",
		"name": "Illuminate\\Contracts\\Container\\Container::flush",
		"doc": "Flush the container of all bindings and resolved instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_make",
		"name": "Illuminate\\Contracts\\Container\\Container::make",
		"doc": "Resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_call",
		"name": "Illuminate\\Contracts\\Container\\Container::call",
		"doc": "Call the given Closure / class@method and inject its dependencies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_resolved",
		"name": "Illuminate\\Contracts\\Container\\Container::resolved",
		"doc": "Determine if the given abstract type has been resolved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_resolving",
		"name": "Illuminate\\Contracts\\Container\\Container::resolving",
		"doc": "Register a new resolving callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_afterResolving",
		"name": "Illuminate\\Contracts\\Container\\Container::afterResolving",
		"doc": "Register a new after resolving callback."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Container",
		"fromLink": "Illuminate/Contracts/Container.html",
		"link": "Illuminate/Contracts/Container/ContextualBindingBuilder.html",
		"name": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Contracts/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Contracts/Container/ContextualBindingBuilder.html#method_needs",
		"name": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder::needs",
		"doc": "Define the abstract target that depends on the context."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Contracts/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Contracts/Container/ContextualBindingBuilder.html#method_give",
		"name": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder::give",
		"doc": "Define the implementation for the contextual binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Contracts/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Contracts/Container/ContextualBindingBuilder.html#method_giveTagged",
		"name": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder::giveTagged",
		"doc": "Define tagged services to be used as the implementation for the contextual binding."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Cookie",
		"fromLink": "Illuminate/Contracts/Cookie.html",
		"link": "Illuminate/Contracts/Cookie/Factory.html",
		"name": "Illuminate\\Contracts\\Cookie\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\Factory",
		"fromLink": "Illuminate/Contracts/Cookie/Factory.html",
		"link": "Illuminate/Contracts/Cookie/Factory.html#method_make",
		"name": "Illuminate\\Contracts\\Cookie\\Factory::make",
		"doc": "Create a new cookie instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\Factory",
		"fromLink": "Illuminate/Contracts/Cookie/Factory.html",
		"link": "Illuminate/Contracts/Cookie/Factory.html#method_forever",
		"name": "Illuminate\\Contracts\\Cookie\\Factory::forever",
		"doc": "Create a cookie that lasts \"forever\" (five years)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\Factory",
		"fromLink": "Illuminate/Contracts/Cookie/Factory.html",
		"link": "Illuminate/Contracts/Cookie/Factory.html#method_forget",
		"name": "Illuminate\\Contracts\\Cookie\\Factory::forget",
		"doc": "Expire the given cookie."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Cookie",
		"fromLink": "Illuminate/Contracts/Cookie.html",
		"link": "Illuminate/Contracts/Cookie/QueueingFactory.html",
		"name": "Illuminate\\Contracts\\Cookie\\QueueingFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\QueueingFactory",
		"fromLink": "Illuminate/Contracts/Cookie/QueueingFactory.html",
		"link": "Illuminate/Contracts/Cookie/QueueingFactory.html#method_queue",
		"name": "Illuminate\\Contracts\\Cookie\\QueueingFactory::queue",
		"doc": "Queue a cookie to send with the next response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\QueueingFactory",
		"fromLink": "Illuminate/Contracts/Cookie/QueueingFactory.html",
		"link": "Illuminate/Contracts/Cookie/QueueingFactory.html#method_unqueue",
		"name": "Illuminate\\Contracts\\Cookie\\QueueingFactory::unqueue",
		"doc": "Remove a cookie from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\QueueingFactory",
		"fromLink": "Illuminate/Contracts/Cookie/QueueingFactory.html",
		"link": "Illuminate/Contracts/Cookie/QueueingFactory.html#method_getQueuedCookies",
		"name": "Illuminate\\Contracts\\Cookie\\QueueingFactory::getQueuedCookies",
		"doc": "Get the cookies which have been queued for the next request."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/Castable.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\Castable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\Castable",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/Castable.html",
		"link": "Illuminate/Contracts/Database/Eloquent/Castable.html#method_castUsing",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\Castable::castUsing",
		"doc": "Get the name of the caster class to use when casting from / to this cast target."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html#method_get",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes::get",
		"doc": "Transform the attribute from the underlying model values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html#method_set",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes::set",
		"doc": "Transform the attribute to its underlying model values."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsInboundAttributes.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/CastsInboundAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsInboundAttributes.html#method_set",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes::set",
		"doc": "Transform the attribute to its underlying model values."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html#method_increment",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes::increment",
		"doc": "Increment the attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html#method_decrement",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes::decrement",
		"doc": "Decrement the attribute."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/SerializesCastableAttributes.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/SerializesCastableAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/SerializesCastableAttributes.html#method_serialize",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes::serialize",
		"doc": "Serialize the attribute when converting the model to an array."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Database\\Events",
		"fromLink": "Illuminate/Contracts/Database/Events.html",
		"link": "Illuminate/Contracts/Database/Events/MigrationEvent.html",
		"name": "Illuminate\\Contracts\\Database\\Events\\MigrationEvent",
		"doc": null
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Debug",
		"fromLink": "Illuminate/Contracts/Debug.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"fromLink": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html#method_report",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler::report",
		"doc": "Report or log an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"fromLink": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html#method_shouldReport",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler::shouldReport",
		"doc": "Determine if the exception should be reported."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"fromLink": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html#method_render",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler::render",
		"doc": "Render an exception into an HTTP response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"fromLink": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html#method_renderForConsole",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler::renderForConsole",
		"doc": "Render an exception to the console."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Encryption",
		"fromLink": "Illuminate/Contracts/Encryption.html",
		"link": "Illuminate/Contracts/Encryption/Encrypter.html",
		"name": "Illuminate\\Contracts\\Encryption\\Encrypter",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Contracts/Encryption/Encrypter.html",
		"link": "Illuminate/Contracts/Encryption/Encrypter.html#method_encrypt",
		"name": "Illuminate\\Contracts\\Encryption\\Encrypter::encrypt",
		"doc": "Encrypt the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Contracts/Encryption/Encrypter.html",
		"link": "Illuminate/Contracts/Encryption/Encrypter.html#method_decrypt",
		"name": "Illuminate\\Contracts\\Encryption\\Encrypter::decrypt",
		"doc": "Decrypt the given value."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Events",
		"fromLink": "Illuminate/Contracts/Events.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_listen",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::listen",
		"doc": "Register an event listener with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_hasListeners",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::hasListeners",
		"doc": "Determine if a given event has listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_subscribe",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::subscribe",
		"doc": "Register an event subscriber with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_until",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::until",
		"doc": "Dispatch an event until the first non-null response is returned."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_dispatch",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::dispatch",
		"doc": "Dispatch an event and call the listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_push",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::push",
		"doc": "Register an event and payload to be fired later."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_flush",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::flush",
		"doc": "Flush a set of pushed events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_forget",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::forget",
		"doc": "Remove a set of listeners from the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_forgetPushed",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::forgetPushed",
		"doc": "Forget all of the queued listeners."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Cloud.html",
		"name": "Illuminate\\Contracts\\Filesystem\\Cloud",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Cloud",
		"fromLink": "Illuminate/Contracts/Filesystem/Cloud.html",
		"link": "Illuminate/Contracts/Filesystem/Cloud.html#method_url",
		"name": "Illuminate\\Contracts\\Filesystem\\Cloud::url",
		"doc": "Get the URL for the file at the given path."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Factory.html",
		"name": "Illuminate\\Contracts\\Filesystem\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Factory",
		"fromLink": "Illuminate/Contracts/Filesystem/Factory.html",
		"link": "Illuminate/Contracts/Filesystem/Factory.html#method_disk",
		"name": "Illuminate\\Contracts\\Filesystem\\Factory::disk",
		"doc": "Get a filesystem implementation."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_exists",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::exists",
		"doc": "Determine if a file exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_get",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::get",
		"doc": "Get the contents of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_readStream",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::readStream",
		"doc": "Get a resource to read the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_put",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::put",
		"doc": "Write the contents of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_writeStream",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::writeStream",
		"doc": "Write a new file using a stream."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_getVisibility",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::getVisibility",
		"doc": "Get the visibility for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_setVisibility",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::setVisibility",
		"doc": "Set the visibility for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_prepend",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::prepend",
		"doc": "Prepend to a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_append",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::append",
		"doc": "Append to a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_delete",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::delete",
		"doc": "Delete the file at a given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_copy",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::copy",
		"doc": "Copy a file to a new location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_move",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::move",
		"doc": "Move a file to a new location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_size",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::size",
		"doc": "Get the file size of a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_lastModified",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::lastModified",
		"doc": "Get the file's last modification time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_files",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::files",
		"doc": "Get an array of all files in a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_allFiles",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::allFiles",
		"doc": "Get all of the files from the given directory (recursive)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_directories",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::directories",
		"doc": "Get all of the directories within a given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_allDirectories",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::allDirectories",
		"doc": "Get all (recursive) of the directories within a given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_makeDirectory",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::makeDirectory",
		"doc": "Create a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_deleteDirectory",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::deleteDirectory",
		"doc": "Recursively delete a directory."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Foundation",
		"fromLink": "Illuminate/Contracts/Foundation.html",
		"link": "Illuminate/Contracts/Foundation/Application.html",
		"name": "Illuminate\\Contracts\\Foundation\\Application",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_version",
		"name": "Illuminate\\Contracts\\Foundation\\Application::version",
		"doc": "Get the version number of the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_basePath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::basePath",
		"doc": "Get the base path of the Laravel installation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_bootstrapPath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::bootstrapPath",
		"doc": "Get the path to the bootstrap directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_configPath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::configPath",
		"doc": "Get the path to the application configuration files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_databasePath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::databasePath",
		"doc": "Get the path to the database directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_resourcePath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::resourcePath",
		"doc": "Get the path to the resources directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_storagePath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::storagePath",
		"doc": "Get the path to the storage directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_environment",
		"name": "Illuminate\\Contracts\\Foundation\\Application::environment",
		"doc": "Get or check the current application environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_runningInConsole",
		"name": "Illuminate\\Contracts\\Foundation\\Application::runningInConsole",
		"doc": "Determine if the application is running in the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_runningUnitTests",
		"name": "Illuminate\\Contracts\\Foundation\\Application::runningUnitTests",
		"doc": "Determine if the application is running unit tests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_isDownForMaintenance",
		"name": "Illuminate\\Contracts\\Foundation\\Application::isDownForMaintenance",
		"doc": "Determine if the application is currently down for maintenance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_registerConfiguredProviders",
		"name": "Illuminate\\Contracts\\Foundation\\Application::registerConfiguredProviders",
		"doc": "Register all of the configured providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_register",
		"name": "Illuminate\\Contracts\\Foundation\\Application::register",
		"doc": "Register a service provider with the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_registerDeferredProvider",
		"name": "Illuminate\\Contracts\\Foundation\\Application::registerDeferredProvider",
		"doc": "Register a deferred provider and service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_resolveProvider",
		"name": "Illuminate\\Contracts\\Foundation\\Application::resolveProvider",
		"doc": "Resolve a service provider instance from the class name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_boot",
		"name": "Illuminate\\Contracts\\Foundation\\Application::boot",
		"doc": "Boot the application's service providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_booting",
		"name": "Illuminate\\Contracts\\Foundation\\Application::booting",
		"doc": "Register a new boot listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_booted",
		"name": "Illuminate\\Contracts\\Foundation\\Application::booted",
		"doc": "Register a new \"booted\" listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_bootstrapWith",
		"name": "Illuminate\\Contracts\\Foundation\\Application::bootstrapWith",
		"doc": "Run the given array of bootstrap classes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_getLocale",
		"name": "Illuminate\\Contracts\\Foundation\\Application::getLocale",
		"doc": "Get the current application locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_getNamespace",
		"name": "Illuminate\\Contracts\\Foundation\\Application::getNamespace",
		"doc": "Get the application namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_getProviders",
		"name": "Illuminate\\Contracts\\Foundation\\Application::getProviders",
		"doc": "Get the registered service provider instances if any exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_hasBeenBootstrapped",
		"name": "Illuminate\\Contracts\\Foundation\\Application::hasBeenBootstrapped",
		"doc": "Determine if the application has been bootstrapped before."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_loadDeferredProviders",
		"name": "Illuminate\\Contracts\\Foundation\\Application::loadDeferredProviders",
		"doc": "Load and boot all of the remaining deferred providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_setLocale",
		"name": "Illuminate\\Contracts\\Foundation\\Application::setLocale",
		"doc": "Set the current application locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_shouldSkipMiddleware",
		"name": "Illuminate\\Contracts\\Foundation\\Application::shouldSkipMiddleware",
		"doc": "Determine if middleware has been disabled for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_terminate",
		"name": "Illuminate\\Contracts\\Foundation\\Application::terminate",
		"doc": "Terminate the application."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Foundation",
		"fromLink": "Illuminate/Contracts/Foundation.html",
		"link": "Illuminate/Contracts/Foundation/CachesConfiguration.html",
		"name": "Illuminate\\Contracts\\Foundation\\CachesConfiguration",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesConfiguration",
		"fromLink": "Illuminate/Contracts/Foundation/CachesConfiguration.html",
		"link": "Illuminate/Contracts/Foundation/CachesConfiguration.html#method_configurationIsCached",
		"name": "Illuminate\\Contracts\\Foundation\\CachesConfiguration::configurationIsCached",
		"doc": "Determine if the application configuration is cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesConfiguration",
		"fromLink": "Illuminate/Contracts/Foundation/CachesConfiguration.html",
		"link": "Illuminate/Contracts/Foundation/CachesConfiguration.html#method_getCachedConfigPath",
		"name": "Illuminate\\Contracts\\Foundation\\CachesConfiguration::getCachedConfigPath",
		"doc": "Get the path to the configuration cache file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesConfiguration",
		"fromLink": "Illuminate/Contracts/Foundation/CachesConfiguration.html",
		"link": "Illuminate/Contracts/Foundation/CachesConfiguration.html#method_getCachedServicesPath",
		"name": "Illuminate\\Contracts\\Foundation\\CachesConfiguration::getCachedServicesPath",
		"doc": "Get the path to the cached services.php file."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Foundation",
		"fromLink": "Illuminate/Contracts/Foundation.html",
		"link": "Illuminate/Contracts/Foundation/CachesRoutes.html",
		"name": "Illuminate\\Contracts\\Foundation\\CachesRoutes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesRoutes",
		"fromLink": "Illuminate/Contracts/Foundation/CachesRoutes.html",
		"link": "Illuminate/Contracts/Foundation/CachesRoutes.html#method_routesAreCached",
		"name": "Illuminate\\Contracts\\Foundation\\CachesRoutes::routesAreCached",
		"doc": "Determine if the application routes are cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesRoutes",
		"fromLink": "Illuminate/Contracts/Foundation/CachesRoutes.html",
		"link": "Illuminate/Contracts/Foundation/CachesRoutes.html#method_getCachedRoutesPath",
		"name": "Illuminate\\Contracts\\Foundation\\CachesRoutes::getCachedRoutesPath",
		"doc": "Get the path to the routes cache file."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Hashing",
		"fromLink": "Illuminate/Contracts/Hashing.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Hashing\\Hasher",
		"fromLink": "Illuminate/Contracts/Hashing/Hasher.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html#method_info",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher::info",
		"doc": "Get information about the given hashed value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Hashing\\Hasher",
		"fromLink": "Illuminate/Contracts/Hashing/Hasher.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html#method_make",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher::make",
		"doc": "Hash the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Hashing\\Hasher",
		"fromLink": "Illuminate/Contracts/Hashing/Hasher.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html#method_check",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher::check",
		"doc": "Check the given plain value against a hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Hashing\\Hasher",
		"fromLink": "Illuminate/Contracts/Hashing/Hasher.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html#method_needsRehash",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher::needsRehash",
		"doc": "Check if the given hash has been hashed using the given options."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Http",
		"fromLink": "Illuminate/Contracts/Http.html",
		"link": "Illuminate/Contracts/Http/Kernel.html",
		"name": "Illuminate\\Contracts\\Http\\Kernel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Http\\Kernel",
		"fromLink": "Illuminate/Contracts/Http/Kernel.html",
		"link": "Illuminate/Contracts/Http/Kernel.html#method_bootstrap",
		"name": "Illuminate\\Contracts\\Http\\Kernel::bootstrap",
		"doc": "Bootstrap the application for HTTP requests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Http\\Kernel",
		"fromLink": "Illuminate/Contracts/Http/Kernel.html",
		"link": "Illuminate/Contracts/Http/Kernel.html#method_handle",
		"name": "Illuminate\\Contracts\\Http\\Kernel::handle",
		"doc": "Handle an incoming HTTP request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Http\\Kernel",
		"fromLink": "Illuminate/Contracts/Http/Kernel.html",
		"link": "Illuminate/Contracts/Http/Kernel.html#method_terminate",
		"name": "Illuminate\\Contracts\\Http\\Kernel::terminate",
		"doc": "Perform any final actions for the request lifecycle."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Http\\Kernel",
		"fromLink": "Illuminate/Contracts/Http/Kernel.html",
		"link": "Illuminate/Contracts/Http/Kernel.html#method_getApplication",
		"name": "Illuminate\\Contracts\\Http\\Kernel::getApplication",
		"doc": "Get the Laravel application instance."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Mail",
		"fromLink": "Illuminate/Contracts/Mail.html",
		"link": "Illuminate/Contracts/Mail/Factory.html",
		"name": "Illuminate\\Contracts\\Mail\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Factory",
		"fromLink": "Illuminate/Contracts/Mail/Factory.html",
		"link": "Illuminate/Contracts/Mail/Factory.html#method_mailer",
		"name": "Illuminate\\Contracts\\Mail\\Factory::mailer",
		"doc": "Get a mailer instance by name."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Mail",
		"fromLink": "Illuminate/Contracts/Mail.html",
		"link": "Illuminate/Contracts/Mail/MailQueue.html",
		"name": "Illuminate\\Contracts\\Mail\\MailQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\MailQueue",
		"fromLink": "Illuminate/Contracts/Mail/MailQueue.html",
		"link": "Illuminate/Contracts/Mail/MailQueue.html#method_queue",
		"name": "Illuminate\\Contracts\\Mail\\MailQueue::queue",
		"doc": "Queue a new e-mail message for sending."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\MailQueue",
		"fromLink": "Illuminate/Contracts/Mail/MailQueue.html",
		"link": "Illuminate/Contracts/Mail/MailQueue.html#method_later",
		"name": "Illuminate\\Contracts\\Mail\\MailQueue::later",
		"doc": "Queue a new e-mail message for sending after (n) seconds."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Mail",
		"fromLink": "Illuminate/Contracts/Mail.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html",
		"name": "Illuminate\\Contracts\\Mail\\Mailable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_send",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::send",
		"doc": "Send the message using the given mailer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_queue",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::queue",
		"doc": "Queue the given message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_later",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::later",
		"doc": "Deliver the queued message after the given delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_cc",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::cc",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_bcc",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::bcc",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_to",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::to",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_locale",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::locale",
		"doc": "Set the locale of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_mailer",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::mailer",
		"doc": "Set the name of the mailer that should be used to send the message."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Mail",
		"fromLink": "Illuminate/Contracts/Mail.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html",
		"name": "Illuminate\\Contracts\\Mail\\Mailer",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_to",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::to",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_bcc",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::bcc",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_raw",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::raw",
		"doc": "Send a new message with only a raw text part."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_send",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::send",
		"doc": "Send a new message using a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_failures",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::failures",
		"doc": "Get the array of failed recipients."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Notifications",
		"fromLink": "Illuminate/Contracts/Notifications.html",
		"link": "Illuminate/Contracts/Notifications/Dispatcher.html",
		"name": "Illuminate\\Contracts\\Notifications\\Dispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Notifications/Dispatcher.html",
		"link": "Illuminate/Contracts/Notifications/Dispatcher.html#method_send",
		"name": "Illuminate\\Contracts\\Notifications\\Dispatcher::send",
		"doc": "Send the given notification to the given notifiable entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Notifications/Dispatcher.html",
		"link": "Illuminate/Contracts/Notifications/Dispatcher.html#method_sendNow",
		"name": "Illuminate\\Contracts\\Notifications\\Dispatcher::sendNow",
		"doc": "Send the given notification immediately."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Notifications",
		"fromLink": "Illuminate/Contracts/Notifications.html",
		"link": "Illuminate/Contracts/Notifications/Factory.html",
		"name": "Illuminate\\Contracts\\Notifications\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Factory",
		"fromLink": "Illuminate/Contracts/Notifications/Factory.html",
		"link": "Illuminate/Contracts/Notifications/Factory.html#method_channel",
		"name": "Illuminate\\Contracts\\Notifications\\Factory::channel",
		"doc": "Get a channel instance by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Factory",
		"fromLink": "Illuminate/Contracts/Notifications/Factory.html",
		"link": "Illuminate/Contracts/Notifications/Factory.html#method_send",
		"name": "Illuminate\\Contracts\\Notifications\\Factory::send",
		"doc": "Send the given notification to the given notifiable entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Factory",
		"fromLink": "Illuminate/Contracts/Notifications/Factory.html",
		"link": "Illuminate/Contracts/Notifications/Factory.html#method_sendNow",
		"name": "Illuminate\\Contracts\\Notifications\\Factory::sendNow",
		"doc": "Send the given notification immediately."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Pagination",
		"fromLink": "Illuminate/Contracts/Pagination.html",
		"link": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html",
		"name": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html#method_getUrlRange",
		"name": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator::getUrlRange",
		"doc": "Create a range of pagination URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html#method_total",
		"name": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator::total",
		"doc": "Determine the total number of items in the data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html#method_lastPage",
		"name": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator::lastPage",
		"doc": "Get the page number of the last available page."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Pagination",
		"fromLink": "Illuminate/Contracts/Pagination.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_url",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::url",
		"doc": "Get the URL for a given page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_appends",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::appends",
		"doc": "Add a set of query string values to the paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_fragment",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::fragment",
		"doc": "Get / set the URL fragment to be appended to URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_nextPageUrl",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::nextPageUrl",
		"doc": "The URL for the next page, or null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_previousPageUrl",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::previousPageUrl",
		"doc": "Get the URL for the previous page, or null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_items",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::items",
		"doc": "Get all of the items being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_firstItem",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::firstItem",
		"doc": "Get the \"index\" of the first item being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_lastItem",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::lastItem",
		"doc": "Get the \"index\" of the last item being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_perPage",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::perPage",
		"doc": "Determine how many items are being shown per page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_currentPage",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::currentPage",
		"doc": "Determine the current page being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_hasPages",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::hasPages",
		"doc": "Determine if there are enough items to split into multiple pages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_hasMorePages",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::hasMorePages",
		"doc": "Determine if there are more items in the data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_path",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::path",
		"doc": "Get the base path for paginator generated URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_isEmpty",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::isEmpty",
		"doc": "Determine if the list of items is empty or not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_isNotEmpty",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::isNotEmpty",
		"doc": "Determine if the list of items is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_render",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::render",
		"doc": "Render the paginator using a given view."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Hub.html",
		"name": "Illuminate\\Contracts\\Pipeline\\Hub",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Hub",
		"fromLink": "Illuminate/Contracts/Pipeline/Hub.html",
		"link": "Illuminate/Contracts/Pipeline/Hub.html#method_pipe",
		"name": "Illuminate\\Contracts\\Pipeline\\Hub::pipe",
		"doc": "Send an object through one of the available pipelines."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html#method_send",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline::send",
		"doc": "Set the traveler object being sent on the pipeline."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html#method_through",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline::through",
		"doc": "Set the stops of the pipeline."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html#method_via",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline::via",
		"doc": "Set the method to call on the stops."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html#method_then",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline::then",
		"doc": "Run the pipeline with a final destination callback."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/ClearableQueue.html",
		"name": "Illuminate\\Contracts\\Queue\\ClearableQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\ClearableQueue",
		"fromLink": "Illuminate/Contracts/Queue/ClearableQueue.html",
		"link": "Illuminate/Contracts/Queue/ClearableQueue.html#method_clear",
		"name": "Illuminate\\Contracts\\Queue\\ClearableQueue::clear",
		"doc": "Delete all of the jobs from the queue."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/EntityResolver.html",
		"name": "Illuminate\\Contracts\\Queue\\EntityResolver",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\EntityResolver",
		"fromLink": "Illuminate/Contracts/Queue/EntityResolver.html",
		"link": "Illuminate/Contracts/Queue/EntityResolver.html#method_resolve",
		"name": "Illuminate\\Contracts\\Queue\\EntityResolver::resolve",
		"doc": "Resolve the entity for the given ID."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/Factory.html",
		"name": "Illuminate\\Contracts\\Queue\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Factory",
		"fromLink": "Illuminate/Contracts/Queue/Factory.html",
		"link": "Illuminate/Contracts/Queue/Factory.html#method_connection",
		"name": "Illuminate\\Contracts\\Queue\\Factory::connection",
		"doc": "Resolve a queue connection instance."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/Job.html",
		"name": "Illuminate\\Contracts\\Queue\\Job",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_uuid",
		"name": "Illuminate\\Contracts\\Queue\\Job::uuid",
		"doc": "Get the UUID of the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getJobId",
		"name": "Illuminate\\Contracts\\Queue\\Job::getJobId",
		"doc": "Get the job identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_payload",
		"name": "Illuminate\\Contracts\\Queue\\Job::payload",
		"doc": "Get the decoded body of the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_fire",
		"name": "Illuminate\\Contracts\\Queue\\Job::fire",
		"doc": "Fire the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_release",
		"name": "Illuminate\\Contracts\\Queue\\Job::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_isReleased",
		"name": "Illuminate\\Contracts\\Queue\\Job::isReleased",
		"doc": "Determine if the job was released back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_delete",
		"name": "Illuminate\\Contracts\\Queue\\Job::delete",
		"doc": "Delete the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_isDeleted",
		"name": "Illuminate\\Contracts\\Queue\\Job::isDeleted",
		"doc": "Determine if the job has been deleted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_isDeletedOrReleased",
		"name": "Illuminate\\Contracts\\Queue\\Job::isDeletedOrReleased",
		"doc": "Determine if the job has been deleted or released."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_attempts",
		"name": "Illuminate\\Contracts\\Queue\\Job::attempts",
		"doc": "Get the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_hasFailed",
		"name": "Illuminate\\Contracts\\Queue\\Job::hasFailed",
		"doc": "Determine if the job has been marked as a failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_markAsFailed",
		"name": "Illuminate\\Contracts\\Queue\\Job::markAsFailed",
		"doc": "Mark the job as \"failed\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_fail",
		"name": "Illuminate\\Contracts\\Queue\\Job::fail",
		"doc": "Delete the job, call the \"failed\" method, and raise the failed job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_maxTries",
		"name": "Illuminate\\Contracts\\Queue\\Job::maxTries",
		"doc": "Get the number of times to attempt a job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_maxExceptions",
		"name": "Illuminate\\Contracts\\Queue\\Job::maxExceptions",
		"doc": "Get the maximum number of exceptions allowed, regardless of attempts."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_timeout",
		"name": "Illuminate\\Contracts\\Queue\\Job::timeout",
		"doc": "Get the number of seconds the job can run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_retryUntil",
		"name": "Illuminate\\Contracts\\Queue\\Job::retryUntil",
		"doc": "Get the timestamp indicating when the job should timeout."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getName",
		"name": "Illuminate\\Contracts\\Queue\\Job::getName",
		"doc": "Get the name of the queued job class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_resolveName",
		"name": "Illuminate\\Contracts\\Queue\\Job::resolveName",
		"doc": "Get the resolved name of the queued job class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getConnectionName",
		"name": "Illuminate\\Contracts\\Queue\\Job::getConnectionName",
		"doc": "Get the name of the connection the job belongs to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getQueue",
		"name": "Illuminate\\Contracts\\Queue\\Job::getQueue",
		"doc": "Get the name of the queue the job belongs to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getRawBody",
		"name": "Illuminate\\Contracts\\Queue\\Job::getRawBody",
		"doc": "Get the raw body string for the job."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/Monitor.html",
		"name": "Illuminate\\Contracts\\Queue\\Monitor",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Monitor",
		"fromLink": "Illuminate/Contracts/Queue/Monitor.html",
		"link": "Illuminate/Contracts/Queue/Monitor.html#method_looping",
		"name": "Illuminate\\Contracts\\Queue\\Monitor::looping",
		"doc": "Register a callback to be executed on every iteration through the queue loop."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Monitor",
		"fromLink": "Illuminate/Contracts/Queue/Monitor.html",
		"link": "Illuminate/Contracts/Queue/Monitor.html#method_failing",
		"name": "Illuminate\\Contracts\\Queue\\Monitor::failing",
		"doc": "Register a callback to be executed when a job fails after the maximum amount of retries."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Monitor",
		"fromLink": "Illuminate/Contracts/Queue/Monitor.html",
		"link": "Illuminate/Contracts/Queue/Monitor.html#method_stopping",
		"name": "Illuminate\\Contracts\\Queue\\Monitor::stopping",
		"doc": "Register a callback to be executed when a daemon queue is stopping."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html",
		"name": "Illuminate\\Contracts\\Queue\\Queue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_size",
		"name": "Illuminate\\Contracts\\Queue\\Queue::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_push",
		"name": "Illuminate\\Contracts\\Queue\\Queue::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_pushOn",
		"name": "Illuminate\\Contracts\\Queue\\Queue::pushOn",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_pushRaw",
		"name": "Illuminate\\Contracts\\Queue\\Queue::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_later",
		"name": "Illuminate\\Contracts\\Queue\\Queue::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_laterOn",
		"name": "Illuminate\\Contracts\\Queue\\Queue::laterOn",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_bulk",
		"name": "Illuminate\\Contracts\\Queue\\Queue::bulk",
		"doc": "Push an array of jobs onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_pop",
		"name": "Illuminate\\Contracts\\Queue\\Queue::pop",
		"doc": "Pop the next job off of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_getConnectionName",
		"name": "Illuminate\\Contracts\\Queue\\Queue::getConnectionName",
		"doc": "Get the connection name for the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_setConnectionName",
		"name": "Illuminate\\Contracts\\Queue\\Queue::setConnectionName",
		"doc": "Set the connection name for the queue."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"fromLink": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html#method_getQueueableClass",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection::getQueueableClass",
		"doc": "Get the type of the entities being queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"fromLink": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html#method_getQueueableIds",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection::getQueueableIds",
		"doc": "Get the identifiers for all of the entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"fromLink": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html#method_getQueueableRelations",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection::getQueueableRelations",
		"doc": "Get the relationships of the entities being queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"fromLink": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html#method_getQueueableConnection",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection::getQueueableConnection",
		"doc": "Get the connection of the entities being queued."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/QueueableEntity.html",
		"name": "Illuminate\\Contracts\\Queue\\QueueableEntity",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableEntity",
		"fromLink": "Illuminate/Contracts/Queue/QueueableEntity.html",
		"link": "Illuminate/Contracts/Queue/QueueableEntity.html#method_getQueueableId",
		"name": "Illuminate\\Contracts\\Queue\\QueueableEntity::getQueueableId",
		"doc": "Get the queueable identity for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableEntity",
		"fromLink": "Illuminate/Contracts/Queue/QueueableEntity.html",
		"link": "Illuminate/Contracts/Queue/QueueableEntity.html#method_getQueueableRelations",
		"name": "Illuminate\\Contracts\\Queue\\QueueableEntity::getQueueableRelations",
		"doc": "Get the relationships for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableEntity",
		"fromLink": "Illuminate/Contracts/Queue/QueueableEntity.html",
		"link": "Illuminate/Contracts/Queue/QueueableEntity.html#method_getQueueableConnection",
		"name": "Illuminate\\Contracts\\Queue\\QueueableEntity::getQueueableConnection",
		"doc": "Get the connection of the entity."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/ShouldBeUnique.html",
		"name": "Illuminate\\Contracts\\Queue\\ShouldBeUnique",
		"doc": null
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/ShouldBeUniqueUntilProcessing.html",
		"name": "Illuminate\\Contracts\\Queue\\ShouldBeUniqueUntilProcessing",
		"doc": null
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/ShouldQueue.html",
		"name": "Illuminate\\Contracts\\Queue\\ShouldQueue",
		"doc": null
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Redis",
		"fromLink": "Illuminate/Contracts/Redis.html",
		"link": "Illuminate/Contracts/Redis/Connection.html",
		"name": "Illuminate\\Contracts\\Redis\\Connection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connection",
		"fromLink": "Illuminate/Contracts/Redis/Connection.html",
		"link": "Illuminate/Contracts/Redis/Connection.html#method_subscribe",
		"name": "Illuminate\\Contracts\\Redis\\Connection::subscribe",
		"doc": "Subscribe to a set of given channels for messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connection",
		"fromLink": "Illuminate/Contracts/Redis/Connection.html",
		"link": "Illuminate/Contracts/Redis/Connection.html#method_psubscribe",
		"name": "Illuminate\\Contracts\\Redis\\Connection::psubscribe",
		"doc": "Subscribe to a set of given channels with wildcards."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connection",
		"fromLink": "Illuminate/Contracts/Redis/Connection.html",
		"link": "Illuminate/Contracts/Redis/Connection.html#method_command",
		"name": "Illuminate\\Contracts\\Redis\\Connection::command",
		"doc": "Run a command against the Redis database."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Redis",
		"fromLink": "Illuminate/Contracts/Redis.html",
		"link": "Illuminate/Contracts/Redis/Connector.html",
		"name": "Illuminate\\Contracts\\Redis\\Connector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connector",
		"fromLink": "Illuminate/Contracts/Redis/Connector.html",
		"link": "Illuminate/Contracts/Redis/Connector.html#method_connect",
		"name": "Illuminate\\Contracts\\Redis\\Connector::connect",
		"doc": "Create a connection to a Redis cluster."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connector",
		"fromLink": "Illuminate/Contracts/Redis/Connector.html",
		"link": "Illuminate/Contracts/Redis/Connector.html#method_connectToCluster",
		"name": "Illuminate\\Contracts\\Redis\\Connector::connectToCluster",
		"doc": "Create a connection to a Redis instance."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Redis",
		"fromLink": "Illuminate/Contracts/Redis.html",
		"link": "Illuminate/Contracts/Redis/Factory.html",
		"name": "Illuminate\\Contracts\\Redis\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Factory",
		"fromLink": "Illuminate/Contracts/Redis/Factory.html",
		"link": "Illuminate/Contracts/Redis/Factory.html#method_connection",
		"name": "Illuminate\\Contracts\\Redis\\Factory::connection",
		"doc": "Get a Redis connection by name."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/BindingRegistrar.html",
		"name": "Illuminate\\Contracts\\Routing\\BindingRegistrar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\BindingRegistrar",
		"fromLink": "Illuminate/Contracts/Routing/BindingRegistrar.html",
		"link": "Illuminate/Contracts/Routing/BindingRegistrar.html#method_bind",
		"name": "Illuminate\\Contracts\\Routing\\BindingRegistrar::bind",
		"doc": "Add a new route parameter binder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\BindingRegistrar",
		"fromLink": "Illuminate/Contracts/Routing/BindingRegistrar.html",
		"link": "Illuminate/Contracts/Routing/BindingRegistrar.html#method_getBindingCallback",
		"name": "Illuminate\\Contracts\\Routing\\BindingRegistrar::getBindingCallback",
		"doc": "Get the binding callback for a given binding."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html",
		"name": "Illuminate\\Contracts\\Routing\\Registrar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_get",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::get",
		"doc": "Register a new GET route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_post",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::post",
		"doc": "Register a new POST route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_put",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::put",
		"doc": "Register a new PUT route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_delete",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::delete",
		"doc": "Register a new DELETE route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_patch",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::patch",
		"doc": "Register a new PATCH route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_options",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::options",
		"doc": "Register a new OPTIONS route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_match",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::match",
		"doc": "Register a new route with the given verbs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_resource",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::resource",
		"doc": "Route a resource to a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_group",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::group",
		"doc": "Create a route group with shared attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_substituteBindings",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::substituteBindings",
		"doc": "Substitute the route bindings onto the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_substituteImplicitBindings",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::substituteImplicitBindings",
		"doc": "Substitute the implicit Eloquent model bindings for the route."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_make",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::make",
		"doc": "Create a new response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_noContent",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::noContent",
		"doc": "Create a new \"no content\" response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_view",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::view",
		"doc": "Create a new response for a given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_json",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::json",
		"doc": "Create a new JSON response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_jsonp",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::jsonp",
		"doc": "Create a new JSONP response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_stream",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::stream",
		"doc": "Create a new streamed response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_streamDownload",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::streamDownload",
		"doc": "Create a new streamed response instance as a file download."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_download",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::download",
		"doc": "Create a new file download response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_file",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::file",
		"doc": "Return the raw contents of a binary file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectTo",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectTo",
		"doc": "Create a new redirect response to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectToRoute",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectToRoute",
		"doc": "Create a new redirect response to a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectToAction",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectToAction",
		"doc": "Create a new redirect response to a controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectGuest",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectGuest",
		"doc": "Create a new redirect response, while putting the current URL in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectToIntended",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectToIntended",
		"doc": "Create a new redirect response to the previously intended location."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_current",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::current",
		"doc": "Get the current URL for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_previous",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::previous",
		"doc": "Get the URL for the previous request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_to",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::to",
		"doc": "Generate an absolute URL to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_secure",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::secure",
		"doc": "Generate a secure, absolute URL to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_asset",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::asset",
		"doc": "Generate the URL to an application asset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_route",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::route",
		"doc": "Get the URL to a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_action",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::action",
		"doc": "Get the URL to a controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_setRootControllerNamespace",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::setRootControllerNamespace",
		"doc": "Set the root controller namespace."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"fromLink": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html#method_getRouteKey",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable::getRouteKey",
		"doc": "Get the value of the model's route key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"fromLink": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html#method_getRouteKeyName",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable::getRouteKeyName",
		"doc": "Get the route key for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"fromLink": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html#method_resolveRouteBinding",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable::resolveRouteBinding",
		"doc": "Retrieve the model for a bound value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"fromLink": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html#method_resolveChildRouteBinding",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable::resolveChildRouteBinding",
		"doc": "Retrieve the child model for a bound value."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Session",
		"fromLink": "Illuminate/Contracts/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html",
		"name": "Illuminate\\Contracts\\Session\\Session",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_getName",
		"name": "Illuminate\\Contracts\\Session\\Session::getName",
		"doc": "Get the name of the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_setName",
		"name": "Illuminate\\Contracts\\Session\\Session::setName",
		"doc": "Set the name of the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_getId",
		"name": "Illuminate\\Contracts\\Session\\Session::getId",
		"doc": "Get the current session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_setId",
		"name": "Illuminate\\Contracts\\Session\\Session::setId",
		"doc": "Set the session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_start",
		"name": "Illuminate\\Contracts\\Session\\Session::start",
		"doc": "Start the session, reading the data from a handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_save",
		"name": "Illuminate\\Contracts\\Session\\Session::save",
		"doc": "Save the session data to storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_all",
		"name": "Illuminate\\Contracts\\Session\\Session::all",
		"doc": "Get all of the session data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_exists",
		"name": "Illuminate\\Contracts\\Session\\Session::exists",
		"doc": "Checks if a key exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_has",
		"name": "Illuminate\\Contracts\\Session\\Session::has",
		"doc": "Checks if a key is present and not null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_get",
		"name": "Illuminate\\Contracts\\Session\\Session::get",
		"doc": "Get an item from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_pull",
		"name": "Illuminate\\Contracts\\Session\\Session::pull",
		"doc": "Get the value of a given key and then forget it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_put",
		"name": "Illuminate\\Contracts\\Session\\Session::put",
		"doc": "Put a key / value pair or array of key / value pairs in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_token",
		"name": "Illuminate\\Contracts\\Session\\Session::token",
		"doc": "Get the CSRF token value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_regenerateToken",
		"name": "Illuminate\\Contracts\\Session\\Session::regenerateToken",
		"doc": "Regenerate the CSRF token value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_remove",
		"name": "Illuminate\\Contracts\\Session\\Session::remove",
		"doc": "Remove an item from the session, returning its value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_forget",
		"name": "Illuminate\\Contracts\\Session\\Session::forget",
		"doc": "Remove one or many items from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_flush",
		"name": "Illuminate\\Contracts\\Session\\Session::flush",
		"doc": "Remove all of the items from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_invalidate",
		"name": "Illuminate\\Contracts\\Session\\Session::invalidate",
		"doc": "Flush the session data and regenerate the ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_regenerate",
		"name": "Illuminate\\Contracts\\Session\\Session::regenerate",
		"doc": "Generate a new session identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_migrate",
		"name": "Illuminate\\Contracts\\Session\\Session::migrate",
		"doc": "Generate a new session ID for the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_isStarted",
		"name": "Illuminate\\Contracts\\Session\\Session::isStarted",
		"doc": "Determine if the session has been started."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_previousUrl",
		"name": "Illuminate\\Contracts\\Session\\Session::previousUrl",
		"doc": "Get the previous URL from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_setPreviousUrl",
		"name": "Illuminate\\Contracts\\Session\\Session::setPreviousUrl",
		"doc": "Set the \"previous\" URL in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_getHandler",
		"name": "Illuminate\\Contracts\\Session\\Session::getHandler",
		"doc": "Get the session handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_handlerNeedsRequest",
		"name": "Illuminate\\Contracts\\Session\\Session::handlerNeedsRequest",
		"doc": "Determine if the session handler needs a request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_setRequestOnHandler",
		"name": "Illuminate\\Contracts\\Session\\Session::setRequestOnHandler",
		"doc": "Set the request on the handler instance."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Arrayable.html",
		"name": "Illuminate\\Contracts\\Support\\Arrayable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Arrayable",
		"fromLink": "Illuminate/Contracts/Support/Arrayable.html",
		"link": "Illuminate/Contracts/Support/Arrayable.html#method_toArray",
		"name": "Illuminate\\Contracts\\Support\\Arrayable::toArray",
		"doc": "Get the instance as an array."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/DeferrableProvider.html",
		"name": "Illuminate\\Contracts\\Support\\DeferrableProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\DeferrableProvider",
		"fromLink": "Illuminate/Contracts/Support/DeferrableProvider.html",
		"link": "Illuminate/Contracts/Support/DeferrableProvider.html#method_provides",
		"name": "Illuminate\\Contracts\\Support\\DeferrableProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/DeferringDisplayableValue.html",
		"name": "Illuminate\\Contracts\\Support\\DeferringDisplayableValue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\DeferringDisplayableValue",
		"fromLink": "Illuminate/Contracts/Support/DeferringDisplayableValue.html",
		"link": "Illuminate/Contracts/Support/DeferringDisplayableValue.html#method_resolveDisplayableValue",
		"name": "Illuminate\\Contracts\\Support\\DeferringDisplayableValue::resolveDisplayableValue",
		"doc": "Resolve the displayable value that the class is deferring."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Htmlable.html",
		"name": "Illuminate\\Contracts\\Support\\Htmlable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Htmlable",
		"fromLink": "Illuminate/Contracts/Support/Htmlable.html",
		"link": "Illuminate/Contracts/Support/Htmlable.html#method_toHtml",
		"name": "Illuminate\\Contracts\\Support\\Htmlable::toHtml",
		"doc": "Get content as a string of HTML."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Jsonable.html",
		"name": "Illuminate\\Contracts\\Support\\Jsonable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Jsonable",
		"fromLink": "Illuminate/Contracts/Support/Jsonable.html",
		"link": "Illuminate/Contracts/Support/Jsonable.html#method_toJson",
		"name": "Illuminate\\Contracts\\Support\\Jsonable::toJson",
		"doc": "Convert the object to its JSON representation."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html",
		"name": "Illuminate\\Contracts\\Support\\MessageBag",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_keys",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::keys",
		"doc": "Get the keys present in the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_add",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::add",
		"doc": "Add a message to the bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_merge",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::merge",
		"doc": "Merge a new array of messages into the bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_has",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::has",
		"doc": "Determine if messages exist for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_first",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::first",
		"doc": "Get the first message from the bag for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_get",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::get",
		"doc": "Get all of the messages from the bag for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_all",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::all",
		"doc": "Get all of the messages for every key in the bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_getMessages",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::getMessages",
		"doc": "Get the raw messages in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_getFormat",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::getFormat",
		"doc": "Get the default message format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_setFormat",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::setFormat",
		"doc": "Set the default message format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_isEmpty",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::isEmpty",
		"doc": "Determine if the message bag has any messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_isNotEmpty",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::isNotEmpty",
		"doc": "Determine if the message bag has any messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_count",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::count",
		"doc": "Get the number of messages in the container."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/MessageProvider.html",
		"name": "Illuminate\\Contracts\\Support\\MessageProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageProvider",
		"fromLink": "Illuminate/Contracts/Support/MessageProvider.html",
		"link": "Illuminate/Contracts/Support/MessageProvider.html#method_getMessageBag",
		"name": "Illuminate\\Contracts\\Support\\MessageProvider::getMessageBag",
		"doc": "Get the messages for the instance."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Renderable.html",
		"name": "Illuminate\\Contracts\\Support\\Renderable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Renderable",
		"fromLink": "Illuminate/Contracts/Support/Renderable.html",
		"link": "Illuminate/Contracts/Support/Renderable.html#method_render",
		"name": "Illuminate\\Contracts\\Support\\Renderable::render",
		"doc": "Get the evaluated contents of the object."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Responsable.html",
		"name": "Illuminate\\Contracts\\Support\\Responsable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Responsable",
		"fromLink": "Illuminate/Contracts/Support/Responsable.html",
		"link": "Illuminate/Contracts/Support/Responsable.html#method_toResponse",
		"name": "Illuminate\\Contracts\\Support\\Responsable::toResponse",
		"doc": "Create an HTTP response that represents the object."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Translation",
		"fromLink": "Illuminate/Contracts/Translation.html",
		"link": "Illuminate/Contracts/Translation/HasLocalePreference.html",
		"name": "Illuminate\\Contracts\\Translation\\HasLocalePreference",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\HasLocalePreference",
		"fromLink": "Illuminate/Contracts/Translation/HasLocalePreference.html",
		"link": "Illuminate/Contracts/Translation/HasLocalePreference.html#method_preferredLocale",
		"name": "Illuminate\\Contracts\\Translation\\HasLocalePreference::preferredLocale",
		"doc": "Get the preferred locale of the entity."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Translation",
		"fromLink": "Illuminate/Contracts/Translation.html",
		"link": "Illuminate/Contracts/Translation/Loader.html",
		"name": "Illuminate\\Contracts\\Translation\\Loader",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Loader",
		"fromLink": "Illuminate/Contracts/Translation/Loader.html",
		"link": "Illuminate/Contracts/Translation/Loader.html#method_load",
		"name": "Illuminate\\Contracts\\Translation\\Loader::load",
		"doc": "Load the messages for the given locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Loader",
		"fromLink": "Illuminate/Contracts/Translation/Loader.html",
		"link": "Illuminate/Contracts/Translation/Loader.html#method_addNamespace",
		"name": "Illuminate\\Contracts\\Translation\\Loader::addNamespace",
		"doc": "Add a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Loader",
		"fromLink": "Illuminate/Contracts/Translation/Loader.html",
		"link": "Illuminate/Contracts/Translation/Loader.html#method_addJsonPath",
		"name": "Illuminate\\Contracts\\Translation\\Loader::addJsonPath",
		"doc": "Add a new JSON path to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Loader",
		"fromLink": "Illuminate/Contracts/Translation/Loader.html",
		"link": "Illuminate/Contracts/Translation/Loader.html#method_namespaces",
		"name": "Illuminate\\Contracts\\Translation\\Loader::namespaces",
		"doc": "Get an array of all the registered namespaces."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Translation",
		"fromLink": "Illuminate/Contracts/Translation.html",
		"link": "Illuminate/Contracts/Translation/Translator.html",
		"name": "Illuminate\\Contracts\\Translation\\Translator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Translator",
		"fromLink": "Illuminate/Contracts/Translation/Translator.html",
		"link": "Illuminate/Contracts/Translation/Translator.html#method_get",
		"name": "Illuminate\\Contracts\\Translation\\Translator::get",
		"doc": "Get the translation for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Translator",
		"fromLink": "Illuminate/Contracts/Translation/Translator.html",
		"link": "Illuminate/Contracts/Translation/Translator.html#method_choice",
		"name": "Illuminate\\Contracts\\Translation\\Translator::choice",
		"doc": "Get a translation according to an integer value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Translator",
		"fromLink": "Illuminate/Contracts/Translation/Translator.html",
		"link": "Illuminate/Contracts/Translation/Translator.html#method_getLocale",
		"name": "Illuminate\\Contracts\\Translation\\Translator::getLocale",
		"doc": "Get the default locale being used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Translator",
		"fromLink": "Illuminate/Contracts/Translation/Translator.html",
		"link": "Illuminate/Contracts/Translation/Translator.html#method_setLocale",
		"name": "Illuminate\\Contracts\\Translation\\Translator::setLocale",
		"doc": "Set the default locale."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/Factory.html",
		"name": "Illuminate\\Contracts\\Validation\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Factory",
		"fromLink": "Illuminate/Contracts/Validation/Factory.html",
		"link": "Illuminate/Contracts/Validation/Factory.html#method_make",
		"name": "Illuminate\\Contracts\\Validation\\Factory::make",
		"doc": "Create a new Validator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Factory",
		"fromLink": "Illuminate/Contracts/Validation/Factory.html",
		"link": "Illuminate/Contracts/Validation/Factory.html#method_extend",
		"name": "Illuminate\\Contracts\\Validation\\Factory::extend",
		"doc": "Register a custom validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Factory",
		"fromLink": "Illuminate/Contracts/Validation/Factory.html",
		"link": "Illuminate/Contracts/Validation/Factory.html#method_extendImplicit",
		"name": "Illuminate\\Contracts\\Validation\\Factory::extendImplicit",
		"doc": "Register a custom implicit validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Factory",
		"fromLink": "Illuminate/Contracts/Validation/Factory.html",
		"link": "Illuminate/Contracts/Validation/Factory.html#method_replacer",
		"name": "Illuminate\\Contracts\\Validation\\Factory::replacer",
		"doc": "Register a custom implicit validator message replacer."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/ImplicitRule.html",
		"name": "Illuminate\\Contracts\\Validation\\ImplicitRule",
		"doc": null
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/Rule.html",
		"name": "Illuminate\\Contracts\\Validation\\Rule",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Rule",
		"fromLink": "Illuminate/Contracts/Validation/Rule.html",
		"link": "Illuminate/Contracts/Validation/Rule.html#method_passes",
		"name": "Illuminate\\Contracts\\Validation\\Rule::passes",
		"doc": "Determine if the validation rule passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Rule",
		"fromLink": "Illuminate/Contracts/Validation/Rule.html",
		"link": "Illuminate/Contracts/Validation/Rule.html#method_message",
		"name": "Illuminate\\Contracts\\Validation\\Rule::message",
		"doc": "Get the validation error message."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/ValidatesWhenResolved.html",
		"name": "Illuminate\\Contracts\\Validation\\ValidatesWhenResolved",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\ValidatesWhenResolved",
		"fromLink": "Illuminate/Contracts/Validation/ValidatesWhenResolved.html",
		"link": "Illuminate/Contracts/Validation/ValidatesWhenResolved.html#method_validateResolved",
		"name": "Illuminate\\Contracts\\Validation\\ValidatesWhenResolved::validateResolved",
		"doc": "Validate the given class instance."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/Validator.html",
		"name": "Illuminate\\Contracts\\Validation\\Validator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_validate",
		"name": "Illuminate\\Contracts\\Validation\\Validator::validate",
		"doc": "Run the validator's rules against its data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_validated",
		"name": "Illuminate\\Contracts\\Validation\\Validator::validated",
		"doc": "Get the attributes and values that were validated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_fails",
		"name": "Illuminate\\Contracts\\Validation\\Validator::fails",
		"doc": "Determine if the data fails the validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_failed",
		"name": "Illuminate\\Contracts\\Validation\\Validator::failed",
		"doc": "Get the failed validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_sometimes",
		"name": "Illuminate\\Contracts\\Validation\\Validator::sometimes",
		"doc": "Add conditions to a given field based on a Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_after",
		"name": "Illuminate\\Contracts\\Validation\\Validator::after",
		"doc": "Add an after validation callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_errors",
		"name": "Illuminate\\Contracts\\Validation\\Validator::errors",
		"doc": "Get all of the validation error messages."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\View",
		"fromLink": "Illuminate/Contracts/View.html",
		"link": "Illuminate/Contracts/View/Engine.html",
		"name": "Illuminate\\Contracts\\View\\Engine",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Engine",
		"fromLink": "Illuminate/Contracts/View/Engine.html",
		"link": "Illuminate/Contracts/View/Engine.html#method_get",
		"name": "Illuminate\\Contracts\\View\\Engine::get",
		"doc": "Get the evaluated contents of the view."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\View",
		"fromLink": "Illuminate/Contracts/View.html",
		"link": "Illuminate/Contracts/View/Factory.html",
		"name": "Illuminate\\Contracts\\View\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_exists",
		"name": "Illuminate\\Contracts\\View\\Factory::exists",
		"doc": "Determine if a given view exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_file",
		"name": "Illuminate\\Contracts\\View\\Factory::file",
		"doc": "Get the evaluated view contents for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_make",
		"name": "Illuminate\\Contracts\\View\\Factory::make",
		"doc": "Get the evaluated view contents for the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_share",
		"name": "Illuminate\\Contracts\\View\\Factory::share",
		"doc": "Add a piece of shared data to the environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_composer",
		"name": "Illuminate\\Contracts\\View\\Factory::composer",
		"doc": "Register a view composer event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_creator",
		"name": "Illuminate\\Contracts\\View\\Factory::creator",
		"doc": "Register a view creator event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_addNamespace",
		"name": "Illuminate\\Contracts\\View\\Factory::addNamespace",
		"doc": "Add a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_replaceNamespace",
		"name": "Illuminate\\Contracts\\View\\Factory::replaceNamespace",
		"doc": "Replace the namespace hints for the given namespace."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Contracts\\View",
		"fromLink": "Illuminate/Contracts/View.html",
		"link": "Illuminate/Contracts/View/View.html",
		"name": "Illuminate\\Contracts\\View\\View",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\View",
		"fromLink": "Illuminate/Contracts/View/View.html",
		"link": "Illuminate/Contracts/View/View.html#method_name",
		"name": "Illuminate\\Contracts\\View\\View::name",
		"doc": "Get the name of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\View",
		"fromLink": "Illuminate/Contracts/View/View.html",
		"link": "Illuminate/Contracts/View/View.html#method_with",
		"name": "Illuminate\\Contracts\\View\\View::with",
		"doc": "Add a piece of data to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\View",
		"fromLink": "Illuminate/Contracts/View/View.html",
		"link": "Illuminate/Contracts/View/View.html#method_getData",
		"name": "Illuminate\\Contracts\\View\\View::getData",
		"doc": "Get the array of view data."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/ConnectionInterface.html",
		"name": "Illuminate\\Database\\ConnectionInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_table",
		"name": "Illuminate\\Database\\ConnectionInterface::table",
		"doc": "Begin a fluent query against a database table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_raw",
		"name": "Illuminate\\Database\\ConnectionInterface::raw",
		"doc": "Get a new raw query expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_selectOne",
		"name": "Illuminate\\Database\\ConnectionInterface::selectOne",
		"doc": "Run a select statement and return a single result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_select",
		"name": "Illuminate\\Database\\ConnectionInterface::select",
		"doc": "Run a select statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_cursor",
		"name": "Illuminate\\Database\\ConnectionInterface::cursor",
		"doc": "Run a select statement against the database and returns a generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_insert",
		"name": "Illuminate\\Database\\ConnectionInterface::insert",
		"doc": "Run an insert statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_update",
		"name": "Illuminate\\Database\\ConnectionInterface::update",
		"doc": "Run an update statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_delete",
		"name": "Illuminate\\Database\\ConnectionInterface::delete",
		"doc": "Run a delete statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_statement",
		"name": "Illuminate\\Database\\ConnectionInterface::statement",
		"doc": "Execute an SQL statement and return the boolean result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_affectingStatement",
		"name": "Illuminate\\Database\\ConnectionInterface::affectingStatement",
		"doc": "Run an SQL statement and get the number of rows affected."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_unprepared",
		"name": "Illuminate\\Database\\ConnectionInterface::unprepared",
		"doc": "Run a raw, unprepared query against the PDO connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_prepareBindings",
		"name": "Illuminate\\Database\\ConnectionInterface::prepareBindings",
		"doc": "Prepare the query bindings for execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_transaction",
		"name": "Illuminate\\Database\\ConnectionInterface::transaction",
		"doc": "Execute a Closure within a transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_beginTransaction",
		"name": "Illuminate\\Database\\ConnectionInterface::beginTransaction",
		"doc": "Start a new database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_commit",
		"name": "Illuminate\\Database\\ConnectionInterface::commit",
		"doc": "Commit the active database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_rollBack",
		"name": "Illuminate\\Database\\ConnectionInterface::rollBack",
		"doc": "Rollback the active database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_transactionLevel",
		"name": "Illuminate\\Database\\ConnectionInterface::transactionLevel",
		"doc": "Get the number of active transactions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_pretend",
		"name": "Illuminate\\Database\\ConnectionInterface::pretend",
		"doc": "Execute the given callback in \"dry run\" mode."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_getDatabaseName",
		"name": "Illuminate\\Database\\ConnectionInterface::getDatabaseName",
		"doc": "Get the name of the connected database."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/ConnectionResolverInterface.html",
		"name": "Illuminate\\Database\\ConnectionResolverInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolverInterface",
		"fromLink": "Illuminate/Database/ConnectionResolverInterface.html",
		"link": "Illuminate/Database/ConnectionResolverInterface.html#method_connection",
		"name": "Illuminate\\Database\\ConnectionResolverInterface::connection",
		"doc": "Get a database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolverInterface",
		"fromLink": "Illuminate/Database/ConnectionResolverInterface.html",
		"link": "Illuminate/Database/ConnectionResolverInterface.html#method_getDefaultConnection",
		"name": "Illuminate\\Database\\ConnectionResolverInterface::getDefaultConnection",
		"doc": "Get the default connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolverInterface",
		"fromLink": "Illuminate/Database/ConnectionResolverInterface.html",
		"link": "Illuminate/Database/ConnectionResolverInterface.html#method_setDefaultConnection",
		"name": "Illuminate\\Database\\ConnectionResolverInterface::setDefaultConnection",
		"doc": "Set the default connection name."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Database\\Connectors",
		"fromLink": "Illuminate/Database/Connectors.html",
		"link": "Illuminate/Database/Connectors/ConnectorInterface.html",
		"name": "Illuminate\\Database\\Connectors\\ConnectorInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectorInterface",
		"fromLink": "Illuminate/Database/Connectors/ConnectorInterface.html",
		"link": "Illuminate/Database/Connectors/ConnectorInterface.html#method_connect",
		"name": "Illuminate\\Database\\Connectors\\ConnectorInterface::connect",
		"doc": "Establish a database connection."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/Scope.html",
		"name": "Illuminate\\Database\\Eloquent\\Scope",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Scope",
		"fromLink": "Illuminate/Database/Eloquent/Scope.html",
		"link": "Illuminate/Database/Eloquent/Scope.html#method_apply",
		"name": "Illuminate\\Database\\Eloquent\\Scope::apply",
		"doc": "Apply the scope to a given Eloquent query builder."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Database\\Migrations",
		"fromLink": "Illuminate/Database/Migrations.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getRan",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getRan",
		"doc": "Get the completed migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getMigrations",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getMigrations",
		"doc": "Get list of migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getLast",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getLast",
		"doc": "Get the last migration batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getMigrationBatches",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getMigrationBatches",
		"doc": "Get the completed migrations with their batch numbers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_log",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::log",
		"doc": "Log that a migration was run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_delete",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::delete",
		"doc": "Remove a migration from the log."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getNextBatchNumber",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getNextBatchNumber",
		"doc": "Get the next migration batch number."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_createRepository",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::createRepository",
		"doc": "Create the migration repository data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_repositoryExists",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::repositoryExists",
		"doc": "Determine if the migration repository exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_deleteRepository",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::deleteRepository",
		"doc": "Delete the migration repository data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_setSource",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::setSource",
		"doc": "Set the information source to gather data."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Http\\Resources",
		"fromLink": "Illuminate/Http/Resources.html",
		"link": "Illuminate/Http/Resources/PotentiallyMissing.html",
		"name": "Illuminate\\Http\\Resources\\PotentiallyMissing",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\PotentiallyMissing",
		"fromLink": "Illuminate/Http/Resources/PotentiallyMissing.html",
		"link": "Illuminate/Http/Resources/PotentiallyMissing.html#method_isMissing",
		"name": "Illuminate\\Http\\Resources\\PotentiallyMissing::isMissing",
		"doc": "Determine if the object should be considered \"missing\"."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Queue\\Connectors",
		"fromLink": "Illuminate/Queue/Connectors.html",
		"link": "Illuminate/Queue/Connectors/ConnectorInterface.html",
		"name": "Illuminate\\Queue\\Connectors\\ConnectorInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\ConnectorInterface",
		"fromLink": "Illuminate/Queue/Connectors/ConnectorInterface.html",
		"link": "Illuminate/Queue/Connectors/ConnectorInterface.html#method_connect",
		"name": "Illuminate\\Queue\\Connectors\\ConnectorInterface::connect",
		"doc": "Establish a queue connection."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Queue\\Failed",
		"fromLink": "Illuminate/Queue/Failed.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_log",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::log",
		"doc": "Log a failed job into storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_all",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::all",
		"doc": "Get a list of all of the failed jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_find",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::find",
		"doc": "Get a single failed job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_forget",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::forget",
		"doc": "Delete a single failed job from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_flush",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::flush",
		"doc": "Flush all of the failed jobs from storage."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Routing\\Contracts",
		"fromLink": "Illuminate/Routing/Contracts.html",
		"link": "Illuminate/Routing/Contracts/ControllerDispatcher.html",
		"name": "Illuminate\\Routing\\Contracts\\ControllerDispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Contracts\\ControllerDispatcher",
		"fromLink": "Illuminate/Routing/Contracts/ControllerDispatcher.html",
		"link": "Illuminate/Routing/Contracts/ControllerDispatcher.html#method_dispatch",
		"name": "Illuminate\\Routing\\Contracts\\ControllerDispatcher::dispatch",
		"doc": "Dispatch a request to a given controller and method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Contracts\\ControllerDispatcher",
		"fromLink": "Illuminate/Routing/Contracts/ControllerDispatcher.html",
		"link": "Illuminate/Routing/Contracts/ControllerDispatcher.html#method_getMiddleware",
		"name": "Illuminate\\Routing\\Contracts\\ControllerDispatcher::getMiddleware",
		"doc": "Get the middleware for the controller instance."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Routing\\Matching",
		"fromLink": "Illuminate/Routing/Matching.html",
		"link": "Illuminate/Routing/Matching/ValidatorInterface.html",
		"name": "Illuminate\\Routing\\Matching\\ValidatorInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Matching\\ValidatorInterface",
		"fromLink": "Illuminate/Routing/Matching/ValidatorInterface.html",
		"link": "Illuminate/Routing/Matching/ValidatorInterface.html#method_matches",
		"name": "Illuminate\\Routing\\Matching\\ValidatorInterface::matches",
		"doc": "Validate a given rule against a route and request."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html",
		"name": "Illuminate\\Routing\\RouteCollectionInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_add",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::add",
		"doc": "Add a Route instance to the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_refreshNameLookups",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::refreshNameLookups",
		"doc": "Refresh the name look-up table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_refreshActionLookups",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::refreshActionLookups",
		"doc": "Refresh the action look-up table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_match",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::match",
		"doc": "Find the first route matching a given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_get",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::get",
		"doc": "Get routes from the collection by method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_hasNamedRoute",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::hasNamedRoute",
		"doc": "Determine if the route collection contains a given named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getByName",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getByName",
		"doc": "Get a route instance by its name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getByAction",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getByAction",
		"doc": "Get a route instance by its controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getRoutes",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getRoutes",
		"doc": "Get all of the routes in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getRoutesByMethod",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getRoutesByMethod",
		"doc": "Get all of the routes keyed by their HTTP verb / method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getRoutesByName",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getRoutesByName",
		"doc": "Get all of the routes keyed by their name."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/ExistenceAwareInterface.html",
		"name": "Illuminate\\Session\\ExistenceAwareInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ExistenceAwareInterface",
		"fromLink": "Illuminate/Session/ExistenceAwareInterface.html",
		"link": "Illuminate/Session/ExistenceAwareInterface.html#method_setExists",
		"name": "Illuminate\\Session\\ExistenceAwareInterface::setExists",
		"doc": "Set the existence state for the session."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Enumerable.html",
		"name": "Illuminate\\Support\\Enumerable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_make",
		"name": "Illuminate\\Support\\Enumerable::make",
		"doc": "Create a new collection instance if the value isn't one already."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_times",
		"name": "Illuminate\\Support\\Enumerable::times",
		"doc": "Create a new instance by invoking the callback a given amount of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_range",
		"name": "Illuminate\\Support\\Enumerable::range",
		"doc": "Create a collection with the given range."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_wrap",
		"name": "Illuminate\\Support\\Enumerable::wrap",
		"doc": "Wrap the given value in a collection if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unwrap",
		"name": "Illuminate\\Support\\Enumerable::unwrap",
		"doc": "Get the underlying items from the given collection if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_empty",
		"name": "Illuminate\\Support\\Enumerable::empty",
		"doc": "Create a new instance with no items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_all",
		"name": "Illuminate\\Support\\Enumerable::all",
		"doc": "Get all items in the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_average",
		"name": "Illuminate\\Support\\Enumerable::average",
		"doc": "Alias for the \"avg\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_median",
		"name": "Illuminate\\Support\\Enumerable::median",
		"doc": "Get the median of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mode",
		"name": "Illuminate\\Support\\Enumerable::mode",
		"doc": "Get the mode of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_collapse",
		"name": "Illuminate\\Support\\Enumerable::collapse",
		"doc": "Collapse the items into a single enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_some",
		"name": "Illuminate\\Support\\Enumerable::some",
		"doc": "Alias for the \"contains\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_containsStrict",
		"name": "Illuminate\\Support\\Enumerable::containsStrict",
		"doc": "Determine if an item exists, using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_avg",
		"name": "Illuminate\\Support\\Enumerable::avg",
		"doc": "Get the average value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_contains",
		"name": "Illuminate\\Support\\Enumerable::contains",
		"doc": "Determine if an item exists in the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_crossJoin",
		"name": "Illuminate\\Support\\Enumerable::crossJoin",
		"doc": "Cross join with the given lists, returning all possible permutations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_dd",
		"name": "Illuminate\\Support\\Enumerable::dd",
		"doc": "Dump the collection and end the script."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_dump",
		"name": "Illuminate\\Support\\Enumerable::dump",
		"doc": "Dump the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diff",
		"name": "Illuminate\\Support\\Enumerable::diff",
		"doc": "Get the items that are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffUsing",
		"name": "Illuminate\\Support\\Enumerable::diffUsing",
		"doc": "Get the items that are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffAssoc",
		"name": "Illuminate\\Support\\Enumerable::diffAssoc",
		"doc": "Get the items whose keys and values are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffAssocUsing",
		"name": "Illuminate\\Support\\Enumerable::diffAssocUsing",
		"doc": "Get the items whose keys and values are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffKeys",
		"name": "Illuminate\\Support\\Enumerable::diffKeys",
		"doc": "Get the items whose keys are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffKeysUsing",
		"name": "Illuminate\\Support\\Enumerable::diffKeysUsing",
		"doc": "Get the items whose keys are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_duplicates",
		"name": "Illuminate\\Support\\Enumerable::duplicates",
		"doc": "Retrieve duplicate items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_duplicatesStrict",
		"name": "Illuminate\\Support\\Enumerable::duplicatesStrict",
		"doc": "Retrieve duplicate items using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_each",
		"name": "Illuminate\\Support\\Enumerable::each",
		"doc": "Execute a callback over each item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_eachSpread",
		"name": "Illuminate\\Support\\Enumerable::eachSpread",
		"doc": "Execute a callback over each nested chunk of items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_every",
		"name": "Illuminate\\Support\\Enumerable::every",
		"doc": "Determine if all items pass the given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_except",
		"name": "Illuminate\\Support\\Enumerable::except",
		"doc": "Get all items except for those with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_filter",
		"name": "Illuminate\\Support\\Enumerable::filter",
		"doc": "Run a filter over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_when",
		"name": "Illuminate\\Support\\Enumerable::when",
		"doc": "Apply the callback if the value is truthy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whenEmpty",
		"name": "Illuminate\\Support\\Enumerable::whenEmpty",
		"doc": "Apply the callback if the collection is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whenNotEmpty",
		"name": "Illuminate\\Support\\Enumerable::whenNotEmpty",
		"doc": "Apply the callback if the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unless",
		"name": "Illuminate\\Support\\Enumerable::unless",
		"doc": "Apply the callback if the value is falsy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unlessEmpty",
		"name": "Illuminate\\Support\\Enumerable::unlessEmpty",
		"doc": "Apply the callback unless the collection is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unlessNotEmpty",
		"name": "Illuminate\\Support\\Enumerable::unlessNotEmpty",
		"doc": "Apply the callback unless the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_where",
		"name": "Illuminate\\Support\\Enumerable::where",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNull",
		"name": "Illuminate\\Support\\Enumerable::whereNull",
		"doc": "Filter items where the value for the given key is null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNotNull",
		"name": "Illuminate\\Support\\Enumerable::whereNotNull",
		"doc": "Filter items where the value for the given key is not null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereStrict",
		"name": "Illuminate\\Support\\Enumerable::whereStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereIn",
		"name": "Illuminate\\Support\\Enumerable::whereIn",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereInStrict",
		"name": "Illuminate\\Support\\Enumerable::whereInStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereBetween",
		"name": "Illuminate\\Support\\Enumerable::whereBetween",
		"doc": "Filter items such that the value of the given key is between the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNotBetween",
		"name": "Illuminate\\Support\\Enumerable::whereNotBetween",
		"doc": "Filter items such that the value of the given key is not between the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNotIn",
		"name": "Illuminate\\Support\\Enumerable::whereNotIn",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNotInStrict",
		"name": "Illuminate\\Support\\Enumerable::whereNotInStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereInstanceOf",
		"name": "Illuminate\\Support\\Enumerable::whereInstanceOf",
		"doc": "Filter the items, removing any items that don't match the given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_first",
		"name": "Illuminate\\Support\\Enumerable::first",
		"doc": "Get the first item from the enumerable passing the given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_firstWhere",
		"name": "Illuminate\\Support\\Enumerable::firstWhere",
		"doc": "Get the first item by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_flatten",
		"name": "Illuminate\\Support\\Enumerable::flatten",
		"doc": "Get a flattened array of the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_flip",
		"name": "Illuminate\\Support\\Enumerable::flip",
		"doc": "Flip the values with their keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_get",
		"name": "Illuminate\\Support\\Enumerable::get",
		"doc": "Get an item from the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_groupBy",
		"name": "Illuminate\\Support\\Enumerable::groupBy",
		"doc": "Group an associative array by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_keyBy",
		"name": "Illuminate\\Support\\Enumerable::keyBy",
		"doc": "Key an associative array by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_has",
		"name": "Illuminate\\Support\\Enumerable::has",
		"doc": "Determine if an item exists in the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_implode",
		"name": "Illuminate\\Support\\Enumerable::implode",
		"doc": "Concatenate values of a given key as a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_intersect",
		"name": "Illuminate\\Support\\Enumerable::intersect",
		"doc": "Intersect the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_intersectByKeys",
		"name": "Illuminate\\Support\\Enumerable::intersectByKeys",
		"doc": "Intersect the collection with the given items by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_isEmpty",
		"name": "Illuminate\\Support\\Enumerable::isEmpty",
		"doc": "Determine if the collection is empty or not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_isNotEmpty",
		"name": "Illuminate\\Support\\Enumerable::isNotEmpty",
		"doc": "Determine if the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_join",
		"name": "Illuminate\\Support\\Enumerable::join",
		"doc": "Join all items from the collection using a string. The final items can use a separate glue string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_keys",
		"name": "Illuminate\\Support\\Enumerable::keys",
		"doc": "Get the keys of the collection items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_last",
		"name": "Illuminate\\Support\\Enumerable::last",
		"doc": "Get the last item from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_map",
		"name": "Illuminate\\Support\\Enumerable::map",
		"doc": "Run a map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapSpread",
		"name": "Illuminate\\Support\\Enumerable::mapSpread",
		"doc": "Run a map over each nested chunk of items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapToDictionary",
		"name": "Illuminate\\Support\\Enumerable::mapToDictionary",
		"doc": "Run a dictionary map over the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapToGroups",
		"name": "Illuminate\\Support\\Enumerable::mapToGroups",
		"doc": "Run a grouping map over the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapWithKeys",
		"name": "Illuminate\\Support\\Enumerable::mapWithKeys",
		"doc": "Run an associative map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_flatMap",
		"name": "Illuminate\\Support\\Enumerable::flatMap",
		"doc": "Map a collection and flatten the result by a single level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapInto",
		"name": "Illuminate\\Support\\Enumerable::mapInto",
		"doc": "Map the values into a new class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_merge",
		"name": "Illuminate\\Support\\Enumerable::merge",
		"doc": "Merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mergeRecursive",
		"name": "Illuminate\\Support\\Enumerable::mergeRecursive",
		"doc": "Recursively merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_combine",
		"name": "Illuminate\\Support\\Enumerable::combine",
		"doc": "Create a collection by using this collection for keys and another for its values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_union",
		"name": "Illuminate\\Support\\Enumerable::union",
		"doc": "Union the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_min",
		"name": "Illuminate\\Support\\Enumerable::min",
		"doc": "Get the min value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_max",
		"name": "Illuminate\\Support\\Enumerable::max",
		"doc": "Get the max value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_nth",
		"name": "Illuminate\\Support\\Enumerable::nth",
		"doc": "Create a new collection consisting of every n-th element."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_only",
		"name": "Illuminate\\Support\\Enumerable::only",
		"doc": "Get the items with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_forPage",
		"name": "Illuminate\\Support\\Enumerable::forPage",
		"doc": "\"Paginate\" the collection by slicing it into a smaller collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_partition",
		"name": "Illuminate\\Support\\Enumerable::partition",
		"doc": "Partition the collection into two arrays using the given callback or key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_concat",
		"name": "Illuminate\\Support\\Enumerable::concat",
		"doc": "Push all of the given items onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_random",
		"name": "Illuminate\\Support\\Enumerable::random",
		"doc": "Get one or a specified number of items randomly from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_reduce",
		"name": "Illuminate\\Support\\Enumerable::reduce",
		"doc": "Reduce the collection to a single value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_replace",
		"name": "Illuminate\\Support\\Enumerable::replace",
		"doc": "Replace the collection items with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_replaceRecursive",
		"name": "Illuminate\\Support\\Enumerable::replaceRecursive",
		"doc": "Recursively replace the collection items with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_reverse",
		"name": "Illuminate\\Support\\Enumerable::reverse",
		"doc": "Reverse items order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_search",
		"name": "Illuminate\\Support\\Enumerable::search",
		"doc": "Search the collection for a given value and return the corresponding key if successful."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_shuffle",
		"name": "Illuminate\\Support\\Enumerable::shuffle",
		"doc": "Shuffle the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_skip",
		"name": "Illuminate\\Support\\Enumerable::skip",
		"doc": "Skip the first {$count} items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_skipUntil",
		"name": "Illuminate\\Support\\Enumerable::skipUntil",
		"doc": "Skip items in the collection until the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_skipWhile",
		"name": "Illuminate\\Support\\Enumerable::skipWhile",
		"doc": "Skip items in the collection while the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_slice",
		"name": "Illuminate\\Support\\Enumerable::slice",
		"doc": "Get a slice of items from the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_split",
		"name": "Illuminate\\Support\\Enumerable::split",
		"doc": "Split a collection into a certain number of groups."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_chunk",
		"name": "Illuminate\\Support\\Enumerable::chunk",
		"doc": "Chunk the collection into chunks of the given size."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_chunkWhile",
		"name": "Illuminate\\Support\\Enumerable::chunkWhile",
		"doc": "Chunk the collection into chunks with a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sort",
		"name": "Illuminate\\Support\\Enumerable::sort",
		"doc": "Sort through each item with a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortDesc",
		"name": "Illuminate\\Support\\Enumerable::sortDesc",
		"doc": "Sort items in descending order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortBy",
		"name": "Illuminate\\Support\\Enumerable::sortBy",
		"doc": "Sort the collection using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortByDesc",
		"name": "Illuminate\\Support\\Enumerable::sortByDesc",
		"doc": "Sort the collection in descending order using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortKeys",
		"name": "Illuminate\\Support\\Enumerable::sortKeys",
		"doc": "Sort the collection keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortKeysDesc",
		"name": "Illuminate\\Support\\Enumerable::sortKeysDesc",
		"doc": "Sort the collection keys in descending order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sum",
		"name": "Illuminate\\Support\\Enumerable::sum",
		"doc": "Get the sum of the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_take",
		"name": "Illuminate\\Support\\Enumerable::take",
		"doc": "Take the first or last {$limit} items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_takeUntil",
		"name": "Illuminate\\Support\\Enumerable::takeUntil",
		"doc": "Take items in the collection until the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_takeWhile",
		"name": "Illuminate\\Support\\Enumerable::takeWhile",
		"doc": "Take items in the collection while the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_tap",
		"name": "Illuminate\\Support\\Enumerable::tap",
		"doc": "Pass the collection to the given callback and then return it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_pipe",
		"name": "Illuminate\\Support\\Enumerable::pipe",
		"doc": "Pass the enumerable to the given callback and return the result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_pluck",
		"name": "Illuminate\\Support\\Enumerable::pluck",
		"doc": "Get the values of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_reject",
		"name": "Illuminate\\Support\\Enumerable::reject",
		"doc": "Create a collection of all elements that do not pass a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unique",
		"name": "Illuminate\\Support\\Enumerable::unique",
		"doc": "Return only unique items from the collection array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_uniqueStrict",
		"name": "Illuminate\\Support\\Enumerable::uniqueStrict",
		"doc": "Return only unique items from the collection array using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_values",
		"name": "Illuminate\\Support\\Enumerable::values",
		"doc": "Reset the keys on the underlying array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_pad",
		"name": "Illuminate\\Support\\Enumerable::pad",
		"doc": "Pad collection to the specified length with a value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_countBy",
		"name": "Illuminate\\Support\\Enumerable::countBy",
		"doc": "Count the number of items in the collection using a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_zip",
		"name": "Illuminate\\Support\\Enumerable::zip",
		"doc": "Zip the collection together with one or more arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_collect",
		"name": "Illuminate\\Support\\Enumerable::collect",
		"doc": "Collect the values into a collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method___toString",
		"name": "Illuminate\\Support\\Enumerable::__toString",
		"doc": "Convert the collection to its string representation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_proxy",
		"name": "Illuminate\\Support\\Enumerable::proxy",
		"doc": "Add a method to the list of proxied methods."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method___get",
		"name": "Illuminate\\Support\\Enumerable::__get",
		"doc": "Dynamically access collection proxies."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifierInterface.html",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifierInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifierInterface",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifierInterface.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifierInterface.html#method_setConnection",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifierInterface::setConnection",
		"doc": "Set the connection to be used."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/PresenceVerifierInterface.html",
		"name": "Illuminate\\Validation\\PresenceVerifierInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\PresenceVerifierInterface",
		"fromLink": "Illuminate/Validation/PresenceVerifierInterface.html",
		"link": "Illuminate/Validation/PresenceVerifierInterface.html#method_getCount",
		"name": "Illuminate\\Validation\\PresenceVerifierInterface::getCount",
		"doc": "Count the number of objects in a collection having the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\PresenceVerifierInterface",
		"fromLink": "Illuminate/Validation/PresenceVerifierInterface.html",
		"link": "Illuminate/Validation/PresenceVerifierInterface.html#method_getMultiCount",
		"name": "Illuminate\\Validation\\PresenceVerifierInterface::getMultiCount",
		"doc": "Count the number of objects in a collection with the given values."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\View\\Compilers",
		"fromLink": "Illuminate/View/Compilers.html",
		"link": "Illuminate/View/Compilers/CompilerInterface.html",
		"name": "Illuminate\\View\\Compilers\\CompilerInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\CompilerInterface",
		"fromLink": "Illuminate/View/Compilers/CompilerInterface.html",
		"link": "Illuminate/View/Compilers/CompilerInterface.html#method_getCompiledPath",
		"name": "Illuminate\\View\\Compilers\\CompilerInterface::getCompiledPath",
		"doc": "Get the path to the compiled version of a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\CompilerInterface",
		"fromLink": "Illuminate/View/Compilers/CompilerInterface.html",
		"link": "Illuminate/View/Compilers/CompilerInterface.html#method_isExpired",
		"name": "Illuminate\\View\\Compilers\\CompilerInterface::isExpired",
		"doc": "Determine if the given view is expired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\CompilerInterface",
		"fromLink": "Illuminate/View/Compilers/CompilerInterface.html",
		"link": "Illuminate/View/Compilers/CompilerInterface.html#method_compile",
		"name": "Illuminate\\View\\Compilers\\CompilerInterface::compile",
		"doc": "Compile the view at the given path."
	},

	{
		"type": "Interface",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/ViewFinderInterface.html",
		"name": "Illuminate\\View\\ViewFinderInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_find",
		"name": "Illuminate\\View\\ViewFinderInterface::find",
		"doc": "Get the fully qualified location of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_addLocation",
		"name": "Illuminate\\View\\ViewFinderInterface::addLocation",
		"doc": "Add a location to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_addNamespace",
		"name": "Illuminate\\View\\ViewFinderInterface::addNamespace",
		"doc": "Add a namespace hint to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_prependNamespace",
		"name": "Illuminate\\View\\ViewFinderInterface::prependNamespace",
		"doc": "Prepend a namespace hint to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_replaceNamespace",
		"name": "Illuminate\\View\\ViewFinderInterface::replaceNamespace",
		"doc": "Replace the namespace hints for the given namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_addExtension",
		"name": "Illuminate\\View\\ViewFinderInterface::addExtension",
		"doc": "Add a valid view extension to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_flush",
		"name": "Illuminate\\View\\ViewFinderInterface::flush",
		"doc": "Flush the cache of located views."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Access",
		"fromLink": "Illuminate/Auth/Access.html",
		"link": "Illuminate/Auth/Access/AuthorizationException.html",
		"name": "Illuminate\\Auth\\Access\\AuthorizationException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\AuthorizationException",
		"fromLink": "Illuminate/Auth/Access/AuthorizationException.html",
		"link": "Illuminate/Auth/Access/AuthorizationException.html#method___construct",
		"name": "Illuminate\\Auth\\Access\\AuthorizationException::__construct",
		"doc": "Create a new authorization exception instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\AuthorizationException",
		"fromLink": "Illuminate/Auth/Access/AuthorizationException.html",
		"link": "Illuminate/Auth/Access/AuthorizationException.html#method_response",
		"name": "Illuminate\\Auth\\Access\\AuthorizationException::response",
		"doc": "Get the response from the gate."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\AuthorizationException",
		"fromLink": "Illuminate/Auth/Access/AuthorizationException.html",
		"link": "Illuminate/Auth/Access/AuthorizationException.html#method_setResponse",
		"name": "Illuminate\\Auth\\Access\\AuthorizationException::setResponse",
		"doc": "Set the response from the gate."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\AuthorizationException",
		"fromLink": "Illuminate/Auth/Access/AuthorizationException.html",
		"link": "Illuminate/Auth/Access/AuthorizationException.html#method_toResponse",
		"name": "Illuminate\\Auth\\Access\\AuthorizationException::toResponse",
		"doc": "Create a deny response object from this exception."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Access",
		"fromLink": "Illuminate/Auth/Access.html",
		"link": "Illuminate/Auth/Access/Gate.html",
		"name": "Illuminate\\Auth\\Access\\Gate",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method___construct",
		"name": "Illuminate\\Auth\\Access\\Gate::__construct",
		"doc": "Create a new gate instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_has",
		"name": "Illuminate\\Auth\\Access\\Gate::has",
		"doc": "Determine if a given ability has been defined."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_define",
		"name": "Illuminate\\Auth\\Access\\Gate::define",
		"doc": "Define a new ability."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_resource",
		"name": "Illuminate\\Auth\\Access\\Gate::resource",
		"doc": "Define abilities for a resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_buildAbilityCallback",
		"name": "Illuminate\\Auth\\Access\\Gate::buildAbilityCallback",
		"doc": "Create the ability callback for a callback string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_policy",
		"name": "Illuminate\\Auth\\Access\\Gate::policy",
		"doc": "Define a policy class for a given class type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_before",
		"name": "Illuminate\\Auth\\Access\\Gate::before",
		"doc": "Register a callback to run before all Gate checks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_after",
		"name": "Illuminate\\Auth\\Access\\Gate::after",
		"doc": "Register a callback to run after all Gate checks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_allows",
		"name": "Illuminate\\Auth\\Access\\Gate::allows",
		"doc": "Determine if the given ability should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_denies",
		"name": "Illuminate\\Auth\\Access\\Gate::denies",
		"doc": "Determine if the given ability should be denied for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_check",
		"name": "Illuminate\\Auth\\Access\\Gate::check",
		"doc": "Determine if all of the given abilities should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_any",
		"name": "Illuminate\\Auth\\Access\\Gate::any",
		"doc": "Determine if any one of the given abilities should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_none",
		"name": "Illuminate\\Auth\\Access\\Gate::none",
		"doc": "Determine if all of the given abilities should be denied for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_authorize",
		"name": "Illuminate\\Auth\\Access\\Gate::authorize",
		"doc": "Determine if the given ability should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_inspect",
		"name": "Illuminate\\Auth\\Access\\Gate::inspect",
		"doc": "Inspect the user for the given ability."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_raw",
		"name": "Illuminate\\Auth\\Access\\Gate::raw",
		"doc": "Get the raw result from the authorization callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_canBeCalledWithUser",
		"name": "Illuminate\\Auth\\Access\\Gate::canBeCalledWithUser",
		"doc": "Determine whether the callback/method can be called with the given user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_methodAllowsGuests",
		"name": "Illuminate\\Auth\\Access\\Gate::methodAllowsGuests",
		"doc": "Determine if the given class method allows guests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_callbackAllowsGuests",
		"name": "Illuminate\\Auth\\Access\\Gate::callbackAllowsGuests",
		"doc": "Determine if the callback allows guests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_parameterAllowsGuests",
		"name": "Illuminate\\Auth\\Access\\Gate::parameterAllowsGuests",
		"doc": "Determine if the given parameter allows guests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_callAuthCallback",
		"name": "Illuminate\\Auth\\Access\\Gate::callAuthCallback",
		"doc": "Resolve and call the appropriate authorization callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_callBeforeCallbacks",
		"name": "Illuminate\\Auth\\Access\\Gate::callBeforeCallbacks",
		"doc": "Call all of the before callbacks and return if a result is given."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_callAfterCallbacks",
		"name": "Illuminate\\Auth\\Access\\Gate::callAfterCallbacks",
		"doc": "Call all of the after callbacks with check result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_resolveAuthCallback",
		"name": "Illuminate\\Auth\\Access\\Gate::resolveAuthCallback",
		"doc": "Resolve the callable for the given ability and arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_getPolicyFor",
		"name": "Illuminate\\Auth\\Access\\Gate::getPolicyFor",
		"doc": "Get a policy instance for a given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_guessPolicyName",
		"name": "Illuminate\\Auth\\Access\\Gate::guessPolicyName",
		"doc": "Guess the policy name for the given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_guessPolicyNamesUsing",
		"name": "Illuminate\\Auth\\Access\\Gate::guessPolicyNamesUsing",
		"doc": "Specify a callback to be used to guess policy names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_resolvePolicy",
		"name": "Illuminate\\Auth\\Access\\Gate::resolvePolicy",
		"doc": "Build a policy class instance of the given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_resolvePolicyCallback",
		"name": "Illuminate\\Auth\\Access\\Gate::resolvePolicyCallback",
		"doc": "Resolve the callback for a policy check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_callPolicyBefore",
		"name": "Illuminate\\Auth\\Access\\Gate::callPolicyBefore",
		"doc": "Call the \"before\" method on the given policy, if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_callPolicyMethod",
		"name": "Illuminate\\Auth\\Access\\Gate::callPolicyMethod",
		"doc": "Call the appropriate method on the given policy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_formatAbilityToMethod",
		"name": "Illuminate\\Auth\\Access\\Gate::formatAbilityToMethod",
		"doc": "Format the policy ability into a method name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_forUser",
		"name": "Illuminate\\Auth\\Access\\Gate::forUser",
		"doc": "Get a gate instance for the given user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_resolveUser",
		"name": "Illuminate\\Auth\\Access\\Gate::resolveUser",
		"doc": "Resolve the user from the user resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_abilities",
		"name": "Illuminate\\Auth\\Access\\Gate::abilities",
		"doc": "Get all of the defined abilities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Auth/Access/Gate.html",
		"link": "Illuminate/Auth/Access/Gate.html#method_policies",
		"name": "Illuminate\\Auth\\Access\\Gate::policies",
		"doc": "Get all of the defined policies."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Auth\\Access",
		"fromLink": "Illuminate/Auth/Access.html",
		"link": "Illuminate/Auth/Access/HandlesAuthorization.html",
		"name": "Illuminate\\Auth\\Access\\HandlesAuthorization",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\HandlesAuthorization",
		"fromLink": "Illuminate/Auth/Access/HandlesAuthorization.html",
		"link": "Illuminate/Auth/Access/HandlesAuthorization.html#method_allow",
		"name": "Illuminate\\Auth\\Access\\HandlesAuthorization::allow",
		"doc": "Create a new access response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\HandlesAuthorization",
		"fromLink": "Illuminate/Auth/Access/HandlesAuthorization.html",
		"link": "Illuminate/Auth/Access/HandlesAuthorization.html#method_deny",
		"name": "Illuminate\\Auth\\Access\\HandlesAuthorization::deny",
		"doc": "Throws an unauthorized exception."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Access",
		"fromLink": "Illuminate/Auth/Access.html",
		"link": "Illuminate/Auth/Access/Response.html",
		"name": "Illuminate\\Auth\\Access\\Response",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method___construct",
		"name": "Illuminate\\Auth\\Access\\Response::__construct",
		"doc": "Create a new response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method_allow",
		"name": "Illuminate\\Auth\\Access\\Response::allow",
		"doc": "Create a new \"allow\" Response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method_deny",
		"name": "Illuminate\\Auth\\Access\\Response::deny",
		"doc": "Create a new \"deny\" Response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method_allowed",
		"name": "Illuminate\\Auth\\Access\\Response::allowed",
		"doc": "Determine if the response was allowed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method_denied",
		"name": "Illuminate\\Auth\\Access\\Response::denied",
		"doc": "Determine if the response was denied."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method_message",
		"name": "Illuminate\\Auth\\Access\\Response::message",
		"doc": "Get the response message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method_code",
		"name": "Illuminate\\Auth\\Access\\Response::code",
		"doc": "Get the response code / reason."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method_authorize",
		"name": "Illuminate\\Auth\\Access\\Response::authorize",
		"doc": "Throw authorization exception if response was denied."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method_toArray",
		"name": "Illuminate\\Auth\\Access\\Response::toArray",
		"doc": "Convert the response to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Access\\Response",
		"fromLink": "Illuminate/Auth/Access/Response.html",
		"link": "Illuminate/Auth/Access/Response.html#method___toString",
		"name": "Illuminate\\Auth\\Access\\Response::__toString",
		"doc": "Get the string representation of the message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/AuthManager.html",
		"name": "Illuminate\\Auth\\AuthManager",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method___construct",
		"name": "Illuminate\\Auth\\AuthManager::__construct",
		"doc": "Create a new Auth manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_guard",
		"name": "Illuminate\\Auth\\AuthManager::guard",
		"doc": "Attempt to get the guard from the local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_resolve",
		"name": "Illuminate\\Auth\\AuthManager::resolve",
		"doc": "Resolve the given guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_callCustomCreator",
		"name": "Illuminate\\Auth\\AuthManager::callCustomCreator",
		"doc": "Call a custom driver creator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_createSessionDriver",
		"name": "Illuminate\\Auth\\AuthManager::createSessionDriver",
		"doc": "Create a session based authentication guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_createTokenDriver",
		"name": "Illuminate\\Auth\\AuthManager::createTokenDriver",
		"doc": "Create a token based authentication guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_getConfig",
		"name": "Illuminate\\Auth\\AuthManager::getConfig",
		"doc": "Get the guard configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Auth\\AuthManager::getDefaultDriver",
		"doc": "Get the default authentication driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_shouldUse",
		"name": "Illuminate\\Auth\\AuthManager::shouldUse",
		"doc": "Set the default guard driver the factory should serve."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_setDefaultDriver",
		"name": "Illuminate\\Auth\\AuthManager::setDefaultDriver",
		"doc": "Set the default authentication driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_viaRequest",
		"name": "Illuminate\\Auth\\AuthManager::viaRequest",
		"doc": "Register a new callback based request guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_userResolver",
		"name": "Illuminate\\Auth\\AuthManager::userResolver",
		"doc": "Get the user resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_resolveUsersUsing",
		"name": "Illuminate\\Auth\\AuthManager::resolveUsersUsing",
		"doc": "Set the callback to be used to resolve users."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_extend",
		"name": "Illuminate\\Auth\\AuthManager::extend",
		"doc": "Register a custom driver creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_provider",
		"name": "Illuminate\\Auth\\AuthManager::provider",
		"doc": "Register a custom provider creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method_hasResolvedGuards",
		"name": "Illuminate\\Auth\\AuthManager::hasResolvedGuards",
		"doc": "Determines if any guards have already been resolved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthManager",
		"fromLink": "Illuminate/Auth/AuthManager.html",
		"link": "Illuminate/Auth/AuthManager.html#method___call",
		"name": "Illuminate\\Auth\\AuthManager::__call",
		"doc": "Dynamically call the default driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/AuthServiceProvider.html",
		"name": "Illuminate\\Auth\\AuthServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthServiceProvider",
		"fromLink": "Illuminate/Auth/AuthServiceProvider.html",
		"link": "Illuminate/Auth/AuthServiceProvider.html#method_register",
		"name": "Illuminate\\Auth\\AuthServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthServiceProvider",
		"fromLink": "Illuminate/Auth/AuthServiceProvider.html",
		"link": "Illuminate/Auth/AuthServiceProvider.html#method_registerAuthenticator",
		"name": "Illuminate\\Auth\\AuthServiceProvider::registerAuthenticator",
		"doc": "Register the authenticator services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthServiceProvider",
		"fromLink": "Illuminate/Auth/AuthServiceProvider.html",
		"link": "Illuminate/Auth/AuthServiceProvider.html#method_registerUserResolver",
		"name": "Illuminate\\Auth\\AuthServiceProvider::registerUserResolver",
		"doc": "Register a resolver for the authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthServiceProvider",
		"fromLink": "Illuminate/Auth/AuthServiceProvider.html",
		"link": "Illuminate/Auth/AuthServiceProvider.html#method_registerAccessGate",
		"name": "Illuminate\\Auth\\AuthServiceProvider::registerAccessGate",
		"doc": "Register the access gate service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthServiceProvider",
		"fromLink": "Illuminate/Auth/AuthServiceProvider.html",
		"link": "Illuminate/Auth/AuthServiceProvider.html#method_registerRequirePassword",
		"name": "Illuminate\\Auth\\AuthServiceProvider::registerRequirePassword",
		"doc": "Register a resolver for the authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthServiceProvider",
		"fromLink": "Illuminate/Auth/AuthServiceProvider.html",
		"link": "Illuminate/Auth/AuthServiceProvider.html#method_registerRequestRebindHandler",
		"name": "Illuminate\\Auth\\AuthServiceProvider::registerRequestRebindHandler",
		"doc": "Handle the re-binding of the request binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthServiceProvider",
		"fromLink": "Illuminate/Auth/AuthServiceProvider.html",
		"link": "Illuminate/Auth/AuthServiceProvider.html#method_registerEventRebindHandler",
		"name": "Illuminate\\Auth\\AuthServiceProvider::registerEventRebindHandler",
		"doc": "Handle the re-binding of the event dispatcher binding."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/Authenticatable.html",
		"name": "Illuminate\\Auth\\Authenticatable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Auth/Authenticatable.html",
		"link": "Illuminate/Auth/Authenticatable.html#method_getAuthIdentifierName",
		"name": "Illuminate\\Auth\\Authenticatable::getAuthIdentifierName",
		"doc": "Get the name of the unique identifier for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Auth/Authenticatable.html",
		"link": "Illuminate/Auth/Authenticatable.html#method_getAuthIdentifier",
		"name": "Illuminate\\Auth\\Authenticatable::getAuthIdentifier",
		"doc": "Get the unique identifier for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Auth/Authenticatable.html",
		"link": "Illuminate/Auth/Authenticatable.html#method_getAuthPassword",
		"name": "Illuminate\\Auth\\Authenticatable::getAuthPassword",
		"doc": "Get the password for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Auth/Authenticatable.html",
		"link": "Illuminate/Auth/Authenticatable.html#method_getRememberToken",
		"name": "Illuminate\\Auth\\Authenticatable::getRememberToken",
		"doc": "Get the token value for the \"remember me\" session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Auth/Authenticatable.html",
		"link": "Illuminate/Auth/Authenticatable.html#method_setRememberToken",
		"name": "Illuminate\\Auth\\Authenticatable::setRememberToken",
		"doc": "Set the token value for the \"remember me\" session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Auth/Authenticatable.html",
		"link": "Illuminate/Auth/Authenticatable.html#method_getRememberTokenName",
		"name": "Illuminate\\Auth\\Authenticatable::getRememberTokenName",
		"doc": "Get the column name for the \"remember me\" token."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/AuthenticationException.html",
		"name": "Illuminate\\Auth\\AuthenticationException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthenticationException",
		"fromLink": "Illuminate/Auth/AuthenticationException.html",
		"link": "Illuminate/Auth/AuthenticationException.html#method___construct",
		"name": "Illuminate\\Auth\\AuthenticationException::__construct",
		"doc": "Create a new authentication exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthenticationException",
		"fromLink": "Illuminate/Auth/AuthenticationException.html",
		"link": "Illuminate/Auth/AuthenticationException.html#method_guards",
		"name": "Illuminate\\Auth\\AuthenticationException::guards",
		"doc": "Get the guards that were checked."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\AuthenticationException",
		"fromLink": "Illuminate/Auth/AuthenticationException.html",
		"link": "Illuminate/Auth/AuthenticationException.html#method_redirectTo",
		"name": "Illuminate\\Auth\\AuthenticationException::redirectTo",
		"doc": "Get the path the user should be redirected to."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Console",
		"fromLink": "Illuminate/Auth/Console.html",
		"link": "Illuminate/Auth/Console/ClearResetsCommand.html",
		"name": "Illuminate\\Auth\\Console\\ClearResetsCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Console\\ClearResetsCommand",
		"fromLink": "Illuminate/Auth/Console/ClearResetsCommand.html",
		"link": "Illuminate/Auth/Console/ClearResetsCommand.html#method_handle",
		"name": "Illuminate\\Auth\\Console\\ClearResetsCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/CreatesUserProviders.html",
		"name": "Illuminate\\Auth\\CreatesUserProviders",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\CreatesUserProviders",
		"fromLink": "Illuminate/Auth/CreatesUserProviders.html",
		"link": "Illuminate/Auth/CreatesUserProviders.html#method_createUserProvider",
		"name": "Illuminate\\Auth\\CreatesUserProviders::createUserProvider",
		"doc": "Create the user provider implementation for the driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\CreatesUserProviders",
		"fromLink": "Illuminate/Auth/CreatesUserProviders.html",
		"link": "Illuminate/Auth/CreatesUserProviders.html#method_getProviderConfiguration",
		"name": "Illuminate\\Auth\\CreatesUserProviders::getProviderConfiguration",
		"doc": "Get the user provider configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\CreatesUserProviders",
		"fromLink": "Illuminate/Auth/CreatesUserProviders.html",
		"link": "Illuminate/Auth/CreatesUserProviders.html#method_createDatabaseProvider",
		"name": "Illuminate\\Auth\\CreatesUserProviders::createDatabaseProvider",
		"doc": "Create an instance of the database user provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\CreatesUserProviders",
		"fromLink": "Illuminate/Auth/CreatesUserProviders.html",
		"link": "Illuminate/Auth/CreatesUserProviders.html#method_createEloquentProvider",
		"name": "Illuminate\\Auth\\CreatesUserProviders::createEloquentProvider",
		"doc": "Create an instance of the Eloquent user provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\CreatesUserProviders",
		"fromLink": "Illuminate/Auth/CreatesUserProviders.html",
		"link": "Illuminate/Auth/CreatesUserProviders.html#method_getDefaultUserProvider",
		"name": "Illuminate\\Auth\\CreatesUserProviders::getDefaultUserProvider",
		"doc": "Get the default user provider name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/DatabaseUserProvider.html",
		"name": "Illuminate\\Auth\\DatabaseUserProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\DatabaseUserProvider",
		"fromLink": "Illuminate/Auth/DatabaseUserProvider.html",
		"link": "Illuminate/Auth/DatabaseUserProvider.html#method___construct",
		"name": "Illuminate\\Auth\\DatabaseUserProvider::__construct",
		"doc": "Create a new database user provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\DatabaseUserProvider",
		"fromLink": "Illuminate/Auth/DatabaseUserProvider.html",
		"link": "Illuminate/Auth/DatabaseUserProvider.html#method_retrieveById",
		"name": "Illuminate\\Auth\\DatabaseUserProvider::retrieveById",
		"doc": "Retrieve a user by their unique identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\DatabaseUserProvider",
		"fromLink": "Illuminate/Auth/DatabaseUserProvider.html",
		"link": "Illuminate/Auth/DatabaseUserProvider.html#method_retrieveByToken",
		"name": "Illuminate\\Auth\\DatabaseUserProvider::retrieveByToken",
		"doc": "Retrieve a user by their unique identifier and \"remember me\" token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\DatabaseUserProvider",
		"fromLink": "Illuminate/Auth/DatabaseUserProvider.html",
		"link": "Illuminate/Auth/DatabaseUserProvider.html#method_updateRememberToken",
		"name": "Illuminate\\Auth\\DatabaseUserProvider::updateRememberToken",
		"doc": "Update the \"remember me\" token for the given user in storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\DatabaseUserProvider",
		"fromLink": "Illuminate/Auth/DatabaseUserProvider.html",
		"link": "Illuminate/Auth/DatabaseUserProvider.html#method_retrieveByCredentials",
		"name": "Illuminate\\Auth\\DatabaseUserProvider::retrieveByCredentials",
		"doc": "Retrieve a user by the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\DatabaseUserProvider",
		"fromLink": "Illuminate/Auth/DatabaseUserProvider.html",
		"link": "Illuminate/Auth/DatabaseUserProvider.html#method_getGenericUser",
		"name": "Illuminate\\Auth\\DatabaseUserProvider::getGenericUser",
		"doc": "Get the generic user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\DatabaseUserProvider",
		"fromLink": "Illuminate/Auth/DatabaseUserProvider.html",
		"link": "Illuminate/Auth/DatabaseUserProvider.html#method_validateCredentials",
		"name": "Illuminate\\Auth\\DatabaseUserProvider::validateCredentials",
		"doc": "Validate a user against the given credentials."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html",
		"name": "Illuminate\\Auth\\EloquentUserProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method___construct",
		"name": "Illuminate\\Auth\\EloquentUserProvider::__construct",
		"doc": "Create a new database user provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_retrieveById",
		"name": "Illuminate\\Auth\\EloquentUserProvider::retrieveById",
		"doc": "Retrieve a user by their unique identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_retrieveByToken",
		"name": "Illuminate\\Auth\\EloquentUserProvider::retrieveByToken",
		"doc": "Retrieve a user by their unique identifier and \"remember me\" token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_updateRememberToken",
		"name": "Illuminate\\Auth\\EloquentUserProvider::updateRememberToken",
		"doc": "Update the \"remember me\" token for the given user in storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_retrieveByCredentials",
		"name": "Illuminate\\Auth\\EloquentUserProvider::retrieveByCredentials",
		"doc": "Retrieve a user by the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_firstCredentialKey",
		"name": "Illuminate\\Auth\\EloquentUserProvider::firstCredentialKey",
		"doc": "Get the first key from the credential array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_validateCredentials",
		"name": "Illuminate\\Auth\\EloquentUserProvider::validateCredentials",
		"doc": "Validate a user against the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_newModelQuery",
		"name": "Illuminate\\Auth\\EloquentUserProvider::newModelQuery",
		"doc": "Get a new query builder for the model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_createModel",
		"name": "Illuminate\\Auth\\EloquentUserProvider::createModel",
		"doc": "Create a new instance of the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_getHasher",
		"name": "Illuminate\\Auth\\EloquentUserProvider::getHasher",
		"doc": "Gets the hasher implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_setHasher",
		"name": "Illuminate\\Auth\\EloquentUserProvider::setHasher",
		"doc": "Sets the hasher implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_getModel",
		"name": "Illuminate\\Auth\\EloquentUserProvider::getModel",
		"doc": "Gets the name of the Eloquent user model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\EloquentUserProvider",
		"fromLink": "Illuminate/Auth/EloquentUserProvider.html",
		"link": "Illuminate/Auth/EloquentUserProvider.html#method_setModel",
		"name": "Illuminate\\Auth\\EloquentUserProvider::setModel",
		"doc": "Sets the name of the Eloquent user model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Attempting.html",
		"name": "Illuminate\\Auth\\Events\\Attempting",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Attempting",
		"fromLink": "Illuminate/Auth/Events/Attempting.html",
		"link": "Illuminate/Auth/Events/Attempting.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Attempting::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Authenticated.html",
		"name": "Illuminate\\Auth\\Events\\Authenticated",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Authenticated",
		"fromLink": "Illuminate/Auth/Events/Authenticated.html",
		"link": "Illuminate/Auth/Events/Authenticated.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Authenticated::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/CurrentDeviceLogout.html",
		"name": "Illuminate\\Auth\\Events\\CurrentDeviceLogout",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\CurrentDeviceLogout",
		"fromLink": "Illuminate/Auth/Events/CurrentDeviceLogout.html",
		"link": "Illuminate/Auth/Events/CurrentDeviceLogout.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\CurrentDeviceLogout::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Failed.html",
		"name": "Illuminate\\Auth\\Events\\Failed",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Failed",
		"fromLink": "Illuminate/Auth/Events/Failed.html",
		"link": "Illuminate/Auth/Events/Failed.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Failed::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Lockout.html",
		"name": "Illuminate\\Auth\\Events\\Lockout",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Lockout",
		"fromLink": "Illuminate/Auth/Events/Lockout.html",
		"link": "Illuminate/Auth/Events/Lockout.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Lockout::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Login.html",
		"name": "Illuminate\\Auth\\Events\\Login",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Login",
		"fromLink": "Illuminate/Auth/Events/Login.html",
		"link": "Illuminate/Auth/Events/Login.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Login::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Logout.html",
		"name": "Illuminate\\Auth\\Events\\Logout",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Logout",
		"fromLink": "Illuminate/Auth/Events/Logout.html",
		"link": "Illuminate/Auth/Events/Logout.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Logout::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/OtherDeviceLogout.html",
		"name": "Illuminate\\Auth\\Events\\OtherDeviceLogout",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\OtherDeviceLogout",
		"fromLink": "Illuminate/Auth/Events/OtherDeviceLogout.html",
		"link": "Illuminate/Auth/Events/OtherDeviceLogout.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\OtherDeviceLogout::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/PasswordReset.html",
		"name": "Illuminate\\Auth\\Events\\PasswordReset",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\PasswordReset",
		"fromLink": "Illuminate/Auth/Events/PasswordReset.html",
		"link": "Illuminate/Auth/Events/PasswordReset.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\PasswordReset::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Registered.html",
		"name": "Illuminate\\Auth\\Events\\Registered",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Registered",
		"fromLink": "Illuminate/Auth/Events/Registered.html",
		"link": "Illuminate/Auth/Events/Registered.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Registered::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Validated.html",
		"name": "Illuminate\\Auth\\Events\\Validated",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Validated",
		"fromLink": "Illuminate/Auth/Events/Validated.html",
		"link": "Illuminate/Auth/Events/Validated.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Validated::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Events",
		"fromLink": "Illuminate/Auth/Events.html",
		"link": "Illuminate/Auth/Events/Verified.html",
		"name": "Illuminate\\Auth\\Events\\Verified",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Events\\Verified",
		"fromLink": "Illuminate/Auth/Events/Verified.html",
		"link": "Illuminate/Auth/Events/Verified.html#method___construct",
		"name": "Illuminate\\Auth\\Events\\Verified::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/GenericUser.html",
		"name": "Illuminate\\Auth\\GenericUser",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method___construct",
		"name": "Illuminate\\Auth\\GenericUser::__construct",
		"doc": "Create a new generic User object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method_getAuthIdentifierName",
		"name": "Illuminate\\Auth\\GenericUser::getAuthIdentifierName",
		"doc": "Get the name of the unique identifier for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method_getAuthIdentifier",
		"name": "Illuminate\\Auth\\GenericUser::getAuthIdentifier",
		"doc": "Get the unique identifier for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method_getAuthPassword",
		"name": "Illuminate\\Auth\\GenericUser::getAuthPassword",
		"doc": "Get the password for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method_getRememberToken",
		"name": "Illuminate\\Auth\\GenericUser::getRememberToken",
		"doc": "Get the \"remember me\" token value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method_setRememberToken",
		"name": "Illuminate\\Auth\\GenericUser::setRememberToken",
		"doc": "Set the \"remember me\" token value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method_getRememberTokenName",
		"name": "Illuminate\\Auth\\GenericUser::getRememberTokenName",
		"doc": "Get the column name for the \"remember me\" token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method___get",
		"name": "Illuminate\\Auth\\GenericUser::__get",
		"doc": "Dynamically access the user's attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method___set",
		"name": "Illuminate\\Auth\\GenericUser::__set",
		"doc": "Dynamically set an attribute on the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method___isset",
		"name": "Illuminate\\Auth\\GenericUser::__isset",
		"doc": "Dynamically check if a value is set on the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GenericUser",
		"fromLink": "Illuminate/Auth/GenericUser.html",
		"link": "Illuminate/Auth/GenericUser.html#method___unset",
		"name": "Illuminate\\Auth\\GenericUser::__unset",
		"doc": "Dynamically unset a value on the user."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/GuardHelpers.html",
		"name": "Illuminate\\Auth\\GuardHelpers",
		"doc": "These methods are typically the same across all guards."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GuardHelpers",
		"fromLink": "Illuminate/Auth/GuardHelpers.html",
		"link": "Illuminate/Auth/GuardHelpers.html#method_authenticate",
		"name": "Illuminate\\Auth\\GuardHelpers::authenticate",
		"doc": "Determine if current user is authenticated. If not, throw an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GuardHelpers",
		"fromLink": "Illuminate/Auth/GuardHelpers.html",
		"link": "Illuminate/Auth/GuardHelpers.html#method_hasUser",
		"name": "Illuminate\\Auth\\GuardHelpers::hasUser",
		"doc": "Determine if the guard has a user instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GuardHelpers",
		"fromLink": "Illuminate/Auth/GuardHelpers.html",
		"link": "Illuminate/Auth/GuardHelpers.html#method_check",
		"name": "Illuminate\\Auth\\GuardHelpers::check",
		"doc": "Determine if the current user is authenticated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GuardHelpers",
		"fromLink": "Illuminate/Auth/GuardHelpers.html",
		"link": "Illuminate/Auth/GuardHelpers.html#method_guest",
		"name": "Illuminate\\Auth\\GuardHelpers::guest",
		"doc": "Determine if the current user is a guest."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GuardHelpers",
		"fromLink": "Illuminate/Auth/GuardHelpers.html",
		"link": "Illuminate/Auth/GuardHelpers.html#method_id",
		"name": "Illuminate\\Auth\\GuardHelpers::id",
		"doc": "Get the ID for the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GuardHelpers",
		"fromLink": "Illuminate/Auth/GuardHelpers.html",
		"link": "Illuminate/Auth/GuardHelpers.html#method_setUser",
		"name": "Illuminate\\Auth\\GuardHelpers::setUser",
		"doc": "Set the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GuardHelpers",
		"fromLink": "Illuminate/Auth/GuardHelpers.html",
		"link": "Illuminate/Auth/GuardHelpers.html#method_getProvider",
		"name": "Illuminate\\Auth\\GuardHelpers::getProvider",
		"doc": "Get the user provider used by the guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\GuardHelpers",
		"fromLink": "Illuminate/Auth/GuardHelpers.html",
		"link": "Illuminate/Auth/GuardHelpers.html#method_setProvider",
		"name": "Illuminate\\Auth\\GuardHelpers::setProvider",
		"doc": "Set the user provider used by the guard."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Listeners",
		"fromLink": "Illuminate/Auth/Listeners.html",
		"link": "Illuminate/Auth/Listeners/SendEmailVerificationNotification.html",
		"name": "Illuminate\\Auth\\Listeners\\SendEmailVerificationNotification",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Listeners\\SendEmailVerificationNotification",
		"fromLink": "Illuminate/Auth/Listeners/SendEmailVerificationNotification.html",
		"link": "Illuminate/Auth/Listeners/SendEmailVerificationNotification.html#method_handle",
		"name": "Illuminate\\Auth\\Listeners\\SendEmailVerificationNotification::handle",
		"doc": "Handle the event."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Middleware",
		"fromLink": "Illuminate/Auth/Middleware.html",
		"link": "Illuminate/Auth/Middleware/Authenticate.html",
		"name": "Illuminate\\Auth\\Middleware\\Authenticate",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authenticate",
		"fromLink": "Illuminate/Auth/Middleware/Authenticate.html",
		"link": "Illuminate/Auth/Middleware/Authenticate.html#method___construct",
		"name": "Illuminate\\Auth\\Middleware\\Authenticate::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authenticate",
		"fromLink": "Illuminate/Auth/Middleware/Authenticate.html",
		"link": "Illuminate/Auth/Middleware/Authenticate.html#method_handle",
		"name": "Illuminate\\Auth\\Middleware\\Authenticate::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authenticate",
		"fromLink": "Illuminate/Auth/Middleware/Authenticate.html",
		"link": "Illuminate/Auth/Middleware/Authenticate.html#method_authenticate",
		"name": "Illuminate\\Auth\\Middleware\\Authenticate::authenticate",
		"doc": "Determine if the user is logged in to any of the given guards."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authenticate",
		"fromLink": "Illuminate/Auth/Middleware/Authenticate.html",
		"link": "Illuminate/Auth/Middleware/Authenticate.html#method_unauthenticated",
		"name": "Illuminate\\Auth\\Middleware\\Authenticate::unauthenticated",
		"doc": "Handle an unauthenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authenticate",
		"fromLink": "Illuminate/Auth/Middleware/Authenticate.html",
		"link": "Illuminate/Auth/Middleware/Authenticate.html#method_redirectTo",
		"name": "Illuminate\\Auth\\Middleware\\Authenticate::redirectTo",
		"doc": "Get the path the user should be redirected to when they are not authenticated."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Middleware",
		"fromLink": "Illuminate/Auth/Middleware.html",
		"link": "Illuminate/Auth/Middleware/AuthenticateWithBasicAuth.html",
		"name": "Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth",
		"fromLink": "Illuminate/Auth/Middleware/AuthenticateWithBasicAuth.html",
		"link": "Illuminate/Auth/Middleware/AuthenticateWithBasicAuth.html#method___construct",
		"name": "Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth",
		"fromLink": "Illuminate/Auth/Middleware/AuthenticateWithBasicAuth.html",
		"link": "Illuminate/Auth/Middleware/AuthenticateWithBasicAuth.html#method_handle",
		"name": "Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::handle",
		"doc": "Handle an incoming request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Middleware",
		"fromLink": "Illuminate/Auth/Middleware.html",
		"link": "Illuminate/Auth/Middleware/Authorize.html",
		"name": "Illuminate\\Auth\\Middleware\\Authorize",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authorize",
		"fromLink": "Illuminate/Auth/Middleware/Authorize.html",
		"link": "Illuminate/Auth/Middleware/Authorize.html#method___construct",
		"name": "Illuminate\\Auth\\Middleware\\Authorize::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authorize",
		"fromLink": "Illuminate/Auth/Middleware/Authorize.html",
		"link": "Illuminate/Auth/Middleware/Authorize.html#method_handle",
		"name": "Illuminate\\Auth\\Middleware\\Authorize::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authorize",
		"fromLink": "Illuminate/Auth/Middleware/Authorize.html",
		"link": "Illuminate/Auth/Middleware/Authorize.html#method_getGateArguments",
		"name": "Illuminate\\Auth\\Middleware\\Authorize::getGateArguments",
		"doc": "Get the arguments parameter for the gate."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authorize",
		"fromLink": "Illuminate/Auth/Middleware/Authorize.html",
		"link": "Illuminate/Auth/Middleware/Authorize.html#method_getModel",
		"name": "Illuminate\\Auth\\Middleware\\Authorize::getModel",
		"doc": "Get the model to authorize."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\Authorize",
		"fromLink": "Illuminate/Auth/Middleware/Authorize.html",
		"link": "Illuminate/Auth/Middleware/Authorize.html#method_isClassName",
		"name": "Illuminate\\Auth\\Middleware\\Authorize::isClassName",
		"doc": "Checks if the given string looks like a fully qualified class name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Middleware",
		"fromLink": "Illuminate/Auth/Middleware.html",
		"link": "Illuminate/Auth/Middleware/EnsureEmailIsVerified.html",
		"name": "Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified",
		"fromLink": "Illuminate/Auth/Middleware/EnsureEmailIsVerified.html",
		"link": "Illuminate/Auth/Middleware/EnsureEmailIsVerified.html#method_handle",
		"name": "Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::handle",
		"doc": "Handle an incoming request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Middleware",
		"fromLink": "Illuminate/Auth/Middleware.html",
		"link": "Illuminate/Auth/Middleware/RequirePassword.html",
		"name": "Illuminate\\Auth\\Middleware\\RequirePassword",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\RequirePassword",
		"fromLink": "Illuminate/Auth/Middleware/RequirePassword.html",
		"link": "Illuminate/Auth/Middleware/RequirePassword.html#method___construct",
		"name": "Illuminate\\Auth\\Middleware\\RequirePassword::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\RequirePassword",
		"fromLink": "Illuminate/Auth/Middleware/RequirePassword.html",
		"link": "Illuminate/Auth/Middleware/RequirePassword.html#method_handle",
		"name": "Illuminate\\Auth\\Middleware\\RequirePassword::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Middleware\\RequirePassword",
		"fromLink": "Illuminate/Auth/Middleware/RequirePassword.html",
		"link": "Illuminate/Auth/Middleware/RequirePassword.html#method_shouldConfirmPassword",
		"name": "Illuminate\\Auth\\Middleware\\RequirePassword::shouldConfirmPassword",
		"doc": "Determine if the confirmation timeout has expired."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/MustVerifyEmail.html",
		"name": "Illuminate\\Auth\\MustVerifyEmail",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Auth/MustVerifyEmail.html#method_hasVerifiedEmail",
		"name": "Illuminate\\Auth\\MustVerifyEmail::hasVerifiedEmail",
		"doc": "Determine if the user has verified their email address."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Auth/MustVerifyEmail.html#method_markEmailAsVerified",
		"name": "Illuminate\\Auth\\MustVerifyEmail::markEmailAsVerified",
		"doc": "Mark the given user's email as verified."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Auth/MustVerifyEmail.html#method_sendEmailVerificationNotification",
		"name": "Illuminate\\Auth\\MustVerifyEmail::sendEmailVerificationNotification",
		"doc": "Send the email verification notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Auth/MustVerifyEmail.html#method_getEmailForVerification",
		"name": "Illuminate\\Auth\\MustVerifyEmail::getEmailForVerification",
		"doc": "Get the email address that should be used for verification."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Notifications",
		"fromLink": "Illuminate/Auth/Notifications.html",
		"link": "Illuminate/Auth/Notifications/ResetPassword.html",
		"name": "Illuminate\\Auth\\Notifications\\ResetPassword",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\ResetPassword",
		"fromLink": "Illuminate/Auth/Notifications/ResetPassword.html",
		"link": "Illuminate/Auth/Notifications/ResetPassword.html#method___construct",
		"name": "Illuminate\\Auth\\Notifications\\ResetPassword::__construct",
		"doc": "Create a notification instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\ResetPassword",
		"fromLink": "Illuminate/Auth/Notifications/ResetPassword.html",
		"link": "Illuminate/Auth/Notifications/ResetPassword.html#method_via",
		"name": "Illuminate\\Auth\\Notifications\\ResetPassword::via",
		"doc": "Get the notification's channels."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\ResetPassword",
		"fromLink": "Illuminate/Auth/Notifications/ResetPassword.html",
		"link": "Illuminate/Auth/Notifications/ResetPassword.html#method_toMail",
		"name": "Illuminate\\Auth\\Notifications\\ResetPassword::toMail",
		"doc": "Build the mail representation of the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\ResetPassword",
		"fromLink": "Illuminate/Auth/Notifications/ResetPassword.html",
		"link": "Illuminate/Auth/Notifications/ResetPassword.html#method_buildMailMessage",
		"name": "Illuminate\\Auth\\Notifications\\ResetPassword::buildMailMessage",
		"doc": "Get the reset password notification mail message for the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\ResetPassword",
		"fromLink": "Illuminate/Auth/Notifications/ResetPassword.html",
		"link": "Illuminate/Auth/Notifications/ResetPassword.html#method_createUrlUsing",
		"name": "Illuminate\\Auth\\Notifications\\ResetPassword::createUrlUsing",
		"doc": "Set a callback that should be used when creating the reset password button URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\ResetPassword",
		"fromLink": "Illuminate/Auth/Notifications/ResetPassword.html",
		"link": "Illuminate/Auth/Notifications/ResetPassword.html#method_toMailUsing",
		"name": "Illuminate\\Auth\\Notifications\\ResetPassword::toMailUsing",
		"doc": "Set a callback that should be used when building the notification mail message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Notifications",
		"fromLink": "Illuminate/Auth/Notifications.html",
		"link": "Illuminate/Auth/Notifications/VerifyEmail.html",
		"name": "Illuminate\\Auth\\Notifications\\VerifyEmail",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\VerifyEmail",
		"fromLink": "Illuminate/Auth/Notifications/VerifyEmail.html",
		"link": "Illuminate/Auth/Notifications/VerifyEmail.html#method_via",
		"name": "Illuminate\\Auth\\Notifications\\VerifyEmail::via",
		"doc": "Get the notification's channels."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\VerifyEmail",
		"fromLink": "Illuminate/Auth/Notifications/VerifyEmail.html",
		"link": "Illuminate/Auth/Notifications/VerifyEmail.html#method_toMail",
		"name": "Illuminate\\Auth\\Notifications\\VerifyEmail::toMail",
		"doc": "Build the mail representation of the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\VerifyEmail",
		"fromLink": "Illuminate/Auth/Notifications/VerifyEmail.html",
		"link": "Illuminate/Auth/Notifications/VerifyEmail.html#method_buildMailMessage",
		"name": "Illuminate\\Auth\\Notifications\\VerifyEmail::buildMailMessage",
		"doc": "Get the verify email notification mail message for the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\VerifyEmail",
		"fromLink": "Illuminate/Auth/Notifications/VerifyEmail.html",
		"link": "Illuminate/Auth/Notifications/VerifyEmail.html#method_verificationUrl",
		"name": "Illuminate\\Auth\\Notifications\\VerifyEmail::verificationUrl",
		"doc": "Get the verification URL for the given notifiable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\VerifyEmail",
		"fromLink": "Illuminate/Auth/Notifications/VerifyEmail.html",
		"link": "Illuminate/Auth/Notifications/VerifyEmail.html#method_createUrlUsing",
		"name": "Illuminate\\Auth\\Notifications\\VerifyEmail::createUrlUsing",
		"doc": "Set a callback that should be used when creating the email verification URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Notifications\\VerifyEmail",
		"fromLink": "Illuminate/Auth/Notifications/VerifyEmail.html",
		"link": "Illuminate/Auth/Notifications/VerifyEmail.html#method_toMailUsing",
		"name": "Illuminate\\Auth\\Notifications\\VerifyEmail::toMailUsing",
		"doc": "Set a callback that should be used when building the notification mail message."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Auth\\Passwords",
		"fromLink": "Illuminate/Auth/Passwords.html",
		"link": "Illuminate/Auth/Passwords/CanResetPassword.html",
		"name": "Illuminate\\Auth\\Passwords\\CanResetPassword",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\CanResetPassword",
		"fromLink": "Illuminate/Auth/Passwords/CanResetPassword.html",
		"link": "Illuminate/Auth/Passwords/CanResetPassword.html#method_getEmailForPasswordReset",
		"name": "Illuminate\\Auth\\Passwords\\CanResetPassword::getEmailForPasswordReset",
		"doc": "Get the e-mail address where password reset links are sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\CanResetPassword",
		"fromLink": "Illuminate/Auth/Passwords/CanResetPassword.html",
		"link": "Illuminate/Auth/Passwords/CanResetPassword.html#method_sendPasswordResetNotification",
		"name": "Illuminate\\Auth\\Passwords\\CanResetPassword::sendPasswordResetNotification",
		"doc": "Send the password reset notification."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Passwords",
		"fromLink": "Illuminate/Auth/Passwords.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method___construct",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::__construct",
		"doc": "Create a new token repository instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_create",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::create",
		"doc": "Create a new token record."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_deleteExisting",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::deleteExisting",
		"doc": "Delete all existing reset tokens from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_getPayload",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::getPayload",
		"doc": "Build the record payload for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_exists",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::exists",
		"doc": "Determine if a token record exists and is valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_tokenExpired",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::tokenExpired",
		"doc": "Determine if the token has expired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_recentlyCreatedToken",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::recentlyCreatedToken",
		"doc": "Determine if the given user recently created a password reset token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_tokenRecentlyCreated",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::tokenRecentlyCreated",
		"doc": "Determine if the token was recently created."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_delete",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::delete",
		"doc": "Delete a token record by user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_deleteExpired",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::deleteExpired",
		"doc": "Delete expired tokens."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_createNewToken",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::createNewToken",
		"doc": "Create a new token for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_getConnection",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::getConnection",
		"doc": "Get the database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_getTable",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::getTable",
		"doc": "Begin a new database query against the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository",
		"fromLink": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html",
		"link": "Illuminate/Auth/Passwords/DatabaseTokenRepository.html#method_getHasher",
		"name": "Illuminate\\Auth\\Passwords\\DatabaseTokenRepository::getHasher",
		"doc": "Get the hasher instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Passwords",
		"fromLink": "Illuminate/Auth/Passwords.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method___construct",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::__construct",
		"doc": "Create a new password broker instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method_sendResetLink",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::sendResetLink",
		"doc": "Send a password reset link to a user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method_reset",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::reset",
		"doc": "Reset the password for the given token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method_validateReset",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::validateReset",
		"doc": "Validate a password reset for the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method_getUser",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::getUser",
		"doc": "Get the user for the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method_createToken",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::createToken",
		"doc": "Create a new password reset token for the given user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method_deleteToken",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::deleteToken",
		"doc": "Delete password reset tokens of the given user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method_tokenExists",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::tokenExists",
		"doc": "Validate the given password reset token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBroker",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBroker.html",
		"link": "Illuminate/Auth/Passwords/PasswordBroker.html#method_getRepository",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBroker::getRepository",
		"doc": "Get the password reset token repository implementation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Passwords",
		"fromLink": "Illuminate/Auth/Passwords.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html#method___construct",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager::__construct",
		"doc": "Create a new PasswordBroker manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html#method_broker",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager::broker",
		"doc": "Attempt to get the broker from the local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html#method_resolve",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager::resolve",
		"doc": "Resolve the given broker."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html#method_createTokenRepository",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager::createTokenRepository",
		"doc": "Create a token repository instance based on the given configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html#method_getConfig",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager::getConfig",
		"doc": "Get the password broker configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager::getDefaultDriver",
		"doc": "Get the default password broker name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html#method_setDefaultDriver",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager::setDefaultDriver",
		"doc": "Set the default password broker name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager",
		"fromLink": "Illuminate/Auth/Passwords/PasswordBrokerManager.html",
		"link": "Illuminate/Auth/Passwords/PasswordBrokerManager.html#method___call",
		"name": "Illuminate\\Auth\\Passwords\\PasswordBrokerManager::__call",
		"doc": "Dynamically call the default driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Passwords",
		"fromLink": "Illuminate/Auth/Passwords.html",
		"link": "Illuminate/Auth/Passwords/PasswordResetServiceProvider.html",
		"name": "Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider",
		"fromLink": "Illuminate/Auth/Passwords/PasswordResetServiceProvider.html",
		"link": "Illuminate/Auth/Passwords/PasswordResetServiceProvider.html#method_register",
		"name": "Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider",
		"fromLink": "Illuminate/Auth/Passwords/PasswordResetServiceProvider.html",
		"link": "Illuminate/Auth/Passwords/PasswordResetServiceProvider.html#method_registerPasswordBroker",
		"name": "Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider::registerPasswordBroker",
		"doc": "Register the password broker instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider",
		"fromLink": "Illuminate/Auth/Passwords/PasswordResetServiceProvider.html",
		"link": "Illuminate/Auth/Passwords/PasswordResetServiceProvider.html#method_provides",
		"name": "Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth\\Passwords",
		"fromLink": "Illuminate/Auth/Passwords.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_create",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::create",
		"doc": "Create a new token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_exists",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::exists",
		"doc": "Determine if a token record exists and is valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_recentlyCreatedToken",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::recentlyCreatedToken",
		"doc": "Determine if the given user recently created a password reset token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_delete",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::delete",
		"doc": "Delete a token record."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface",
		"fromLink": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html",
		"link": "Illuminate/Auth/Passwords/TokenRepositoryInterface.html#method_deleteExpired",
		"name": "Illuminate\\Auth\\Passwords\\TokenRepositoryInterface::deleteExpired",
		"doc": "Delete expired tokens."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/Recaller.html",
		"name": "Illuminate\\Auth\\Recaller",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Recaller",
		"fromLink": "Illuminate/Auth/Recaller.html",
		"link": "Illuminate/Auth/Recaller.html#method___construct",
		"name": "Illuminate\\Auth\\Recaller::__construct",
		"doc": "Create a new recaller instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Recaller",
		"fromLink": "Illuminate/Auth/Recaller.html",
		"link": "Illuminate/Auth/Recaller.html#method_id",
		"name": "Illuminate\\Auth\\Recaller::id",
		"doc": "Get the user ID from the recaller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Recaller",
		"fromLink": "Illuminate/Auth/Recaller.html",
		"link": "Illuminate/Auth/Recaller.html#method_token",
		"name": "Illuminate\\Auth\\Recaller::token",
		"doc": "Get the \"remember token\" token from the recaller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Recaller",
		"fromLink": "Illuminate/Auth/Recaller.html",
		"link": "Illuminate/Auth/Recaller.html#method_hash",
		"name": "Illuminate\\Auth\\Recaller::hash",
		"doc": "Get the password from the recaller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Recaller",
		"fromLink": "Illuminate/Auth/Recaller.html",
		"link": "Illuminate/Auth/Recaller.html#method_valid",
		"name": "Illuminate\\Auth\\Recaller::valid",
		"doc": "Determine if the recaller is valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Recaller",
		"fromLink": "Illuminate/Auth/Recaller.html",
		"link": "Illuminate/Auth/Recaller.html#method_properString",
		"name": "Illuminate\\Auth\\Recaller::properString",
		"doc": "Determine if the recaller is an invalid string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\Recaller",
		"fromLink": "Illuminate/Auth/Recaller.html",
		"link": "Illuminate/Auth/Recaller.html#method_hasAllSegments",
		"name": "Illuminate\\Auth\\Recaller::hasAllSegments",
		"doc": "Determine if the recaller has all segments."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/RequestGuard.html",
		"name": "Illuminate\\Auth\\RequestGuard",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\RequestGuard",
		"fromLink": "Illuminate/Auth/RequestGuard.html",
		"link": "Illuminate/Auth/RequestGuard.html#method___construct",
		"name": "Illuminate\\Auth\\RequestGuard::__construct",
		"doc": "Create a new authentication guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\RequestGuard",
		"fromLink": "Illuminate/Auth/RequestGuard.html",
		"link": "Illuminate/Auth/RequestGuard.html#method_user",
		"name": "Illuminate\\Auth\\RequestGuard::user",
		"doc": "Get the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\RequestGuard",
		"fromLink": "Illuminate/Auth/RequestGuard.html",
		"link": "Illuminate/Auth/RequestGuard.html#method_validate",
		"name": "Illuminate\\Auth\\RequestGuard::validate",
		"doc": "Validate a user's credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\RequestGuard",
		"fromLink": "Illuminate/Auth/RequestGuard.html",
		"link": "Illuminate/Auth/RequestGuard.html#method_setRequest",
		"name": "Illuminate\\Auth\\RequestGuard::setRequest",
		"doc": "Set the current request instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/SessionGuard.html",
		"name": "Illuminate\\Auth\\SessionGuard",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method___construct",
		"name": "Illuminate\\Auth\\SessionGuard::__construct",
		"doc": "Create a new authentication guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_user",
		"name": "Illuminate\\Auth\\SessionGuard::user",
		"doc": "Get the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_userFromRecaller",
		"name": "Illuminate\\Auth\\SessionGuard::userFromRecaller",
		"doc": "Pull a user from the repository by its \"remember me\" cookie token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_recaller",
		"name": "Illuminate\\Auth\\SessionGuard::recaller",
		"doc": "Get the decrypted recaller cookie for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_id",
		"name": "Illuminate\\Auth\\SessionGuard::id",
		"doc": "Get the ID for the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_once",
		"name": "Illuminate\\Auth\\SessionGuard::once",
		"doc": "Log a user into the application without sessions or cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_onceUsingId",
		"name": "Illuminate\\Auth\\SessionGuard::onceUsingId",
		"doc": "Log the given user ID into the application without sessions or cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_validate",
		"name": "Illuminate\\Auth\\SessionGuard::validate",
		"doc": "Validate a user's credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_basic",
		"name": "Illuminate\\Auth\\SessionGuard::basic",
		"doc": "Attempt to authenticate using HTTP Basic Auth."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_onceBasic",
		"name": "Illuminate\\Auth\\SessionGuard::onceBasic",
		"doc": "Perform a stateless HTTP Basic login attempt."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_attemptBasic",
		"name": "Illuminate\\Auth\\SessionGuard::attemptBasic",
		"doc": "Attempt to authenticate using basic authentication."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_basicCredentials",
		"name": "Illuminate\\Auth\\SessionGuard::basicCredentials",
		"doc": "Get the credential array for a HTTP Basic request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_failedBasicResponse",
		"name": "Illuminate\\Auth\\SessionGuard::failedBasicResponse",
		"doc": "Get the response for basic authentication."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_attempt",
		"name": "Illuminate\\Auth\\SessionGuard::attempt",
		"doc": "Attempt to authenticate a user using the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_hasValidCredentials",
		"name": "Illuminate\\Auth\\SessionGuard::hasValidCredentials",
		"doc": "Determine if the user matches the credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_loginUsingId",
		"name": "Illuminate\\Auth\\SessionGuard::loginUsingId",
		"doc": "Log the given user ID into the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_login",
		"name": "Illuminate\\Auth\\SessionGuard::login",
		"doc": "Log a user into the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_updateSession",
		"name": "Illuminate\\Auth\\SessionGuard::updateSession",
		"doc": "Update the session with the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_ensureRememberTokenIsSet",
		"name": "Illuminate\\Auth\\SessionGuard::ensureRememberTokenIsSet",
		"doc": "Create a new \"remember me\" token for the user if one doesn't already exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_queueRecallerCookie",
		"name": "Illuminate\\Auth\\SessionGuard::queueRecallerCookie",
		"doc": "Queue the recaller cookie into the cookie jar."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_createRecaller",
		"name": "Illuminate\\Auth\\SessionGuard::createRecaller",
		"doc": "Create a \"remember me\" cookie for a given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_logout",
		"name": "Illuminate\\Auth\\SessionGuard::logout",
		"doc": "Log the user out of the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_logoutCurrentDevice",
		"name": "Illuminate\\Auth\\SessionGuard::logoutCurrentDevice",
		"doc": "Log the user out of the application on their current device only."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_clearUserDataFromStorage",
		"name": "Illuminate\\Auth\\SessionGuard::clearUserDataFromStorage",
		"doc": "Remove the user data from the session and cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_cycleRememberToken",
		"name": "Illuminate\\Auth\\SessionGuard::cycleRememberToken",
		"doc": "Refresh the \"remember me\" token for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_logoutOtherDevices",
		"name": "Illuminate\\Auth\\SessionGuard::logoutOtherDevices",
		"doc": "Invalidate other sessions for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_attempting",
		"name": "Illuminate\\Auth\\SessionGuard::attempting",
		"doc": "Register an authentication attempt event listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_fireAttemptEvent",
		"name": "Illuminate\\Auth\\SessionGuard::fireAttemptEvent",
		"doc": "Fire the attempt event with the arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_fireValidatedEvent",
		"name": "Illuminate\\Auth\\SessionGuard::fireValidatedEvent",
		"doc": "Fires the validated event if the dispatcher is set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_fireLoginEvent",
		"name": "Illuminate\\Auth\\SessionGuard::fireLoginEvent",
		"doc": "Fire the login event if the dispatcher is set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_fireAuthenticatedEvent",
		"name": "Illuminate\\Auth\\SessionGuard::fireAuthenticatedEvent",
		"doc": "Fire the authenticated event if the dispatcher is set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_fireOtherDeviceLogoutEvent",
		"name": "Illuminate\\Auth\\SessionGuard::fireOtherDeviceLogoutEvent",
		"doc": "Fire the other device logout event if the dispatcher is set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_fireFailedEvent",
		"name": "Illuminate\\Auth\\SessionGuard::fireFailedEvent",
		"doc": "Fire the failed authentication attempt event with the given arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_getLastAttempted",
		"name": "Illuminate\\Auth\\SessionGuard::getLastAttempted",
		"doc": "Get the last user we attempted to authenticate."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_getName",
		"name": "Illuminate\\Auth\\SessionGuard::getName",
		"doc": "Get a unique identifier for the auth session value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_getRecallerName",
		"name": "Illuminate\\Auth\\SessionGuard::getRecallerName",
		"doc": "Get the name of the cookie used to store the \"recaller\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_viaRemember",
		"name": "Illuminate\\Auth\\SessionGuard::viaRemember",
		"doc": "Determine if the user was authenticated via \"remember me\" cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_getCookieJar",
		"name": "Illuminate\\Auth\\SessionGuard::getCookieJar",
		"doc": "Get the cookie creator instance used by the guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_setCookieJar",
		"name": "Illuminate\\Auth\\SessionGuard::setCookieJar",
		"doc": "Set the cookie creator instance used by the guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_getDispatcher",
		"name": "Illuminate\\Auth\\SessionGuard::getDispatcher",
		"doc": "Get the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_setDispatcher",
		"name": "Illuminate\\Auth\\SessionGuard::setDispatcher",
		"doc": "Set the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_getSession",
		"name": "Illuminate\\Auth\\SessionGuard::getSession",
		"doc": "Get the session store used by the guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_getUser",
		"name": "Illuminate\\Auth\\SessionGuard::getUser",
		"doc": "Return the currently cached user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_setUser",
		"name": "Illuminate\\Auth\\SessionGuard::setUser",
		"doc": "Set the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_getRequest",
		"name": "Illuminate\\Auth\\SessionGuard::getRequest",
		"doc": "Get the current request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\SessionGuard",
		"fromLink": "Illuminate/Auth/SessionGuard.html",
		"link": "Illuminate/Auth/SessionGuard.html#method_setRequest",
		"name": "Illuminate\\Auth\\SessionGuard::setRequest",
		"doc": "Set the current request instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Auth",
		"fromLink": "Illuminate/Auth.html",
		"link": "Illuminate/Auth/TokenGuard.html",
		"name": "Illuminate\\Auth\\TokenGuard",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\TokenGuard",
		"fromLink": "Illuminate/Auth/TokenGuard.html",
		"link": "Illuminate/Auth/TokenGuard.html#method___construct",
		"name": "Illuminate\\Auth\\TokenGuard::__construct",
		"doc": "Create a new authentication guard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\TokenGuard",
		"fromLink": "Illuminate/Auth/TokenGuard.html",
		"link": "Illuminate/Auth/TokenGuard.html#method_user",
		"name": "Illuminate\\Auth\\TokenGuard::user",
		"doc": "Get the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\TokenGuard",
		"fromLink": "Illuminate/Auth/TokenGuard.html",
		"link": "Illuminate/Auth/TokenGuard.html#method_getTokenForRequest",
		"name": "Illuminate\\Auth\\TokenGuard::getTokenForRequest",
		"doc": "Get the token for the current request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\TokenGuard",
		"fromLink": "Illuminate/Auth/TokenGuard.html",
		"link": "Illuminate/Auth/TokenGuard.html#method_validate",
		"name": "Illuminate\\Auth\\TokenGuard::validate",
		"doc": "Validate a user's credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Auth\\TokenGuard",
		"fromLink": "Illuminate/Auth/TokenGuard.html",
		"link": "Illuminate/Auth/TokenGuard.html#method_setRequest",
		"name": "Illuminate\\Auth\\TokenGuard::setRequest",
		"doc": "Set the current request instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/BroadcastController.html",
		"name": "Illuminate\\Broadcasting\\BroadcastController",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastController",
		"fromLink": "Illuminate/Broadcasting/BroadcastController.html",
		"link": "Illuminate/Broadcasting/BroadcastController.html#method_authenticate",
		"name": "Illuminate\\Broadcasting\\BroadcastController::authenticate",
		"doc": "Authenticate the request for channel access."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/BroadcastEvent.html",
		"name": "Illuminate\\Broadcasting\\BroadcastEvent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastEvent",
		"fromLink": "Illuminate/Broadcasting/BroadcastEvent.html",
		"link": "Illuminate/Broadcasting/BroadcastEvent.html#method___construct",
		"name": "Illuminate\\Broadcasting\\BroadcastEvent::__construct",
		"doc": "Create a new job handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastEvent",
		"fromLink": "Illuminate/Broadcasting/BroadcastEvent.html",
		"link": "Illuminate/Broadcasting/BroadcastEvent.html#method_handle",
		"name": "Illuminate\\Broadcasting\\BroadcastEvent::handle",
		"doc": "Handle the queued job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastEvent",
		"fromLink": "Illuminate/Broadcasting/BroadcastEvent.html",
		"link": "Illuminate/Broadcasting/BroadcastEvent.html#method_getPayloadFromEvent",
		"name": "Illuminate\\Broadcasting\\BroadcastEvent::getPayloadFromEvent",
		"doc": "Get the payload for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastEvent",
		"fromLink": "Illuminate/Broadcasting/BroadcastEvent.html",
		"link": "Illuminate/Broadcasting/BroadcastEvent.html#method_formatProperty",
		"name": "Illuminate\\Broadcasting\\BroadcastEvent::formatProperty",
		"doc": "Format the given value for a property."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastEvent",
		"fromLink": "Illuminate/Broadcasting/BroadcastEvent.html",
		"link": "Illuminate/Broadcasting/BroadcastEvent.html#method_displayName",
		"name": "Illuminate\\Broadcasting\\BroadcastEvent::displayName",
		"doc": "Get the display name for the queued job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastEvent",
		"fromLink": "Illuminate/Broadcasting/BroadcastEvent.html",
		"link": "Illuminate/Broadcasting/BroadcastEvent.html#method___clone",
		"name": "Illuminate\\Broadcasting\\BroadcastEvent::__clone",
		"doc": "Prepare the instance for cloning."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/BroadcastException.html",
		"name": "Illuminate\\Broadcasting\\BroadcastException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html",
		"name": "Illuminate\\Broadcasting\\BroadcastManager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method___construct",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::__construct",
		"doc": "Create a new manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_routes",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::routes",
		"doc": "Register the routes for handling broadcast authentication and sockets."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_socket",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::socket",
		"doc": "Get the socket ID for the given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_event",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::event",
		"doc": "Begin broadcasting an event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_queue",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::queue",
		"doc": "Queue the given event for broadcast."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_connection",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::connection",
		"doc": "Get a driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_driver",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::driver",
		"doc": "Get a driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_get",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::get",
		"doc": "Attempt to get the connection from the local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_resolve",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::resolve",
		"doc": "Resolve the given broadcaster."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_callCustomCreator",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::callCustomCreator",
		"doc": "Call a custom driver creator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_createPusherDriver",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::createPusherDriver",
		"doc": "Create an instance of the driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_createAblyDriver",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::createAblyDriver",
		"doc": "Create an instance of the driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_createRedisDriver",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::createRedisDriver",
		"doc": "Create an instance of the driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_createLogDriver",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::createLogDriver",
		"doc": "Create an instance of the driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_createNullDriver",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::createNullDriver",
		"doc": "Create an instance of the driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_getConfig",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::getConfig",
		"doc": "Get the connection configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::getDefaultDriver",
		"doc": "Get the default driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_setDefaultDriver",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::setDefaultDriver",
		"doc": "Set the default driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_purge",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::purge",
		"doc": "Disconnect the given disk and remove from local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method_extend",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::extend",
		"doc": "Register a custom driver creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastManager",
		"fromLink": "Illuminate/Broadcasting/BroadcastManager.html",
		"link": "Illuminate/Broadcasting/BroadcastManager.html#method___call",
		"name": "Illuminate\\Broadcasting\\BroadcastManager::__call",
		"doc": "Dynamically call the default driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/BroadcastServiceProvider.html",
		"name": "Illuminate\\Broadcasting\\BroadcastServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastServiceProvider",
		"fromLink": "Illuminate/Broadcasting/BroadcastServiceProvider.html",
		"link": "Illuminate/Broadcasting/BroadcastServiceProvider.html#method_register",
		"name": "Illuminate\\Broadcasting\\BroadcastServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\BroadcastServiceProvider",
		"fromLink": "Illuminate/Broadcasting/BroadcastServiceProvider.html",
		"link": "Illuminate/Broadcasting/BroadcastServiceProvider.html#method_provides",
		"name": "Illuminate\\Broadcasting\\BroadcastServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters",
		"fromLink": "Illuminate/Broadcasting/Broadcasters.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method___construct",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::__construct",
		"doc": "Create a new broadcaster instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_auth",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::auth",
		"doc": "Authenticate the incoming request for a given channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_validAuthenticationResponse",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::validAuthenticationResponse",
		"doc": "Return the valid authentication response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_generateAblySignature",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::generateAblySignature",
		"doc": "Generate the signature needed for Ably authentication headers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_broadcast",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::broadcast",
		"doc": "Broadcast the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_isGuardedChannel",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::isGuardedChannel",
		"doc": "Return true if channel is protected by authentication."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_normalizeChannelName",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::normalizeChannelName",
		"doc": "Remove prefix from channel name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_formatChannels",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::formatChannels",
		"doc": "Format the channel array into an array of strings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_getPublicToken",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::getPublicToken",
		"doc": "Get the public token value from the Ably key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_getPrivateToken",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::getPrivateToken",
		"doc": "Get the private token value from the Ably key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/AblyBroadcaster.html#method_getAbly",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\AblyBroadcaster::getAbly",
		"doc": "Get the underlying Ably SDK instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters",
		"fromLink": "Illuminate/Broadcasting/Broadcasters.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_channel",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::channel",
		"doc": "Register a channel authenticator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_verifyUserCanAccessChannel",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::verifyUserCanAccessChannel",
		"doc": "Authenticate the incoming request for a given channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_extractAuthParameters",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::extractAuthParameters",
		"doc": "Extract the parameters from the given pattern and channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_extractParameters",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::extractParameters",
		"doc": "Extracts the parameters out of what the user passed to handle the channel authentication."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_extractParametersFromClass",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::extractParametersFromClass",
		"doc": "Extracts the parameters out of a class channel's \"join\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_extractChannelKeys",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::extractChannelKeys",
		"doc": "Extract the channel keys from the incoming channel name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_resolveBinding",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::resolveBinding",
		"doc": "Resolve the given parameter binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_resolveExplicitBindingIfPossible",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::resolveExplicitBindingIfPossible",
		"doc": "Resolve an explicit parameter binding if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_resolveImplicitBindingIfPossible",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::resolveImplicitBindingIfPossible",
		"doc": "Resolve an implicit parameter binding if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_isImplicitlyBindable",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::isImplicitlyBindable",
		"doc": "Determine if a given key and parameter is implicitly bindable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_formatChannels",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::formatChannels",
		"doc": "Format the channel array into an array of strings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_binder",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::binder",
		"doc": "Get the model binding registrar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_normalizeChannelHandlerToCallable",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::normalizeChannelHandlerToCallable",
		"doc": "Normalize the given callback into a callable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_retrieveUser",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::retrieveUser",
		"doc": "Retrieve the authenticated user using the configured guard (if any)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_retrieveChannelOptions",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::retrieveChannelOptions",
		"doc": "Retrieve options for a certain channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/Broadcaster.html#method_channelNameMatchesPattern",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\Broadcaster::channelNameMatchesPattern",
		"doc": "Check if the channel name from the request matches a pattern from registered channels."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters",
		"fromLink": "Illuminate/Broadcasting/Broadcasters.html",
		"link": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html#method___construct",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster::__construct",
		"doc": "Create a new broadcaster instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html#method_auth",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster::auth",
		"doc": "Authenticate the incoming request for a given channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html#method_validAuthenticationResponse",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster::validAuthenticationResponse",
		"doc": "Return the valid authentication response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/LogBroadcaster.html#method_broadcast",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\LogBroadcaster::broadcast",
		"doc": "Broadcast the given event."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters",
		"fromLink": "Illuminate/Broadcasting/Broadcasters.html",
		"link": "Illuminate/Broadcasting/Broadcasters/NullBroadcaster.html",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\NullBroadcaster",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\NullBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/NullBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/NullBroadcaster.html#method_auth",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\NullBroadcaster::auth",
		"doc": "Authenticate the incoming request for a given channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\NullBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/NullBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/NullBroadcaster.html#method_validAuthenticationResponse",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\NullBroadcaster::validAuthenticationResponse",
		"doc": "Return the valid authentication response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\NullBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/NullBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/NullBroadcaster.html#method_broadcast",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\NullBroadcaster::broadcast",
		"doc": "Broadcast the given event."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters",
		"fromLink": "Illuminate/Broadcasting/Broadcasters.html",
		"link": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html#method___construct",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster::__construct",
		"doc": "Create a new broadcaster instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html#method_auth",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster::auth",
		"doc": "Authenticate the incoming request for a given channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html#method_validAuthenticationResponse",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster::validAuthenticationResponse",
		"doc": "Return the valid authentication response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html#method_decodePusherResponse",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster::decodePusherResponse",
		"doc": "Decode the given Pusher response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html#method_broadcast",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster::broadcast",
		"doc": "Broadcast the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.html#method_getPusher",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\PusherBroadcaster::getPusher",
		"doc": "Get the Pusher SDK instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters",
		"fromLink": "Illuminate/Broadcasting/Broadcasters.html",
		"link": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html#method___construct",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster::__construct",
		"doc": "Create a new broadcaster instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html#method_auth",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster::auth",
		"doc": "Authenticate the incoming request for a given channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html#method_validAuthenticationResponse",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster::validAuthenticationResponse",
		"doc": "Return the valid authentication response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html#method_broadcast",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster::broadcast",
		"doc": "Broadcast the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html#method_broadcastMultipleChannelsScript",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster::broadcastMultipleChannelsScript",
		"doc": "Get the Lua script for broadcasting to multiple channels."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html",
		"link": "Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.html#method_formatChannels",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\RedisBroadcaster::formatChannels",
		"doc": "Format the channel array into an array of strings."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters",
		"fromLink": "Illuminate/Broadcasting/Broadcasters.html",
		"link": "Illuminate/Broadcasting/Broadcasters/UsePusherChannelConventions.html",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\UsePusherChannelConventions",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\UsePusherChannelConventions",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/UsePusherChannelConventions.html",
		"link": "Illuminate/Broadcasting/Broadcasters/UsePusherChannelConventions.html#method_isGuardedChannel",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\UsePusherChannelConventions::isGuardedChannel",
		"doc": "Return true if channel is protected by authentication."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Broadcasters\\UsePusherChannelConventions",
		"fromLink": "Illuminate/Broadcasting/Broadcasters/UsePusherChannelConventions.html",
		"link": "Illuminate/Broadcasting/Broadcasters/UsePusherChannelConventions.html#method_normalizeChannelName",
		"name": "Illuminate\\Broadcasting\\Broadcasters\\UsePusherChannelConventions::normalizeChannelName",
		"doc": "Remove prefix from channel name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/Channel.html",
		"name": "Illuminate\\Broadcasting\\Channel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Channel",
		"fromLink": "Illuminate/Broadcasting/Channel.html",
		"link": "Illuminate/Broadcasting/Channel.html#method___construct",
		"name": "Illuminate\\Broadcasting\\Channel::__construct",
		"doc": "Create a new channel instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\Channel",
		"fromLink": "Illuminate/Broadcasting/Channel.html",
		"link": "Illuminate/Broadcasting/Channel.html#method___toString",
		"name": "Illuminate\\Broadcasting\\Channel::__toString",
		"doc": "Convert the channel instance to a string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/EncryptedPrivateChannel.html",
		"name": "Illuminate\\Broadcasting\\EncryptedPrivateChannel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\EncryptedPrivateChannel",
		"fromLink": "Illuminate/Broadcasting/EncryptedPrivateChannel.html",
		"link": "Illuminate/Broadcasting/EncryptedPrivateChannel.html#method___construct",
		"name": "Illuminate\\Broadcasting\\EncryptedPrivateChannel::__construct",
		"doc": "Create a new channel instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/InteractsWithSockets.html",
		"name": "Illuminate\\Broadcasting\\InteractsWithSockets",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\InteractsWithSockets",
		"fromLink": "Illuminate/Broadcasting/InteractsWithSockets.html",
		"link": "Illuminate/Broadcasting/InteractsWithSockets.html#method_dontBroadcastToCurrentUser",
		"name": "Illuminate\\Broadcasting\\InteractsWithSockets::dontBroadcastToCurrentUser",
		"doc": "Exclude the current user from receiving the broadcast."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\InteractsWithSockets",
		"fromLink": "Illuminate/Broadcasting/InteractsWithSockets.html",
		"link": "Illuminate/Broadcasting/InteractsWithSockets.html#method_broadcastToEveryone",
		"name": "Illuminate\\Broadcasting\\InteractsWithSockets::broadcastToEveryone",
		"doc": "Broadcast the event to everyone."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/PendingBroadcast.html",
		"name": "Illuminate\\Broadcasting\\PendingBroadcast",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\PendingBroadcast",
		"fromLink": "Illuminate/Broadcasting/PendingBroadcast.html",
		"link": "Illuminate/Broadcasting/PendingBroadcast.html#method___construct",
		"name": "Illuminate\\Broadcasting\\PendingBroadcast::__construct",
		"doc": "Create a new pending broadcast instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\PendingBroadcast",
		"fromLink": "Illuminate/Broadcasting/PendingBroadcast.html",
		"link": "Illuminate/Broadcasting/PendingBroadcast.html#method_toOthers",
		"name": "Illuminate\\Broadcasting\\PendingBroadcast::toOthers",
		"doc": "Broadcast the event to everyone except the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\PendingBroadcast",
		"fromLink": "Illuminate/Broadcasting/PendingBroadcast.html",
		"link": "Illuminate/Broadcasting/PendingBroadcast.html#method___destruct",
		"name": "Illuminate\\Broadcasting\\PendingBroadcast::__destruct",
		"doc": "Handle the object's destruction."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/PresenceChannel.html",
		"name": "Illuminate\\Broadcasting\\PresenceChannel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\PresenceChannel",
		"fromLink": "Illuminate/Broadcasting/PresenceChannel.html",
		"link": "Illuminate/Broadcasting/PresenceChannel.html#method___construct",
		"name": "Illuminate\\Broadcasting\\PresenceChannel::__construct",
		"doc": "Create a new channel instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Broadcasting",
		"fromLink": "Illuminate/Broadcasting.html",
		"link": "Illuminate/Broadcasting/PrivateChannel.html",
		"name": "Illuminate\\Broadcasting\\PrivateChannel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Broadcasting\\PrivateChannel",
		"fromLink": "Illuminate/Broadcasting/PrivateChannel.html",
		"link": "Illuminate/Broadcasting/PrivateChannel.html#method___construct",
		"name": "Illuminate\\Broadcasting\\PrivateChannel::__construct",
		"doc": "Create a new channel instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/Batch.html",
		"name": "Illuminate\\Bus\\Batch",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method___construct",
		"name": "Illuminate\\Bus\\Batch::__construct",
		"doc": "Create a new batch instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_fresh",
		"name": "Illuminate\\Bus\\Batch::fresh",
		"doc": "Get a fresh instance of the batch represented by this ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_add",
		"name": "Illuminate\\Bus\\Batch::add",
		"doc": "Add additional jobs to the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_prepareBatchedChain",
		"name": "Illuminate\\Bus\\Batch::prepareBatchedChain",
		"doc": "Prepare a chain that exists within the jobs being added."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_processedJobs",
		"name": "Illuminate\\Bus\\Batch::processedJobs",
		"doc": "Get the total number of jobs that have been processed by the batch thus far."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_progress",
		"name": "Illuminate\\Bus\\Batch::progress",
		"doc": "Get the percentage of jobs that have been processed (between 0-100)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_recordSuccessfulJob",
		"name": "Illuminate\\Bus\\Batch::recordSuccessfulJob",
		"doc": "Record that a job within the batch finished successfully, executing any callbacks if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_decrementPendingJobs",
		"name": "Illuminate\\Bus\\Batch::decrementPendingJobs",
		"doc": "Decrement the pending jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_finished",
		"name": "Illuminate\\Bus\\Batch::finished",
		"doc": "Determine if the batch has finished executing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_hasThenCallbacks",
		"name": "Illuminate\\Bus\\Batch::hasThenCallbacks",
		"doc": "Determine if the batch has \"success\" callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_allowsFailures",
		"name": "Illuminate\\Bus\\Batch::allowsFailures",
		"doc": "Determine if the batch allows jobs to fail without cancelling the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_hasFailures",
		"name": "Illuminate\\Bus\\Batch::hasFailures",
		"doc": "Determine if the batch has job failures."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_recordFailedJob",
		"name": "Illuminate\\Bus\\Batch::recordFailedJob",
		"doc": "Record that a job within the batch failed to finish successfully, executing any callbacks if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_incrementFailedJobs",
		"name": "Illuminate\\Bus\\Batch::incrementFailedJobs",
		"doc": "Increment the failed jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_hasCatchCallbacks",
		"name": "Illuminate\\Bus\\Batch::hasCatchCallbacks",
		"doc": "Determine if the batch has \"catch\" callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_hasFinallyCallbacks",
		"name": "Illuminate\\Bus\\Batch::hasFinallyCallbacks",
		"doc": "Determine if the batch has \"then\" callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_cancel",
		"name": "Illuminate\\Bus\\Batch::cancel",
		"doc": "Cancel the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_canceled",
		"name": "Illuminate\\Bus\\Batch::canceled",
		"doc": "Determine if the batch has been cancelled."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_cancelled",
		"name": "Illuminate\\Bus\\Batch::cancelled",
		"doc": "Determine if the batch has been cancelled."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_delete",
		"name": "Illuminate\\Bus\\Batch::delete",
		"doc": "Delete the batch from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_invokeHandlerCallback",
		"name": "Illuminate\\Bus\\Batch::invokeHandlerCallback",
		"doc": "Invoke a batch callback handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_toArray",
		"name": "Illuminate\\Bus\\Batch::toArray",
		"doc": "Convert the batch to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batch",
		"fromLink": "Illuminate/Bus/Batch.html",
		"link": "Illuminate/Bus/Batch.html#method_jsonSerialize",
		"name": "Illuminate\\Bus\\Batch::jsonSerialize",
		"doc": "Get the JSON serializable representation of the object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/BatchFactory.html",
		"name": "Illuminate\\Bus\\BatchFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchFactory",
		"fromLink": "Illuminate/Bus/BatchFactory.html",
		"link": "Illuminate/Bus/BatchFactory.html#method___construct",
		"name": "Illuminate\\Bus\\BatchFactory::__construct",
		"doc": "Create a new batch factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchFactory",
		"fromLink": "Illuminate/Bus/BatchFactory.html",
		"link": "Illuminate/Bus/BatchFactory.html#method_make",
		"name": "Illuminate\\Bus\\BatchFactory::make",
		"doc": "Create a new batch instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/BatchRepository.html",
		"name": "Illuminate\\Bus\\BatchRepository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_get",
		"name": "Illuminate\\Bus\\BatchRepository::get",
		"doc": "Retrieve a list of batches."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_find",
		"name": "Illuminate\\Bus\\BatchRepository::find",
		"doc": "Retrieve information about an existing batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_store",
		"name": "Illuminate\\Bus\\BatchRepository::store",
		"doc": "Store a new pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_incrementTotalJobs",
		"name": "Illuminate\\Bus\\BatchRepository::incrementTotalJobs",
		"doc": "Increment the total number of jobs within the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_decrementPendingJobs",
		"name": "Illuminate\\Bus\\BatchRepository::decrementPendingJobs",
		"doc": "Decrement the total number of pending jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_incrementFailedJobs",
		"name": "Illuminate\\Bus\\BatchRepository::incrementFailedJobs",
		"doc": "Increment the total number of failed jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_markAsFinished",
		"name": "Illuminate\\Bus\\BatchRepository::markAsFinished",
		"doc": "Mark the batch that has the given ID as finished."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_cancel",
		"name": "Illuminate\\Bus\\BatchRepository::cancel",
		"doc": "Cancel the batch that has the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_delete",
		"name": "Illuminate\\Bus\\BatchRepository::delete",
		"doc": "Delete the batch that has the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BatchRepository",
		"fromLink": "Illuminate/Bus/BatchRepository.html",
		"link": "Illuminate/Bus/BatchRepository.html#method_transaction",
		"name": "Illuminate\\Bus\\BatchRepository::transaction",
		"doc": "Execute the given Closure within a storage specific transaction."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/Batchable.html",
		"name": "Illuminate\\Bus\\Batchable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batchable",
		"fromLink": "Illuminate/Bus/Batchable.html",
		"link": "Illuminate/Bus/Batchable.html#method_batch",
		"name": "Illuminate\\Bus\\Batchable::batch",
		"doc": "Get the batch instance for the job, if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batchable",
		"fromLink": "Illuminate/Bus/Batchable.html",
		"link": "Illuminate/Bus/Batchable.html#method_batching",
		"name": "Illuminate\\Bus\\Batchable::batching",
		"doc": "Determine if the batch is still active and processing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Batchable",
		"fromLink": "Illuminate/Bus/Batchable.html",
		"link": "Illuminate/Bus/Batchable.html#method_withBatchId",
		"name": "Illuminate\\Bus\\Batchable::withBatchId",
		"doc": "Set the batch ID on the job."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/BusServiceProvider.html",
		"name": "Illuminate\\Bus\\BusServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BusServiceProvider",
		"fromLink": "Illuminate/Bus/BusServiceProvider.html",
		"link": "Illuminate/Bus/BusServiceProvider.html#method_register",
		"name": "Illuminate\\Bus\\BusServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BusServiceProvider",
		"fromLink": "Illuminate/Bus/BusServiceProvider.html",
		"link": "Illuminate/Bus/BusServiceProvider.html#method_registerBatchServices",
		"name": "Illuminate\\Bus\\BusServiceProvider::registerBatchServices",
		"doc": "Register the batch handling services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\BusServiceProvider",
		"fromLink": "Illuminate/Bus/BusServiceProvider.html",
		"link": "Illuminate/Bus/BusServiceProvider.html#method_provides",
		"name": "Illuminate\\Bus\\BusServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method___construct",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::__construct",
		"doc": "Create a new batch repository instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_get",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::get",
		"doc": "Retrieve a list of batches."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_find",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::find",
		"doc": "Retrieve information about an existing batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_store",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::store",
		"doc": "Store a new pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_incrementTotalJobs",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::incrementTotalJobs",
		"doc": "Increment the total number of jobs within the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_decrementPendingJobs",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::decrementPendingJobs",
		"doc": "Decrement the total number of pending jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_incrementFailedJobs",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::incrementFailedJobs",
		"doc": "Increment the total number of failed jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_updateAtomicValues",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::updateAtomicValues",
		"doc": "Update an atomic value within the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_markAsFinished",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::markAsFinished",
		"doc": "Mark the batch that has the given ID as finished."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_cancel",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::cancel",
		"doc": "Cancel the batch that has the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_delete",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::delete",
		"doc": "Delete the batch that has the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_transaction",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::transaction",
		"doc": "Execute the given Closure within a storage specific transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\DatabaseBatchRepository",
		"fromLink": "Illuminate/Bus/DatabaseBatchRepository.html",
		"link": "Illuminate/Bus/DatabaseBatchRepository.html#method_toBatch",
		"name": "Illuminate\\Bus\\DatabaseBatchRepository::toBatch",
		"doc": "Convert the given raw batch to a Batch object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/Dispatcher.html",
		"name": "Illuminate\\Bus\\Dispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method___construct",
		"name": "Illuminate\\Bus\\Dispatcher::__construct",
		"doc": "Create a new command dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_dispatch",
		"name": "Illuminate\\Bus\\Dispatcher::dispatch",
		"doc": "Dispatch a command to its appropriate handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_dispatchSync",
		"name": "Illuminate\\Bus\\Dispatcher::dispatchSync",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_dispatchNow",
		"name": "Illuminate\\Bus\\Dispatcher::dispatchNow",
		"doc": "Dispatch a command to its appropriate handler in the current process without using the synchronous queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_findBatch",
		"name": "Illuminate\\Bus\\Dispatcher::findBatch",
		"doc": "Attempt to find the batch with the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_batch",
		"name": "Illuminate\\Bus\\Dispatcher::batch",
		"doc": "Create a new batch of queueable jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_chain",
		"name": "Illuminate\\Bus\\Dispatcher::chain",
		"doc": "Create a new chain of queueable jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_hasCommandHandler",
		"name": "Illuminate\\Bus\\Dispatcher::hasCommandHandler",
		"doc": "Determine if the given command has a handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_getCommandHandler",
		"name": "Illuminate\\Bus\\Dispatcher::getCommandHandler",
		"doc": "Retrieve the handler for a command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_commandShouldBeQueued",
		"name": "Illuminate\\Bus\\Dispatcher::commandShouldBeQueued",
		"doc": "Determine if the given command should be queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_dispatchToQueue",
		"name": "Illuminate\\Bus\\Dispatcher::dispatchToQueue",
		"doc": "Dispatch a command to its appropriate handler behind a queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_pushCommandToQueue",
		"name": "Illuminate\\Bus\\Dispatcher::pushCommandToQueue",
		"doc": "Push the command onto the given queue instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_dispatchAfterResponse",
		"name": "Illuminate\\Bus\\Dispatcher::dispatchAfterResponse",
		"doc": "Dispatch a command to its appropriate handler after the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_pipeThrough",
		"name": "Illuminate\\Bus\\Dispatcher::pipeThrough",
		"doc": "Set the pipes through which commands should be piped before dispatching."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Bus/Dispatcher.html",
		"link": "Illuminate/Bus/Dispatcher.html#method_map",
		"name": "Illuminate\\Bus\\Dispatcher::map",
		"doc": "Map a command to a handler."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus\\Events",
		"fromLink": "Illuminate/Bus/Events.html",
		"link": "Illuminate/Bus/Events/BatchDispatched.html",
		"name": "Illuminate\\Bus\\Events\\BatchDispatched",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Events\\BatchDispatched",
		"fromLink": "Illuminate/Bus/Events/BatchDispatched.html",
		"link": "Illuminate/Bus/Events/BatchDispatched.html#method___construct",
		"name": "Illuminate\\Bus\\Events\\BatchDispatched::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/PendingBatch.html",
		"name": "Illuminate\\Bus\\PendingBatch",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method___construct",
		"name": "Illuminate\\Bus\\PendingBatch::__construct",
		"doc": "Create a new pending batch instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_then",
		"name": "Illuminate\\Bus\\PendingBatch::then",
		"doc": "Add a callback to be executed after all jobs in the batch have executed successfully."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_thenCallbacks",
		"name": "Illuminate\\Bus\\PendingBatch::thenCallbacks",
		"doc": "Get the \"then\" callbacks that have been registered with the pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_catch",
		"name": "Illuminate\\Bus\\PendingBatch::catch",
		"doc": "Add a callback to be executed after the first failing job in the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_catchCallbacks",
		"name": "Illuminate\\Bus\\PendingBatch::catchCallbacks",
		"doc": "Get the \"catch\" callbacks that have been registered with the pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_finally",
		"name": "Illuminate\\Bus\\PendingBatch::finally",
		"doc": "Add a callback to be executed after the batch has finished executing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_finallyCallbacks",
		"name": "Illuminate\\Bus\\PendingBatch::finallyCallbacks",
		"doc": "Get the \"finally\" callbacks that have been registered with the pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_allowFailures",
		"name": "Illuminate\\Bus\\PendingBatch::allowFailures",
		"doc": "Indicate that the batch should not be cancelled when a job within the batch fails."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_allowsFailures",
		"name": "Illuminate\\Bus\\PendingBatch::allowsFailures",
		"doc": "Determine if the pending batch allows jobs to fail without cancelling the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_name",
		"name": "Illuminate\\Bus\\PendingBatch::name",
		"doc": "Set the name for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_onConnection",
		"name": "Illuminate\\Bus\\PendingBatch::onConnection",
		"doc": "Specify the queue connection that the batched jobs should run on."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_connection",
		"name": "Illuminate\\Bus\\PendingBatch::connection",
		"doc": "Get the connection used by the pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_onQueue",
		"name": "Illuminate\\Bus\\PendingBatch::onQueue",
		"doc": "Specify the queue that the batched jobs should run on."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_queue",
		"name": "Illuminate\\Bus\\PendingBatch::queue",
		"doc": "Get the queue used by the pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\PendingBatch",
		"fromLink": "Illuminate/Bus/PendingBatch.html",
		"link": "Illuminate/Bus/PendingBatch.html#method_dispatch",
		"name": "Illuminate\\Bus\\PendingBatch::dispatch",
		"doc": "Dispatch the batch."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/Queueable.html",
		"name": "Illuminate\\Bus\\Queueable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_onConnection",
		"name": "Illuminate\\Bus\\Queueable::onConnection",
		"doc": "Set the desired connection for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_onQueue",
		"name": "Illuminate\\Bus\\Queueable::onQueue",
		"doc": "Set the desired queue for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_allOnConnection",
		"name": "Illuminate\\Bus\\Queueable::allOnConnection",
		"doc": "Set the desired connection for the chain."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_allOnQueue",
		"name": "Illuminate\\Bus\\Queueable::allOnQueue",
		"doc": "Set the desired queue for the chain."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_delay",
		"name": "Illuminate\\Bus\\Queueable::delay",
		"doc": "Set the desired delay for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_through",
		"name": "Illuminate\\Bus\\Queueable::through",
		"doc": "Specify the middleware the job should be dispatched through."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_chain",
		"name": "Illuminate\\Bus\\Queueable::chain",
		"doc": "Set the jobs that should run if this job is successful."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_serializeJob",
		"name": "Illuminate\\Bus\\Queueable::serializeJob",
		"doc": "Serialize a job for queuing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_dispatchNextJobInChain",
		"name": "Illuminate\\Bus\\Queueable::dispatchNextJobInChain",
		"doc": "Dispatch the next job on the chain."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\Queueable",
		"fromLink": "Illuminate/Bus/Queueable.html",
		"link": "Illuminate/Bus/Queueable.html#method_invokeChainCatchCallbacks",
		"name": "Illuminate\\Bus\\Queueable::invokeChainCatchCallbacks",
		"doc": "Invoke all of the chain's failed job callbacks."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Bus",
		"fromLink": "Illuminate/Bus.html",
		"link": "Illuminate/Bus/UpdatedBatchJobCounts.html",
		"name": "Illuminate\\Bus\\UpdatedBatchJobCounts",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\UpdatedBatchJobCounts",
		"fromLink": "Illuminate/Bus/UpdatedBatchJobCounts.html",
		"link": "Illuminate/Bus/UpdatedBatchJobCounts.html#method___construct",
		"name": "Illuminate\\Bus\\UpdatedBatchJobCounts::__construct",
		"doc": "Create a new batch job counts object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Bus\\UpdatedBatchJobCounts",
		"fromLink": "Illuminate/Bus/UpdatedBatchJobCounts.html",
		"link": "Illuminate/Bus/UpdatedBatchJobCounts.html#method_allJobsHaveRanExactlyOnce",
		"name": "Illuminate\\Bus\\UpdatedBatchJobCounts::allJobsHaveRanExactlyOnce",
		"doc": "Determine if all jobs have ran exactly once."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/ApcStore.html",
		"name": "Illuminate\\Cache\\ApcStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method___construct",
		"name": "Illuminate\\Cache\\ApcStore::__construct",
		"doc": "Create a new APC store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method_get",
		"name": "Illuminate\\Cache\\ApcStore::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method_put",
		"name": "Illuminate\\Cache\\ApcStore::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method_increment",
		"name": "Illuminate\\Cache\\ApcStore::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method_decrement",
		"name": "Illuminate\\Cache\\ApcStore::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method_forever",
		"name": "Illuminate\\Cache\\ApcStore::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method_forget",
		"name": "Illuminate\\Cache\\ApcStore::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method_flush",
		"name": "Illuminate\\Cache\\ApcStore::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcStore",
		"fromLink": "Illuminate/Cache/ApcStore.html",
		"link": "Illuminate/Cache/ApcStore.html#method_getPrefix",
		"name": "Illuminate\\Cache\\ApcStore::getPrefix",
		"doc": "Get the cache key prefix."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/ApcWrapper.html",
		"name": "Illuminate\\Cache\\ApcWrapper",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcWrapper",
		"fromLink": "Illuminate/Cache/ApcWrapper.html",
		"link": "Illuminate/Cache/ApcWrapper.html#method___construct",
		"name": "Illuminate\\Cache\\ApcWrapper::__construct",
		"doc": "Create a new APC wrapper instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcWrapper",
		"fromLink": "Illuminate/Cache/ApcWrapper.html",
		"link": "Illuminate/Cache/ApcWrapper.html#method_get",
		"name": "Illuminate\\Cache\\ApcWrapper::get",
		"doc": "Get an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcWrapper",
		"fromLink": "Illuminate/Cache/ApcWrapper.html",
		"link": "Illuminate/Cache/ApcWrapper.html#method_put",
		"name": "Illuminate\\Cache\\ApcWrapper::put",
		"doc": "Store an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcWrapper",
		"fromLink": "Illuminate/Cache/ApcWrapper.html",
		"link": "Illuminate/Cache/ApcWrapper.html#method_increment",
		"name": "Illuminate\\Cache\\ApcWrapper::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcWrapper",
		"fromLink": "Illuminate/Cache/ApcWrapper.html",
		"link": "Illuminate/Cache/ApcWrapper.html#method_decrement",
		"name": "Illuminate\\Cache\\ApcWrapper::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcWrapper",
		"fromLink": "Illuminate/Cache/ApcWrapper.html",
		"link": "Illuminate/Cache/ApcWrapper.html#method_delete",
		"name": "Illuminate\\Cache\\ApcWrapper::delete",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ApcWrapper",
		"fromLink": "Illuminate/Cache/ApcWrapper.html",
		"link": "Illuminate/Cache/ApcWrapper.html#method_flush",
		"name": "Illuminate\\Cache\\ApcWrapper::flush",
		"doc": "Remove all items from the cache."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/ArrayLock.html",
		"name": "Illuminate\\Cache\\ArrayLock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayLock",
		"fromLink": "Illuminate/Cache/ArrayLock.html",
		"link": "Illuminate/Cache/ArrayLock.html#method___construct",
		"name": "Illuminate\\Cache\\ArrayLock::__construct",
		"doc": "Create a new lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayLock",
		"fromLink": "Illuminate/Cache/ArrayLock.html",
		"link": "Illuminate/Cache/ArrayLock.html#method_acquire",
		"name": "Illuminate\\Cache\\ArrayLock::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayLock",
		"fromLink": "Illuminate/Cache/ArrayLock.html",
		"link": "Illuminate/Cache/ArrayLock.html#method_exists",
		"name": "Illuminate\\Cache\\ArrayLock::exists",
		"doc": "Determine if the current lock exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayLock",
		"fromLink": "Illuminate/Cache/ArrayLock.html",
		"link": "Illuminate/Cache/ArrayLock.html#method_release",
		"name": "Illuminate\\Cache\\ArrayLock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayLock",
		"fromLink": "Illuminate/Cache/ArrayLock.html",
		"link": "Illuminate/Cache/ArrayLock.html#method_getCurrentOwner",
		"name": "Illuminate\\Cache\\ArrayLock::getCurrentOwner",
		"doc": "Returns the owner value written into the driver for this lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayLock",
		"fromLink": "Illuminate/Cache/ArrayLock.html",
		"link": "Illuminate/Cache/ArrayLock.html#method_forceRelease",
		"name": "Illuminate\\Cache\\ArrayLock::forceRelease",
		"doc": "Releases this lock in disregard of ownership."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/ArrayStore.html",
		"name": "Illuminate\\Cache\\ArrayStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method___construct",
		"name": "Illuminate\\Cache\\ArrayStore::__construct",
		"doc": "Create a new Array store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_get",
		"name": "Illuminate\\Cache\\ArrayStore::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_put",
		"name": "Illuminate\\Cache\\ArrayStore::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_increment",
		"name": "Illuminate\\Cache\\ArrayStore::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_decrement",
		"name": "Illuminate\\Cache\\ArrayStore::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_forever",
		"name": "Illuminate\\Cache\\ArrayStore::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_forget",
		"name": "Illuminate\\Cache\\ArrayStore::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_flush",
		"name": "Illuminate\\Cache\\ArrayStore::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_getPrefix",
		"name": "Illuminate\\Cache\\ArrayStore::getPrefix",
		"doc": "Get the cache key prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_calculateExpiration",
		"name": "Illuminate\\Cache\\ArrayStore::calculateExpiration",
		"doc": "Get the expiration time of the key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_toTimestamp",
		"name": "Illuminate\\Cache\\ArrayStore::toTimestamp",
		"doc": "Get the UNIX timestamp for the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_lock",
		"name": "Illuminate\\Cache\\ArrayStore::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\ArrayStore",
		"fromLink": "Illuminate/Cache/ArrayStore.html",
		"link": "Illuminate/Cache/ArrayStore.html#method_restoreLock",
		"name": "Illuminate\\Cache\\ArrayStore::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/CacheLock.html",
		"name": "Illuminate\\Cache\\CacheLock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheLock",
		"fromLink": "Illuminate/Cache/CacheLock.html",
		"link": "Illuminate/Cache/CacheLock.html#method___construct",
		"name": "Illuminate\\Cache\\CacheLock::__construct",
		"doc": "Create a new lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheLock",
		"fromLink": "Illuminate/Cache/CacheLock.html",
		"link": "Illuminate/Cache/CacheLock.html#method_acquire",
		"name": "Illuminate\\Cache\\CacheLock::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheLock",
		"fromLink": "Illuminate/Cache/CacheLock.html",
		"link": "Illuminate/Cache/CacheLock.html#method_release",
		"name": "Illuminate\\Cache\\CacheLock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheLock",
		"fromLink": "Illuminate/Cache/CacheLock.html",
		"link": "Illuminate/Cache/CacheLock.html#method_forceRelease",
		"name": "Illuminate\\Cache\\CacheLock::forceRelease",
		"doc": "Releases this lock regardless of ownership."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheLock",
		"fromLink": "Illuminate/Cache/CacheLock.html",
		"link": "Illuminate/Cache/CacheLock.html#method_getCurrentOwner",
		"name": "Illuminate\\Cache\\CacheLock::getCurrentOwner",
		"doc": "Returns the owner value written into the driver for this lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/CacheManager.html",
		"name": "Illuminate\\Cache\\CacheManager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method___construct",
		"name": "Illuminate\\Cache\\CacheManager::__construct",
		"doc": "Create a new Cache manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_store",
		"name": "Illuminate\\Cache\\CacheManager::store",
		"doc": "Get a cache store instance by name, wrapped in a repository."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_driver",
		"name": "Illuminate\\Cache\\CacheManager::driver",
		"doc": "Get a cache driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_get",
		"name": "Illuminate\\Cache\\CacheManager::get",
		"doc": "Attempt to get the store from the local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_resolve",
		"name": "Illuminate\\Cache\\CacheManager::resolve",
		"doc": "Resolve the given store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_callCustomCreator",
		"name": "Illuminate\\Cache\\CacheManager::callCustomCreator",
		"doc": "Call a custom driver creator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_createApcDriver",
		"name": "Illuminate\\Cache\\CacheManager::createApcDriver",
		"doc": "Create an instance of the APC cache driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_createArrayDriver",
		"name": "Illuminate\\Cache\\CacheManager::createArrayDriver",
		"doc": "Create an instance of the array cache driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_createFileDriver",
		"name": "Illuminate\\Cache\\CacheManager::createFileDriver",
		"doc": "Create an instance of the file cache driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_createMemcachedDriver",
		"name": "Illuminate\\Cache\\CacheManager::createMemcachedDriver",
		"doc": "Create an instance of the Memcached cache driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_createNullDriver",
		"name": "Illuminate\\Cache\\CacheManager::createNullDriver",
		"doc": "Create an instance of the Null cache driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_createRedisDriver",
		"name": "Illuminate\\Cache\\CacheManager::createRedisDriver",
		"doc": "Create an instance of the Redis cache driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_createDatabaseDriver",
		"name": "Illuminate\\Cache\\CacheManager::createDatabaseDriver",
		"doc": "Create an instance of the database cache driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_createDynamodbDriver",
		"name": "Illuminate\\Cache\\CacheManager::createDynamodbDriver",
		"doc": "Create an instance of the DynamoDB cache driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_repository",
		"name": "Illuminate\\Cache\\CacheManager::repository",
		"doc": "Create a new cache repository with the given implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_setEventDispatcher",
		"name": "Illuminate\\Cache\\CacheManager::setEventDispatcher",
		"doc": "Set the event dispatcher on the given repository instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_refreshEventDispatcher",
		"name": "Illuminate\\Cache\\CacheManager::refreshEventDispatcher",
		"doc": "Re-set the event dispatcher on all resolved cache repositories."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_getPrefix",
		"name": "Illuminate\\Cache\\CacheManager::getPrefix",
		"doc": "Get the cache prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_getConfig",
		"name": "Illuminate\\Cache\\CacheManager::getConfig",
		"doc": "Get the cache connection configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Cache\\CacheManager::getDefaultDriver",
		"doc": "Get the default cache driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_setDefaultDriver",
		"name": "Illuminate\\Cache\\CacheManager::setDefaultDriver",
		"doc": "Set the default cache driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_forgetDriver",
		"name": "Illuminate\\Cache\\CacheManager::forgetDriver",
		"doc": "Unset the given driver instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_purge",
		"name": "Illuminate\\Cache\\CacheManager::purge",
		"doc": "Disconnect the given driver and remove from local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method_extend",
		"name": "Illuminate\\Cache\\CacheManager::extend",
		"doc": "Register a custom driver creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheManager",
		"fromLink": "Illuminate/Cache/CacheManager.html",
		"link": "Illuminate/Cache/CacheManager.html#method___call",
		"name": "Illuminate\\Cache\\CacheManager::__call",
		"doc": "Dynamically call the default driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/CacheServiceProvider.html",
		"name": "Illuminate\\Cache\\CacheServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheServiceProvider",
		"fromLink": "Illuminate/Cache/CacheServiceProvider.html",
		"link": "Illuminate/Cache/CacheServiceProvider.html#method_register",
		"name": "Illuminate\\Cache\\CacheServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\CacheServiceProvider",
		"fromLink": "Illuminate/Cache/CacheServiceProvider.html",
		"link": "Illuminate/Cache/CacheServiceProvider.html#method_provides",
		"name": "Illuminate\\Cache\\CacheServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\Console",
		"fromLink": "Illuminate/Cache/Console.html",
		"link": "Illuminate/Cache/Console/CacheTableCommand.html",
		"name": "Illuminate\\Cache\\Console\\CacheTableCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\CacheTableCommand",
		"fromLink": "Illuminate/Cache/Console/CacheTableCommand.html",
		"link": "Illuminate/Cache/Console/CacheTableCommand.html#method___construct",
		"name": "Illuminate\\Cache\\Console\\CacheTableCommand::__construct",
		"doc": "Create a new cache table command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\CacheTableCommand",
		"fromLink": "Illuminate/Cache/Console/CacheTableCommand.html",
		"link": "Illuminate/Cache/Console/CacheTableCommand.html#method_handle",
		"name": "Illuminate\\Cache\\Console\\CacheTableCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\CacheTableCommand",
		"fromLink": "Illuminate/Cache/Console/CacheTableCommand.html",
		"link": "Illuminate/Cache/Console/CacheTableCommand.html#method_createBaseMigration",
		"name": "Illuminate\\Cache\\Console\\CacheTableCommand::createBaseMigration",
		"doc": "Create a base migration file for the table."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\Console",
		"fromLink": "Illuminate/Cache/Console.html",
		"link": "Illuminate/Cache/Console/ClearCommand.html",
		"name": "Illuminate\\Cache\\Console\\ClearCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ClearCommand",
		"fromLink": "Illuminate/Cache/Console/ClearCommand.html",
		"link": "Illuminate/Cache/Console/ClearCommand.html#method___construct",
		"name": "Illuminate\\Cache\\Console\\ClearCommand::__construct",
		"doc": "Create a new cache clear command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ClearCommand",
		"fromLink": "Illuminate/Cache/Console/ClearCommand.html",
		"link": "Illuminate/Cache/Console/ClearCommand.html#method_handle",
		"name": "Illuminate\\Cache\\Console\\ClearCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ClearCommand",
		"fromLink": "Illuminate/Cache/Console/ClearCommand.html",
		"link": "Illuminate/Cache/Console/ClearCommand.html#method_flushFacades",
		"name": "Illuminate\\Cache\\Console\\ClearCommand::flushFacades",
		"doc": "Flush the real-time facades stored in the cache directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ClearCommand",
		"fromLink": "Illuminate/Cache/Console/ClearCommand.html",
		"link": "Illuminate/Cache/Console/ClearCommand.html#method_cache",
		"name": "Illuminate\\Cache\\Console\\ClearCommand::cache",
		"doc": "Get the cache instance for the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ClearCommand",
		"fromLink": "Illuminate/Cache/Console/ClearCommand.html",
		"link": "Illuminate/Cache/Console/ClearCommand.html#method_tags",
		"name": "Illuminate\\Cache\\Console\\ClearCommand::tags",
		"doc": "Get the tags passed to the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ClearCommand",
		"fromLink": "Illuminate/Cache/Console/ClearCommand.html",
		"link": "Illuminate/Cache/Console/ClearCommand.html#method_getArguments",
		"name": "Illuminate\\Cache\\Console\\ClearCommand::getArguments",
		"doc": "Get the console command arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ClearCommand",
		"fromLink": "Illuminate/Cache/Console/ClearCommand.html",
		"link": "Illuminate/Cache/Console/ClearCommand.html#method_getOptions",
		"name": "Illuminate\\Cache\\Console\\ClearCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\Console",
		"fromLink": "Illuminate/Cache/Console.html",
		"link": "Illuminate/Cache/Console/ForgetCommand.html",
		"name": "Illuminate\\Cache\\Console\\ForgetCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ForgetCommand",
		"fromLink": "Illuminate/Cache/Console/ForgetCommand.html",
		"link": "Illuminate/Cache/Console/ForgetCommand.html#method___construct",
		"name": "Illuminate\\Cache\\Console\\ForgetCommand::__construct",
		"doc": "Create a new cache clear command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Console\\ForgetCommand",
		"fromLink": "Illuminate/Cache/Console/ForgetCommand.html",
		"link": "Illuminate/Cache/Console/ForgetCommand.html#method_handle",
		"name": "Illuminate\\Cache\\Console\\ForgetCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/DatabaseLock.html",
		"name": "Illuminate\\Cache\\DatabaseLock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseLock",
		"fromLink": "Illuminate/Cache/DatabaseLock.html",
		"link": "Illuminate/Cache/DatabaseLock.html#method___construct",
		"name": "Illuminate\\Cache\\DatabaseLock::__construct",
		"doc": "Create a new lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseLock",
		"fromLink": "Illuminate/Cache/DatabaseLock.html",
		"link": "Illuminate/Cache/DatabaseLock.html#method_acquire",
		"name": "Illuminate\\Cache\\DatabaseLock::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseLock",
		"fromLink": "Illuminate/Cache/DatabaseLock.html",
		"link": "Illuminate/Cache/DatabaseLock.html#method_expiresAt",
		"name": "Illuminate\\Cache\\DatabaseLock::expiresAt",
		"doc": "Get the UNIX timestamp indicating when the lock should expire."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseLock",
		"fromLink": "Illuminate/Cache/DatabaseLock.html",
		"link": "Illuminate/Cache/DatabaseLock.html#method_release",
		"name": "Illuminate\\Cache\\DatabaseLock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseLock",
		"fromLink": "Illuminate/Cache/DatabaseLock.html",
		"link": "Illuminate/Cache/DatabaseLock.html#method_forceRelease",
		"name": "Illuminate\\Cache\\DatabaseLock::forceRelease",
		"doc": "Releases this lock in disregard of ownership."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseLock",
		"fromLink": "Illuminate/Cache/DatabaseLock.html",
		"link": "Illuminate/Cache/DatabaseLock.html#method_getCurrentOwner",
		"name": "Illuminate\\Cache\\DatabaseLock::getCurrentOwner",
		"doc": "Returns the owner value written into the driver for this lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/DatabaseStore.html",
		"name": "Illuminate\\Cache\\DatabaseStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method___construct",
		"name": "Illuminate\\Cache\\DatabaseStore::__construct",
		"doc": "Create a new database store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_get",
		"name": "Illuminate\\Cache\\DatabaseStore::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_put",
		"name": "Illuminate\\Cache\\DatabaseStore::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_add",
		"name": "Illuminate\\Cache\\DatabaseStore::add",
		"doc": "Store an item in the cache if the key doesn't exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_increment",
		"name": "Illuminate\\Cache\\DatabaseStore::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_decrement",
		"name": "Illuminate\\Cache\\DatabaseStore::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_incrementOrDecrement",
		"name": "Illuminate\\Cache\\DatabaseStore::incrementOrDecrement",
		"doc": "Increment or decrement an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_getTime",
		"name": "Illuminate\\Cache\\DatabaseStore::getTime",
		"doc": "Get the current system time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_forever",
		"name": "Illuminate\\Cache\\DatabaseStore::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_lock",
		"name": "Illuminate\\Cache\\DatabaseStore::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_restoreLock",
		"name": "Illuminate\\Cache\\DatabaseStore::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_forget",
		"name": "Illuminate\\Cache\\DatabaseStore::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_flush",
		"name": "Illuminate\\Cache\\DatabaseStore::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_table",
		"name": "Illuminate\\Cache\\DatabaseStore::table",
		"doc": "Get a query builder for the cache table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_getConnection",
		"name": "Illuminate\\Cache\\DatabaseStore::getConnection",
		"doc": "Get the underlying database connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_getPrefix",
		"name": "Illuminate\\Cache\\DatabaseStore::getPrefix",
		"doc": "Get the cache key prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_serialize",
		"name": "Illuminate\\Cache\\DatabaseStore::serialize",
		"doc": "Serialize the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DatabaseStore",
		"fromLink": "Illuminate/Cache/DatabaseStore.html",
		"link": "Illuminate/Cache/DatabaseStore.html#method_unserialize",
		"name": "Illuminate\\Cache\\DatabaseStore::unserialize",
		"doc": "Unserialize the given value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/DynamoDbLock.html",
		"name": "Illuminate\\Cache\\DynamoDbLock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbLock",
		"fromLink": "Illuminate/Cache/DynamoDbLock.html",
		"link": "Illuminate/Cache/DynamoDbLock.html#method___construct",
		"name": "Illuminate\\Cache\\DynamoDbLock::__construct",
		"doc": "Create a new lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbLock",
		"fromLink": "Illuminate/Cache/DynamoDbLock.html",
		"link": "Illuminate/Cache/DynamoDbLock.html#method_acquire",
		"name": "Illuminate\\Cache\\DynamoDbLock::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbLock",
		"fromLink": "Illuminate/Cache/DynamoDbLock.html",
		"link": "Illuminate/Cache/DynamoDbLock.html#method_release",
		"name": "Illuminate\\Cache\\DynamoDbLock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbLock",
		"fromLink": "Illuminate/Cache/DynamoDbLock.html",
		"link": "Illuminate/Cache/DynamoDbLock.html#method_forceRelease",
		"name": "Illuminate\\Cache\\DynamoDbLock::forceRelease",
		"doc": "Release this lock in disregard of ownership."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbLock",
		"fromLink": "Illuminate/Cache/DynamoDbLock.html",
		"link": "Illuminate/Cache/DynamoDbLock.html#method_getCurrentOwner",
		"name": "Illuminate\\Cache\\DynamoDbLock::getCurrentOwner",
		"doc": "Returns the owner value written into the driver for this lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/DynamoDbStore.html",
		"name": "Illuminate\\Cache\\DynamoDbStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method___construct",
		"name": "Illuminate\\Cache\\DynamoDbStore::__construct",
		"doc": "Create a new store instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_get",
		"name": "Illuminate\\Cache\\DynamoDbStore::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_many",
		"name": "Illuminate\\Cache\\DynamoDbStore::many",
		"doc": "Retrieve multiple items from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_isExpired",
		"name": "Illuminate\\Cache\\DynamoDbStore::isExpired",
		"doc": "Determine if the given item is expired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_put",
		"name": "Illuminate\\Cache\\DynamoDbStore::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_putMany",
		"name": "Illuminate\\Cache\\DynamoDbStore::putMany",
		"doc": "Store multiple items in the cache for a given number of $seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_add",
		"name": "Illuminate\\Cache\\DynamoDbStore::add",
		"doc": "Store an item in the cache if the key doesn't exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_increment",
		"name": "Illuminate\\Cache\\DynamoDbStore::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_decrement",
		"name": "Illuminate\\Cache\\DynamoDbStore::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_forever",
		"name": "Illuminate\\Cache\\DynamoDbStore::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_lock",
		"name": "Illuminate\\Cache\\DynamoDbStore::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_restoreLock",
		"name": "Illuminate\\Cache\\DynamoDbStore::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_forget",
		"name": "Illuminate\\Cache\\DynamoDbStore::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_flush",
		"name": "Illuminate\\Cache\\DynamoDbStore::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_toTimestamp",
		"name": "Illuminate\\Cache\\DynamoDbStore::toTimestamp",
		"doc": "Get the UNIX timestamp for the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_serialize",
		"name": "Illuminate\\Cache\\DynamoDbStore::serialize",
		"doc": "Serialize the value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_unserialize",
		"name": "Illuminate\\Cache\\DynamoDbStore::unserialize",
		"doc": "Unserialize the value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_type",
		"name": "Illuminate\\Cache\\DynamoDbStore::type",
		"doc": "Get the DynamoDB type for the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_getPrefix",
		"name": "Illuminate\\Cache\\DynamoDbStore::getPrefix",
		"doc": "Get the cache key prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\DynamoDbStore",
		"fromLink": "Illuminate/Cache/DynamoDbStore.html",
		"link": "Illuminate/Cache/DynamoDbStore.html#method_setPrefix",
		"name": "Illuminate\\Cache\\DynamoDbStore::setPrefix",
		"doc": "Set the cache key prefix."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\Events",
		"fromLink": "Illuminate/Cache/Events.html",
		"link": "Illuminate/Cache/Events/CacheEvent.html",
		"name": "Illuminate\\Cache\\Events\\CacheEvent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Events\\CacheEvent",
		"fromLink": "Illuminate/Cache/Events/CacheEvent.html",
		"link": "Illuminate/Cache/Events/CacheEvent.html#method___construct",
		"name": "Illuminate\\Cache\\Events\\CacheEvent::__construct",
		"doc": "Create a new event instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Events\\CacheEvent",
		"fromLink": "Illuminate/Cache/Events/CacheEvent.html",
		"link": "Illuminate/Cache/Events/CacheEvent.html#method_setTags",
		"name": "Illuminate\\Cache\\Events\\CacheEvent::setTags",
		"doc": "Set the tags for the cache event."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\Events",
		"fromLink": "Illuminate/Cache/Events.html",
		"link": "Illuminate/Cache/Events/CacheHit.html",
		"name": "Illuminate\\Cache\\Events\\CacheHit",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Events\\CacheHit",
		"fromLink": "Illuminate/Cache/Events/CacheHit.html",
		"link": "Illuminate/Cache/Events/CacheHit.html#method___construct",
		"name": "Illuminate\\Cache\\Events\\CacheHit::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\Events",
		"fromLink": "Illuminate/Cache/Events.html",
		"link": "Illuminate/Cache/Events/CacheMissed.html",
		"name": "Illuminate\\Cache\\Events\\CacheMissed",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\Events",
		"fromLink": "Illuminate/Cache/Events.html",
		"link": "Illuminate/Cache/Events/KeyForgotten.html",
		"name": "Illuminate\\Cache\\Events\\KeyForgotten",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\Events",
		"fromLink": "Illuminate/Cache/Events.html",
		"link": "Illuminate/Cache/Events/KeyWritten.html",
		"name": "Illuminate\\Cache\\Events\\KeyWritten",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Events\\KeyWritten",
		"fromLink": "Illuminate/Cache/Events/KeyWritten.html",
		"link": "Illuminate/Cache/Events/KeyWritten.html#method___construct",
		"name": "Illuminate\\Cache\\Events\\KeyWritten::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/FileStore.html",
		"name": "Illuminate\\Cache\\FileStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method___construct",
		"name": "Illuminate\\Cache\\FileStore::__construct",
		"doc": "Create a new file cache store instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_get",
		"name": "Illuminate\\Cache\\FileStore::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_put",
		"name": "Illuminate\\Cache\\FileStore::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_add",
		"name": "Illuminate\\Cache\\FileStore::add",
		"doc": "Store an item in the cache if the key doesn't exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_ensureCacheDirectoryExists",
		"name": "Illuminate\\Cache\\FileStore::ensureCacheDirectoryExists",
		"doc": "Create the file cache directory if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_ensureFileHasCorrectPermissions",
		"name": "Illuminate\\Cache\\FileStore::ensureFileHasCorrectPermissions",
		"doc": "Ensure the cache file has the correct permissions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_increment",
		"name": "Illuminate\\Cache\\FileStore::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_decrement",
		"name": "Illuminate\\Cache\\FileStore::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_forever",
		"name": "Illuminate\\Cache\\FileStore::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_forget",
		"name": "Illuminate\\Cache\\FileStore::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_flush",
		"name": "Illuminate\\Cache\\FileStore::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_getPayload",
		"name": "Illuminate\\Cache\\FileStore::getPayload",
		"doc": "Retrieve an item and expiry time from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_emptyPayload",
		"name": "Illuminate\\Cache\\FileStore::emptyPayload",
		"doc": "Get a default empty payload for the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_path",
		"name": "Illuminate\\Cache\\FileStore::path",
		"doc": "Get the full path for the given cache key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_expiration",
		"name": "Illuminate\\Cache\\FileStore::expiration",
		"doc": "Get the expiration time based on the given seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_getFilesystem",
		"name": "Illuminate\\Cache\\FileStore::getFilesystem",
		"doc": "Get the Filesystem instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_getDirectory",
		"name": "Illuminate\\Cache\\FileStore::getDirectory",
		"doc": "Get the working directory of the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\FileStore",
		"fromLink": "Illuminate/Cache/FileStore.html",
		"link": "Illuminate/Cache/FileStore.html#method_getPrefix",
		"name": "Illuminate\\Cache\\FileStore::getPrefix",
		"doc": "Get the cache key prefix."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/HasCacheLock.html",
		"name": "Illuminate\\Cache\\HasCacheLock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\HasCacheLock",
		"fromLink": "Illuminate/Cache/HasCacheLock.html",
		"link": "Illuminate/Cache/HasCacheLock.html#method_lock",
		"name": "Illuminate\\Cache\\HasCacheLock::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\HasCacheLock",
		"fromLink": "Illuminate/Cache/HasCacheLock.html",
		"link": "Illuminate/Cache/HasCacheLock.html#method_restoreLock",
		"name": "Illuminate\\Cache\\HasCacheLock::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/Lock.html",
		"name": "Illuminate\\Cache\\Lock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method___construct",
		"name": "Illuminate\\Cache\\Lock::__construct",
		"doc": "Create a new lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method_acquire",
		"name": "Illuminate\\Cache\\Lock::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method_release",
		"name": "Illuminate\\Cache\\Lock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method_getCurrentOwner",
		"name": "Illuminate\\Cache\\Lock::getCurrentOwner",
		"doc": "Returns the owner value written into the driver for this lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method_get",
		"name": "Illuminate\\Cache\\Lock::get",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method_block",
		"name": "Illuminate\\Cache\\Lock::block",
		"doc": "Attempt to acquire the lock for the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method_owner",
		"name": "Illuminate\\Cache\\Lock::owner",
		"doc": "Returns the current owner of the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method_isOwnedByCurrentProcess",
		"name": "Illuminate\\Cache\\Lock::isOwnedByCurrentProcess",
		"doc": "Determines whether this lock is allowed to release the lock in the driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Lock",
		"fromLink": "Illuminate/Cache/Lock.html",
		"link": "Illuminate/Cache/Lock.html#method_betweenBlockedAttemptsSleepFor",
		"name": "Illuminate\\Cache\\Lock::betweenBlockedAttemptsSleepFor",
		"doc": "Specify the number of milliseconds to sleep in between blocked lock aquisition attempts."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/LuaScripts.html",
		"name": "Illuminate\\Cache\\LuaScripts",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\LuaScripts",
		"fromLink": "Illuminate/Cache/LuaScripts.html",
		"link": "Illuminate/Cache/LuaScripts.html#method_releaseLock",
		"name": "Illuminate\\Cache\\LuaScripts::releaseLock",
		"doc": "Get the Lua script to atomically release a lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/MemcachedConnector.html",
		"name": "Illuminate\\Cache\\MemcachedConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedConnector",
		"fromLink": "Illuminate/Cache/MemcachedConnector.html",
		"link": "Illuminate/Cache/MemcachedConnector.html#method_connect",
		"name": "Illuminate\\Cache\\MemcachedConnector::connect",
		"doc": "Create a new Memcached connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedConnector",
		"fromLink": "Illuminate/Cache/MemcachedConnector.html",
		"link": "Illuminate/Cache/MemcachedConnector.html#method_getMemcached",
		"name": "Illuminate\\Cache\\MemcachedConnector::getMemcached",
		"doc": "Get a new Memcached instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedConnector",
		"fromLink": "Illuminate/Cache/MemcachedConnector.html",
		"link": "Illuminate/Cache/MemcachedConnector.html#method_createMemcachedInstance",
		"name": "Illuminate\\Cache\\MemcachedConnector::createMemcachedInstance",
		"doc": "Create the Memcached instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedConnector",
		"fromLink": "Illuminate/Cache/MemcachedConnector.html",
		"link": "Illuminate/Cache/MemcachedConnector.html#method_setCredentials",
		"name": "Illuminate\\Cache\\MemcachedConnector::setCredentials",
		"doc": "Set the SASL credentials on the Memcached connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/MemcachedLock.html",
		"name": "Illuminate\\Cache\\MemcachedLock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedLock",
		"fromLink": "Illuminate/Cache/MemcachedLock.html",
		"link": "Illuminate/Cache/MemcachedLock.html#method___construct",
		"name": "Illuminate\\Cache\\MemcachedLock::__construct",
		"doc": "Create a new lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedLock",
		"fromLink": "Illuminate/Cache/MemcachedLock.html",
		"link": "Illuminate/Cache/MemcachedLock.html#method_acquire",
		"name": "Illuminate\\Cache\\MemcachedLock::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedLock",
		"fromLink": "Illuminate/Cache/MemcachedLock.html",
		"link": "Illuminate/Cache/MemcachedLock.html#method_release",
		"name": "Illuminate\\Cache\\MemcachedLock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedLock",
		"fromLink": "Illuminate/Cache/MemcachedLock.html",
		"link": "Illuminate/Cache/MemcachedLock.html#method_forceRelease",
		"name": "Illuminate\\Cache\\MemcachedLock::forceRelease",
		"doc": "Releases this lock in disregard of ownership."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedLock",
		"fromLink": "Illuminate/Cache/MemcachedLock.html",
		"link": "Illuminate/Cache/MemcachedLock.html#method_getCurrentOwner",
		"name": "Illuminate\\Cache\\MemcachedLock::getCurrentOwner",
		"doc": "Returns the owner value written into the driver for this lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/MemcachedStore.html",
		"name": "Illuminate\\Cache\\MemcachedStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method___construct",
		"name": "Illuminate\\Cache\\MemcachedStore::__construct",
		"doc": "Create a new Memcached store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_get",
		"name": "Illuminate\\Cache\\MemcachedStore::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_many",
		"name": "Illuminate\\Cache\\MemcachedStore::many",
		"doc": "Retrieve multiple items from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_put",
		"name": "Illuminate\\Cache\\MemcachedStore::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_putMany",
		"name": "Illuminate\\Cache\\MemcachedStore::putMany",
		"doc": "Store multiple items in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_add",
		"name": "Illuminate\\Cache\\MemcachedStore::add",
		"doc": "Store an item in the cache if the key doesn't exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_increment",
		"name": "Illuminate\\Cache\\MemcachedStore::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_decrement",
		"name": "Illuminate\\Cache\\MemcachedStore::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_forever",
		"name": "Illuminate\\Cache\\MemcachedStore::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_lock",
		"name": "Illuminate\\Cache\\MemcachedStore::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_restoreLock",
		"name": "Illuminate\\Cache\\MemcachedStore::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_forget",
		"name": "Illuminate\\Cache\\MemcachedStore::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_flush",
		"name": "Illuminate\\Cache\\MemcachedStore::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_calculateExpiration",
		"name": "Illuminate\\Cache\\MemcachedStore::calculateExpiration",
		"doc": "Get the expiration time of the key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_toTimestamp",
		"name": "Illuminate\\Cache\\MemcachedStore::toTimestamp",
		"doc": "Get the UNIX timestamp for the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_getMemcached",
		"name": "Illuminate\\Cache\\MemcachedStore::getMemcached",
		"doc": "Get the underlying Memcached connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_getPrefix",
		"name": "Illuminate\\Cache\\MemcachedStore::getPrefix",
		"doc": "Get the cache key prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\MemcachedStore",
		"fromLink": "Illuminate/Cache/MemcachedStore.html",
		"link": "Illuminate/Cache/MemcachedStore.html#method_setPrefix",
		"name": "Illuminate\\Cache\\MemcachedStore::setPrefix",
		"doc": "Set the cache key prefix."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/NoLock.html",
		"name": "Illuminate\\Cache\\NoLock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NoLock",
		"fromLink": "Illuminate/Cache/NoLock.html",
		"link": "Illuminate/Cache/NoLock.html#method_acquire",
		"name": "Illuminate\\Cache\\NoLock::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NoLock",
		"fromLink": "Illuminate/Cache/NoLock.html",
		"link": "Illuminate/Cache/NoLock.html#method_release",
		"name": "Illuminate\\Cache\\NoLock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NoLock",
		"fromLink": "Illuminate/Cache/NoLock.html",
		"link": "Illuminate/Cache/NoLock.html#method_forceRelease",
		"name": "Illuminate\\Cache\\NoLock::forceRelease",
		"doc": "Releases this lock in disregard of ownership."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NoLock",
		"fromLink": "Illuminate/Cache/NoLock.html",
		"link": "Illuminate/Cache/NoLock.html#method_getCurrentOwner",
		"name": "Illuminate\\Cache\\NoLock::getCurrentOwner",
		"doc": "Returns the owner value written into the driver for this lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/NullStore.html",
		"name": "Illuminate\\Cache\\NullStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_get",
		"name": "Illuminate\\Cache\\NullStore::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_put",
		"name": "Illuminate\\Cache\\NullStore::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_increment",
		"name": "Illuminate\\Cache\\NullStore::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_decrement",
		"name": "Illuminate\\Cache\\NullStore::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_forever",
		"name": "Illuminate\\Cache\\NullStore::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_lock",
		"name": "Illuminate\\Cache\\NullStore::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_restoreLock",
		"name": "Illuminate\\Cache\\NullStore::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_forget",
		"name": "Illuminate\\Cache\\NullStore::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_flush",
		"name": "Illuminate\\Cache\\NullStore::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\NullStore",
		"fromLink": "Illuminate/Cache/NullStore.html",
		"link": "Illuminate/Cache/NullStore.html#method_getPrefix",
		"name": "Illuminate\\Cache\\NullStore::getPrefix",
		"doc": "Get the cache key prefix."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/RateLimiter.html",
		"name": "Illuminate\\Cache\\RateLimiter",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method___construct",
		"name": "Illuminate\\Cache\\RateLimiter::__construct",
		"doc": "Create a new rate limiter instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_for",
		"name": "Illuminate\\Cache\\RateLimiter::for",
		"doc": "Register a named limiter configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_limiter",
		"name": "Illuminate\\Cache\\RateLimiter::limiter",
		"doc": "Get the given named rate limiter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_tooManyAttempts",
		"name": "Illuminate\\Cache\\RateLimiter::tooManyAttempts",
		"doc": "Determine if the given key has been \"accessed\" too many times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_hit",
		"name": "Illuminate\\Cache\\RateLimiter::hit",
		"doc": "Increment the counter for a given key for a given decay time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_attempts",
		"name": "Illuminate\\Cache\\RateLimiter::attempts",
		"doc": "Get the number of attempts for the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_resetAttempts",
		"name": "Illuminate\\Cache\\RateLimiter::resetAttempts",
		"doc": "Reset the number of attempts for the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_retriesLeft",
		"name": "Illuminate\\Cache\\RateLimiter::retriesLeft",
		"doc": "Get the number of retries left for the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_clear",
		"name": "Illuminate\\Cache\\RateLimiter::clear",
		"doc": "Clear the hits and lockout timer for the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiter",
		"fromLink": "Illuminate/Cache/RateLimiter.html",
		"link": "Illuminate/Cache/RateLimiter.html#method_availableIn",
		"name": "Illuminate\\Cache\\RateLimiter::availableIn",
		"doc": "Get the number of seconds until the \"key\" is accessible again."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\RateLimiting",
		"fromLink": "Illuminate/Cache/RateLimiting.html",
		"link": "Illuminate/Cache/RateLimiting/GlobalLimit.html",
		"name": "Illuminate\\Cache\\RateLimiting\\GlobalLimit",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\GlobalLimit",
		"fromLink": "Illuminate/Cache/RateLimiting/GlobalLimit.html",
		"link": "Illuminate/Cache/RateLimiting/GlobalLimit.html#method___construct",
		"name": "Illuminate\\Cache\\RateLimiting\\GlobalLimit::__construct",
		"doc": "Create a new limit instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\RateLimiting",
		"fromLink": "Illuminate/Cache/RateLimiting.html",
		"link": "Illuminate/Cache/RateLimiting/Limit.html",
		"name": "Illuminate\\Cache\\RateLimiting\\Limit",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\Limit",
		"fromLink": "Illuminate/Cache/RateLimiting/Limit.html",
		"link": "Illuminate/Cache/RateLimiting/Limit.html#method___construct",
		"name": "Illuminate\\Cache\\RateLimiting\\Limit::__construct",
		"doc": "Create a new limit instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\Limit",
		"fromLink": "Illuminate/Cache/RateLimiting/Limit.html",
		"link": "Illuminate/Cache/RateLimiting/Limit.html#method_perMinute",
		"name": "Illuminate\\Cache\\RateLimiting\\Limit::perMinute",
		"doc": "Create a new rate limit."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\Limit",
		"fromLink": "Illuminate/Cache/RateLimiting/Limit.html",
		"link": "Illuminate/Cache/RateLimiting/Limit.html#method_perHour",
		"name": "Illuminate\\Cache\\RateLimiting\\Limit::perHour",
		"doc": "Create a new rate limit using hours as decay time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\Limit",
		"fromLink": "Illuminate/Cache/RateLimiting/Limit.html",
		"link": "Illuminate/Cache/RateLimiting/Limit.html#method_perDay",
		"name": "Illuminate\\Cache\\RateLimiting\\Limit::perDay",
		"doc": "Create a new rate limit using days as decay time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\Limit",
		"fromLink": "Illuminate/Cache/RateLimiting/Limit.html",
		"link": "Illuminate/Cache/RateLimiting/Limit.html#method_none",
		"name": "Illuminate\\Cache\\RateLimiting\\Limit::none",
		"doc": "Create a new unlimited rate limit."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\Limit",
		"fromLink": "Illuminate/Cache/RateLimiting/Limit.html",
		"link": "Illuminate/Cache/RateLimiting/Limit.html#method_by",
		"name": "Illuminate\\Cache\\RateLimiting\\Limit::by",
		"doc": "Set the key of the rate limit."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\Limit",
		"fromLink": "Illuminate/Cache/RateLimiting/Limit.html",
		"link": "Illuminate/Cache/RateLimiting/Limit.html#method_response",
		"name": "Illuminate\\Cache\\RateLimiting\\Limit::response",
		"doc": "Set the callback that should generate the response when the limit is exceeded."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache\\RateLimiting",
		"fromLink": "Illuminate/Cache/RateLimiting.html",
		"link": "Illuminate/Cache/RateLimiting/Unlimited.html",
		"name": "Illuminate\\Cache\\RateLimiting\\Unlimited",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RateLimiting\\Unlimited",
		"fromLink": "Illuminate/Cache/RateLimiting/Unlimited.html",
		"link": "Illuminate/Cache/RateLimiting/Unlimited.html#method___construct",
		"name": "Illuminate\\Cache\\RateLimiting\\Unlimited::__construct",
		"doc": "Create a new limit instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/RedisLock.html",
		"name": "Illuminate\\Cache\\RedisLock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisLock",
		"fromLink": "Illuminate/Cache/RedisLock.html",
		"link": "Illuminate/Cache/RedisLock.html#method___construct",
		"name": "Illuminate\\Cache\\RedisLock::__construct",
		"doc": "Create a new lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisLock",
		"fromLink": "Illuminate/Cache/RedisLock.html",
		"link": "Illuminate/Cache/RedisLock.html#method_acquire",
		"name": "Illuminate\\Cache\\RedisLock::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisLock",
		"fromLink": "Illuminate/Cache/RedisLock.html",
		"link": "Illuminate/Cache/RedisLock.html#method_release",
		"name": "Illuminate\\Cache\\RedisLock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisLock",
		"fromLink": "Illuminate/Cache/RedisLock.html",
		"link": "Illuminate/Cache/RedisLock.html#method_forceRelease",
		"name": "Illuminate\\Cache\\RedisLock::forceRelease",
		"doc": "Releases this lock in disregard of ownership."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisLock",
		"fromLink": "Illuminate/Cache/RedisLock.html",
		"link": "Illuminate/Cache/RedisLock.html#method_getCurrentOwner",
		"name": "Illuminate\\Cache\\RedisLock::getCurrentOwner",
		"doc": "Returns the owner value written into the driver for this lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/RedisStore.html",
		"name": "Illuminate\\Cache\\RedisStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method___construct",
		"name": "Illuminate\\Cache\\RedisStore::__construct",
		"doc": "Create a new Redis store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_get",
		"name": "Illuminate\\Cache\\RedisStore::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_many",
		"name": "Illuminate\\Cache\\RedisStore::many",
		"doc": "Retrieve multiple items from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_put",
		"name": "Illuminate\\Cache\\RedisStore::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_putMany",
		"name": "Illuminate\\Cache\\RedisStore::putMany",
		"doc": "Store multiple items in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_add",
		"name": "Illuminate\\Cache\\RedisStore::add",
		"doc": "Store an item in the cache if the key doesn't exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_increment",
		"name": "Illuminate\\Cache\\RedisStore::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_decrement",
		"name": "Illuminate\\Cache\\RedisStore::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_forever",
		"name": "Illuminate\\Cache\\RedisStore::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_lock",
		"name": "Illuminate\\Cache\\RedisStore::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_restoreLock",
		"name": "Illuminate\\Cache\\RedisStore::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_forget",
		"name": "Illuminate\\Cache\\RedisStore::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_flush",
		"name": "Illuminate\\Cache\\RedisStore::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_tags",
		"name": "Illuminate\\Cache\\RedisStore::tags",
		"doc": "Begin executing a new tags operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_connection",
		"name": "Illuminate\\Cache\\RedisStore::connection",
		"doc": "Get the Redis connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_setConnection",
		"name": "Illuminate\\Cache\\RedisStore::setConnection",
		"doc": "Set the connection name to be used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_getRedis",
		"name": "Illuminate\\Cache\\RedisStore::getRedis",
		"doc": "Get the Redis database instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_getPrefix",
		"name": "Illuminate\\Cache\\RedisStore::getPrefix",
		"doc": "Get the cache key prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_setPrefix",
		"name": "Illuminate\\Cache\\RedisStore::setPrefix",
		"doc": "Set the cache key prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_serialize",
		"name": "Illuminate\\Cache\\RedisStore::serialize",
		"doc": "Serialize the value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisStore",
		"fromLink": "Illuminate/Cache/RedisStore.html",
		"link": "Illuminate/Cache/RedisStore.html#method_unserialize",
		"name": "Illuminate\\Cache\\RedisStore::unserialize",
		"doc": "Unserialize the value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html",
		"name": "Illuminate\\Cache\\RedisTaggedCache",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_put",
		"name": "Illuminate\\Cache\\RedisTaggedCache::put",
		"doc": "Store an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_increment",
		"name": "Illuminate\\Cache\\RedisTaggedCache::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_decrement",
		"name": "Illuminate\\Cache\\RedisTaggedCache::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_forever",
		"name": "Illuminate\\Cache\\RedisTaggedCache::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_flush",
		"name": "Illuminate\\Cache\\RedisTaggedCache::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_pushStandardKeys",
		"name": "Illuminate\\Cache\\RedisTaggedCache::pushStandardKeys",
		"doc": "Store standard key references into store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_pushForeverKeys",
		"name": "Illuminate\\Cache\\RedisTaggedCache::pushForeverKeys",
		"doc": "Store forever key references into store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_pushKeys",
		"name": "Illuminate\\Cache\\RedisTaggedCache::pushKeys",
		"doc": "Store a reference to the cache key against the reference key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_deleteForeverKeys",
		"name": "Illuminate\\Cache\\RedisTaggedCache::deleteForeverKeys",
		"doc": "Delete all of the items that were stored forever."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_deleteStandardKeys",
		"name": "Illuminate\\Cache\\RedisTaggedCache::deleteStandardKeys",
		"doc": "Delete all standard items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_deleteKeysByReference",
		"name": "Illuminate\\Cache\\RedisTaggedCache::deleteKeysByReference",
		"doc": "Find and delete all of the items that were stored against a reference."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_deleteValues",
		"name": "Illuminate\\Cache\\RedisTaggedCache::deleteValues",
		"doc": "Delete item keys that have been stored against a reference."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RedisTaggedCache",
		"fromLink": "Illuminate/Cache/RedisTaggedCache.html",
		"link": "Illuminate/Cache/RedisTaggedCache.html#method_referenceKey",
		"name": "Illuminate\\Cache\\RedisTaggedCache::referenceKey",
		"doc": "Get the reference key for the segment."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/Repository.html",
		"name": "Illuminate\\Cache\\Repository",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method___construct",
		"name": "Illuminate\\Cache\\Repository::__construct",
		"doc": "Create a new cache repository instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_has",
		"name": "Illuminate\\Cache\\Repository::has",
		"doc": "Determine if an item exists in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_missing",
		"name": "Illuminate\\Cache\\Repository::missing",
		"doc": "Determine if an item doesn't exist in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_get",
		"name": "Illuminate\\Cache\\Repository::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_many",
		"name": "Illuminate\\Cache\\Repository::many",
		"doc": "Retrieve multiple items from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_getMultiple",
		"name": "Illuminate\\Cache\\Repository::getMultiple",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_handleManyResult",
		"name": "Illuminate\\Cache\\Repository::handleManyResult",
		"doc": "Handle a result for the \"many\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_pull",
		"name": "Illuminate\\Cache\\Repository::pull",
		"doc": "Retrieve an item from the cache and delete it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_put",
		"name": "Illuminate\\Cache\\Repository::put",
		"doc": "Store an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_set",
		"name": "Illuminate\\Cache\\Repository::set",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_putMany",
		"name": "Illuminate\\Cache\\Repository::putMany",
		"doc": "Store multiple items in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_putManyForever",
		"name": "Illuminate\\Cache\\Repository::putManyForever",
		"doc": "Store multiple items in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_setMultiple",
		"name": "Illuminate\\Cache\\Repository::setMultiple",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_add",
		"name": "Illuminate\\Cache\\Repository::add",
		"doc": "Store an item in the cache if the key does not exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_increment",
		"name": "Illuminate\\Cache\\Repository::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_decrement",
		"name": "Illuminate\\Cache\\Repository::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_forever",
		"name": "Illuminate\\Cache\\Repository::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_remember",
		"name": "Illuminate\\Cache\\Repository::remember",
		"doc": "Get an item from the cache, or execute the given Closure and store the result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_sear",
		"name": "Illuminate\\Cache\\Repository::sear",
		"doc": "Get an item from the cache, or execute the given Closure and store the result forever."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_rememberForever",
		"name": "Illuminate\\Cache\\Repository::rememberForever",
		"doc": "Get an item from the cache, or execute the given Closure and store the result forever."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_forget",
		"name": "Illuminate\\Cache\\Repository::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_delete",
		"name": "Illuminate\\Cache\\Repository::delete",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_deleteMultiple",
		"name": "Illuminate\\Cache\\Repository::deleteMultiple",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_clear",
		"name": "Illuminate\\Cache\\Repository::clear",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_tags",
		"name": "Illuminate\\Cache\\Repository::tags",
		"doc": "Begin executing a new tags operation if the store supports it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_itemKey",
		"name": "Illuminate\\Cache\\Repository::itemKey",
		"doc": "Format the key for a cache item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_getSeconds",
		"name": "Illuminate\\Cache\\Repository::getSeconds",
		"doc": "Calculate the number of seconds for the given TTL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_supportsTags",
		"name": "Illuminate\\Cache\\Repository::supportsTags",
		"doc": "Determine if the current store supports tags."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_getDefaultCacheTime",
		"name": "Illuminate\\Cache\\Repository::getDefaultCacheTime",
		"doc": "Get the default cache time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_setDefaultCacheTime",
		"name": "Illuminate\\Cache\\Repository::setDefaultCacheTime",
		"doc": "Set the default cache time in seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_getStore",
		"name": "Illuminate\\Cache\\Repository::getStore",
		"doc": "Get the cache store implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_event",
		"name": "Illuminate\\Cache\\Repository::event",
		"doc": "Fire an event for this cache instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_getEventDispatcher",
		"name": "Illuminate\\Cache\\Repository::getEventDispatcher",
		"doc": "Get the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_setEventDispatcher",
		"name": "Illuminate\\Cache\\Repository::setEventDispatcher",
		"doc": "Set the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_offsetExists",
		"name": "Illuminate\\Cache\\Repository::offsetExists",
		"doc": "Determine if a cached value exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_offsetGet",
		"name": "Illuminate\\Cache\\Repository::offsetGet",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_offsetSet",
		"name": "Illuminate\\Cache\\Repository::offsetSet",
		"doc": "Store an item in the cache for the default time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method_offsetUnset",
		"name": "Illuminate\\Cache\\Repository::offsetUnset",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method___call",
		"name": "Illuminate\\Cache\\Repository::__call",
		"doc": "Handle dynamic calls into macros or pass missing methods to the store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\Repository",
		"fromLink": "Illuminate/Cache/Repository.html",
		"link": "Illuminate/Cache/Repository.html#method___clone",
		"name": "Illuminate\\Cache\\Repository::__clone",
		"doc": "Clone cache repository instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/RetrievesMultipleKeys.html",
		"name": "Illuminate\\Cache\\RetrievesMultipleKeys",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RetrievesMultipleKeys",
		"fromLink": "Illuminate/Cache/RetrievesMultipleKeys.html",
		"link": "Illuminate/Cache/RetrievesMultipleKeys.html#method_many",
		"name": "Illuminate\\Cache\\RetrievesMultipleKeys::many",
		"doc": "Retrieve multiple items from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\RetrievesMultipleKeys",
		"fromLink": "Illuminate/Cache/RetrievesMultipleKeys.html",
		"link": "Illuminate/Cache/RetrievesMultipleKeys.html#method_putMany",
		"name": "Illuminate\\Cache\\RetrievesMultipleKeys::putMany",
		"doc": "Store multiple items in the cache for a given number of seconds."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/TagSet.html",
		"name": "Illuminate\\Cache\\TagSet",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TagSet",
		"fromLink": "Illuminate/Cache/TagSet.html",
		"link": "Illuminate/Cache/TagSet.html#method___construct",
		"name": "Illuminate\\Cache\\TagSet::__construct",
		"doc": "Create a new TagSet instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TagSet",
		"fromLink": "Illuminate/Cache/TagSet.html",
		"link": "Illuminate/Cache/TagSet.html#method_reset",
		"name": "Illuminate\\Cache\\TagSet::reset",
		"doc": "Reset all tags in the set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TagSet",
		"fromLink": "Illuminate/Cache/TagSet.html",
		"link": "Illuminate/Cache/TagSet.html#method_resetTag",
		"name": "Illuminate\\Cache\\TagSet::resetTag",
		"doc": "Reset the tag and return the new tag identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TagSet",
		"fromLink": "Illuminate/Cache/TagSet.html",
		"link": "Illuminate/Cache/TagSet.html#method_getNamespace",
		"name": "Illuminate\\Cache\\TagSet::getNamespace",
		"doc": "Get a unique namespace that changes when any of the tags are flushed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TagSet",
		"fromLink": "Illuminate/Cache/TagSet.html",
		"link": "Illuminate/Cache/TagSet.html#method_tagIds",
		"name": "Illuminate\\Cache\\TagSet::tagIds",
		"doc": "Get an array of tag identifiers for all of the tags in the set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TagSet",
		"fromLink": "Illuminate/Cache/TagSet.html",
		"link": "Illuminate/Cache/TagSet.html#method_tagId",
		"name": "Illuminate\\Cache\\TagSet::tagId",
		"doc": "Get the unique tag identifier for a given tag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TagSet",
		"fromLink": "Illuminate/Cache/TagSet.html",
		"link": "Illuminate/Cache/TagSet.html#method_tagKey",
		"name": "Illuminate\\Cache\\TagSet::tagKey",
		"doc": "Get the tag identifier key for a given tag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TagSet",
		"fromLink": "Illuminate/Cache/TagSet.html",
		"link": "Illuminate/Cache/TagSet.html#method_getNames",
		"name": "Illuminate\\Cache\\TagSet::getNames",
		"doc": "Get all of the tag names in the set."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/TaggableStore.html",
		"name": "Illuminate\\Cache\\TaggableStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggableStore",
		"fromLink": "Illuminate/Cache/TaggableStore.html",
		"link": "Illuminate/Cache/TaggableStore.html#method_tags",
		"name": "Illuminate\\Cache\\TaggableStore::tags",
		"doc": "Begin executing a new tags operation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cache",
		"fromLink": "Illuminate/Cache.html",
		"link": "Illuminate/Cache/TaggedCache.html",
		"name": "Illuminate\\Cache\\TaggedCache",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method___construct",
		"name": "Illuminate\\Cache\\TaggedCache::__construct",
		"doc": "Create a new tagged cache instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method_putMany",
		"name": "Illuminate\\Cache\\TaggedCache::putMany",
		"doc": "Store multiple items in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method_increment",
		"name": "Illuminate\\Cache\\TaggedCache::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method_decrement",
		"name": "Illuminate\\Cache\\TaggedCache::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method_flush",
		"name": "Illuminate\\Cache\\TaggedCache::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method_itemKey",
		"name": "Illuminate\\Cache\\TaggedCache::itemKey",
		"doc": "Format the key for a cache item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method_taggedItemKey",
		"name": "Illuminate\\Cache\\TaggedCache::taggedItemKey",
		"doc": "Get a fully qualified key for a tagged item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method_event",
		"name": "Illuminate\\Cache\\TaggedCache::event",
		"doc": "Fire an event for this cache instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cache\\TaggedCache",
		"fromLink": "Illuminate/Cache/TaggedCache.html",
		"link": "Illuminate/Cache/TaggedCache.html#method_getTags",
		"name": "Illuminate\\Cache\\TaggedCache::getTags",
		"doc": "Get the tag set instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Config",
		"fromLink": "Illuminate/Config.html",
		"link": "Illuminate/Config/Repository.html",
		"name": "Illuminate\\Config\\Repository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method___construct",
		"name": "Illuminate\\Config\\Repository::__construct",
		"doc": "Create a new configuration repository."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_has",
		"name": "Illuminate\\Config\\Repository::has",
		"doc": "Determine if the given configuration value exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_get",
		"name": "Illuminate\\Config\\Repository::get",
		"doc": "Get the specified configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_getMany",
		"name": "Illuminate\\Config\\Repository::getMany",
		"doc": "Get many configuration values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_set",
		"name": "Illuminate\\Config\\Repository::set",
		"doc": "Set a given configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_prepend",
		"name": "Illuminate\\Config\\Repository::prepend",
		"doc": "Prepend a value onto an array configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_push",
		"name": "Illuminate\\Config\\Repository::push",
		"doc": "Push a value onto an array configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_all",
		"name": "Illuminate\\Config\\Repository::all",
		"doc": "Get all of the configuration items for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_offsetExists",
		"name": "Illuminate\\Config\\Repository::offsetExists",
		"doc": "Determine if the given configuration option exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_offsetGet",
		"name": "Illuminate\\Config\\Repository::offsetGet",
		"doc": "Get a configuration option."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_offsetSet",
		"name": "Illuminate\\Config\\Repository::offsetSet",
		"doc": "Set a configuration option."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Config\\Repository",
		"fromLink": "Illuminate/Config/Repository.html",
		"link": "Illuminate/Config/Repository.html#method_offsetUnset",
		"name": "Illuminate\\Config\\Repository::offsetUnset",
		"doc": "Unset a configuration option."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console",
		"fromLink": "Illuminate/Console.html",
		"link": "Illuminate/Console/Application.html",
		"name": "Illuminate\\Console\\Application",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method___construct",
		"name": "Illuminate\\Console\\Application::__construct",
		"doc": "Create a new Artisan console application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_run",
		"name": "Illuminate\\Console\\Application::run",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_phpBinary",
		"name": "Illuminate\\Console\\Application::phpBinary",
		"doc": "Determine the proper PHP executable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_artisanBinary",
		"name": "Illuminate\\Console\\Application::artisanBinary",
		"doc": "Determine the proper Artisan executable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_formatCommandString",
		"name": "Illuminate\\Console\\Application::formatCommandString",
		"doc": "Format the given command as a fully-qualified executable command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_starting",
		"name": "Illuminate\\Console\\Application::starting",
		"doc": "Register a console \"starting\" bootstrapper."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_bootstrap",
		"name": "Illuminate\\Console\\Application::bootstrap",
		"doc": "Bootstrap the console application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_forgetBootstrappers",
		"name": "Illuminate\\Console\\Application::forgetBootstrappers",
		"doc": "Clear the console application bootstrappers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_call",
		"name": "Illuminate\\Console\\Application::call",
		"doc": "Run an Artisan console command by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_parseCommand",
		"name": "Illuminate\\Console\\Application::parseCommand",
		"doc": "Parse the incoming Artisan command and its input."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_output",
		"name": "Illuminate\\Console\\Application::output",
		"doc": "Get the output for the last run command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_add",
		"name": "Illuminate\\Console\\Application::add",
		"doc": "Add a command to the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_addToParent",
		"name": "Illuminate\\Console\\Application::addToParent",
		"doc": "Add the command to the parent instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_resolve",
		"name": "Illuminate\\Console\\Application::resolve",
		"doc": "Add a command, resolving through the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_resolveCommands",
		"name": "Illuminate\\Console\\Application::resolveCommands",
		"doc": "Resolve an array of commands through the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_getDefaultInputDefinition",
		"name": "Illuminate\\Console\\Application::getDefaultInputDefinition",
		"doc": "Get the default input definition for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_getEnvironmentOption",
		"name": "Illuminate\\Console\\Application::getEnvironmentOption",
		"doc": "Get the global environment option for the definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Application",
		"fromLink": "Illuminate/Console/Application.html",
		"link": "Illuminate/Console/Application.html#method_getLaravel",
		"name": "Illuminate\\Console\\Application::getLaravel",
		"doc": "Get the Laravel application instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console",
		"fromLink": "Illuminate/Console.html",
		"link": "Illuminate/Console/Command.html",
		"name": "Illuminate\\Console\\Command",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method___construct",
		"name": "Illuminate\\Console\\Command::__construct",
		"doc": "Create a new console command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method_configureUsingFluentDefinition",
		"name": "Illuminate\\Console\\Command::configureUsingFluentDefinition",
		"doc": "Configure the console command using a fluent definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method_run",
		"name": "Illuminate\\Console\\Command::run",
		"doc": "Run the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method_execute",
		"name": "Illuminate\\Console\\Command::execute",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method_resolveCommand",
		"name": "Illuminate\\Console\\Command::resolveCommand",
		"doc": "Resolve the console command instance for the given command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method_isHidden",
		"name": "Illuminate\\Console\\Command::isHidden",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method_setHidden",
		"name": "Illuminate\\Console\\Command::setHidden",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method_getLaravel",
		"name": "Illuminate\\Console\\Command::getLaravel",
		"doc": "Get the Laravel application instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Command",
		"fromLink": "Illuminate/Console/Command.html",
		"link": "Illuminate/Console/Command.html#method_setLaravel",
		"name": "Illuminate\\Console\\Command::setLaravel",
		"doc": "Set the Laravel application instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Console\\Concerns",
		"fromLink": "Illuminate/Console/Concerns.html",
		"link": "Illuminate/Console/Concerns/CallsCommands.html",
		"name": "Illuminate\\Console\\Concerns\\CallsCommands",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\CallsCommands",
		"fromLink": "Illuminate/Console/Concerns/CallsCommands.html",
		"link": "Illuminate/Console/Concerns/CallsCommands.html#method_resolveCommand",
		"name": "Illuminate\\Console\\Concerns\\CallsCommands::resolveCommand",
		"doc": "Resolve the console command instance for the given command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\CallsCommands",
		"fromLink": "Illuminate/Console/Concerns/CallsCommands.html",
		"link": "Illuminate/Console/Concerns/CallsCommands.html#method_call",
		"name": "Illuminate\\Console\\Concerns\\CallsCommands::call",
		"doc": "Call another console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\CallsCommands",
		"fromLink": "Illuminate/Console/Concerns/CallsCommands.html",
		"link": "Illuminate/Console/Concerns/CallsCommands.html#method_callSilent",
		"name": "Illuminate\\Console\\Concerns\\CallsCommands::callSilent",
		"doc": "Call another console command without output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\CallsCommands",
		"fromLink": "Illuminate/Console/Concerns/CallsCommands.html",
		"link": "Illuminate/Console/Concerns/CallsCommands.html#method_callSilently",
		"name": "Illuminate\\Console\\Concerns\\CallsCommands::callSilently",
		"doc": "Call another console command without output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\CallsCommands",
		"fromLink": "Illuminate/Console/Concerns/CallsCommands.html",
		"link": "Illuminate/Console/Concerns/CallsCommands.html#method_runCommand",
		"name": "Illuminate\\Console\\Concerns\\CallsCommands::runCommand",
		"doc": "Run the given the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\CallsCommands",
		"fromLink": "Illuminate/Console/Concerns/CallsCommands.html",
		"link": "Illuminate/Console/Concerns/CallsCommands.html#method_createInputFromArguments",
		"name": "Illuminate\\Console\\Concerns\\CallsCommands::createInputFromArguments",
		"doc": "Create an input instance from the given arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\CallsCommands",
		"fromLink": "Illuminate/Console/Concerns/CallsCommands.html",
		"link": "Illuminate/Console/Concerns/CallsCommands.html#method_context",
		"name": "Illuminate\\Console\\Concerns\\CallsCommands::context",
		"doc": "Get all of the context passed to the command."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Console\\Concerns",
		"fromLink": "Illuminate/Console/Concerns.html",
		"link": "Illuminate/Console/Concerns/HasParameters.html",
		"name": "Illuminate\\Console\\Concerns\\HasParameters",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\HasParameters",
		"fromLink": "Illuminate/Console/Concerns/HasParameters.html",
		"link": "Illuminate/Console/Concerns/HasParameters.html#method_specifyParameters",
		"name": "Illuminate\\Console\\Concerns\\HasParameters::specifyParameters",
		"doc": "Specify the arguments and options on the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\HasParameters",
		"fromLink": "Illuminate/Console/Concerns/HasParameters.html",
		"link": "Illuminate/Console/Concerns/HasParameters.html#method_getArguments",
		"name": "Illuminate\\Console\\Concerns\\HasParameters::getArguments",
		"doc": "Get the console command arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\HasParameters",
		"fromLink": "Illuminate/Console/Concerns/HasParameters.html",
		"link": "Illuminate/Console/Concerns/HasParameters.html#method_getOptions",
		"name": "Illuminate\\Console\\Concerns\\HasParameters::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Console\\Concerns",
		"fromLink": "Illuminate/Console/Concerns.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_hasArgument",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::hasArgument",
		"doc": "Determine if the given argument is present."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_argument",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::argument",
		"doc": "Get the value of a command argument."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_arguments",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::arguments",
		"doc": "Get all of the arguments passed to the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_hasOption",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::hasOption",
		"doc": "Determine if the given option is present."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_option",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::option",
		"doc": "Get the value of a command option."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_options",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::options",
		"doc": "Get all of the options passed to the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_confirm",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::confirm",
		"doc": "Confirm a question with the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_ask",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::ask",
		"doc": "Prompt the user for input."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_anticipate",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::anticipate",
		"doc": "Prompt the user for input with auto completion."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_askWithCompletion",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::askWithCompletion",
		"doc": "Prompt the user for input with auto completion."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_secret",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::secret",
		"doc": "Prompt the user for input but hide the answer from the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_choice",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::choice",
		"doc": "Give the user a single choice from an array of answers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_table",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::table",
		"doc": "Format input to textual table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_withProgressBar",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::withProgressBar",
		"doc": "Execute a given callback while advancing a progress bar."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_info",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::info",
		"doc": "Write a string as information output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_line",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::line",
		"doc": "Write a string as standard output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_comment",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::comment",
		"doc": "Write a string as comment output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_question",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::question",
		"doc": "Write a string as question output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_error",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::error",
		"doc": "Write a string as error output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_warn",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::warn",
		"doc": "Write a string as warning output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_alert",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::alert",
		"doc": "Write a string in an alert box."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_newLine",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::newLine",
		"doc": "Write a blank line."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_setInput",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::setInput",
		"doc": "Set the input interface implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_setOutput",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::setOutput",
		"doc": "Set the output interface implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_setVerbosity",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::setVerbosity",
		"doc": "Set the verbosity level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_parseVerbosity",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::parseVerbosity",
		"doc": "Get the verbosity level in terms of Symfony's OutputInterface level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Concerns\\InteractsWithIO",
		"fromLink": "Illuminate/Console/Concerns/InteractsWithIO.html",
		"link": "Illuminate/Console/Concerns/InteractsWithIO.html#method_getOutput",
		"name": "Illuminate\\Console\\Concerns\\InteractsWithIO::getOutput",
		"doc": "Get the output implementation."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Console",
		"fromLink": "Illuminate/Console.html",
		"link": "Illuminate/Console/ConfirmableTrait.html",
		"name": "Illuminate\\Console\\ConfirmableTrait",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\ConfirmableTrait",
		"fromLink": "Illuminate/Console/ConfirmableTrait.html",
		"link": "Illuminate/Console/ConfirmableTrait.html#method_confirmToProceed",
		"name": "Illuminate\\Console\\ConfirmableTrait::confirmToProceed",
		"doc": "Confirm before proceeding with the action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\ConfirmableTrait",
		"fromLink": "Illuminate/Console/ConfirmableTrait.html",
		"link": "Illuminate/Console/ConfirmableTrait.html#method_getDefaultConfirmCallback",
		"name": "Illuminate\\Console\\ConfirmableTrait::getDefaultConfirmCallback",
		"doc": "Get the default confirmation callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Events",
		"fromLink": "Illuminate/Console/Events.html",
		"link": "Illuminate/Console/Events/ArtisanStarting.html",
		"name": "Illuminate\\Console\\Events\\ArtisanStarting",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Events\\ArtisanStarting",
		"fromLink": "Illuminate/Console/Events/ArtisanStarting.html",
		"link": "Illuminate/Console/Events/ArtisanStarting.html#method___construct",
		"name": "Illuminate\\Console\\Events\\ArtisanStarting::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Events",
		"fromLink": "Illuminate/Console/Events.html",
		"link": "Illuminate/Console/Events/CommandFinished.html",
		"name": "Illuminate\\Console\\Events\\CommandFinished",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Events\\CommandFinished",
		"fromLink": "Illuminate/Console/Events/CommandFinished.html",
		"link": "Illuminate/Console/Events/CommandFinished.html#method___construct",
		"name": "Illuminate\\Console\\Events\\CommandFinished::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Events",
		"fromLink": "Illuminate/Console/Events.html",
		"link": "Illuminate/Console/Events/CommandStarting.html",
		"name": "Illuminate\\Console\\Events\\CommandStarting",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Events\\CommandStarting",
		"fromLink": "Illuminate/Console/Events/CommandStarting.html",
		"link": "Illuminate/Console/Events/CommandStarting.html#method___construct",
		"name": "Illuminate\\Console\\Events\\CommandStarting::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Events",
		"fromLink": "Illuminate/Console/Events.html",
		"link": "Illuminate/Console/Events/ScheduledTaskFailed.html",
		"name": "Illuminate\\Console\\Events\\ScheduledTaskFailed",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Events\\ScheduledTaskFailed",
		"fromLink": "Illuminate/Console/Events/ScheduledTaskFailed.html",
		"link": "Illuminate/Console/Events/ScheduledTaskFailed.html#method___construct",
		"name": "Illuminate\\Console\\Events\\ScheduledTaskFailed::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Events",
		"fromLink": "Illuminate/Console/Events.html",
		"link": "Illuminate/Console/Events/ScheduledTaskFinished.html",
		"name": "Illuminate\\Console\\Events\\ScheduledTaskFinished",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Events\\ScheduledTaskFinished",
		"fromLink": "Illuminate/Console/Events/ScheduledTaskFinished.html",
		"link": "Illuminate/Console/Events/ScheduledTaskFinished.html#method___construct",
		"name": "Illuminate\\Console\\Events\\ScheduledTaskFinished::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Events",
		"fromLink": "Illuminate/Console/Events.html",
		"link": "Illuminate/Console/Events/ScheduledTaskSkipped.html",
		"name": "Illuminate\\Console\\Events\\ScheduledTaskSkipped",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Events\\ScheduledTaskSkipped",
		"fromLink": "Illuminate/Console/Events/ScheduledTaskSkipped.html",
		"link": "Illuminate/Console/Events/ScheduledTaskSkipped.html#method___construct",
		"name": "Illuminate\\Console\\Events\\ScheduledTaskSkipped::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Events",
		"fromLink": "Illuminate/Console/Events.html",
		"link": "Illuminate/Console/Events/ScheduledTaskStarting.html",
		"name": "Illuminate\\Console\\Events\\ScheduledTaskStarting",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Events\\ScheduledTaskStarting",
		"fromLink": "Illuminate/Console/Events/ScheduledTaskStarting.html",
		"link": "Illuminate/Console/Events/ScheduledTaskStarting.html#method___construct",
		"name": "Illuminate\\Console\\Events\\ScheduledTaskStarting::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console",
		"fromLink": "Illuminate/Console.html",
		"link": "Illuminate/Console/GeneratorCommand.html",
		"name": "Illuminate\\Console\\GeneratorCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method___construct",
		"name": "Illuminate\\Console\\GeneratorCommand::__construct",
		"doc": "Create a new controller creator command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_getStub",
		"name": "Illuminate\\Console\\GeneratorCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_handle",
		"name": "Illuminate\\Console\\GeneratorCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_qualifyClass",
		"name": "Illuminate\\Console\\GeneratorCommand::qualifyClass",
		"doc": "Parse the class name and format according to the root namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_qualifyModel",
		"name": "Illuminate\\Console\\GeneratorCommand::qualifyModel",
		"doc": "Qualify the given model class base name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Console\\GeneratorCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_alreadyExists",
		"name": "Illuminate\\Console\\GeneratorCommand::alreadyExists",
		"doc": "Determine if the class already exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_getPath",
		"name": "Illuminate\\Console\\GeneratorCommand::getPath",
		"doc": "Get the destination class path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_makeDirectory",
		"name": "Illuminate\\Console\\GeneratorCommand::makeDirectory",
		"doc": "Build the directory for the class if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_buildClass",
		"name": "Illuminate\\Console\\GeneratorCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_replaceNamespace",
		"name": "Illuminate\\Console\\GeneratorCommand::replaceNamespace",
		"doc": "Replace the namespace for the given stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_getNamespace",
		"name": "Illuminate\\Console\\GeneratorCommand::getNamespace",
		"doc": "Get the full namespace for a given class, without the class name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_replaceClass",
		"name": "Illuminate\\Console\\GeneratorCommand::replaceClass",
		"doc": "Replace the class name for the given stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_sortImports",
		"name": "Illuminate\\Console\\GeneratorCommand::sortImports",
		"doc": "Alphabetically sorts the imports for the given stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_getNameInput",
		"name": "Illuminate\\Console\\GeneratorCommand::getNameInput",
		"doc": "Get the desired class name from the input."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_rootNamespace",
		"name": "Illuminate\\Console\\GeneratorCommand::rootNamespace",
		"doc": "Get the root namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_userProviderModel",
		"name": "Illuminate\\Console\\GeneratorCommand::userProviderModel",
		"doc": "Get the model for the default guard's user provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_isReservedName",
		"name": "Illuminate\\Console\\GeneratorCommand::isReservedName",
		"doc": "Checks whether the given name is reserved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_viewPath",
		"name": "Illuminate\\Console\\GeneratorCommand::viewPath",
		"doc": "Get the first view directory path from the application configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\GeneratorCommand",
		"fromLink": "Illuminate/Console/GeneratorCommand.html",
		"link": "Illuminate/Console/GeneratorCommand.html#method_getArguments",
		"name": "Illuminate\\Console\\GeneratorCommand::getArguments",
		"doc": "Get the console command arguments."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console",
		"fromLink": "Illuminate/Console.html",
		"link": "Illuminate/Console/OutputStyle.html",
		"name": "Illuminate\\Console\\OutputStyle",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\OutputStyle",
		"fromLink": "Illuminate/Console/OutputStyle.html",
		"link": "Illuminate/Console/OutputStyle.html#method___construct",
		"name": "Illuminate\\Console\\OutputStyle::__construct",
		"doc": "Create a new Console OutputStyle instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\OutputStyle",
		"fromLink": "Illuminate/Console/OutputStyle.html",
		"link": "Illuminate/Console/OutputStyle.html#method_isQuiet",
		"name": "Illuminate\\Console\\OutputStyle::isQuiet",
		"doc": "Returns whether verbosity is quiet (-q)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\OutputStyle",
		"fromLink": "Illuminate/Console/OutputStyle.html",
		"link": "Illuminate/Console/OutputStyle.html#method_isVerbose",
		"name": "Illuminate\\Console\\OutputStyle::isVerbose",
		"doc": "Returns whether verbosity is verbose (-v)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\OutputStyle",
		"fromLink": "Illuminate/Console/OutputStyle.html",
		"link": "Illuminate/Console/OutputStyle.html#method_isVeryVerbose",
		"name": "Illuminate\\Console\\OutputStyle::isVeryVerbose",
		"doc": "Returns whether verbosity is very verbose (-vv)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\OutputStyle",
		"fromLink": "Illuminate/Console/OutputStyle.html",
		"link": "Illuminate/Console/OutputStyle.html#method_isDebug",
		"name": "Illuminate\\Console\\OutputStyle::isDebug",
		"doc": "Returns whether verbosity is debug (-vvv)."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console",
		"fromLink": "Illuminate/Console.html",
		"link": "Illuminate/Console/Parser.html",
		"name": "Illuminate\\Console\\Parser",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Parser",
		"fromLink": "Illuminate/Console/Parser.html",
		"link": "Illuminate/Console/Parser.html#method_parse",
		"name": "Illuminate\\Console\\Parser::parse",
		"doc": "Parse the given console command definition into an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Parser",
		"fromLink": "Illuminate/Console/Parser.html",
		"link": "Illuminate/Console/Parser.html#method_name",
		"name": "Illuminate\\Console\\Parser::name",
		"doc": "Extract the name of the command from the expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Parser",
		"fromLink": "Illuminate/Console/Parser.html",
		"link": "Illuminate/Console/Parser.html#method_parameters",
		"name": "Illuminate\\Console\\Parser::parameters",
		"doc": "Extract all of the parameters from the tokens."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Parser",
		"fromLink": "Illuminate/Console/Parser.html",
		"link": "Illuminate/Console/Parser.html#method_parseArgument",
		"name": "Illuminate\\Console\\Parser::parseArgument",
		"doc": "Parse an argument expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Parser",
		"fromLink": "Illuminate/Console/Parser.html",
		"link": "Illuminate/Console/Parser.html#method_parseOption",
		"name": "Illuminate\\Console\\Parser::parseOption",
		"doc": "Parse an option expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Parser",
		"fromLink": "Illuminate/Console/Parser.html",
		"link": "Illuminate/Console/Parser.html#method_extractDescription",
		"name": "Illuminate\\Console\\Parser::extractDescription",
		"doc": "Parse the token into its token and description segments."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/CacheAware.html",
		"name": "Illuminate\\Console\\Scheduling\\CacheAware",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheAware",
		"fromLink": "Illuminate/Console/Scheduling/CacheAware.html",
		"link": "Illuminate/Console/Scheduling/CacheAware.html#method_useStore",
		"name": "Illuminate\\Console\\Scheduling\\CacheAware::useStore",
		"doc": "Specify the cache store that should be used."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/CacheEventMutex.html",
		"name": "Illuminate\\Console\\Scheduling\\CacheEventMutex",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheEventMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheEventMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheEventMutex.html#method___construct",
		"name": "Illuminate\\Console\\Scheduling\\CacheEventMutex::__construct",
		"doc": "Create a new overlapping strategy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheEventMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheEventMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheEventMutex.html#method_create",
		"name": "Illuminate\\Console\\Scheduling\\CacheEventMutex::create",
		"doc": "Attempt to obtain an event mutex for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheEventMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheEventMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheEventMutex.html#method_exists",
		"name": "Illuminate\\Console\\Scheduling\\CacheEventMutex::exists",
		"doc": "Determine if an event mutex exists for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheEventMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheEventMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheEventMutex.html#method_forget",
		"name": "Illuminate\\Console\\Scheduling\\CacheEventMutex::forget",
		"doc": "Clear the event mutex for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheEventMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheEventMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheEventMutex.html#method_useStore",
		"name": "Illuminate\\Console\\Scheduling\\CacheEventMutex::useStore",
		"doc": "Specify the cache store that should be used."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html",
		"name": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html#method___construct",
		"name": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex::__construct",
		"doc": "Create a new scheduling strategy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html#method_create",
		"name": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex::create",
		"doc": "Attempt to obtain a scheduling mutex for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html#method_exists",
		"name": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex::exists",
		"doc": "Determine if a scheduling mutex exists for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex",
		"fromLink": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html",
		"link": "Illuminate/Console/Scheduling/CacheSchedulingMutex.html#method_useStore",
		"name": "Illuminate\\Console\\Scheduling\\CacheSchedulingMutex::useStore",
		"doc": "Specify the cache store that should be used."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/CallbackEvent.html",
		"name": "Illuminate\\Console\\Scheduling\\CallbackEvent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CallbackEvent",
		"fromLink": "Illuminate/Console/Scheduling/CallbackEvent.html",
		"link": "Illuminate/Console/Scheduling/CallbackEvent.html#method___construct",
		"name": "Illuminate\\Console\\Scheduling\\CallbackEvent::__construct",
		"doc": "Create a new event instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CallbackEvent",
		"fromLink": "Illuminate/Console/Scheduling/CallbackEvent.html",
		"link": "Illuminate/Console/Scheduling/CallbackEvent.html#method_run",
		"name": "Illuminate\\Console\\Scheduling\\CallbackEvent::run",
		"doc": "Run the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CallbackEvent",
		"fromLink": "Illuminate/Console/Scheduling/CallbackEvent.html",
		"link": "Illuminate/Console/Scheduling/CallbackEvent.html#method_removeMutex",
		"name": "Illuminate\\Console\\Scheduling\\CallbackEvent::removeMutex",
		"doc": "Clear the mutex for the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CallbackEvent",
		"fromLink": "Illuminate/Console/Scheduling/CallbackEvent.html",
		"link": "Illuminate/Console/Scheduling/CallbackEvent.html#method_withoutOverlapping",
		"name": "Illuminate\\Console\\Scheduling\\CallbackEvent::withoutOverlapping",
		"doc": "Do not allow the event to overlap each other."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CallbackEvent",
		"fromLink": "Illuminate/Console/Scheduling/CallbackEvent.html",
		"link": "Illuminate/Console/Scheduling/CallbackEvent.html#method_onOneServer",
		"name": "Illuminate\\Console\\Scheduling\\CallbackEvent::onOneServer",
		"doc": "Allow the event to only run on one server for each cron expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CallbackEvent",
		"fromLink": "Illuminate/Console/Scheduling/CallbackEvent.html",
		"link": "Illuminate/Console/Scheduling/CallbackEvent.html#method_mutexName",
		"name": "Illuminate\\Console\\Scheduling\\CallbackEvent::mutexName",
		"doc": "Get the mutex name for the scheduled command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CallbackEvent",
		"fromLink": "Illuminate/Console/Scheduling/CallbackEvent.html",
		"link": "Illuminate/Console/Scheduling/CallbackEvent.html#method_getSummaryForDisplay",
		"name": "Illuminate\\Console\\Scheduling\\CallbackEvent::getSummaryForDisplay",
		"doc": "Get the summary of the event for display."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/CommandBuilder.html",
		"name": "Illuminate\\Console\\Scheduling\\CommandBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CommandBuilder",
		"fromLink": "Illuminate/Console/Scheduling/CommandBuilder.html",
		"link": "Illuminate/Console/Scheduling/CommandBuilder.html#method_buildCommand",
		"name": "Illuminate\\Console\\Scheduling\\CommandBuilder::buildCommand",
		"doc": "Build the command for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CommandBuilder",
		"fromLink": "Illuminate/Console/Scheduling/CommandBuilder.html",
		"link": "Illuminate/Console/Scheduling/CommandBuilder.html#method_buildForegroundCommand",
		"name": "Illuminate\\Console\\Scheduling\\CommandBuilder::buildForegroundCommand",
		"doc": "Build the command for running the event in the foreground."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CommandBuilder",
		"fromLink": "Illuminate/Console/Scheduling/CommandBuilder.html",
		"link": "Illuminate/Console/Scheduling/CommandBuilder.html#method_buildBackgroundCommand",
		"name": "Illuminate\\Console\\Scheduling\\CommandBuilder::buildBackgroundCommand",
		"doc": "Build the command for running the event in the background."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\CommandBuilder",
		"fromLink": "Illuminate/Console/Scheduling/CommandBuilder.html",
		"link": "Illuminate/Console/Scheduling/CommandBuilder.html#method_ensureCorrectUser",
		"name": "Illuminate\\Console\\Scheduling\\CommandBuilder::ensureCorrectUser",
		"doc": "Finalize the event's command syntax with the correct user."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/Event.html",
		"name": "Illuminate\\Console\\Scheduling\\Event",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method___construct",
		"name": "Illuminate\\Console\\Scheduling\\Event::__construct",
		"doc": "Create a new event instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_getDefaultOutput",
		"name": "Illuminate\\Console\\Scheduling\\Event::getDefaultOutput",
		"doc": "Get the default output depending on the OS."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_run",
		"name": "Illuminate\\Console\\Scheduling\\Event::run",
		"doc": "Run the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_mutexName",
		"name": "Illuminate\\Console\\Scheduling\\Event::mutexName",
		"doc": "Get the mutex name for the scheduled command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_runCommandInForeground",
		"name": "Illuminate\\Console\\Scheduling\\Event::runCommandInForeground",
		"doc": "Run the command in the foreground."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_runCommandInBackground",
		"name": "Illuminate\\Console\\Scheduling\\Event::runCommandInBackground",
		"doc": "Run the command in the background."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_callBeforeCallbacks",
		"name": "Illuminate\\Console\\Scheduling\\Event::callBeforeCallbacks",
		"doc": "Call all of the \"before\" callbacks for the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_callAfterCallbacks",
		"name": "Illuminate\\Console\\Scheduling\\Event::callAfterCallbacks",
		"doc": "Call all of the \"after\" callbacks for the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_callAfterCallbacksWithExitCode",
		"name": "Illuminate\\Console\\Scheduling\\Event::callAfterCallbacksWithExitCode",
		"doc": "Call all of the \"after\" callbacks for the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_buildCommand",
		"name": "Illuminate\\Console\\Scheduling\\Event::buildCommand",
		"doc": "Build the command string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_isDue",
		"name": "Illuminate\\Console\\Scheduling\\Event::isDue",
		"doc": "Determine if the given event should run based on the Cron expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_runsInMaintenanceMode",
		"name": "Illuminate\\Console\\Scheduling\\Event::runsInMaintenanceMode",
		"doc": "Determine if the event runs in maintenance mode."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_expressionPasses",
		"name": "Illuminate\\Console\\Scheduling\\Event::expressionPasses",
		"doc": "Determine if the Cron expression passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_runsInEnvironment",
		"name": "Illuminate\\Console\\Scheduling\\Event::runsInEnvironment",
		"doc": "Determine if the event runs in the given environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_filtersPass",
		"name": "Illuminate\\Console\\Scheduling\\Event::filtersPass",
		"doc": "Determine if the filters pass for the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_storeOutput",
		"name": "Illuminate\\Console\\Scheduling\\Event::storeOutput",
		"doc": "Ensure that the output is stored on disk in a log file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_sendOutputTo",
		"name": "Illuminate\\Console\\Scheduling\\Event::sendOutputTo",
		"doc": "Send the output of the command to a given location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_appendOutputTo",
		"name": "Illuminate\\Console\\Scheduling\\Event::appendOutputTo",
		"doc": "Append the output of the command to a given location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_emailOutputTo",
		"name": "Illuminate\\Console\\Scheduling\\Event::emailOutputTo",
		"doc": "E-mail the results of the scheduled operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_emailWrittenOutputTo",
		"name": "Illuminate\\Console\\Scheduling\\Event::emailWrittenOutputTo",
		"doc": "E-mail the results of the scheduled operation if it produces output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_emailOutputOnFailure",
		"name": "Illuminate\\Console\\Scheduling\\Event::emailOutputOnFailure",
		"doc": "E-mail the results of the scheduled operation if it fails."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_ensureOutputIsBeingCaptured",
		"name": "Illuminate\\Console\\Scheduling\\Event::ensureOutputIsBeingCaptured",
		"doc": "Ensure that the command output is being captured."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_emailOutput",
		"name": "Illuminate\\Console\\Scheduling\\Event::emailOutput",
		"doc": "E-mail the output of the event to the recipients."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_getEmailSubject",
		"name": "Illuminate\\Console\\Scheduling\\Event::getEmailSubject",
		"doc": "Get the e-mail subject line for output results."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_pingBefore",
		"name": "Illuminate\\Console\\Scheduling\\Event::pingBefore",
		"doc": "Register a callback to ping a given URL before the job runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_pingBeforeIf",
		"name": "Illuminate\\Console\\Scheduling\\Event::pingBeforeIf",
		"doc": "Register a callback to ping a given URL before the job runs if the given condition is true."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_thenPing",
		"name": "Illuminate\\Console\\Scheduling\\Event::thenPing",
		"doc": "Register a callback to ping a given URL after the job runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_thenPingIf",
		"name": "Illuminate\\Console\\Scheduling\\Event::thenPingIf",
		"doc": "Register a callback to ping a given URL after the job runs if the given condition is true."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_pingOnSuccess",
		"name": "Illuminate\\Console\\Scheduling\\Event::pingOnSuccess",
		"doc": "Register a callback to ping a given URL if the operation succeeds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_pingOnFailure",
		"name": "Illuminate\\Console\\Scheduling\\Event::pingOnFailure",
		"doc": "Register a callback to ping a given URL if the operation fails."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_pingCallback",
		"name": "Illuminate\\Console\\Scheduling\\Event::pingCallback",
		"doc": "Get the callback that pings the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_runInBackground",
		"name": "Illuminate\\Console\\Scheduling\\Event::runInBackground",
		"doc": "State that the command should run in background."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_user",
		"name": "Illuminate\\Console\\Scheduling\\Event::user",
		"doc": "Set which user the command should run as."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_environments",
		"name": "Illuminate\\Console\\Scheduling\\Event::environments",
		"doc": "Limit the environments the command should run in."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_evenInMaintenanceMode",
		"name": "Illuminate\\Console\\Scheduling\\Event::evenInMaintenanceMode",
		"doc": "State that the command should run even in maintenance mode."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_withoutOverlapping",
		"name": "Illuminate\\Console\\Scheduling\\Event::withoutOverlapping",
		"doc": "Do not allow the event to overlap each other."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_onOneServer",
		"name": "Illuminate\\Console\\Scheduling\\Event::onOneServer",
		"doc": "Allow the event to only run on one server for each cron expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_when",
		"name": "Illuminate\\Console\\Scheduling\\Event::when",
		"doc": "Register a callback to further filter the schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_skip",
		"name": "Illuminate\\Console\\Scheduling\\Event::skip",
		"doc": "Register a callback to further filter the schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_before",
		"name": "Illuminate\\Console\\Scheduling\\Event::before",
		"doc": "Register a callback to be called before the operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_after",
		"name": "Illuminate\\Console\\Scheduling\\Event::after",
		"doc": "Register a callback to be called after the operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_then",
		"name": "Illuminate\\Console\\Scheduling\\Event::then",
		"doc": "Register a callback to be called after the operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_thenWithOutput",
		"name": "Illuminate\\Console\\Scheduling\\Event::thenWithOutput",
		"doc": "Register a callback that uses the output after the job runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_onSuccess",
		"name": "Illuminate\\Console\\Scheduling\\Event::onSuccess",
		"doc": "Register a callback to be called if the operation succeeds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_onSuccessWithOutput",
		"name": "Illuminate\\Console\\Scheduling\\Event::onSuccessWithOutput",
		"doc": "Register a callback that uses the output if the operation succeeds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_onFailure",
		"name": "Illuminate\\Console\\Scheduling\\Event::onFailure",
		"doc": "Register a callback to be called if the operation fails."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_onFailureWithOutput",
		"name": "Illuminate\\Console\\Scheduling\\Event::onFailureWithOutput",
		"doc": "Register a callback that uses the output if the operation fails."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_withOutputCallback",
		"name": "Illuminate\\Console\\Scheduling\\Event::withOutputCallback",
		"doc": "Get a callback that provides output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_name",
		"name": "Illuminate\\Console\\Scheduling\\Event::name",
		"doc": "Set the human-friendly description of the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_description",
		"name": "Illuminate\\Console\\Scheduling\\Event::description",
		"doc": "Set the human-friendly description of the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_getSummaryForDisplay",
		"name": "Illuminate\\Console\\Scheduling\\Event::getSummaryForDisplay",
		"doc": "Get the summary of the event for display."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_nextRunDate",
		"name": "Illuminate\\Console\\Scheduling\\Event::nextRunDate",
		"doc": "Determine the next due date for an event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_getExpression",
		"name": "Illuminate\\Console\\Scheduling\\Event::getExpression",
		"doc": "Get the Cron expression for the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Event",
		"fromLink": "Illuminate/Console/Scheduling/Event.html",
		"link": "Illuminate/Console/Scheduling/Event.html#method_preventOverlapsUsing",
		"name": "Illuminate\\Console\\Scheduling\\Event::preventOverlapsUsing",
		"doc": "Set the event mutex implementation to be used."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/EventMutex.html",
		"name": "Illuminate\\Console\\Scheduling\\EventMutex",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\EventMutex",
		"fromLink": "Illuminate/Console/Scheduling/EventMutex.html",
		"link": "Illuminate/Console/Scheduling/EventMutex.html#method_create",
		"name": "Illuminate\\Console\\Scheduling\\EventMutex::create",
		"doc": "Attempt to obtain an event mutex for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\EventMutex",
		"fromLink": "Illuminate/Console/Scheduling/EventMutex.html",
		"link": "Illuminate/Console/Scheduling/EventMutex.html#method_exists",
		"name": "Illuminate\\Console\\Scheduling\\EventMutex::exists",
		"doc": "Determine if an event mutex exists for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\EventMutex",
		"fromLink": "Illuminate/Console/Scheduling/EventMutex.html",
		"link": "Illuminate/Console/Scheduling/EventMutex.html#method_forget",
		"name": "Illuminate\\Console\\Scheduling\\EventMutex::forget",
		"doc": "Clear the event mutex for the given event."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_cron",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::cron",
		"doc": "The Cron expression representing the event's frequency."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_between",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::between",
		"doc": "Schedule the event to run between start and end time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_unlessBetween",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::unlessBetween",
		"doc": "Schedule the event to not run between start and end time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyMinute",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyMinute",
		"doc": "Schedule the event to run every minute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyTwoMinutes",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyTwoMinutes",
		"doc": "Schedule the event to run every two minutes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyThreeMinutes",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyThreeMinutes",
		"doc": "Schedule the event to run every three minutes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyFourMinutes",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyFourMinutes",
		"doc": "Schedule the event to run every four minutes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyFiveMinutes",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyFiveMinutes",
		"doc": "Schedule the event to run every five minutes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyTenMinutes",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyTenMinutes",
		"doc": "Schedule the event to run every ten minutes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyFifteenMinutes",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyFifteenMinutes",
		"doc": "Schedule the event to run every fifteen minutes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyThirtyMinutes",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyThirtyMinutes",
		"doc": "Schedule the event to run every thirty minutes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_hourly",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::hourly",
		"doc": "Schedule the event to run hourly."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_hourlyAt",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::hourlyAt",
		"doc": "Schedule the event to run hourly at a given offset in the hour."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyTwoHours",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyTwoHours",
		"doc": "Schedule the event to run every two hours."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyThreeHours",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyThreeHours",
		"doc": "Schedule the event to run every three hours."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everyFourHours",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everyFourHours",
		"doc": "Schedule the event to run every four hours."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_everySixHours",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::everySixHours",
		"doc": "Schedule the event to run every six hours."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_daily",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::daily",
		"doc": "Schedule the event to run daily."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_at",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::at",
		"doc": "Schedule the command at a given time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_dailyAt",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::dailyAt",
		"doc": "Schedule the event to run daily at a given time (10:00, 19:30, etc)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_twiceDaily",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::twiceDaily",
		"doc": "Schedule the event to run twice daily."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_weekdays",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::weekdays",
		"doc": "Schedule the event to run only on weekdays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_weekends",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::weekends",
		"doc": "Schedule the event to run only on weekends."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_mondays",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::mondays",
		"doc": "Schedule the event to run only on Mondays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_tuesdays",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::tuesdays",
		"doc": "Schedule the event to run only on Tuesdays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_wednesdays",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::wednesdays",
		"doc": "Schedule the event to run only on Wednesdays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_thursdays",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::thursdays",
		"doc": "Schedule the event to run only on Thursdays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_fridays",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::fridays",
		"doc": "Schedule the event to run only on Fridays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_saturdays",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::saturdays",
		"doc": "Schedule the event to run only on Saturdays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_sundays",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::sundays",
		"doc": "Schedule the event to run only on Sundays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_weekly",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::weekly",
		"doc": "Schedule the event to run weekly."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_weeklyOn",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::weeklyOn",
		"doc": "Schedule the event to run weekly on a given day and time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_monthly",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::monthly",
		"doc": "Schedule the event to run monthly."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_monthlyOn",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::monthlyOn",
		"doc": "Schedule the event to run monthly on a given day and time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_twiceMonthly",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::twiceMonthly",
		"doc": "Schedule the event to run twice monthly at a given time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_lastDayOfMonth",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::lastDayOfMonth",
		"doc": "Schedule the event to run on the last day of the month."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_quarterly",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::quarterly",
		"doc": "Schedule the event to run quarterly."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_yearly",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::yearly",
		"doc": "Schedule the event to run yearly."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_yearlyOn",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::yearlyOn",
		"doc": "Schedule the event to run yearly on a given month, day, and time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_days",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::days",
		"doc": "Set the days of the week the command should run on."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_timezone",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::timezone",
		"doc": "Set the timezone the date should be evaluated on."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ManagesFrequencies",
		"fromLink": "Illuminate/Console/Scheduling/ManagesFrequencies.html",
		"link": "Illuminate/Console/Scheduling/ManagesFrequencies.html#method_spliceIntoPosition",
		"name": "Illuminate\\Console\\Scheduling\\ManagesFrequencies::spliceIntoPosition",
		"doc": "Splice the given value into the given position of the expression."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html",
		"name": "Illuminate\\Console\\Scheduling\\Schedule",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method___construct",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::__construct",
		"doc": "Create a new schedule instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_call",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::call",
		"doc": "Add a new callback event to the schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_command",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::command",
		"doc": "Add a new Artisan command event to the schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_job",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::job",
		"doc": "Add a new job callback event to the schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_dispatchToQueue",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::dispatchToQueue",
		"doc": "Dispatch the given job to the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_dispatchNow",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::dispatchNow",
		"doc": "Dispatch the given job right now."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_exec",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::exec",
		"doc": "Add a new command event to the schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_compileParameters",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::compileParameters",
		"doc": "Compile parameters for a command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_compileArrayInput",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::compileArrayInput",
		"doc": "Compile array input for a command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_serverShouldRun",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::serverShouldRun",
		"doc": "Determine if the server is allowed to run this event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_dueEvents",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::dueEvents",
		"doc": "Get all of the events on the schedule that are due."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_events",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::events",
		"doc": "Get all of the events on the schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_useCache",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::useCache",
		"doc": "Specify the cache store that should be used to store mutexes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\Schedule",
		"fromLink": "Illuminate/Console/Scheduling/Schedule.html",
		"link": "Illuminate/Console/Scheduling/Schedule.html#method_getDispatcher",
		"name": "Illuminate\\Console\\Scheduling\\Schedule::getDispatcher",
		"doc": "Get the job dispatcher, if available."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/ScheduleFinishCommand.html",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleFinishCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ScheduleFinishCommand",
		"fromLink": "Illuminate/Console/Scheduling/ScheduleFinishCommand.html",
		"link": "Illuminate/Console/Scheduling/ScheduleFinishCommand.html#method_handle",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleFinishCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/ScheduleRunCommand.html",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand",
		"fromLink": "Illuminate/Console/Scheduling/ScheduleRunCommand.html",
		"link": "Illuminate/Console/Scheduling/ScheduleRunCommand.html#method___construct",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand::__construct",
		"doc": "Create a new command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand",
		"fromLink": "Illuminate/Console/Scheduling/ScheduleRunCommand.html",
		"link": "Illuminate/Console/Scheduling/ScheduleRunCommand.html#method_handle",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand",
		"fromLink": "Illuminate/Console/Scheduling/ScheduleRunCommand.html",
		"link": "Illuminate/Console/Scheduling/ScheduleRunCommand.html#method_runSingleServerEvent",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand::runSingleServerEvent",
		"doc": "Run the given single server event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand",
		"fromLink": "Illuminate/Console/Scheduling/ScheduleRunCommand.html",
		"link": "Illuminate/Console/Scheduling/ScheduleRunCommand.html#method_runEvent",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleRunCommand::runEvent",
		"doc": "Run the given event."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/ScheduleWorkCommand.html",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleWorkCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\ScheduleWorkCommand",
		"fromLink": "Illuminate/Console/Scheduling/ScheduleWorkCommand.html",
		"link": "Illuminate/Console/Scheduling/ScheduleWorkCommand.html#method_handle",
		"name": "Illuminate\\Console\\Scheduling\\ScheduleWorkCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Console\\Scheduling",
		"fromLink": "Illuminate/Console/Scheduling.html",
		"link": "Illuminate/Console/Scheduling/SchedulingMutex.html",
		"name": "Illuminate\\Console\\Scheduling\\SchedulingMutex",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\SchedulingMutex",
		"fromLink": "Illuminate/Console/Scheduling/SchedulingMutex.html",
		"link": "Illuminate/Console/Scheduling/SchedulingMutex.html#method_create",
		"name": "Illuminate\\Console\\Scheduling\\SchedulingMutex::create",
		"doc": "Attempt to obtain a scheduling mutex for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Console\\Scheduling\\SchedulingMutex",
		"fromLink": "Illuminate/Console/Scheduling/SchedulingMutex.html",
		"link": "Illuminate/Console/Scheduling/SchedulingMutex.html#method_exists",
		"name": "Illuminate\\Console\\Scheduling\\SchedulingMutex::exists",
		"doc": "Determine if a scheduling mutex exists for the given event."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Container",
		"fromLink": "Illuminate/Container.html",
		"link": "Illuminate/Container/BoundMethod.html",
		"name": "Illuminate\\Container\\BoundMethod",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\BoundMethod",
		"fromLink": "Illuminate/Container/BoundMethod.html",
		"link": "Illuminate/Container/BoundMethod.html#method_call",
		"name": "Illuminate\\Container\\BoundMethod::call",
		"doc": "Call the given Closure / class@method and inject its dependencies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\BoundMethod",
		"fromLink": "Illuminate/Container/BoundMethod.html",
		"link": "Illuminate/Container/BoundMethod.html#method_callClass",
		"name": "Illuminate\\Container\\BoundMethod::callClass",
		"doc": "Call a string reference to a class using Class@method syntax."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\BoundMethod",
		"fromLink": "Illuminate/Container/BoundMethod.html",
		"link": "Illuminate/Container/BoundMethod.html#method_callBoundMethod",
		"name": "Illuminate\\Container\\BoundMethod::callBoundMethod",
		"doc": "Call a method that has been bound to the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\BoundMethod",
		"fromLink": "Illuminate/Container/BoundMethod.html",
		"link": "Illuminate/Container/BoundMethod.html#method_normalizeMethod",
		"name": "Illuminate\\Container\\BoundMethod::normalizeMethod",
		"doc": "Normalize the given callback into a Class@method string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\BoundMethod",
		"fromLink": "Illuminate/Container/BoundMethod.html",
		"link": "Illuminate/Container/BoundMethod.html#method_getMethodDependencies",
		"name": "Illuminate\\Container\\BoundMethod::getMethodDependencies",
		"doc": "Get all dependencies for a given method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\BoundMethod",
		"fromLink": "Illuminate/Container/BoundMethod.html",
		"link": "Illuminate/Container/BoundMethod.html#method_getCallReflector",
		"name": "Illuminate\\Container\\BoundMethod::getCallReflector",
		"doc": "Get the proper reflection instance for the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\BoundMethod",
		"fromLink": "Illuminate/Container/BoundMethod.html",
		"link": "Illuminate/Container/BoundMethod.html#method_addDependencyForCallParameter",
		"name": "Illuminate\\Container\\BoundMethod::addDependencyForCallParameter",
		"doc": "Get the dependency for the given call parameter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\BoundMethod",
		"fromLink": "Illuminate/Container/BoundMethod.html",
		"link": "Illuminate/Container/BoundMethod.html#method_isCallableWithAtSign",
		"name": "Illuminate\\Container\\BoundMethod::isCallableWithAtSign",
		"doc": "Determine if the given string is in Class@method syntax."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Container",
		"fromLink": "Illuminate/Container.html",
		"link": "Illuminate/Container/Container.html",
		"name": "Illuminate\\Container\\Container",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_when",
		"name": "Illuminate\\Container\\Container::when",
		"doc": "Define a contextual binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_bound",
		"name": "Illuminate\\Container\\Container::bound",
		"doc": "Determine if the given abstract type has been bound."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_has",
		"name": "Illuminate\\Container\\Container::has",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_resolved",
		"name": "Illuminate\\Container\\Container::resolved",
		"doc": "Determine if the given abstract type has been resolved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_isShared",
		"name": "Illuminate\\Container\\Container::isShared",
		"doc": "Determine if a given type is shared."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_isAlias",
		"name": "Illuminate\\Container\\Container::isAlias",
		"doc": "Determine if a given string is an alias."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_bind",
		"name": "Illuminate\\Container\\Container::bind",
		"doc": "Register a binding with the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getClosure",
		"name": "Illuminate\\Container\\Container::getClosure",
		"doc": "Get the Closure to be used when building a type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_hasMethodBinding",
		"name": "Illuminate\\Container\\Container::hasMethodBinding",
		"doc": "Determine if the container has a method binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_bindMethod",
		"name": "Illuminate\\Container\\Container::bindMethod",
		"doc": "Bind a callback to resolve with Container::call."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_parseBindMethod",
		"name": "Illuminate\\Container\\Container::parseBindMethod",
		"doc": "Get the method to be bound in class@method format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_callMethodBinding",
		"name": "Illuminate\\Container\\Container::callMethodBinding",
		"doc": "Get the method binding for the given method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_addContextualBinding",
		"name": "Illuminate\\Container\\Container::addContextualBinding",
		"doc": "Add a contextual binding to the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_bindIf",
		"name": "Illuminate\\Container\\Container::bindIf",
		"doc": "Register a binding if it hasn't already been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_singleton",
		"name": "Illuminate\\Container\\Container::singleton",
		"doc": "Register a shared binding in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_singletonIf",
		"name": "Illuminate\\Container\\Container::singletonIf",
		"doc": "Register a shared binding if it hasn't already been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_extend",
		"name": "Illuminate\\Container\\Container::extend",
		"doc": "\"Extend\" an abstract type in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_instance",
		"name": "Illuminate\\Container\\Container::instance",
		"doc": "Register an existing instance as shared in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_removeAbstractAlias",
		"name": "Illuminate\\Container\\Container::removeAbstractAlias",
		"doc": "Remove an alias from the contextual binding alias cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_tag",
		"name": "Illuminate\\Container\\Container::tag",
		"doc": "Assign a set of tags to a given binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_tagged",
		"name": "Illuminate\\Container\\Container::tagged",
		"doc": "Resolve all of the bindings for a given tag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_alias",
		"name": "Illuminate\\Container\\Container::alias",
		"doc": "Alias a type to a different name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_rebinding",
		"name": "Illuminate\\Container\\Container::rebinding",
		"doc": "Bind a new callback to an abstract's rebind event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_refresh",
		"name": "Illuminate\\Container\\Container::refresh",
		"doc": "Refresh an instance on the given target and method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_rebound",
		"name": "Illuminate\\Container\\Container::rebound",
		"doc": "Fire the \"rebound\" callbacks for the given abstract type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getReboundCallbacks",
		"name": "Illuminate\\Container\\Container::getReboundCallbacks",
		"doc": "Get the rebound callbacks for a given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_wrap",
		"name": "Illuminate\\Container\\Container::wrap",
		"doc": "Wrap the given closure such that its dependencies will be injected when executed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_call",
		"name": "Illuminate\\Container\\Container::call",
		"doc": "Call the given Closure / class@method and inject its dependencies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_factory",
		"name": "Illuminate\\Container\\Container::factory",
		"doc": "Get a closure to resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_makeWith",
		"name": "Illuminate\\Container\\Container::makeWith",
		"doc": "An alias function name for make()."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_make",
		"name": "Illuminate\\Container\\Container::make",
		"doc": "Resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_get",
		"name": "Illuminate\\Container\\Container::get",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_resolve",
		"name": "Illuminate\\Container\\Container::resolve",
		"doc": "Resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getConcrete",
		"name": "Illuminate\\Container\\Container::getConcrete",
		"doc": "Get the concrete type for a given abstract."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getContextualConcrete",
		"name": "Illuminate\\Container\\Container::getContextualConcrete",
		"doc": "Get the contextual concrete binding for the given abstract."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_findInContextualBindings",
		"name": "Illuminate\\Container\\Container::findInContextualBindings",
		"doc": "Find the concrete binding for the given abstract in the contextual binding array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_isBuildable",
		"name": "Illuminate\\Container\\Container::isBuildable",
		"doc": "Determine if the given concrete is buildable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_build",
		"name": "Illuminate\\Container\\Container::build",
		"doc": "Instantiate a concrete instance of the given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_resolveDependencies",
		"name": "Illuminate\\Container\\Container::resolveDependencies",
		"doc": "Resolve all of the dependencies from the ReflectionParameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_hasParameterOverride",
		"name": "Illuminate\\Container\\Container::hasParameterOverride",
		"doc": "Determine if the given dependency has a parameter override."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getParameterOverride",
		"name": "Illuminate\\Container\\Container::getParameterOverride",
		"doc": "Get a parameter override for a dependency."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getLastParameterOverride",
		"name": "Illuminate\\Container\\Container::getLastParameterOverride",
		"doc": "Get the last parameter override."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_resolvePrimitive",
		"name": "Illuminate\\Container\\Container::resolvePrimitive",
		"doc": "Resolve a non-class hinted primitive dependency."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_resolveClass",
		"name": "Illuminate\\Container\\Container::resolveClass",
		"doc": "Resolve a class based dependency from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_resolveVariadicClass",
		"name": "Illuminate\\Container\\Container::resolveVariadicClass",
		"doc": "Resolve a class based variadic dependency from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_notInstantiable",
		"name": "Illuminate\\Container\\Container::notInstantiable",
		"doc": "Throw an exception that the concrete is not instantiable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_unresolvablePrimitive",
		"name": "Illuminate\\Container\\Container::unresolvablePrimitive",
		"doc": "Throw an exception for an unresolvable primitive."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_beforeResolving",
		"name": "Illuminate\\Container\\Container::beforeResolving",
		"doc": "Register a new before resolving callback for all types."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_resolving",
		"name": "Illuminate\\Container\\Container::resolving",
		"doc": "Register a new resolving callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_afterResolving",
		"name": "Illuminate\\Container\\Container::afterResolving",
		"doc": "Register a new after resolving callback for all types."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_fireBeforeResolvingCallbacks",
		"name": "Illuminate\\Container\\Container::fireBeforeResolvingCallbacks",
		"doc": "Fire all of the before resolving callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_fireBeforeCallbackArray",
		"name": "Illuminate\\Container\\Container::fireBeforeCallbackArray",
		"doc": "Fire an array of callbacks with an object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_fireResolvingCallbacks",
		"name": "Illuminate\\Container\\Container::fireResolvingCallbacks",
		"doc": "Fire all of the resolving callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_fireAfterResolvingCallbacks",
		"name": "Illuminate\\Container\\Container::fireAfterResolvingCallbacks",
		"doc": "Fire all of the after resolving callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getCallbacksForType",
		"name": "Illuminate\\Container\\Container::getCallbacksForType",
		"doc": "Get all callbacks for a given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_fireCallbackArray",
		"name": "Illuminate\\Container\\Container::fireCallbackArray",
		"doc": "Fire an array of callbacks with an object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getBindings",
		"name": "Illuminate\\Container\\Container::getBindings",
		"doc": "Get the container's bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getAlias",
		"name": "Illuminate\\Container\\Container::getAlias",
		"doc": "Get the alias for an abstract if available."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getExtenders",
		"name": "Illuminate\\Container\\Container::getExtenders",
		"doc": "Get the extender callbacks for a given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_forgetExtenders",
		"name": "Illuminate\\Container\\Container::forgetExtenders",
		"doc": "Remove all of the extender callbacks for a given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_dropStaleInstances",
		"name": "Illuminate\\Container\\Container::dropStaleInstances",
		"doc": "Drop all of the stale instances and aliases."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_forgetInstance",
		"name": "Illuminate\\Container\\Container::forgetInstance",
		"doc": "Remove a resolved instance from the instance cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_forgetInstances",
		"name": "Illuminate\\Container\\Container::forgetInstances",
		"doc": "Clear all of the instances from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_flush",
		"name": "Illuminate\\Container\\Container::flush",
		"doc": "Flush the container of all bindings and resolved instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_getInstance",
		"name": "Illuminate\\Container\\Container::getInstance",
		"doc": "Get the globally available instance of the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_setInstance",
		"name": "Illuminate\\Container\\Container::setInstance",
		"doc": "Set the shared instance of the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_offsetExists",
		"name": "Illuminate\\Container\\Container::offsetExists",
		"doc": "Determine if a given offset exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_offsetGet",
		"name": "Illuminate\\Container\\Container::offsetGet",
		"doc": "Get the value at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_offsetSet",
		"name": "Illuminate\\Container\\Container::offsetSet",
		"doc": "Set the value at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method_offsetUnset",
		"name": "Illuminate\\Container\\Container::offsetUnset",
		"doc": "Unset the value at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method___get",
		"name": "Illuminate\\Container\\Container::__get",
		"doc": "Dynamically access container services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Container",
		"fromLink": "Illuminate/Container/Container.html",
		"link": "Illuminate/Container/Container.html#method___set",
		"name": "Illuminate\\Container\\Container::__set",
		"doc": "Dynamically set container services."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Container",
		"fromLink": "Illuminate/Container.html",
		"link": "Illuminate/Container/ContextualBindingBuilder.html",
		"name": "Illuminate\\Container\\ContextualBindingBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Container/ContextualBindingBuilder.html#method___construct",
		"name": "Illuminate\\Container\\ContextualBindingBuilder::__construct",
		"doc": "Create a new contextual binding builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Container/ContextualBindingBuilder.html#method_needs",
		"name": "Illuminate\\Container\\ContextualBindingBuilder::needs",
		"doc": "Define the abstract target that depends on the context."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Container/ContextualBindingBuilder.html#method_give",
		"name": "Illuminate\\Container\\ContextualBindingBuilder::give",
		"doc": "Define the implementation for the contextual binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Container/ContextualBindingBuilder.html#method_giveTagged",
		"name": "Illuminate\\Container\\ContextualBindingBuilder::giveTagged",
		"doc": "Define tagged services to be used as the implementation for the contextual binding."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Container",
		"fromLink": "Illuminate/Container.html",
		"link": "Illuminate/Container/EntryNotFoundException.html",
		"name": "Illuminate\\Container\\EntryNotFoundException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Container",
		"fromLink": "Illuminate/Container.html",
		"link": "Illuminate/Container/RewindableGenerator.html",
		"name": "Illuminate\\Container\\RewindableGenerator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\RewindableGenerator",
		"fromLink": "Illuminate/Container/RewindableGenerator.html",
		"link": "Illuminate/Container/RewindableGenerator.html#method___construct",
		"name": "Illuminate\\Container\\RewindableGenerator::__construct",
		"doc": "Create a new generator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\RewindableGenerator",
		"fromLink": "Illuminate/Container/RewindableGenerator.html",
		"link": "Illuminate/Container/RewindableGenerator.html#method_getIterator",
		"name": "Illuminate\\Container\\RewindableGenerator::getIterator",
		"doc": "Get an iterator from the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\RewindableGenerator",
		"fromLink": "Illuminate/Container/RewindableGenerator.html",
		"link": "Illuminate/Container/RewindableGenerator.html#method_count",
		"name": "Illuminate\\Container\\RewindableGenerator::count",
		"doc": "Get the total number of tagged services."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Container",
		"fromLink": "Illuminate/Container.html",
		"link": "Illuminate/Container/Util.html",
		"name": "Illuminate\\Container\\Util",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Util",
		"fromLink": "Illuminate/Container/Util.html",
		"link": "Illuminate/Container/Util.html#method_arrayWrap",
		"name": "Illuminate\\Container\\Util::arrayWrap",
		"doc": "If the given value is not an array and not null, wrap it in one."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Util",
		"fromLink": "Illuminate/Container/Util.html",
		"link": "Illuminate/Container/Util.html#method_unwrapIfClosure",
		"name": "Illuminate\\Container\\Util::unwrapIfClosure",
		"doc": "Return the default value of the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Container\\Util",
		"fromLink": "Illuminate/Container/Util.html",
		"link": "Illuminate/Container/Util.html#method_getParameterClassName",
		"name": "Illuminate\\Container\\Util::getParameterClassName",
		"doc": "Get the class name of the given parameter's type, if possible."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth\\Access",
		"fromLink": "Illuminate/Contracts/Auth/Access.html",
		"link": "Illuminate/Contracts/Auth/Access/Authorizable.html",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Authorizable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Authorizable",
		"fromLink": "Illuminate/Contracts/Auth/Access/Authorizable.html",
		"link": "Illuminate/Contracts/Auth/Access/Authorizable.html#method_can",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Authorizable::can",
		"doc": "Determine if the entity has a given ability."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth\\Access",
		"fromLink": "Illuminate/Contracts/Auth/Access.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_has",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::has",
		"doc": "Determine if a given ability has been defined."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_define",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::define",
		"doc": "Define a new ability."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_resource",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::resource",
		"doc": "Define abilities for a resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_policy",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::policy",
		"doc": "Define a policy class for a given class type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_before",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::before",
		"doc": "Register a callback to run before all Gate checks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_after",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::after",
		"doc": "Register a callback to run after all Gate checks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_allows",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::allows",
		"doc": "Determine if the given ability should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_denies",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::denies",
		"doc": "Determine if the given ability should be denied for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_check",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::check",
		"doc": "Determine if all of the given abilities should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_any",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::any",
		"doc": "Determine if any one of the given abilities should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_authorize",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::authorize",
		"doc": "Determine if the given ability should be granted for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_inspect",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::inspect",
		"doc": "Inspect the user for the given ability."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_raw",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::raw",
		"doc": "Get the raw result from the authorization callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_getPolicyFor",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::getPolicyFor",
		"doc": "Get a policy instance for a given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_forUser",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::forUser",
		"doc": "Get a guard instance for the given user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Access\\Gate",
		"fromLink": "Illuminate/Contracts/Auth/Access/Gate.html",
		"link": "Illuminate/Contracts/Auth/Access/Gate.html#method_abilities",
		"name": "Illuminate\\Contracts\\Auth\\Access\\Gate::abilities",
		"doc": "Get all of the defined abilities."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getAuthIdentifierName",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getAuthIdentifierName",
		"doc": "Get the name of the unique identifier for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getAuthIdentifier",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getAuthIdentifier",
		"doc": "Get the unique identifier for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getAuthPassword",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getAuthPassword",
		"doc": "Get the password for the user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getRememberToken",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getRememberToken",
		"doc": "Get the token value for the \"remember me\" session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_setRememberToken",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::setRememberToken",
		"doc": "Set the token value for the \"remember me\" session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Authenticatable",
		"fromLink": "Illuminate/Contracts/Auth/Authenticatable.html",
		"link": "Illuminate/Contracts/Auth/Authenticatable.html#method_getRememberTokenName",
		"name": "Illuminate\\Contracts\\Auth\\Authenticatable::getRememberTokenName",
		"doc": "Get the column name for the \"remember me\" token."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/CanResetPassword.html",
		"name": "Illuminate\\Contracts\\Auth\\CanResetPassword",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\CanResetPassword",
		"fromLink": "Illuminate/Contracts/Auth/CanResetPassword.html",
		"link": "Illuminate/Contracts/Auth/CanResetPassword.html#method_getEmailForPasswordReset",
		"name": "Illuminate\\Contracts\\Auth\\CanResetPassword::getEmailForPasswordReset",
		"doc": "Get the e-mail address where password reset links are sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\CanResetPassword",
		"fromLink": "Illuminate/Contracts/Auth/CanResetPassword.html",
		"link": "Illuminate/Contracts/Auth/CanResetPassword.html#method_sendPasswordResetNotification",
		"name": "Illuminate\\Contracts\\Auth\\CanResetPassword::sendPasswordResetNotification",
		"doc": "Send the password reset notification."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/Factory.html",
		"name": "Illuminate\\Contracts\\Auth\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Factory",
		"fromLink": "Illuminate/Contracts/Auth/Factory.html",
		"link": "Illuminate/Contracts/Auth/Factory.html#method_guard",
		"name": "Illuminate\\Contracts\\Auth\\Factory::guard",
		"doc": "Get a guard instance by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Factory",
		"fromLink": "Illuminate/Contracts/Auth/Factory.html",
		"link": "Illuminate/Contracts/Auth/Factory.html#method_shouldUse",
		"name": "Illuminate\\Contracts\\Auth\\Factory::shouldUse",
		"doc": "Set the default guard the factory should serve."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/Guard.html",
		"name": "Illuminate\\Contracts\\Auth\\Guard",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_check",
		"name": "Illuminate\\Contracts\\Auth\\Guard::check",
		"doc": "Determine if the current user is authenticated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_guest",
		"name": "Illuminate\\Contracts\\Auth\\Guard::guest",
		"doc": "Determine if the current user is a guest."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_user",
		"name": "Illuminate\\Contracts\\Auth\\Guard::user",
		"doc": "Get the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_id",
		"name": "Illuminate\\Contracts\\Auth\\Guard::id",
		"doc": "Get the ID for the currently authenticated user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_validate",
		"name": "Illuminate\\Contracts\\Auth\\Guard::validate",
		"doc": "Validate a user's credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\Guard",
		"fromLink": "Illuminate/Contracts/Auth/Guard.html",
		"link": "Illuminate/Contracts/Auth/Guard.html#method_setUser",
		"name": "Illuminate\\Contracts\\Auth\\Guard::setUser",
		"doc": "Set the current user."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth\\Middleware",
		"fromLink": "Illuminate/Contracts/Auth/Middleware.html",
		"link": "Illuminate/Contracts/Auth/Middleware/AuthenticatesRequests.html",
		"name": "Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html#method_hasVerifiedEmail",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail::hasVerifiedEmail",
		"doc": "Determine if the user has verified their email address."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html#method_markEmailAsVerified",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail::markEmailAsVerified",
		"doc": "Mark the given user's email as verified."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html#method_sendEmailVerificationNotification",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail::sendEmailVerificationNotification",
		"doc": "Send the email verification notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\MustVerifyEmail",
		"fromLink": "Illuminate/Contracts/Auth/MustVerifyEmail.html",
		"link": "Illuminate/Contracts/Auth/MustVerifyEmail.html#method_getEmailForVerification",
		"name": "Illuminate\\Contracts\\Auth\\MustVerifyEmail::getEmailForVerification",
		"doc": "Get the email address that should be used for verification."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/PasswordBroker.html",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBroker",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\PasswordBroker",
		"fromLink": "Illuminate/Contracts/Auth/PasswordBroker.html",
		"link": "Illuminate/Contracts/Auth/PasswordBroker.html#method_sendResetLink",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBroker::sendResetLink",
		"doc": "Send a password reset link to a user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\PasswordBroker",
		"fromLink": "Illuminate/Contracts/Auth/PasswordBroker.html",
		"link": "Illuminate/Contracts/Auth/PasswordBroker.html#method_reset",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBroker::reset",
		"doc": "Reset the password for the given token."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/PasswordBrokerFactory.html",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBrokerFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\PasswordBrokerFactory",
		"fromLink": "Illuminate/Contracts/Auth/PasswordBrokerFactory.html",
		"link": "Illuminate/Contracts/Auth/PasswordBrokerFactory.html#method_broker",
		"name": "Illuminate\\Contracts\\Auth\\PasswordBrokerFactory::broker",
		"doc": "Get a password broker instance by name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_attempt",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::attempt",
		"doc": "Attempt to authenticate a user using the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_once",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::once",
		"doc": "Log a user into the application without sessions or cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_login",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::login",
		"doc": "Log a user into the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_loginUsingId",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::loginUsingId",
		"doc": "Log the given user ID into the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_onceUsingId",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::onceUsingId",
		"doc": "Log the given user ID into the application without sessions or cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_viaRemember",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::viaRemember",
		"doc": "Determine if the user was authenticated via \"remember me\" cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\StatefulGuard",
		"fromLink": "Illuminate/Contracts/Auth/StatefulGuard.html",
		"link": "Illuminate/Contracts/Auth/StatefulGuard.html#method_logout",
		"name": "Illuminate\\Contracts\\Auth\\StatefulGuard::logout",
		"doc": "Log the user out of the application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/SupportsBasicAuth.html",
		"name": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth",
		"fromLink": "Illuminate/Contracts/Auth/SupportsBasicAuth.html",
		"link": "Illuminate/Contracts/Auth/SupportsBasicAuth.html#method_basic",
		"name": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth::basic",
		"doc": "Attempt to authenticate using HTTP Basic Auth."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth",
		"fromLink": "Illuminate/Contracts/Auth/SupportsBasicAuth.html",
		"link": "Illuminate/Contracts/Auth/SupportsBasicAuth.html#method_onceBasic",
		"name": "Illuminate\\Contracts\\Auth\\SupportsBasicAuth::onceBasic",
		"doc": "Perform a stateless HTTP Basic login attempt."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Auth",
		"fromLink": "Illuminate/Contracts/Auth.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_retrieveById",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::retrieveById",
		"doc": "Retrieve a user by their unique identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_retrieveByToken",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::retrieveByToken",
		"doc": "Retrieve a user by their unique identifier and \"remember me\" token."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_updateRememberToken",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::updateRememberToken",
		"doc": "Update the \"remember me\" token for the given user in storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_retrieveByCredentials",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::retrieveByCredentials",
		"doc": "Retrieve a user by the given credentials."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Auth\\UserProvider",
		"fromLink": "Illuminate/Contracts/Auth/UserProvider.html",
		"link": "Illuminate/Contracts/Auth/UserProvider.html#method_validateCredentials",
		"name": "Illuminate\\Contracts\\Auth\\UserProvider::validateCredentials",
		"doc": "Validate a user against the given credentials."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Broadcasting",
		"fromLink": "Illuminate/Contracts/Broadcasting.html",
		"link": "Illuminate/Contracts/Broadcasting/Broadcaster.html",
		"name": "Illuminate\\Contracts\\Broadcasting\\Broadcaster",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\Broadcaster",
		"fromLink": "Illuminate/Contracts/Broadcasting/Broadcaster.html",
		"link": "Illuminate/Contracts/Broadcasting/Broadcaster.html#method_auth",
		"name": "Illuminate\\Contracts\\Broadcasting\\Broadcaster::auth",
		"doc": "Authenticate the incoming request for a given channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\Broadcaster",
		"fromLink": "Illuminate/Contracts/Broadcasting/Broadcaster.html",
		"link": "Illuminate/Contracts/Broadcasting/Broadcaster.html#method_validAuthenticationResponse",
		"name": "Illuminate\\Contracts\\Broadcasting\\Broadcaster::validAuthenticationResponse",
		"doc": "Return the valid authentication response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\Broadcaster",
		"fromLink": "Illuminate/Contracts/Broadcasting/Broadcaster.html",
		"link": "Illuminate/Contracts/Broadcasting/Broadcaster.html#method_broadcast",
		"name": "Illuminate\\Contracts\\Broadcasting\\Broadcaster::broadcast",
		"doc": "Broadcast the given event."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Broadcasting",
		"fromLink": "Illuminate/Contracts/Broadcasting.html",
		"link": "Illuminate/Contracts/Broadcasting/Factory.html",
		"name": "Illuminate\\Contracts\\Broadcasting\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\Factory",
		"fromLink": "Illuminate/Contracts/Broadcasting/Factory.html",
		"link": "Illuminate/Contracts/Broadcasting/Factory.html#method_connection",
		"name": "Illuminate\\Contracts\\Broadcasting\\Factory::connection",
		"doc": "Get a broadcaster implementation by name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Broadcasting",
		"fromLink": "Illuminate/Contracts/Broadcasting.html",
		"link": "Illuminate/Contracts/Broadcasting/ShouldBroadcast.html",
		"name": "Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast",
		"fromLink": "Illuminate/Contracts/Broadcasting/ShouldBroadcast.html",
		"link": "Illuminate/Contracts/Broadcasting/ShouldBroadcast.html#method_broadcastOn",
		"name": "Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast::broadcastOn",
		"doc": "Get the channels the event should broadcast on."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Broadcasting",
		"fromLink": "Illuminate/Contracts/Broadcasting.html",
		"link": "Illuminate/Contracts/Broadcasting/ShouldBroadcastNow.html",
		"name": "Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Bus",
		"fromLink": "Illuminate/Contracts/Bus.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_dispatch",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::dispatch",
		"doc": "Dispatch a command to its appropriate handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_dispatchSync",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::dispatchSync",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_dispatchNow",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::dispatchNow",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_hasCommandHandler",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::hasCommandHandler",
		"doc": "Determine if the given command has a handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_getCommandHandler",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::getCommandHandler",
		"doc": "Retrieve the handler for a command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_pipeThrough",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::pipeThrough",
		"doc": "Set the pipes commands should be piped through before dispatching."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Bus/Dispatcher.html",
		"link": "Illuminate/Contracts/Bus/Dispatcher.html#method_map",
		"name": "Illuminate\\Contracts\\Bus\\Dispatcher::map",
		"doc": "Map a command to a handler."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Bus",
		"fromLink": "Illuminate/Contracts/Bus.html",
		"link": "Illuminate/Contracts/Bus/QueueingDispatcher.html",
		"name": "Illuminate\\Contracts\\Bus\\QueueingDispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\QueueingDispatcher",
		"fromLink": "Illuminate/Contracts/Bus/QueueingDispatcher.html",
		"link": "Illuminate/Contracts/Bus/QueueingDispatcher.html#method_findBatch",
		"name": "Illuminate\\Contracts\\Bus\\QueueingDispatcher::findBatch",
		"doc": "Attempt to find the batch with the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\QueueingDispatcher",
		"fromLink": "Illuminate/Contracts/Bus/QueueingDispatcher.html",
		"link": "Illuminate/Contracts/Bus/QueueingDispatcher.html#method_batch",
		"name": "Illuminate\\Contracts\\Bus\\QueueingDispatcher::batch",
		"doc": "Create a new batch of queueable jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Bus\\QueueingDispatcher",
		"fromLink": "Illuminate/Contracts/Bus/QueueingDispatcher.html",
		"link": "Illuminate/Contracts/Bus/QueueingDispatcher.html#method_dispatchToQueue",
		"name": "Illuminate\\Contracts\\Bus\\QueueingDispatcher::dispatchToQueue",
		"doc": "Dispatch a command to its appropriate handler behind a queue."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/Factory.html",
		"name": "Illuminate\\Contracts\\Cache\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Factory",
		"fromLink": "Illuminate/Contracts/Cache/Factory.html",
		"link": "Illuminate/Contracts/Cache/Factory.html#method_store",
		"name": "Illuminate\\Contracts\\Cache\\Factory::store",
		"doc": "Get a cache store instance by name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/Lock.html",
		"name": "Illuminate\\Contracts\\Cache\\Lock",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_get",
		"name": "Illuminate\\Contracts\\Cache\\Lock::get",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_block",
		"name": "Illuminate\\Contracts\\Cache\\Lock::block",
		"doc": "Attempt to acquire the lock for the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_release",
		"name": "Illuminate\\Contracts\\Cache\\Lock::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_owner",
		"name": "Illuminate\\Contracts\\Cache\\Lock::owner",
		"doc": "Returns the current owner of the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Lock",
		"fromLink": "Illuminate/Contracts/Cache/Lock.html",
		"link": "Illuminate/Contracts/Cache/Lock.html#method_forceRelease",
		"name": "Illuminate\\Contracts\\Cache\\Lock::forceRelease",
		"doc": "Releases this lock in disregard of ownership."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/LockProvider.html",
		"name": "Illuminate\\Contracts\\Cache\\LockProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\LockProvider",
		"fromLink": "Illuminate/Contracts/Cache/LockProvider.html",
		"link": "Illuminate/Contracts/Cache/LockProvider.html#method_lock",
		"name": "Illuminate\\Contracts\\Cache\\LockProvider::lock",
		"doc": "Get a lock instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\LockProvider",
		"fromLink": "Illuminate/Contracts/Cache/LockProvider.html",
		"link": "Illuminate/Contracts/Cache/LockProvider.html#method_restoreLock",
		"name": "Illuminate\\Contracts\\Cache\\LockProvider::restoreLock",
		"doc": "Restore a lock instance using the owner identifier."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/LockTimeoutException.html",
		"name": "Illuminate\\Contracts\\Cache\\LockTimeoutException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/Repository.html",
		"name": "Illuminate\\Contracts\\Cache\\Repository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_pull",
		"name": "Illuminate\\Contracts\\Cache\\Repository::pull",
		"doc": "Retrieve an item from the cache and delete it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_put",
		"name": "Illuminate\\Contracts\\Cache\\Repository::put",
		"doc": "Store an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_add",
		"name": "Illuminate\\Contracts\\Cache\\Repository::add",
		"doc": "Store an item in the cache if the key does not exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_increment",
		"name": "Illuminate\\Contracts\\Cache\\Repository::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_decrement",
		"name": "Illuminate\\Contracts\\Cache\\Repository::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_forever",
		"name": "Illuminate\\Contracts\\Cache\\Repository::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_remember",
		"name": "Illuminate\\Contracts\\Cache\\Repository::remember",
		"doc": "Get an item from the cache, or execute the given Closure and store the result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_sear",
		"name": "Illuminate\\Contracts\\Cache\\Repository::sear",
		"doc": "Get an item from the cache, or execute the given Closure and store the result forever."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_rememberForever",
		"name": "Illuminate\\Contracts\\Cache\\Repository::rememberForever",
		"doc": "Get an item from the cache, or execute the given Closure and store the result forever."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_forget",
		"name": "Illuminate\\Contracts\\Cache\\Repository::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Repository",
		"fromLink": "Illuminate/Contracts/Cache/Repository.html",
		"link": "Illuminate/Contracts/Cache/Repository.html#method_getStore",
		"name": "Illuminate\\Contracts\\Cache\\Repository::getStore",
		"doc": "Get the cache store implementation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Cache",
		"fromLink": "Illuminate/Contracts/Cache.html",
		"link": "Illuminate/Contracts/Cache/Store.html",
		"name": "Illuminate\\Contracts\\Cache\\Store",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_get",
		"name": "Illuminate\\Contracts\\Cache\\Store::get",
		"doc": "Retrieve an item from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_many",
		"name": "Illuminate\\Contracts\\Cache\\Store::many",
		"doc": "Retrieve multiple items from the cache by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_put",
		"name": "Illuminate\\Contracts\\Cache\\Store::put",
		"doc": "Store an item in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_putMany",
		"name": "Illuminate\\Contracts\\Cache\\Store::putMany",
		"doc": "Store multiple items in the cache for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_increment",
		"name": "Illuminate\\Contracts\\Cache\\Store::increment",
		"doc": "Increment the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_decrement",
		"name": "Illuminate\\Contracts\\Cache\\Store::decrement",
		"doc": "Decrement the value of an item in the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_forever",
		"name": "Illuminate\\Contracts\\Cache\\Store::forever",
		"doc": "Store an item in the cache indefinitely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_forget",
		"name": "Illuminate\\Contracts\\Cache\\Store::forget",
		"doc": "Remove an item from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_flush",
		"name": "Illuminate\\Contracts\\Cache\\Store::flush",
		"doc": "Remove all items from the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cache\\Store",
		"fromLink": "Illuminate/Contracts/Cache/Store.html",
		"link": "Illuminate/Contracts/Cache/Store.html#method_getPrefix",
		"name": "Illuminate\\Contracts\\Cache\\Store::getPrefix",
		"doc": "Get the cache key prefix."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Config",
		"fromLink": "Illuminate/Contracts/Config.html",
		"link": "Illuminate/Contracts/Config/Repository.html",
		"name": "Illuminate\\Contracts\\Config\\Repository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_has",
		"name": "Illuminate\\Contracts\\Config\\Repository::has",
		"doc": "Determine if the given configuration value exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_get",
		"name": "Illuminate\\Contracts\\Config\\Repository::get",
		"doc": "Get the specified configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_all",
		"name": "Illuminate\\Contracts\\Config\\Repository::all",
		"doc": "Get all of the configuration items for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_set",
		"name": "Illuminate\\Contracts\\Config\\Repository::set",
		"doc": "Set a given configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_prepend",
		"name": "Illuminate\\Contracts\\Config\\Repository::prepend",
		"doc": "Prepend a value onto an array configuration value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Config\\Repository",
		"fromLink": "Illuminate/Contracts/Config/Repository.html",
		"link": "Illuminate/Contracts/Config/Repository.html#method_push",
		"name": "Illuminate\\Contracts\\Config\\Repository::push",
		"doc": "Push a value onto an array configuration value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Console",
		"fromLink": "Illuminate/Contracts/Console.html",
		"link": "Illuminate/Contracts/Console/Application.html",
		"name": "Illuminate\\Contracts\\Console\\Application",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Application",
		"fromLink": "Illuminate/Contracts/Console/Application.html",
		"link": "Illuminate/Contracts/Console/Application.html#method_call",
		"name": "Illuminate\\Contracts\\Console\\Application::call",
		"doc": "Run an Artisan console command by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Application",
		"fromLink": "Illuminate/Contracts/Console/Application.html",
		"link": "Illuminate/Contracts/Console/Application.html#method_output",
		"name": "Illuminate\\Contracts\\Console\\Application::output",
		"doc": "Get the output from the last command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Console",
		"fromLink": "Illuminate/Contracts/Console.html",
		"link": "Illuminate/Contracts/Console/Kernel.html",
		"name": "Illuminate\\Contracts\\Console\\Kernel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_bootstrap",
		"name": "Illuminate\\Contracts\\Console\\Kernel::bootstrap",
		"doc": "Bootstrap the application for artisan commands."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_handle",
		"name": "Illuminate\\Contracts\\Console\\Kernel::handle",
		"doc": "Handle an incoming console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_call",
		"name": "Illuminate\\Contracts\\Console\\Kernel::call",
		"doc": "Run an Artisan console command by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_queue",
		"name": "Illuminate\\Contracts\\Console\\Kernel::queue",
		"doc": "Queue an Artisan console command by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_all",
		"name": "Illuminate\\Contracts\\Console\\Kernel::all",
		"doc": "Get all of the commands registered with the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_output",
		"name": "Illuminate\\Contracts\\Console\\Kernel::output",
		"doc": "Get the output for the last run command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Console\\Kernel",
		"fromLink": "Illuminate/Contracts/Console/Kernel.html",
		"link": "Illuminate/Contracts/Console/Kernel.html#method_terminate",
		"name": "Illuminate\\Contracts\\Console\\Kernel::terminate",
		"doc": "Terminate the application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Container",
		"fromLink": "Illuminate/Contracts/Container.html",
		"link": "Illuminate/Contracts/Container/BindingResolutionException.html",
		"name": "Illuminate\\Contracts\\Container\\BindingResolutionException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Container",
		"fromLink": "Illuminate/Contracts/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html",
		"name": "Illuminate\\Contracts\\Container\\Container",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_bound",
		"name": "Illuminate\\Contracts\\Container\\Container::bound",
		"doc": "Determine if the given abstract type has been bound."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_alias",
		"name": "Illuminate\\Contracts\\Container\\Container::alias",
		"doc": "Alias a type to a different name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_tag",
		"name": "Illuminate\\Contracts\\Container\\Container::tag",
		"doc": "Assign a set of tags to a given binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_tagged",
		"name": "Illuminate\\Contracts\\Container\\Container::tagged",
		"doc": "Resolve all of the bindings for a given tag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_bind",
		"name": "Illuminate\\Contracts\\Container\\Container::bind",
		"doc": "Register a binding with the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_bindIf",
		"name": "Illuminate\\Contracts\\Container\\Container::bindIf",
		"doc": "Register a binding if it hasn't already been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_singleton",
		"name": "Illuminate\\Contracts\\Container\\Container::singleton",
		"doc": "Register a shared binding in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_singletonIf",
		"name": "Illuminate\\Contracts\\Container\\Container::singletonIf",
		"doc": "Register a shared binding if it hasn't already been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_extend",
		"name": "Illuminate\\Contracts\\Container\\Container::extend",
		"doc": "\"Extend\" an abstract type in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_instance",
		"name": "Illuminate\\Contracts\\Container\\Container::instance",
		"doc": "Register an existing instance as shared in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_addContextualBinding",
		"name": "Illuminate\\Contracts\\Container\\Container::addContextualBinding",
		"doc": "Add a contextual binding to the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_when",
		"name": "Illuminate\\Contracts\\Container\\Container::when",
		"doc": "Define a contextual binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_factory",
		"name": "Illuminate\\Contracts\\Container\\Container::factory",
		"doc": "Get a closure to resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_flush",
		"name": "Illuminate\\Contracts\\Container\\Container::flush",
		"doc": "Flush the container of all bindings and resolved instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_make",
		"name": "Illuminate\\Contracts\\Container\\Container::make",
		"doc": "Resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_call",
		"name": "Illuminate\\Contracts\\Container\\Container::call",
		"doc": "Call the given Closure / class@method and inject its dependencies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_resolved",
		"name": "Illuminate\\Contracts\\Container\\Container::resolved",
		"doc": "Determine if the given abstract type has been resolved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_resolving",
		"name": "Illuminate\\Contracts\\Container\\Container::resolving",
		"doc": "Register a new resolving callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\Container",
		"fromLink": "Illuminate/Contracts/Container/Container.html",
		"link": "Illuminate/Contracts/Container/Container.html#method_afterResolving",
		"name": "Illuminate\\Contracts\\Container\\Container::afterResolving",
		"doc": "Register a new after resolving callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Container",
		"fromLink": "Illuminate/Contracts/Container.html",
		"link": "Illuminate/Contracts/Container/ContextualBindingBuilder.html",
		"name": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Contracts/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Contracts/Container/ContextualBindingBuilder.html#method_needs",
		"name": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder::needs",
		"doc": "Define the abstract target that depends on the context."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Contracts/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Contracts/Container/ContextualBindingBuilder.html#method_give",
		"name": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder::give",
		"doc": "Define the implementation for the contextual binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder",
		"fromLink": "Illuminate/Contracts/Container/ContextualBindingBuilder.html",
		"link": "Illuminate/Contracts/Container/ContextualBindingBuilder.html#method_giveTagged",
		"name": "Illuminate\\Contracts\\Container\\ContextualBindingBuilder::giveTagged",
		"doc": "Define tagged services to be used as the implementation for the contextual binding."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Cookie",
		"fromLink": "Illuminate/Contracts/Cookie.html",
		"link": "Illuminate/Contracts/Cookie/Factory.html",
		"name": "Illuminate\\Contracts\\Cookie\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\Factory",
		"fromLink": "Illuminate/Contracts/Cookie/Factory.html",
		"link": "Illuminate/Contracts/Cookie/Factory.html#method_make",
		"name": "Illuminate\\Contracts\\Cookie\\Factory::make",
		"doc": "Create a new cookie instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\Factory",
		"fromLink": "Illuminate/Contracts/Cookie/Factory.html",
		"link": "Illuminate/Contracts/Cookie/Factory.html#method_forever",
		"name": "Illuminate\\Contracts\\Cookie\\Factory::forever",
		"doc": "Create a cookie that lasts \"forever\" (five years)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\Factory",
		"fromLink": "Illuminate/Contracts/Cookie/Factory.html",
		"link": "Illuminate/Contracts/Cookie/Factory.html#method_forget",
		"name": "Illuminate\\Contracts\\Cookie\\Factory::forget",
		"doc": "Expire the given cookie."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Cookie",
		"fromLink": "Illuminate/Contracts/Cookie.html",
		"link": "Illuminate/Contracts/Cookie/QueueingFactory.html",
		"name": "Illuminate\\Contracts\\Cookie\\QueueingFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\QueueingFactory",
		"fromLink": "Illuminate/Contracts/Cookie/QueueingFactory.html",
		"link": "Illuminate/Contracts/Cookie/QueueingFactory.html#method_queue",
		"name": "Illuminate\\Contracts\\Cookie\\QueueingFactory::queue",
		"doc": "Queue a cookie to send with the next response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\QueueingFactory",
		"fromLink": "Illuminate/Contracts/Cookie/QueueingFactory.html",
		"link": "Illuminate/Contracts/Cookie/QueueingFactory.html#method_unqueue",
		"name": "Illuminate\\Contracts\\Cookie\\QueueingFactory::unqueue",
		"doc": "Remove a cookie from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Cookie\\QueueingFactory",
		"fromLink": "Illuminate/Contracts/Cookie/QueueingFactory.html",
		"link": "Illuminate/Contracts/Cookie/QueueingFactory.html#method_getQueuedCookies",
		"name": "Illuminate\\Contracts\\Cookie\\QueueingFactory::getQueuedCookies",
		"doc": "Get the cookies which have been queued for the next request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/Castable.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\Castable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\Castable",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/Castable.html",
		"link": "Illuminate/Contracts/Database/Eloquent/Castable.html#method_castUsing",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\Castable::castUsing",
		"doc": "Get the name of the caster class to use when casting from / to this cast target."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html#method_get",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes::get",
		"doc": "Transform the attribute from the underlying model values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsAttributes.html#method_set",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes::set",
		"doc": "Transform the attribute to its underlying model values."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsInboundAttributes.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/CastsInboundAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/CastsInboundAttributes.html#method_set",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes::set",
		"doc": "Transform the attribute to its underlying model values."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html#method_increment",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes::increment",
		"doc": "Increment the attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/DeviatesCastableAttributes.html#method_decrement",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\DeviatesCastableAttributes::decrement",
		"doc": "Decrement the attribute."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent",
		"fromLink": "Illuminate/Contracts/Database/Eloquent.html",
		"link": "Illuminate/Contracts/Database/Eloquent/SerializesCastableAttributes.html",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes",
		"fromLink": "Illuminate/Contracts/Database/Eloquent/SerializesCastableAttributes.html",
		"link": "Illuminate/Contracts/Database/Eloquent/SerializesCastableAttributes.html#method_serialize",
		"name": "Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes::serialize",
		"doc": "Serialize the attribute when converting the model to an array."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Database\\Events",
		"fromLink": "Illuminate/Contracts/Database/Events.html",
		"link": "Illuminate/Contracts/Database/Events/MigrationEvent.html",
		"name": "Illuminate\\Contracts\\Database\\Events\\MigrationEvent",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Database",
		"fromLink": "Illuminate/Contracts/Database.html",
		"link": "Illuminate/Contracts/Database/ModelIdentifier.html",
		"name": "Illuminate\\Contracts\\Database\\ModelIdentifier",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Database\\ModelIdentifier",
		"fromLink": "Illuminate/Contracts/Database/ModelIdentifier.html",
		"link": "Illuminate/Contracts/Database/ModelIdentifier.html#method___construct",
		"name": "Illuminate\\Contracts\\Database\\ModelIdentifier::__construct",
		"doc": "Create a new model identifier."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Debug",
		"fromLink": "Illuminate/Contracts/Debug.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"fromLink": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html#method_report",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler::report",
		"doc": "Report or log an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"fromLink": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html#method_shouldReport",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler::shouldReport",
		"doc": "Determine if the exception should be reported."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"fromLink": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html#method_render",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler::render",
		"doc": "Render an exception into an HTTP response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Debug\\ExceptionHandler",
		"fromLink": "Illuminate/Contracts/Debug/ExceptionHandler.html",
		"link": "Illuminate/Contracts/Debug/ExceptionHandler.html#method_renderForConsole",
		"name": "Illuminate\\Contracts\\Debug\\ExceptionHandler::renderForConsole",
		"doc": "Render an exception to the console."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Encryption",
		"fromLink": "Illuminate/Contracts/Encryption.html",
		"link": "Illuminate/Contracts/Encryption/DecryptException.html",
		"name": "Illuminate\\Contracts\\Encryption\\DecryptException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Encryption",
		"fromLink": "Illuminate/Contracts/Encryption.html",
		"link": "Illuminate/Contracts/Encryption/EncryptException.html",
		"name": "Illuminate\\Contracts\\Encryption\\EncryptException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Encryption",
		"fromLink": "Illuminate/Contracts/Encryption.html",
		"link": "Illuminate/Contracts/Encryption/Encrypter.html",
		"name": "Illuminate\\Contracts\\Encryption\\Encrypter",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Contracts/Encryption/Encrypter.html",
		"link": "Illuminate/Contracts/Encryption/Encrypter.html#method_encrypt",
		"name": "Illuminate\\Contracts\\Encryption\\Encrypter::encrypt",
		"doc": "Encrypt the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Contracts/Encryption/Encrypter.html",
		"link": "Illuminate/Contracts/Encryption/Encrypter.html#method_decrypt",
		"name": "Illuminate\\Contracts\\Encryption\\Encrypter::decrypt",
		"doc": "Decrypt the given value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Events",
		"fromLink": "Illuminate/Contracts/Events.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_listen",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::listen",
		"doc": "Register an event listener with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_hasListeners",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::hasListeners",
		"doc": "Determine if a given event has listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_subscribe",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::subscribe",
		"doc": "Register an event subscriber with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_until",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::until",
		"doc": "Dispatch an event until the first non-null response is returned."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_dispatch",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::dispatch",
		"doc": "Dispatch an event and call the listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_push",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::push",
		"doc": "Register an event and payload to be fired later."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_flush",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::flush",
		"doc": "Flush a set of pushed events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_forget",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::forget",
		"doc": "Remove a set of listeners from the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Events\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Events/Dispatcher.html",
		"link": "Illuminate/Contracts/Events/Dispatcher.html#method_forgetPushed",
		"name": "Illuminate\\Contracts\\Events\\Dispatcher::forgetPushed",
		"doc": "Forget all of the queued listeners."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Cloud.html",
		"name": "Illuminate\\Contracts\\Filesystem\\Cloud",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Cloud",
		"fromLink": "Illuminate/Contracts/Filesystem/Cloud.html",
		"link": "Illuminate/Contracts/Filesystem/Cloud.html#method_url",
		"name": "Illuminate\\Contracts\\Filesystem\\Cloud::url",
		"doc": "Get the URL for the file at the given path."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Factory.html",
		"name": "Illuminate\\Contracts\\Filesystem\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Factory",
		"fromLink": "Illuminate/Contracts/Filesystem/Factory.html",
		"link": "Illuminate/Contracts/Filesystem/Factory.html#method_disk",
		"name": "Illuminate\\Contracts\\Filesystem\\Factory::disk",
		"doc": "Get a filesystem implementation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/FileExistsException.html",
		"name": "Illuminate\\Contracts\\Filesystem\\FileExistsException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/FileNotFoundException.html",
		"name": "Illuminate\\Contracts\\Filesystem\\FileNotFoundException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_exists",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::exists",
		"doc": "Determine if a file exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_get",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::get",
		"doc": "Get the contents of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_readStream",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::readStream",
		"doc": "Get a resource to read the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_put",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::put",
		"doc": "Write the contents of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_writeStream",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::writeStream",
		"doc": "Write a new file using a stream."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_getVisibility",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::getVisibility",
		"doc": "Get the visibility for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_setVisibility",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::setVisibility",
		"doc": "Set the visibility for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_prepend",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::prepend",
		"doc": "Prepend to a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_append",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::append",
		"doc": "Append to a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_delete",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::delete",
		"doc": "Delete the file at a given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_copy",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::copy",
		"doc": "Copy a file to a new location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_move",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::move",
		"doc": "Move a file to a new location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_size",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::size",
		"doc": "Get the file size of a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_lastModified",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::lastModified",
		"doc": "Get the file's last modification time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_files",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::files",
		"doc": "Get an array of all files in a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_allFiles",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::allFiles",
		"doc": "Get all of the files from the given directory (recursive)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_directories",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::directories",
		"doc": "Get all of the directories within a given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_allDirectories",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::allDirectories",
		"doc": "Get all (recursive) of the directories within a given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_makeDirectory",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::makeDirectory",
		"doc": "Create a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/Filesystem.html#method_deleteDirectory",
		"name": "Illuminate\\Contracts\\Filesystem\\Filesystem::deleteDirectory",
		"doc": "Recursively delete a directory."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Filesystem",
		"fromLink": "Illuminate/Contracts/Filesystem.html",
		"link": "Illuminate/Contracts/Filesystem/LockTimeoutException.html",
		"name": "Illuminate\\Contracts\\Filesystem\\LockTimeoutException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Foundation",
		"fromLink": "Illuminate/Contracts/Foundation.html",
		"link": "Illuminate/Contracts/Foundation/Application.html",
		"name": "Illuminate\\Contracts\\Foundation\\Application",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_version",
		"name": "Illuminate\\Contracts\\Foundation\\Application::version",
		"doc": "Get the version number of the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_basePath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::basePath",
		"doc": "Get the base path of the Laravel installation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_bootstrapPath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::bootstrapPath",
		"doc": "Get the path to the bootstrap directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_configPath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::configPath",
		"doc": "Get the path to the application configuration files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_databasePath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::databasePath",
		"doc": "Get the path to the database directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_resourcePath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::resourcePath",
		"doc": "Get the path to the resources directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_storagePath",
		"name": "Illuminate\\Contracts\\Foundation\\Application::storagePath",
		"doc": "Get the path to the storage directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_environment",
		"name": "Illuminate\\Contracts\\Foundation\\Application::environment",
		"doc": "Get or check the current application environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_runningInConsole",
		"name": "Illuminate\\Contracts\\Foundation\\Application::runningInConsole",
		"doc": "Determine if the application is running in the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_runningUnitTests",
		"name": "Illuminate\\Contracts\\Foundation\\Application::runningUnitTests",
		"doc": "Determine if the application is running unit tests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_isDownForMaintenance",
		"name": "Illuminate\\Contracts\\Foundation\\Application::isDownForMaintenance",
		"doc": "Determine if the application is currently down for maintenance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_registerConfiguredProviders",
		"name": "Illuminate\\Contracts\\Foundation\\Application::registerConfiguredProviders",
		"doc": "Register all of the configured providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_register",
		"name": "Illuminate\\Contracts\\Foundation\\Application::register",
		"doc": "Register a service provider with the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_registerDeferredProvider",
		"name": "Illuminate\\Contracts\\Foundation\\Application::registerDeferredProvider",
		"doc": "Register a deferred provider and service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_resolveProvider",
		"name": "Illuminate\\Contracts\\Foundation\\Application::resolveProvider",
		"doc": "Resolve a service provider instance from the class name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_boot",
		"name": "Illuminate\\Contracts\\Foundation\\Application::boot",
		"doc": "Boot the application's service providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_booting",
		"name": "Illuminate\\Contracts\\Foundation\\Application::booting",
		"doc": "Register a new boot listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_booted",
		"name": "Illuminate\\Contracts\\Foundation\\Application::booted",
		"doc": "Register a new \"booted\" listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_bootstrapWith",
		"name": "Illuminate\\Contracts\\Foundation\\Application::bootstrapWith",
		"doc": "Run the given array of bootstrap classes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_getLocale",
		"name": "Illuminate\\Contracts\\Foundation\\Application::getLocale",
		"doc": "Get the current application locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_getNamespace",
		"name": "Illuminate\\Contracts\\Foundation\\Application::getNamespace",
		"doc": "Get the application namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_getProviders",
		"name": "Illuminate\\Contracts\\Foundation\\Application::getProviders",
		"doc": "Get the registered service provider instances if any exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_hasBeenBootstrapped",
		"name": "Illuminate\\Contracts\\Foundation\\Application::hasBeenBootstrapped",
		"doc": "Determine if the application has been bootstrapped before."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_loadDeferredProviders",
		"name": "Illuminate\\Contracts\\Foundation\\Application::loadDeferredProviders",
		"doc": "Load and boot all of the remaining deferred providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_setLocale",
		"name": "Illuminate\\Contracts\\Foundation\\Application::setLocale",
		"doc": "Set the current application locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_shouldSkipMiddleware",
		"name": "Illuminate\\Contracts\\Foundation\\Application::shouldSkipMiddleware",
		"doc": "Determine if middleware has been disabled for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\Application",
		"fromLink": "Illuminate/Contracts/Foundation/Application.html",
		"link": "Illuminate/Contracts/Foundation/Application.html#method_terminate",
		"name": "Illuminate\\Contracts\\Foundation\\Application::terminate",
		"doc": "Terminate the application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Foundation",
		"fromLink": "Illuminate/Contracts/Foundation.html",
		"link": "Illuminate/Contracts/Foundation/CachesConfiguration.html",
		"name": "Illuminate\\Contracts\\Foundation\\CachesConfiguration",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesConfiguration",
		"fromLink": "Illuminate/Contracts/Foundation/CachesConfiguration.html",
		"link": "Illuminate/Contracts/Foundation/CachesConfiguration.html#method_configurationIsCached",
		"name": "Illuminate\\Contracts\\Foundation\\CachesConfiguration::configurationIsCached",
		"doc": "Determine if the application configuration is cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesConfiguration",
		"fromLink": "Illuminate/Contracts/Foundation/CachesConfiguration.html",
		"link": "Illuminate/Contracts/Foundation/CachesConfiguration.html#method_getCachedConfigPath",
		"name": "Illuminate\\Contracts\\Foundation\\CachesConfiguration::getCachedConfigPath",
		"doc": "Get the path to the configuration cache file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesConfiguration",
		"fromLink": "Illuminate/Contracts/Foundation/CachesConfiguration.html",
		"link": "Illuminate/Contracts/Foundation/CachesConfiguration.html#method_getCachedServicesPath",
		"name": "Illuminate\\Contracts\\Foundation\\CachesConfiguration::getCachedServicesPath",
		"doc": "Get the path to the cached services.php file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Foundation",
		"fromLink": "Illuminate/Contracts/Foundation.html",
		"link": "Illuminate/Contracts/Foundation/CachesRoutes.html",
		"name": "Illuminate\\Contracts\\Foundation\\CachesRoutes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesRoutes",
		"fromLink": "Illuminate/Contracts/Foundation/CachesRoutes.html",
		"link": "Illuminate/Contracts/Foundation/CachesRoutes.html#method_routesAreCached",
		"name": "Illuminate\\Contracts\\Foundation\\CachesRoutes::routesAreCached",
		"doc": "Determine if the application routes are cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Foundation\\CachesRoutes",
		"fromLink": "Illuminate/Contracts/Foundation/CachesRoutes.html",
		"link": "Illuminate/Contracts/Foundation/CachesRoutes.html#method_getCachedRoutesPath",
		"name": "Illuminate\\Contracts\\Foundation\\CachesRoutes::getCachedRoutesPath",
		"doc": "Get the path to the routes cache file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Hashing",
		"fromLink": "Illuminate/Contracts/Hashing.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Hashing\\Hasher",
		"fromLink": "Illuminate/Contracts/Hashing/Hasher.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html#method_info",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher::info",
		"doc": "Get information about the given hashed value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Hashing\\Hasher",
		"fromLink": "Illuminate/Contracts/Hashing/Hasher.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html#method_make",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher::make",
		"doc": "Hash the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Hashing\\Hasher",
		"fromLink": "Illuminate/Contracts/Hashing/Hasher.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html#method_check",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher::check",
		"doc": "Check the given plain value against a hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Hashing\\Hasher",
		"fromLink": "Illuminate/Contracts/Hashing/Hasher.html",
		"link": "Illuminate/Contracts/Hashing/Hasher.html#method_needsRehash",
		"name": "Illuminate\\Contracts\\Hashing\\Hasher::needsRehash",
		"doc": "Check if the given hash has been hashed using the given options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Http",
		"fromLink": "Illuminate/Contracts/Http.html",
		"link": "Illuminate/Contracts/Http/Kernel.html",
		"name": "Illuminate\\Contracts\\Http\\Kernel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Http\\Kernel",
		"fromLink": "Illuminate/Contracts/Http/Kernel.html",
		"link": "Illuminate/Contracts/Http/Kernel.html#method_bootstrap",
		"name": "Illuminate\\Contracts\\Http\\Kernel::bootstrap",
		"doc": "Bootstrap the application for HTTP requests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Http\\Kernel",
		"fromLink": "Illuminate/Contracts/Http/Kernel.html",
		"link": "Illuminate/Contracts/Http/Kernel.html#method_handle",
		"name": "Illuminate\\Contracts\\Http\\Kernel::handle",
		"doc": "Handle an incoming HTTP request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Http\\Kernel",
		"fromLink": "Illuminate/Contracts/Http/Kernel.html",
		"link": "Illuminate/Contracts/Http/Kernel.html#method_terminate",
		"name": "Illuminate\\Contracts\\Http\\Kernel::terminate",
		"doc": "Perform any final actions for the request lifecycle."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Http\\Kernel",
		"fromLink": "Illuminate/Contracts/Http/Kernel.html",
		"link": "Illuminate/Contracts/Http/Kernel.html#method_getApplication",
		"name": "Illuminate\\Contracts\\Http\\Kernel::getApplication",
		"doc": "Get the Laravel application instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Mail",
		"fromLink": "Illuminate/Contracts/Mail.html",
		"link": "Illuminate/Contracts/Mail/Factory.html",
		"name": "Illuminate\\Contracts\\Mail\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Factory",
		"fromLink": "Illuminate/Contracts/Mail/Factory.html",
		"link": "Illuminate/Contracts/Mail/Factory.html#method_mailer",
		"name": "Illuminate\\Contracts\\Mail\\Factory::mailer",
		"doc": "Get a mailer instance by name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Mail",
		"fromLink": "Illuminate/Contracts/Mail.html",
		"link": "Illuminate/Contracts/Mail/MailQueue.html",
		"name": "Illuminate\\Contracts\\Mail\\MailQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\MailQueue",
		"fromLink": "Illuminate/Contracts/Mail/MailQueue.html",
		"link": "Illuminate/Contracts/Mail/MailQueue.html#method_queue",
		"name": "Illuminate\\Contracts\\Mail\\MailQueue::queue",
		"doc": "Queue a new e-mail message for sending."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\MailQueue",
		"fromLink": "Illuminate/Contracts/Mail/MailQueue.html",
		"link": "Illuminate/Contracts/Mail/MailQueue.html#method_later",
		"name": "Illuminate\\Contracts\\Mail\\MailQueue::later",
		"doc": "Queue a new e-mail message for sending after (n) seconds."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Mail",
		"fromLink": "Illuminate/Contracts/Mail.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html",
		"name": "Illuminate\\Contracts\\Mail\\Mailable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_send",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::send",
		"doc": "Send the message using the given mailer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_queue",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::queue",
		"doc": "Queue the given message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_later",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::later",
		"doc": "Deliver the queued message after the given delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_cc",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::cc",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_bcc",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::bcc",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_to",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::to",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_locale",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::locale",
		"doc": "Set the locale of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailable",
		"fromLink": "Illuminate/Contracts/Mail/Mailable.html",
		"link": "Illuminate/Contracts/Mail/Mailable.html#method_mailer",
		"name": "Illuminate\\Contracts\\Mail\\Mailable::mailer",
		"doc": "Set the name of the mailer that should be used to send the message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Mail",
		"fromLink": "Illuminate/Contracts/Mail.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html",
		"name": "Illuminate\\Contracts\\Mail\\Mailer",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_to",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::to",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_bcc",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::bcc",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_raw",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::raw",
		"doc": "Send a new message with only a raw text part."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_send",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::send",
		"doc": "Send a new message using a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Mail\\Mailer",
		"fromLink": "Illuminate/Contracts/Mail/Mailer.html",
		"link": "Illuminate/Contracts/Mail/Mailer.html#method_failures",
		"name": "Illuminate\\Contracts\\Mail\\Mailer::failures",
		"doc": "Get the array of failed recipients."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Notifications",
		"fromLink": "Illuminate/Contracts/Notifications.html",
		"link": "Illuminate/Contracts/Notifications/Dispatcher.html",
		"name": "Illuminate\\Contracts\\Notifications\\Dispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Notifications/Dispatcher.html",
		"link": "Illuminate/Contracts/Notifications/Dispatcher.html#method_send",
		"name": "Illuminate\\Contracts\\Notifications\\Dispatcher::send",
		"doc": "Send the given notification to the given notifiable entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Dispatcher",
		"fromLink": "Illuminate/Contracts/Notifications/Dispatcher.html",
		"link": "Illuminate/Contracts/Notifications/Dispatcher.html#method_sendNow",
		"name": "Illuminate\\Contracts\\Notifications\\Dispatcher::sendNow",
		"doc": "Send the given notification immediately."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Notifications",
		"fromLink": "Illuminate/Contracts/Notifications.html",
		"link": "Illuminate/Contracts/Notifications/Factory.html",
		"name": "Illuminate\\Contracts\\Notifications\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Factory",
		"fromLink": "Illuminate/Contracts/Notifications/Factory.html",
		"link": "Illuminate/Contracts/Notifications/Factory.html#method_channel",
		"name": "Illuminate\\Contracts\\Notifications\\Factory::channel",
		"doc": "Get a channel instance by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Factory",
		"fromLink": "Illuminate/Contracts/Notifications/Factory.html",
		"link": "Illuminate/Contracts/Notifications/Factory.html#method_send",
		"name": "Illuminate\\Contracts\\Notifications\\Factory::send",
		"doc": "Send the given notification to the given notifiable entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Notifications\\Factory",
		"fromLink": "Illuminate/Contracts/Notifications/Factory.html",
		"link": "Illuminate/Contracts/Notifications/Factory.html#method_sendNow",
		"name": "Illuminate\\Contracts\\Notifications\\Factory::sendNow",
		"doc": "Send the given notification immediately."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Pagination",
		"fromLink": "Illuminate/Contracts/Pagination.html",
		"link": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html",
		"name": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html#method_getUrlRange",
		"name": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator::getUrlRange",
		"doc": "Create a range of pagination URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html#method_total",
		"name": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator::total",
		"doc": "Determine the total number of items in the data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Contracts/Pagination/LengthAwarePaginator.html#method_lastPage",
		"name": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator::lastPage",
		"doc": "Get the page number of the last available page."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Pagination",
		"fromLink": "Illuminate/Contracts/Pagination.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_url",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::url",
		"doc": "Get the URL for a given page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_appends",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::appends",
		"doc": "Add a set of query string values to the paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_fragment",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::fragment",
		"doc": "Get / set the URL fragment to be appended to URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_nextPageUrl",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::nextPageUrl",
		"doc": "The URL for the next page, or null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_previousPageUrl",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::previousPageUrl",
		"doc": "Get the URL for the previous page, or null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_items",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::items",
		"doc": "Get all of the items being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_firstItem",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::firstItem",
		"doc": "Get the \"index\" of the first item being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_lastItem",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::lastItem",
		"doc": "Get the \"index\" of the last item being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_perPage",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::perPage",
		"doc": "Determine how many items are being shown per page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_currentPage",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::currentPage",
		"doc": "Determine the current page being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_hasPages",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::hasPages",
		"doc": "Determine if there are enough items to split into multiple pages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_hasMorePages",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::hasMorePages",
		"doc": "Determine if there are more items in the data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_path",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::path",
		"doc": "Get the base path for paginator generated URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_isEmpty",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::isEmpty",
		"doc": "Determine if the list of items is empty or not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_isNotEmpty",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::isNotEmpty",
		"doc": "Determine if the list of items is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pagination\\Paginator",
		"fromLink": "Illuminate/Contracts/Pagination/Paginator.html",
		"link": "Illuminate/Contracts/Pagination/Paginator.html#method_render",
		"name": "Illuminate\\Contracts\\Pagination\\Paginator::render",
		"doc": "Render the paginator using a given view."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Hub.html",
		"name": "Illuminate\\Contracts\\Pipeline\\Hub",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Hub",
		"fromLink": "Illuminate/Contracts/Pipeline/Hub.html",
		"link": "Illuminate/Contracts/Pipeline/Hub.html#method_pipe",
		"name": "Illuminate\\Contracts\\Pipeline\\Hub::pipe",
		"doc": "Send an object through one of the available pipelines."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html#method_send",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline::send",
		"doc": "Set the traveler object being sent on the pipeline."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html#method_through",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline::through",
		"doc": "Set the stops of the pipeline."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html#method_via",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline::via",
		"doc": "Set the method to call on the stops."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Contracts/Pipeline/Pipeline.html",
		"link": "Illuminate/Contracts/Pipeline/Pipeline.html#method_then",
		"name": "Illuminate\\Contracts\\Pipeline\\Pipeline::then",
		"doc": "Run the pipeline with a final destination callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/ClearableQueue.html",
		"name": "Illuminate\\Contracts\\Queue\\ClearableQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\ClearableQueue",
		"fromLink": "Illuminate/Contracts/Queue/ClearableQueue.html",
		"link": "Illuminate/Contracts/Queue/ClearableQueue.html#method_clear",
		"name": "Illuminate\\Contracts\\Queue\\ClearableQueue::clear",
		"doc": "Delete all of the jobs from the queue."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/EntityNotFoundException.html",
		"name": "Illuminate\\Contracts\\Queue\\EntityNotFoundException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\EntityNotFoundException",
		"fromLink": "Illuminate/Contracts/Queue/EntityNotFoundException.html",
		"link": "Illuminate/Contracts/Queue/EntityNotFoundException.html#method___construct",
		"name": "Illuminate\\Contracts\\Queue\\EntityNotFoundException::__construct",
		"doc": "Create a new exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/EntityResolver.html",
		"name": "Illuminate\\Contracts\\Queue\\EntityResolver",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\EntityResolver",
		"fromLink": "Illuminate/Contracts/Queue/EntityResolver.html",
		"link": "Illuminate/Contracts/Queue/EntityResolver.html#method_resolve",
		"name": "Illuminate\\Contracts\\Queue\\EntityResolver::resolve",
		"doc": "Resolve the entity for the given ID."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/Factory.html",
		"name": "Illuminate\\Contracts\\Queue\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Factory",
		"fromLink": "Illuminate/Contracts/Queue/Factory.html",
		"link": "Illuminate/Contracts/Queue/Factory.html#method_connection",
		"name": "Illuminate\\Contracts\\Queue\\Factory::connection",
		"doc": "Resolve a queue connection instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/Job.html",
		"name": "Illuminate\\Contracts\\Queue\\Job",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_uuid",
		"name": "Illuminate\\Contracts\\Queue\\Job::uuid",
		"doc": "Get the UUID of the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getJobId",
		"name": "Illuminate\\Contracts\\Queue\\Job::getJobId",
		"doc": "Get the job identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_payload",
		"name": "Illuminate\\Contracts\\Queue\\Job::payload",
		"doc": "Get the decoded body of the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_fire",
		"name": "Illuminate\\Contracts\\Queue\\Job::fire",
		"doc": "Fire the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_release",
		"name": "Illuminate\\Contracts\\Queue\\Job::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_isReleased",
		"name": "Illuminate\\Contracts\\Queue\\Job::isReleased",
		"doc": "Determine if the job was released back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_delete",
		"name": "Illuminate\\Contracts\\Queue\\Job::delete",
		"doc": "Delete the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_isDeleted",
		"name": "Illuminate\\Contracts\\Queue\\Job::isDeleted",
		"doc": "Determine if the job has been deleted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_isDeletedOrReleased",
		"name": "Illuminate\\Contracts\\Queue\\Job::isDeletedOrReleased",
		"doc": "Determine if the job has been deleted or released."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_attempts",
		"name": "Illuminate\\Contracts\\Queue\\Job::attempts",
		"doc": "Get the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_hasFailed",
		"name": "Illuminate\\Contracts\\Queue\\Job::hasFailed",
		"doc": "Determine if the job has been marked as a failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_markAsFailed",
		"name": "Illuminate\\Contracts\\Queue\\Job::markAsFailed",
		"doc": "Mark the job as \"failed\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_fail",
		"name": "Illuminate\\Contracts\\Queue\\Job::fail",
		"doc": "Delete the job, call the \"failed\" method, and raise the failed job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_maxTries",
		"name": "Illuminate\\Contracts\\Queue\\Job::maxTries",
		"doc": "Get the number of times to attempt a job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_maxExceptions",
		"name": "Illuminate\\Contracts\\Queue\\Job::maxExceptions",
		"doc": "Get the maximum number of exceptions allowed, regardless of attempts."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_timeout",
		"name": "Illuminate\\Contracts\\Queue\\Job::timeout",
		"doc": "Get the number of seconds the job can run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_retryUntil",
		"name": "Illuminate\\Contracts\\Queue\\Job::retryUntil",
		"doc": "Get the timestamp indicating when the job should timeout."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getName",
		"name": "Illuminate\\Contracts\\Queue\\Job::getName",
		"doc": "Get the name of the queued job class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_resolveName",
		"name": "Illuminate\\Contracts\\Queue\\Job::resolveName",
		"doc": "Get the resolved name of the queued job class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getConnectionName",
		"name": "Illuminate\\Contracts\\Queue\\Job::getConnectionName",
		"doc": "Get the name of the connection the job belongs to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getQueue",
		"name": "Illuminate\\Contracts\\Queue\\Job::getQueue",
		"doc": "Get the name of the queue the job belongs to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Job",
		"fromLink": "Illuminate/Contracts/Queue/Job.html",
		"link": "Illuminate/Contracts/Queue/Job.html#method_getRawBody",
		"name": "Illuminate\\Contracts\\Queue\\Job::getRawBody",
		"doc": "Get the raw body string for the job."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/Monitor.html",
		"name": "Illuminate\\Contracts\\Queue\\Monitor",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Monitor",
		"fromLink": "Illuminate/Contracts/Queue/Monitor.html",
		"link": "Illuminate/Contracts/Queue/Monitor.html#method_looping",
		"name": "Illuminate\\Contracts\\Queue\\Monitor::looping",
		"doc": "Register a callback to be executed on every iteration through the queue loop."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Monitor",
		"fromLink": "Illuminate/Contracts/Queue/Monitor.html",
		"link": "Illuminate/Contracts/Queue/Monitor.html#method_failing",
		"name": "Illuminate\\Contracts\\Queue\\Monitor::failing",
		"doc": "Register a callback to be executed when a job fails after the maximum amount of retries."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Monitor",
		"fromLink": "Illuminate/Contracts/Queue/Monitor.html",
		"link": "Illuminate/Contracts/Queue/Monitor.html#method_stopping",
		"name": "Illuminate\\Contracts\\Queue\\Monitor::stopping",
		"doc": "Register a callback to be executed when a daemon queue is stopping."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html",
		"name": "Illuminate\\Contracts\\Queue\\Queue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_size",
		"name": "Illuminate\\Contracts\\Queue\\Queue::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_push",
		"name": "Illuminate\\Contracts\\Queue\\Queue::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_pushOn",
		"name": "Illuminate\\Contracts\\Queue\\Queue::pushOn",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_pushRaw",
		"name": "Illuminate\\Contracts\\Queue\\Queue::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_later",
		"name": "Illuminate\\Contracts\\Queue\\Queue::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_laterOn",
		"name": "Illuminate\\Contracts\\Queue\\Queue::laterOn",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_bulk",
		"name": "Illuminate\\Contracts\\Queue\\Queue::bulk",
		"doc": "Push an array of jobs onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_pop",
		"name": "Illuminate\\Contracts\\Queue\\Queue::pop",
		"doc": "Pop the next job off of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_getConnectionName",
		"name": "Illuminate\\Contracts\\Queue\\Queue::getConnectionName",
		"doc": "Get the connection name for the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\Queue",
		"fromLink": "Illuminate/Contracts/Queue/Queue.html",
		"link": "Illuminate/Contracts/Queue/Queue.html#method_setConnectionName",
		"name": "Illuminate\\Contracts\\Queue\\Queue::setConnectionName",
		"doc": "Set the connection name for the queue."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"fromLink": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html#method_getQueueableClass",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection::getQueueableClass",
		"doc": "Get the type of the entities being queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"fromLink": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html#method_getQueueableIds",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection::getQueueableIds",
		"doc": "Get the identifiers for all of the entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"fromLink": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html#method_getQueueableRelations",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection::getQueueableRelations",
		"doc": "Get the relationships of the entities being queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableCollection",
		"fromLink": "Illuminate/Contracts/Queue/QueueableCollection.html",
		"link": "Illuminate/Contracts/Queue/QueueableCollection.html#method_getQueueableConnection",
		"name": "Illuminate\\Contracts\\Queue\\QueueableCollection::getQueueableConnection",
		"doc": "Get the connection of the entities being queued."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/QueueableEntity.html",
		"name": "Illuminate\\Contracts\\Queue\\QueueableEntity",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableEntity",
		"fromLink": "Illuminate/Contracts/Queue/QueueableEntity.html",
		"link": "Illuminate/Contracts/Queue/QueueableEntity.html#method_getQueueableId",
		"name": "Illuminate\\Contracts\\Queue\\QueueableEntity::getQueueableId",
		"doc": "Get the queueable identity for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableEntity",
		"fromLink": "Illuminate/Contracts/Queue/QueueableEntity.html",
		"link": "Illuminate/Contracts/Queue/QueueableEntity.html#method_getQueueableRelations",
		"name": "Illuminate\\Contracts\\Queue\\QueueableEntity::getQueueableRelations",
		"doc": "Get the relationships for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Queue\\QueueableEntity",
		"fromLink": "Illuminate/Contracts/Queue/QueueableEntity.html",
		"link": "Illuminate/Contracts/Queue/QueueableEntity.html#method_getQueueableConnection",
		"name": "Illuminate\\Contracts\\Queue\\QueueableEntity::getQueueableConnection",
		"doc": "Get the connection of the entity."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/ShouldBeUnique.html",
		"name": "Illuminate\\Contracts\\Queue\\ShouldBeUnique",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/ShouldBeUniqueUntilProcessing.html",
		"name": "Illuminate\\Contracts\\Queue\\ShouldBeUniqueUntilProcessing",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Queue",
		"fromLink": "Illuminate/Contracts/Queue.html",
		"link": "Illuminate/Contracts/Queue/ShouldQueue.html",
		"name": "Illuminate\\Contracts\\Queue\\ShouldQueue",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Redis",
		"fromLink": "Illuminate/Contracts/Redis.html",
		"link": "Illuminate/Contracts/Redis/Connection.html",
		"name": "Illuminate\\Contracts\\Redis\\Connection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connection",
		"fromLink": "Illuminate/Contracts/Redis/Connection.html",
		"link": "Illuminate/Contracts/Redis/Connection.html#method_subscribe",
		"name": "Illuminate\\Contracts\\Redis\\Connection::subscribe",
		"doc": "Subscribe to a set of given channels for messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connection",
		"fromLink": "Illuminate/Contracts/Redis/Connection.html",
		"link": "Illuminate/Contracts/Redis/Connection.html#method_psubscribe",
		"name": "Illuminate\\Contracts\\Redis\\Connection::psubscribe",
		"doc": "Subscribe to a set of given channels with wildcards."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connection",
		"fromLink": "Illuminate/Contracts/Redis/Connection.html",
		"link": "Illuminate/Contracts/Redis/Connection.html#method_command",
		"name": "Illuminate\\Contracts\\Redis\\Connection::command",
		"doc": "Run a command against the Redis database."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Redis",
		"fromLink": "Illuminate/Contracts/Redis.html",
		"link": "Illuminate/Contracts/Redis/Connector.html",
		"name": "Illuminate\\Contracts\\Redis\\Connector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connector",
		"fromLink": "Illuminate/Contracts/Redis/Connector.html",
		"link": "Illuminate/Contracts/Redis/Connector.html#method_connect",
		"name": "Illuminate\\Contracts\\Redis\\Connector::connect",
		"doc": "Create a connection to a Redis cluster."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Connector",
		"fromLink": "Illuminate/Contracts/Redis/Connector.html",
		"link": "Illuminate/Contracts/Redis/Connector.html#method_connectToCluster",
		"name": "Illuminate\\Contracts\\Redis\\Connector::connectToCluster",
		"doc": "Create a connection to a Redis instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Redis",
		"fromLink": "Illuminate/Contracts/Redis.html",
		"link": "Illuminate/Contracts/Redis/Factory.html",
		"name": "Illuminate\\Contracts\\Redis\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Redis\\Factory",
		"fromLink": "Illuminate/Contracts/Redis/Factory.html",
		"link": "Illuminate/Contracts/Redis/Factory.html#method_connection",
		"name": "Illuminate\\Contracts\\Redis\\Factory::connection",
		"doc": "Get a Redis connection by name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Redis",
		"fromLink": "Illuminate/Contracts/Redis.html",
		"link": "Illuminate/Contracts/Redis/LimiterTimeoutException.html",
		"name": "Illuminate\\Contracts\\Redis\\LimiterTimeoutException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/BindingRegistrar.html",
		"name": "Illuminate\\Contracts\\Routing\\BindingRegistrar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\BindingRegistrar",
		"fromLink": "Illuminate/Contracts/Routing/BindingRegistrar.html",
		"link": "Illuminate/Contracts/Routing/BindingRegistrar.html#method_bind",
		"name": "Illuminate\\Contracts\\Routing\\BindingRegistrar::bind",
		"doc": "Add a new route parameter binder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\BindingRegistrar",
		"fromLink": "Illuminate/Contracts/Routing/BindingRegistrar.html",
		"link": "Illuminate/Contracts/Routing/BindingRegistrar.html#method_getBindingCallback",
		"name": "Illuminate\\Contracts\\Routing\\BindingRegistrar::getBindingCallback",
		"doc": "Get the binding callback for a given binding."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html",
		"name": "Illuminate\\Contracts\\Routing\\Registrar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_get",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::get",
		"doc": "Register a new GET route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_post",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::post",
		"doc": "Register a new POST route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_put",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::put",
		"doc": "Register a new PUT route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_delete",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::delete",
		"doc": "Register a new DELETE route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_patch",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::patch",
		"doc": "Register a new PATCH route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_options",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::options",
		"doc": "Register a new OPTIONS route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_match",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::match",
		"doc": "Register a new route with the given verbs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_resource",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::resource",
		"doc": "Route a resource to a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_group",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::group",
		"doc": "Create a route group with shared attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_substituteBindings",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::substituteBindings",
		"doc": "Substitute the route bindings onto the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\Registrar",
		"fromLink": "Illuminate/Contracts/Routing/Registrar.html",
		"link": "Illuminate/Contracts/Routing/Registrar.html#method_substituteImplicitBindings",
		"name": "Illuminate\\Contracts\\Routing\\Registrar::substituteImplicitBindings",
		"doc": "Substitute the implicit Eloquent model bindings for the route."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_make",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::make",
		"doc": "Create a new response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_noContent",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::noContent",
		"doc": "Create a new \"no content\" response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_view",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::view",
		"doc": "Create a new response for a given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_json",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::json",
		"doc": "Create a new JSON response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_jsonp",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::jsonp",
		"doc": "Create a new JSONP response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_stream",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::stream",
		"doc": "Create a new streamed response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_streamDownload",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::streamDownload",
		"doc": "Create a new streamed response instance as a file download."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_download",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::download",
		"doc": "Create a new file download response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_file",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::file",
		"doc": "Return the raw contents of a binary file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectTo",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectTo",
		"doc": "Create a new redirect response to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectToRoute",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectToRoute",
		"doc": "Create a new redirect response to a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectToAction",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectToAction",
		"doc": "Create a new redirect response to a controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectGuest",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectGuest",
		"doc": "Create a new redirect response, while putting the current URL in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Contracts/Routing/ResponseFactory.html",
		"link": "Illuminate/Contracts/Routing/ResponseFactory.html#method_redirectToIntended",
		"name": "Illuminate\\Contracts\\Routing\\ResponseFactory::redirectToIntended",
		"doc": "Create a new redirect response to the previously intended location."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_current",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::current",
		"doc": "Get the current URL for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_previous",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::previous",
		"doc": "Get the URL for the previous request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_to",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::to",
		"doc": "Generate an absolute URL to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_secure",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::secure",
		"doc": "Generate a secure, absolute URL to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_asset",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::asset",
		"doc": "Generate the URL to an application asset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_route",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::route",
		"doc": "Get the URL to a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_action",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::action",
		"doc": "Get the URL to a controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Contracts/Routing/UrlGenerator.html",
		"link": "Illuminate/Contracts/Routing/UrlGenerator.html#method_setRootControllerNamespace",
		"name": "Illuminate\\Contracts\\Routing\\UrlGenerator::setRootControllerNamespace",
		"doc": "Set the root controller namespace."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Routing",
		"fromLink": "Illuminate/Contracts/Routing.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"fromLink": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html#method_getRouteKey",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable::getRouteKey",
		"doc": "Get the value of the model's route key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"fromLink": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html#method_getRouteKeyName",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable::getRouteKeyName",
		"doc": "Get the route key for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"fromLink": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html#method_resolveRouteBinding",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable::resolveRouteBinding",
		"doc": "Retrieve the model for a bound value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Routing\\UrlRoutable",
		"fromLink": "Illuminate/Contracts/Routing/UrlRoutable.html",
		"link": "Illuminate/Contracts/Routing/UrlRoutable.html#method_resolveChildRouteBinding",
		"name": "Illuminate\\Contracts\\Routing\\UrlRoutable::resolveChildRouteBinding",
		"doc": "Retrieve the child model for a bound value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Session",
		"fromLink": "Illuminate/Contracts/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html",
		"name": "Illuminate\\Contracts\\Session\\Session",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_getName",
		"name": "Illuminate\\Contracts\\Session\\Session::getName",
		"doc": "Get the name of the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_setName",
		"name": "Illuminate\\Contracts\\Session\\Session::setName",
		"doc": "Set the name of the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_getId",
		"name": "Illuminate\\Contracts\\Session\\Session::getId",
		"doc": "Get the current session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_setId",
		"name": "Illuminate\\Contracts\\Session\\Session::setId",
		"doc": "Set the session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_start",
		"name": "Illuminate\\Contracts\\Session\\Session::start",
		"doc": "Start the session, reading the data from a handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_save",
		"name": "Illuminate\\Contracts\\Session\\Session::save",
		"doc": "Save the session data to storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_all",
		"name": "Illuminate\\Contracts\\Session\\Session::all",
		"doc": "Get all of the session data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_exists",
		"name": "Illuminate\\Contracts\\Session\\Session::exists",
		"doc": "Checks if a key exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_has",
		"name": "Illuminate\\Contracts\\Session\\Session::has",
		"doc": "Checks if a key is present and not null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_get",
		"name": "Illuminate\\Contracts\\Session\\Session::get",
		"doc": "Get an item from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_pull",
		"name": "Illuminate\\Contracts\\Session\\Session::pull",
		"doc": "Get the value of a given key and then forget it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_put",
		"name": "Illuminate\\Contracts\\Session\\Session::put",
		"doc": "Put a key / value pair or array of key / value pairs in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_token",
		"name": "Illuminate\\Contracts\\Session\\Session::token",
		"doc": "Get the CSRF token value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_regenerateToken",
		"name": "Illuminate\\Contracts\\Session\\Session::regenerateToken",
		"doc": "Regenerate the CSRF token value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_remove",
		"name": "Illuminate\\Contracts\\Session\\Session::remove",
		"doc": "Remove an item from the session, returning its value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_forget",
		"name": "Illuminate\\Contracts\\Session\\Session::forget",
		"doc": "Remove one or many items from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_flush",
		"name": "Illuminate\\Contracts\\Session\\Session::flush",
		"doc": "Remove all of the items from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_invalidate",
		"name": "Illuminate\\Contracts\\Session\\Session::invalidate",
		"doc": "Flush the session data and regenerate the ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_regenerate",
		"name": "Illuminate\\Contracts\\Session\\Session::regenerate",
		"doc": "Generate a new session identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_migrate",
		"name": "Illuminate\\Contracts\\Session\\Session::migrate",
		"doc": "Generate a new session ID for the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_isStarted",
		"name": "Illuminate\\Contracts\\Session\\Session::isStarted",
		"doc": "Determine if the session has been started."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_previousUrl",
		"name": "Illuminate\\Contracts\\Session\\Session::previousUrl",
		"doc": "Get the previous URL from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_setPreviousUrl",
		"name": "Illuminate\\Contracts\\Session\\Session::setPreviousUrl",
		"doc": "Set the \"previous\" URL in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_getHandler",
		"name": "Illuminate\\Contracts\\Session\\Session::getHandler",
		"doc": "Get the session handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_handlerNeedsRequest",
		"name": "Illuminate\\Contracts\\Session\\Session::handlerNeedsRequest",
		"doc": "Determine if the session handler needs a request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Session\\Session",
		"fromLink": "Illuminate/Contracts/Session/Session.html",
		"link": "Illuminate/Contracts/Session/Session.html#method_setRequestOnHandler",
		"name": "Illuminate\\Contracts\\Session\\Session::setRequestOnHandler",
		"doc": "Set the request on the handler instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Arrayable.html",
		"name": "Illuminate\\Contracts\\Support\\Arrayable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Arrayable",
		"fromLink": "Illuminate/Contracts/Support/Arrayable.html",
		"link": "Illuminate/Contracts/Support/Arrayable.html#method_toArray",
		"name": "Illuminate\\Contracts\\Support\\Arrayable::toArray",
		"doc": "Get the instance as an array."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/DeferrableProvider.html",
		"name": "Illuminate\\Contracts\\Support\\DeferrableProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\DeferrableProvider",
		"fromLink": "Illuminate/Contracts/Support/DeferrableProvider.html",
		"link": "Illuminate/Contracts/Support/DeferrableProvider.html#method_provides",
		"name": "Illuminate\\Contracts\\Support\\DeferrableProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/DeferringDisplayableValue.html",
		"name": "Illuminate\\Contracts\\Support\\DeferringDisplayableValue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\DeferringDisplayableValue",
		"fromLink": "Illuminate/Contracts/Support/DeferringDisplayableValue.html",
		"link": "Illuminate/Contracts/Support/DeferringDisplayableValue.html#method_resolveDisplayableValue",
		"name": "Illuminate\\Contracts\\Support\\DeferringDisplayableValue::resolveDisplayableValue",
		"doc": "Resolve the displayable value that the class is deferring."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Htmlable.html",
		"name": "Illuminate\\Contracts\\Support\\Htmlable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Htmlable",
		"fromLink": "Illuminate/Contracts/Support/Htmlable.html",
		"link": "Illuminate/Contracts/Support/Htmlable.html#method_toHtml",
		"name": "Illuminate\\Contracts\\Support\\Htmlable::toHtml",
		"doc": "Get content as a string of HTML."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Jsonable.html",
		"name": "Illuminate\\Contracts\\Support\\Jsonable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Jsonable",
		"fromLink": "Illuminate/Contracts/Support/Jsonable.html",
		"link": "Illuminate/Contracts/Support/Jsonable.html#method_toJson",
		"name": "Illuminate\\Contracts\\Support\\Jsonable::toJson",
		"doc": "Convert the object to its JSON representation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html",
		"name": "Illuminate\\Contracts\\Support\\MessageBag",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_keys",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::keys",
		"doc": "Get the keys present in the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_add",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::add",
		"doc": "Add a message to the bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_merge",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::merge",
		"doc": "Merge a new array of messages into the bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_has",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::has",
		"doc": "Determine if messages exist for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_first",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::first",
		"doc": "Get the first message from the bag for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_get",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::get",
		"doc": "Get all of the messages from the bag for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_all",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::all",
		"doc": "Get all of the messages for every key in the bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_getMessages",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::getMessages",
		"doc": "Get the raw messages in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_getFormat",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::getFormat",
		"doc": "Get the default message format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_setFormat",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::setFormat",
		"doc": "Set the default message format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_isEmpty",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::isEmpty",
		"doc": "Determine if the message bag has any messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_isNotEmpty",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::isNotEmpty",
		"doc": "Determine if the message bag has any messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageBag",
		"fromLink": "Illuminate/Contracts/Support/MessageBag.html",
		"link": "Illuminate/Contracts/Support/MessageBag.html#method_count",
		"name": "Illuminate\\Contracts\\Support\\MessageBag::count",
		"doc": "Get the number of messages in the container."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/MessageProvider.html",
		"name": "Illuminate\\Contracts\\Support\\MessageProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\MessageProvider",
		"fromLink": "Illuminate/Contracts/Support/MessageProvider.html",
		"link": "Illuminate/Contracts/Support/MessageProvider.html#method_getMessageBag",
		"name": "Illuminate\\Contracts\\Support\\MessageProvider::getMessageBag",
		"doc": "Get the messages for the instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Renderable.html",
		"name": "Illuminate\\Contracts\\Support\\Renderable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Renderable",
		"fromLink": "Illuminate/Contracts/Support/Renderable.html",
		"link": "Illuminate/Contracts/Support/Renderable.html#method_render",
		"name": "Illuminate\\Contracts\\Support\\Renderable::render",
		"doc": "Get the evaluated contents of the object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Support",
		"fromLink": "Illuminate/Contracts/Support.html",
		"link": "Illuminate/Contracts/Support/Responsable.html",
		"name": "Illuminate\\Contracts\\Support\\Responsable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Support\\Responsable",
		"fromLink": "Illuminate/Contracts/Support/Responsable.html",
		"link": "Illuminate/Contracts/Support/Responsable.html#method_toResponse",
		"name": "Illuminate\\Contracts\\Support\\Responsable::toResponse",
		"doc": "Create an HTTP response that represents the object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Translation",
		"fromLink": "Illuminate/Contracts/Translation.html",
		"link": "Illuminate/Contracts/Translation/HasLocalePreference.html",
		"name": "Illuminate\\Contracts\\Translation\\HasLocalePreference",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\HasLocalePreference",
		"fromLink": "Illuminate/Contracts/Translation/HasLocalePreference.html",
		"link": "Illuminate/Contracts/Translation/HasLocalePreference.html#method_preferredLocale",
		"name": "Illuminate\\Contracts\\Translation\\HasLocalePreference::preferredLocale",
		"doc": "Get the preferred locale of the entity."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Translation",
		"fromLink": "Illuminate/Contracts/Translation.html",
		"link": "Illuminate/Contracts/Translation/Loader.html",
		"name": "Illuminate\\Contracts\\Translation\\Loader",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Loader",
		"fromLink": "Illuminate/Contracts/Translation/Loader.html",
		"link": "Illuminate/Contracts/Translation/Loader.html#method_load",
		"name": "Illuminate\\Contracts\\Translation\\Loader::load",
		"doc": "Load the messages for the given locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Loader",
		"fromLink": "Illuminate/Contracts/Translation/Loader.html",
		"link": "Illuminate/Contracts/Translation/Loader.html#method_addNamespace",
		"name": "Illuminate\\Contracts\\Translation\\Loader::addNamespace",
		"doc": "Add a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Loader",
		"fromLink": "Illuminate/Contracts/Translation/Loader.html",
		"link": "Illuminate/Contracts/Translation/Loader.html#method_addJsonPath",
		"name": "Illuminate\\Contracts\\Translation\\Loader::addJsonPath",
		"doc": "Add a new JSON path to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Loader",
		"fromLink": "Illuminate/Contracts/Translation/Loader.html",
		"link": "Illuminate/Contracts/Translation/Loader.html#method_namespaces",
		"name": "Illuminate\\Contracts\\Translation\\Loader::namespaces",
		"doc": "Get an array of all the registered namespaces."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Translation",
		"fromLink": "Illuminate/Contracts/Translation.html",
		"link": "Illuminate/Contracts/Translation/Translator.html",
		"name": "Illuminate\\Contracts\\Translation\\Translator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Translator",
		"fromLink": "Illuminate/Contracts/Translation/Translator.html",
		"link": "Illuminate/Contracts/Translation/Translator.html#method_get",
		"name": "Illuminate\\Contracts\\Translation\\Translator::get",
		"doc": "Get the translation for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Translator",
		"fromLink": "Illuminate/Contracts/Translation/Translator.html",
		"link": "Illuminate/Contracts/Translation/Translator.html#method_choice",
		"name": "Illuminate\\Contracts\\Translation\\Translator::choice",
		"doc": "Get a translation according to an integer value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Translator",
		"fromLink": "Illuminate/Contracts/Translation/Translator.html",
		"link": "Illuminate/Contracts/Translation/Translator.html#method_getLocale",
		"name": "Illuminate\\Contracts\\Translation\\Translator::getLocale",
		"doc": "Get the default locale being used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Translation\\Translator",
		"fromLink": "Illuminate/Contracts/Translation/Translator.html",
		"link": "Illuminate/Contracts/Translation/Translator.html#method_setLocale",
		"name": "Illuminate\\Contracts\\Translation\\Translator::setLocale",
		"doc": "Set the default locale."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/Factory.html",
		"name": "Illuminate\\Contracts\\Validation\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Factory",
		"fromLink": "Illuminate/Contracts/Validation/Factory.html",
		"link": "Illuminate/Contracts/Validation/Factory.html#method_make",
		"name": "Illuminate\\Contracts\\Validation\\Factory::make",
		"doc": "Create a new Validator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Factory",
		"fromLink": "Illuminate/Contracts/Validation/Factory.html",
		"link": "Illuminate/Contracts/Validation/Factory.html#method_extend",
		"name": "Illuminate\\Contracts\\Validation\\Factory::extend",
		"doc": "Register a custom validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Factory",
		"fromLink": "Illuminate/Contracts/Validation/Factory.html",
		"link": "Illuminate/Contracts/Validation/Factory.html#method_extendImplicit",
		"name": "Illuminate\\Contracts\\Validation\\Factory::extendImplicit",
		"doc": "Register a custom implicit validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Factory",
		"fromLink": "Illuminate/Contracts/Validation/Factory.html",
		"link": "Illuminate/Contracts/Validation/Factory.html#method_replacer",
		"name": "Illuminate\\Contracts\\Validation\\Factory::replacer",
		"doc": "Register a custom implicit validator message replacer."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/ImplicitRule.html",
		"name": "Illuminate\\Contracts\\Validation\\ImplicitRule",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/Rule.html",
		"name": "Illuminate\\Contracts\\Validation\\Rule",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Rule",
		"fromLink": "Illuminate/Contracts/Validation/Rule.html",
		"link": "Illuminate/Contracts/Validation/Rule.html#method_passes",
		"name": "Illuminate\\Contracts\\Validation\\Rule::passes",
		"doc": "Determine if the validation rule passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Rule",
		"fromLink": "Illuminate/Contracts/Validation/Rule.html",
		"link": "Illuminate/Contracts/Validation/Rule.html#method_message",
		"name": "Illuminate\\Contracts\\Validation\\Rule::message",
		"doc": "Get the validation error message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/ValidatesWhenResolved.html",
		"name": "Illuminate\\Contracts\\Validation\\ValidatesWhenResolved",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\ValidatesWhenResolved",
		"fromLink": "Illuminate/Contracts/Validation/ValidatesWhenResolved.html",
		"link": "Illuminate/Contracts/Validation/ValidatesWhenResolved.html#method_validateResolved",
		"name": "Illuminate\\Contracts\\Validation\\ValidatesWhenResolved::validateResolved",
		"doc": "Validate the given class instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\Validation",
		"fromLink": "Illuminate/Contracts/Validation.html",
		"link": "Illuminate/Contracts/Validation/Validator.html",
		"name": "Illuminate\\Contracts\\Validation\\Validator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_validate",
		"name": "Illuminate\\Contracts\\Validation\\Validator::validate",
		"doc": "Run the validator's rules against its data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_validated",
		"name": "Illuminate\\Contracts\\Validation\\Validator::validated",
		"doc": "Get the attributes and values that were validated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_fails",
		"name": "Illuminate\\Contracts\\Validation\\Validator::fails",
		"doc": "Determine if the data fails the validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_failed",
		"name": "Illuminate\\Contracts\\Validation\\Validator::failed",
		"doc": "Get the failed validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_sometimes",
		"name": "Illuminate\\Contracts\\Validation\\Validator::sometimes",
		"doc": "Add conditions to a given field based on a Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_after",
		"name": "Illuminate\\Contracts\\Validation\\Validator::after",
		"doc": "Add an after validation callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\Validation\\Validator",
		"fromLink": "Illuminate/Contracts/Validation/Validator.html",
		"link": "Illuminate/Contracts/Validation/Validator.html#method_errors",
		"name": "Illuminate\\Contracts\\Validation\\Validator::errors",
		"doc": "Get all of the validation error messages."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\View",
		"fromLink": "Illuminate/Contracts/View.html",
		"link": "Illuminate/Contracts/View/Engine.html",
		"name": "Illuminate\\Contracts\\View\\Engine",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Engine",
		"fromLink": "Illuminate/Contracts/View/Engine.html",
		"link": "Illuminate/Contracts/View/Engine.html#method_get",
		"name": "Illuminate\\Contracts\\View\\Engine::get",
		"doc": "Get the evaluated contents of the view."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\View",
		"fromLink": "Illuminate/Contracts/View.html",
		"link": "Illuminate/Contracts/View/Factory.html",
		"name": "Illuminate\\Contracts\\View\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_exists",
		"name": "Illuminate\\Contracts\\View\\Factory::exists",
		"doc": "Determine if a given view exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_file",
		"name": "Illuminate\\Contracts\\View\\Factory::file",
		"doc": "Get the evaluated view contents for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_make",
		"name": "Illuminate\\Contracts\\View\\Factory::make",
		"doc": "Get the evaluated view contents for the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_share",
		"name": "Illuminate\\Contracts\\View\\Factory::share",
		"doc": "Add a piece of shared data to the environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_composer",
		"name": "Illuminate\\Contracts\\View\\Factory::composer",
		"doc": "Register a view composer event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_creator",
		"name": "Illuminate\\Contracts\\View\\Factory::creator",
		"doc": "Register a view creator event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_addNamespace",
		"name": "Illuminate\\Contracts\\View\\Factory::addNamespace",
		"doc": "Add a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\Factory",
		"fromLink": "Illuminate/Contracts/View/Factory.html",
		"link": "Illuminate/Contracts/View/Factory.html#method_replaceNamespace",
		"name": "Illuminate\\Contracts\\View\\Factory::replaceNamespace",
		"doc": "Replace the namespace hints for the given namespace."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Contracts\\View",
		"fromLink": "Illuminate/Contracts/View.html",
		"link": "Illuminate/Contracts/View/View.html",
		"name": "Illuminate\\Contracts\\View\\View",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\View",
		"fromLink": "Illuminate/Contracts/View/View.html",
		"link": "Illuminate/Contracts/View/View.html#method_name",
		"name": "Illuminate\\Contracts\\View\\View::name",
		"doc": "Get the name of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\View",
		"fromLink": "Illuminate/Contracts/View/View.html",
		"link": "Illuminate/Contracts/View/View.html#method_with",
		"name": "Illuminate\\Contracts\\View\\View::with",
		"doc": "Add a piece of data to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Contracts\\View\\View",
		"fromLink": "Illuminate/Contracts/View/View.html",
		"link": "Illuminate/Contracts/View/View.html#method_getData",
		"name": "Illuminate\\Contracts\\View\\View::getData",
		"doc": "Get the array of view data."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cookie",
		"fromLink": "Illuminate/Cookie.html",
		"link": "Illuminate/Cookie/CookieJar.html",
		"name": "Illuminate\\Cookie\\CookieJar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_make",
		"name": "Illuminate\\Cookie\\CookieJar::make",
		"doc": "Create a new cookie instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_forever",
		"name": "Illuminate\\Cookie\\CookieJar::forever",
		"doc": "Create a cookie that lasts \"forever\" (five years)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_forget",
		"name": "Illuminate\\Cookie\\CookieJar::forget",
		"doc": "Expire the given cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_hasQueued",
		"name": "Illuminate\\Cookie\\CookieJar::hasQueued",
		"doc": "Determine if a cookie has been queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_queued",
		"name": "Illuminate\\Cookie\\CookieJar::queued",
		"doc": "Get a queued cookie instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_queue",
		"name": "Illuminate\\Cookie\\CookieJar::queue",
		"doc": "Queue a cookie to send with the next response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_unqueue",
		"name": "Illuminate\\Cookie\\CookieJar::unqueue",
		"doc": "Remove a cookie from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_getPathAndDomain",
		"name": "Illuminate\\Cookie\\CookieJar::getPathAndDomain",
		"doc": "Get the path and domain, or the default values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_setDefaultPathAndDomain",
		"name": "Illuminate\\Cookie\\CookieJar::setDefaultPathAndDomain",
		"doc": "Set the default path and domain for the jar."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieJar",
		"fromLink": "Illuminate/Cookie/CookieJar.html",
		"link": "Illuminate/Cookie/CookieJar.html#method_getQueuedCookies",
		"name": "Illuminate\\Cookie\\CookieJar::getQueuedCookies",
		"doc": "Get the cookies which have been queued for the next request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cookie",
		"fromLink": "Illuminate/Cookie.html",
		"link": "Illuminate/Cookie/CookieServiceProvider.html",
		"name": "Illuminate\\Cookie\\CookieServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieServiceProvider",
		"fromLink": "Illuminate/Cookie/CookieServiceProvider.html",
		"link": "Illuminate/Cookie/CookieServiceProvider.html#method_register",
		"name": "Illuminate\\Cookie\\CookieServiceProvider::register",
		"doc": "Register the service provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cookie",
		"fromLink": "Illuminate/Cookie.html",
		"link": "Illuminate/Cookie/CookieValuePrefix.html",
		"name": "Illuminate\\Cookie\\CookieValuePrefix",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieValuePrefix",
		"fromLink": "Illuminate/Cookie/CookieValuePrefix.html",
		"link": "Illuminate/Cookie/CookieValuePrefix.html#method_create",
		"name": "Illuminate\\Cookie\\CookieValuePrefix::create",
		"doc": "Create a new cookie value prefix for the given cookie name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\CookieValuePrefix",
		"fromLink": "Illuminate/Cookie/CookieValuePrefix.html",
		"link": "Illuminate/Cookie/CookieValuePrefix.html#method_remove",
		"name": "Illuminate\\Cookie\\CookieValuePrefix::remove",
		"doc": "Remove the cookie value prefix."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cookie\\Middleware",
		"fromLink": "Illuminate/Cookie/Middleware.html",
		"link": "Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.html",
		"name": "Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse",
		"fromLink": "Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.html",
		"link": "Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.html#method___construct",
		"name": "Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::__construct",
		"doc": "Create a new CookieQueue instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse",
		"fromLink": "Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.html",
		"link": "Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.html#method_handle",
		"name": "Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle",
		"doc": "Handle an incoming request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Cookie\\Middleware",
		"fromLink": "Illuminate/Cookie/Middleware.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method___construct",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::__construct",
		"doc": "Create a new CookieGuard instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_disableFor",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::disableFor",
		"doc": "Disable encryption for the given cookie name(s)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_handle",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_decrypt",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::decrypt",
		"doc": "Decrypt the cookies on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_decryptCookie",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::decryptCookie",
		"doc": "Decrypt the given cookie and return the value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_decryptArray",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::decryptArray",
		"doc": "Decrypt an array based cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_encrypt",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::encrypt",
		"doc": "Encrypt the cookies on an outgoing response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_duplicate",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::duplicate",
		"doc": "Duplicate a cookie with a new value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_isDisabled",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::isDisabled",
		"doc": "Determine whether encryption has been disabled for the given cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
		"fromLink": "Illuminate/Cookie/Middleware/EncryptCookies.html",
		"link": "Illuminate/Cookie/Middleware/EncryptCookies.html#method_serialized",
		"name": "Illuminate\\Cookie\\Middleware\\EncryptCookies::serialized",
		"doc": "Determine if the cookie contents should be serialized."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Capsule",
		"fromLink": "Illuminate/Database/Capsule.html",
		"link": "Illuminate/Database/Capsule/Manager.html",
		"name": "Illuminate\\Database\\Capsule\\Manager",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method___construct",
		"name": "Illuminate\\Database\\Capsule\\Manager::__construct",
		"doc": "Create a new database capsule manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_setupDefaultConfiguration",
		"name": "Illuminate\\Database\\Capsule\\Manager::setupDefaultConfiguration",
		"doc": "Setup the default database configuration options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_setupManager",
		"name": "Illuminate\\Database\\Capsule\\Manager::setupManager",
		"doc": "Build the database manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_connection",
		"name": "Illuminate\\Database\\Capsule\\Manager::connection",
		"doc": "Get a connection instance from the global manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_table",
		"name": "Illuminate\\Database\\Capsule\\Manager::table",
		"doc": "Get a fluent query builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_schema",
		"name": "Illuminate\\Database\\Capsule\\Manager::schema",
		"doc": "Get a schema builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_getConnection",
		"name": "Illuminate\\Database\\Capsule\\Manager::getConnection",
		"doc": "Get a registered connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_addConnection",
		"name": "Illuminate\\Database\\Capsule\\Manager::addConnection",
		"doc": "Register a connection with the manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_bootEloquent",
		"name": "Illuminate\\Database\\Capsule\\Manager::bootEloquent",
		"doc": "Bootstrap Eloquent so it is ready for usage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_setFetchMode",
		"name": "Illuminate\\Database\\Capsule\\Manager::setFetchMode",
		"doc": "Set the fetch mode for the database connections."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_getDatabaseManager",
		"name": "Illuminate\\Database\\Capsule\\Manager::getDatabaseManager",
		"doc": "Get the database manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_getEventDispatcher",
		"name": "Illuminate\\Database\\Capsule\\Manager::getEventDispatcher",
		"doc": "Get the current event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method_setEventDispatcher",
		"name": "Illuminate\\Database\\Capsule\\Manager::setEventDispatcher",
		"doc": "Set the event dispatcher instance to be used by connections."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Capsule\\Manager",
		"fromLink": "Illuminate/Database/Capsule/Manager.html",
		"link": "Illuminate/Database/Capsule/Manager.html#method___callStatic",
		"name": "Illuminate\\Database\\Capsule\\Manager::__callStatic",
		"doc": "Dynamically pass methods to the default connection."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Concerns",
		"fromLink": "Illuminate/Database/Concerns.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_chunk",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::chunk",
		"doc": "Chunk the results of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_each",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::each",
		"doc": "Execute a callback over each item while chunking."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_chunkById",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::chunkById",
		"doc": "Chunk the results of a query by comparing IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_eachById",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::eachById",
		"doc": "Execute a callback over each item while chunking by ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_first",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::first",
		"doc": "Execute the query and get the first result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_when",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::when",
		"doc": "Apply the callback's query changes if the given \"value\" is true."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_tap",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::tap",
		"doc": "Pass the query to a given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_unless",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::unless",
		"doc": "Apply the callback's query changes if the given \"value\" is false."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_paginator",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::paginator",
		"doc": "Create a new length-aware paginator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\BuildsQueries",
		"fromLink": "Illuminate/Database/Concerns/BuildsQueries.html",
		"link": "Illuminate/Database/Concerns/BuildsQueries.html#method_simplePaginator",
		"name": "Illuminate\\Database\\Concerns\\BuildsQueries::simplePaginator",
		"doc": "Create a new simple paginator instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Concerns",
		"fromLink": "Illuminate/Database/Concerns.html",
		"link": "Illuminate/Database/Concerns/ExplainsQueries.html",
		"name": "Illuminate\\Database\\Concerns\\ExplainsQueries",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ExplainsQueries",
		"fromLink": "Illuminate/Database/Concerns/ExplainsQueries.html",
		"link": "Illuminate/Database/Concerns/ExplainsQueries.html#method_explain",
		"name": "Illuminate\\Database\\Concerns\\ExplainsQueries::explain",
		"doc": "Explains the query."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Concerns",
		"fromLink": "Illuminate/Database/Concerns.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_transaction",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::transaction",
		"doc": "Execute a Closure within a transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_handleTransactionException",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::handleTransactionException",
		"doc": "Handle an exception encountered when running a transacted statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_beginTransaction",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::beginTransaction",
		"doc": "Start a new database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_createTransaction",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::createTransaction",
		"doc": "Create a transaction within the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_createSavepoint",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::createSavepoint",
		"doc": "Create a save point within the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_handleBeginTransactionException",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::handleBeginTransactionException",
		"doc": "Handle an exception from a transaction beginning."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_commit",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::commit",
		"doc": "Commit the active database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_handleCommitTransactionException",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::handleCommitTransactionException",
		"doc": "Handle an exception encountered when committing a transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_rollBack",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::rollBack",
		"doc": "Rollback the active database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_performRollBack",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::performRollBack",
		"doc": "Perform a rollback within the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_handleRollBackException",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::handleRollBackException",
		"doc": "Handle an exception from a rollback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_transactionLevel",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::transactionLevel",
		"doc": "Get the number of active transactions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Concerns\\ManagesTransactions",
		"fromLink": "Illuminate/Database/Concerns/ManagesTransactions.html",
		"link": "Illuminate/Database/Concerns/ManagesTransactions.html#method_afterCommit",
		"name": "Illuminate\\Database\\Concerns\\ManagesTransactions::afterCommit",
		"doc": "Execute the callback after a transaction commits."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/ConfigurationUrlParser.html",
		"name": "Illuminate\\Database\\ConfigurationUrlParser",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/Connection.html",
		"name": "Illuminate\\Database\\Connection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method___construct",
		"name": "Illuminate\\Database\\Connection::__construct",
		"doc": "Create a new database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_useDefaultQueryGrammar",
		"name": "Illuminate\\Database\\Connection::useDefaultQueryGrammar",
		"doc": "Set the query grammar to the default implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getDefaultQueryGrammar",
		"name": "Illuminate\\Database\\Connection::getDefaultQueryGrammar",
		"doc": "Get the default query grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_useDefaultSchemaGrammar",
		"name": "Illuminate\\Database\\Connection::useDefaultSchemaGrammar",
		"doc": "Set the schema grammar to the default implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getDefaultSchemaGrammar",
		"name": "Illuminate\\Database\\Connection::getDefaultSchemaGrammar",
		"doc": "Get the default schema grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_useDefaultPostProcessor",
		"name": "Illuminate\\Database\\Connection::useDefaultPostProcessor",
		"doc": "Set the query post processor to the default implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getDefaultPostProcessor",
		"name": "Illuminate\\Database\\Connection::getDefaultPostProcessor",
		"doc": "Get the default post processor instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getSchemaBuilder",
		"name": "Illuminate\\Database\\Connection::getSchemaBuilder",
		"doc": "Get a schema builder instance for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_table",
		"name": "Illuminate\\Database\\Connection::table",
		"doc": "Begin a fluent query against a database table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_query",
		"name": "Illuminate\\Database\\Connection::query",
		"doc": "Get a new query builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_selectOne",
		"name": "Illuminate\\Database\\Connection::selectOne",
		"doc": "Run a select statement and return a single result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_selectFromWriteConnection",
		"name": "Illuminate\\Database\\Connection::selectFromWriteConnection",
		"doc": "Run a select statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_select",
		"name": "Illuminate\\Database\\Connection::select",
		"doc": "Run a select statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_cursor",
		"name": "Illuminate\\Database\\Connection::cursor",
		"doc": "Run a select statement against the database and returns a generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_prepared",
		"name": "Illuminate\\Database\\Connection::prepared",
		"doc": "Configure the PDO prepared statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getPdoForSelect",
		"name": "Illuminate\\Database\\Connection::getPdoForSelect",
		"doc": "Get the PDO connection to use for a select query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_insert",
		"name": "Illuminate\\Database\\Connection::insert",
		"doc": "Run an insert statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_update",
		"name": "Illuminate\\Database\\Connection::update",
		"doc": "Run an update statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_delete",
		"name": "Illuminate\\Database\\Connection::delete",
		"doc": "Run a delete statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_statement",
		"name": "Illuminate\\Database\\Connection::statement",
		"doc": "Execute an SQL statement and return the boolean result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_affectingStatement",
		"name": "Illuminate\\Database\\Connection::affectingStatement",
		"doc": "Run an SQL statement and get the number of rows affected."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_unprepared",
		"name": "Illuminate\\Database\\Connection::unprepared",
		"doc": "Run a raw, unprepared query against the PDO connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_pretend",
		"name": "Illuminate\\Database\\Connection::pretend",
		"doc": "Execute the given callback in \"dry run\" mode."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_withFreshQueryLog",
		"name": "Illuminate\\Database\\Connection::withFreshQueryLog",
		"doc": "Execute the given callback in \"dry run\" mode."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_bindValues",
		"name": "Illuminate\\Database\\Connection::bindValues",
		"doc": "Bind values to their parameters in the given statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_prepareBindings",
		"name": "Illuminate\\Database\\Connection::prepareBindings",
		"doc": "Prepare the query bindings for execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_run",
		"name": "Illuminate\\Database\\Connection::run",
		"doc": "Run a SQL statement and log its execution context."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_runQueryCallback",
		"name": "Illuminate\\Database\\Connection::runQueryCallback",
		"doc": "Run a SQL statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_logQuery",
		"name": "Illuminate\\Database\\Connection::logQuery",
		"doc": "Log a query in the connection's query log."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getElapsedTime",
		"name": "Illuminate\\Database\\Connection::getElapsedTime",
		"doc": "Get the elapsed time since a given starting point."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_handleQueryException",
		"name": "Illuminate\\Database\\Connection::handleQueryException",
		"doc": "Handle a query exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_tryAgainIfCausedByLostConnection",
		"name": "Illuminate\\Database\\Connection::tryAgainIfCausedByLostConnection",
		"doc": "Handle a query exception that occurred during query execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_reconnect",
		"name": "Illuminate\\Database\\Connection::reconnect",
		"doc": "Reconnect to the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_reconnectIfMissingConnection",
		"name": "Illuminate\\Database\\Connection::reconnectIfMissingConnection",
		"doc": "Reconnect to the database if a PDO connection is missing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_disconnect",
		"name": "Illuminate\\Database\\Connection::disconnect",
		"doc": "Disconnect from the underlying PDO connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_listen",
		"name": "Illuminate\\Database\\Connection::listen",
		"doc": "Register a database query listener with the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_fireConnectionEvent",
		"name": "Illuminate\\Database\\Connection::fireConnectionEvent",
		"doc": "Fire an event for this connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_event",
		"name": "Illuminate\\Database\\Connection::event",
		"doc": "Fire the given event if possible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_raw",
		"name": "Illuminate\\Database\\Connection::raw",
		"doc": "Get a new raw query expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_recordsHaveBeenModified",
		"name": "Illuminate\\Database\\Connection::recordsHaveBeenModified",
		"doc": "Indicate if any records have been modified."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_isDoctrineAvailable",
		"name": "Illuminate\\Database\\Connection::isDoctrineAvailable",
		"doc": "Is Doctrine available?"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getDoctrineColumn",
		"name": "Illuminate\\Database\\Connection::getDoctrineColumn",
		"doc": "Get a Doctrine Schema Column instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getDoctrineSchemaManager",
		"name": "Illuminate\\Database\\Connection::getDoctrineSchemaManager",
		"doc": "Get the Doctrine DBAL schema manager for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getDoctrineConnection",
		"name": "Illuminate\\Database\\Connection::getDoctrineConnection",
		"doc": "Get the Doctrine DBAL database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getPdo",
		"name": "Illuminate\\Database\\Connection::getPdo",
		"doc": "Get the current PDO connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getRawPdo",
		"name": "Illuminate\\Database\\Connection::getRawPdo",
		"doc": "Get the current PDO connection parameter without executing any reconnect logic."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getReadPdo",
		"name": "Illuminate\\Database\\Connection::getReadPdo",
		"doc": "Get the current PDO connection used for reading."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getRawReadPdo",
		"name": "Illuminate\\Database\\Connection::getRawReadPdo",
		"doc": "Get the current read PDO connection parameter without executing any reconnect logic."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setPdo",
		"name": "Illuminate\\Database\\Connection::setPdo",
		"doc": "Set the PDO connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setReadPdo",
		"name": "Illuminate\\Database\\Connection::setReadPdo",
		"doc": "Set the PDO connection used for reading."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setReconnector",
		"name": "Illuminate\\Database\\Connection::setReconnector",
		"doc": "Set the reconnect instance on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getName",
		"name": "Illuminate\\Database\\Connection::getName",
		"doc": "Get the database connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getConfig",
		"name": "Illuminate\\Database\\Connection::getConfig",
		"doc": "Get an option from the configuration options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getDriverName",
		"name": "Illuminate\\Database\\Connection::getDriverName",
		"doc": "Get the PDO driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getQueryGrammar",
		"name": "Illuminate\\Database\\Connection::getQueryGrammar",
		"doc": "Get the query grammar used by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setQueryGrammar",
		"name": "Illuminate\\Database\\Connection::setQueryGrammar",
		"doc": "Set the query grammar used by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getSchemaGrammar",
		"name": "Illuminate\\Database\\Connection::getSchemaGrammar",
		"doc": "Get the schema grammar used by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setSchemaGrammar",
		"name": "Illuminate\\Database\\Connection::setSchemaGrammar",
		"doc": "Set the schema grammar used by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getPostProcessor",
		"name": "Illuminate\\Database\\Connection::getPostProcessor",
		"doc": "Get the query post processor used by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setPostProcessor",
		"name": "Illuminate\\Database\\Connection::setPostProcessor",
		"doc": "Set the query post processor used by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getEventDispatcher",
		"name": "Illuminate\\Database\\Connection::getEventDispatcher",
		"doc": "Get the event dispatcher used by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setEventDispatcher",
		"name": "Illuminate\\Database\\Connection::setEventDispatcher",
		"doc": "Set the event dispatcher instance on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_unsetEventDispatcher",
		"name": "Illuminate\\Database\\Connection::unsetEventDispatcher",
		"doc": "Unset the event dispatcher for this connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setTransactionManager",
		"name": "Illuminate\\Database\\Connection::setTransactionManager",
		"doc": "Set the transaction manager instance on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_unsetTransactionManager",
		"name": "Illuminate\\Database\\Connection::unsetTransactionManager",
		"doc": "Unset the transaction manager for this connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_pretending",
		"name": "Illuminate\\Database\\Connection::pretending",
		"doc": "Determine if the connection is in a \"dry run\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getQueryLog",
		"name": "Illuminate\\Database\\Connection::getQueryLog",
		"doc": "Get the connection query log."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_flushQueryLog",
		"name": "Illuminate\\Database\\Connection::flushQueryLog",
		"doc": "Clear the query log."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_enableQueryLog",
		"name": "Illuminate\\Database\\Connection::enableQueryLog",
		"doc": "Enable the query log on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_disableQueryLog",
		"name": "Illuminate\\Database\\Connection::disableQueryLog",
		"doc": "Disable the query log on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_logging",
		"name": "Illuminate\\Database\\Connection::logging",
		"doc": "Determine whether we're logging queries."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getDatabaseName",
		"name": "Illuminate\\Database\\Connection::getDatabaseName",
		"doc": "Get the name of the connected database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setDatabaseName",
		"name": "Illuminate\\Database\\Connection::setDatabaseName",
		"doc": "Set the name of the connected database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getTablePrefix",
		"name": "Illuminate\\Database\\Connection::getTablePrefix",
		"doc": "Get the table prefix for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_setTablePrefix",
		"name": "Illuminate\\Database\\Connection::setTablePrefix",
		"doc": "Set the table prefix in use by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_withTablePrefix",
		"name": "Illuminate\\Database\\Connection::withTablePrefix",
		"doc": "Set the table prefix and return the grammar."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_resolverFor",
		"name": "Illuminate\\Database\\Connection::resolverFor",
		"doc": "Register a connection resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connection",
		"fromLink": "Illuminate/Database/Connection.html",
		"link": "Illuminate/Database/Connection.html#method_getResolver",
		"name": "Illuminate\\Database\\Connection::getResolver",
		"doc": "Get the connection resolver for the given driver."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/ConnectionInterface.html",
		"name": "Illuminate\\Database\\ConnectionInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_table",
		"name": "Illuminate\\Database\\ConnectionInterface::table",
		"doc": "Begin a fluent query against a database table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_raw",
		"name": "Illuminate\\Database\\ConnectionInterface::raw",
		"doc": "Get a new raw query expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_selectOne",
		"name": "Illuminate\\Database\\ConnectionInterface::selectOne",
		"doc": "Run a select statement and return a single result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_select",
		"name": "Illuminate\\Database\\ConnectionInterface::select",
		"doc": "Run a select statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_cursor",
		"name": "Illuminate\\Database\\ConnectionInterface::cursor",
		"doc": "Run a select statement against the database and returns a generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_insert",
		"name": "Illuminate\\Database\\ConnectionInterface::insert",
		"doc": "Run an insert statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_update",
		"name": "Illuminate\\Database\\ConnectionInterface::update",
		"doc": "Run an update statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_delete",
		"name": "Illuminate\\Database\\ConnectionInterface::delete",
		"doc": "Run a delete statement against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_statement",
		"name": "Illuminate\\Database\\ConnectionInterface::statement",
		"doc": "Execute an SQL statement and return the boolean result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_affectingStatement",
		"name": "Illuminate\\Database\\ConnectionInterface::affectingStatement",
		"doc": "Run an SQL statement and get the number of rows affected."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_unprepared",
		"name": "Illuminate\\Database\\ConnectionInterface::unprepared",
		"doc": "Run a raw, unprepared query against the PDO connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_prepareBindings",
		"name": "Illuminate\\Database\\ConnectionInterface::prepareBindings",
		"doc": "Prepare the query bindings for execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_transaction",
		"name": "Illuminate\\Database\\ConnectionInterface::transaction",
		"doc": "Execute a Closure within a transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_beginTransaction",
		"name": "Illuminate\\Database\\ConnectionInterface::beginTransaction",
		"doc": "Start a new database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_commit",
		"name": "Illuminate\\Database\\ConnectionInterface::commit",
		"doc": "Commit the active database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_rollBack",
		"name": "Illuminate\\Database\\ConnectionInterface::rollBack",
		"doc": "Rollback the active database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_transactionLevel",
		"name": "Illuminate\\Database\\ConnectionInterface::transactionLevel",
		"doc": "Get the number of active transactions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_pretend",
		"name": "Illuminate\\Database\\ConnectionInterface::pretend",
		"doc": "Execute the given callback in \"dry run\" mode."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionInterface",
		"fromLink": "Illuminate/Database/ConnectionInterface.html",
		"link": "Illuminate/Database/ConnectionInterface.html#method_getDatabaseName",
		"name": "Illuminate\\Database\\ConnectionInterface::getDatabaseName",
		"doc": "Get the name of the connected database."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/ConnectionResolver.html",
		"name": "Illuminate\\Database\\ConnectionResolver",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolver",
		"fromLink": "Illuminate/Database/ConnectionResolver.html",
		"link": "Illuminate/Database/ConnectionResolver.html#method___construct",
		"name": "Illuminate\\Database\\ConnectionResolver::__construct",
		"doc": "Create a new connection resolver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolver",
		"fromLink": "Illuminate/Database/ConnectionResolver.html",
		"link": "Illuminate/Database/ConnectionResolver.html#method_connection",
		"name": "Illuminate\\Database\\ConnectionResolver::connection",
		"doc": "Get a database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolver",
		"fromLink": "Illuminate/Database/ConnectionResolver.html",
		"link": "Illuminate/Database/ConnectionResolver.html#method_addConnection",
		"name": "Illuminate\\Database\\ConnectionResolver::addConnection",
		"doc": "Add a connection to the resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolver",
		"fromLink": "Illuminate/Database/ConnectionResolver.html",
		"link": "Illuminate/Database/ConnectionResolver.html#method_hasConnection",
		"name": "Illuminate\\Database\\ConnectionResolver::hasConnection",
		"doc": "Check if a connection has been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolver",
		"fromLink": "Illuminate/Database/ConnectionResolver.html",
		"link": "Illuminate/Database/ConnectionResolver.html#method_getDefaultConnection",
		"name": "Illuminate\\Database\\ConnectionResolver::getDefaultConnection",
		"doc": "Get the default connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolver",
		"fromLink": "Illuminate/Database/ConnectionResolver.html",
		"link": "Illuminate/Database/ConnectionResolver.html#method_setDefaultConnection",
		"name": "Illuminate\\Database\\ConnectionResolver::setDefaultConnection",
		"doc": "Set the default connection name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/ConnectionResolverInterface.html",
		"name": "Illuminate\\Database\\ConnectionResolverInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolverInterface",
		"fromLink": "Illuminate/Database/ConnectionResolverInterface.html",
		"link": "Illuminate/Database/ConnectionResolverInterface.html#method_connection",
		"name": "Illuminate\\Database\\ConnectionResolverInterface::connection",
		"doc": "Get a database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolverInterface",
		"fromLink": "Illuminate/Database/ConnectionResolverInterface.html",
		"link": "Illuminate/Database/ConnectionResolverInterface.html#method_getDefaultConnection",
		"name": "Illuminate\\Database\\ConnectionResolverInterface::getDefaultConnection",
		"doc": "Get the default connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\ConnectionResolverInterface",
		"fromLink": "Illuminate/Database/ConnectionResolverInterface.html",
		"link": "Illuminate/Database/ConnectionResolverInterface.html#method_setDefaultConnection",
		"name": "Illuminate\\Database\\ConnectionResolverInterface::setDefaultConnection",
		"doc": "Set the default connection name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Connectors",
		"fromLink": "Illuminate/Database/Connectors.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method___construct",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::__construct",
		"doc": "Create a new connection factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_make",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::make",
		"doc": "Establish a PDO connection based on the configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_parseConfig",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::parseConfig",
		"doc": "Parse and prepare the database configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_createSingleConnection",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::createSingleConnection",
		"doc": "Create a single database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_createReadWriteConnection",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::createReadWriteConnection",
		"doc": "Create a read / write database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_createReadPdo",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::createReadPdo",
		"doc": "Create a new PDO instance for reading."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_getReadConfig",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::getReadConfig",
		"doc": "Get the read configuration for a read / write connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_getWriteConfig",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::getWriteConfig",
		"doc": "Get the write configuration for a read / write connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_getReadWriteConfig",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::getReadWriteConfig",
		"doc": "Get a read / write level configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_mergeReadWriteConfig",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::mergeReadWriteConfig",
		"doc": "Merge a configuration for a read / write connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_createPdoResolver",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::createPdoResolver",
		"doc": "Create a new Closure that resolves to a PDO instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_createPdoResolverWithHosts",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::createPdoResolverWithHosts",
		"doc": "Create a new Closure that resolves to a PDO instance with a specific host or an array of hosts."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_parseHosts",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::parseHosts",
		"doc": "Parse the hosts configuration item into an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_createPdoResolverWithoutHosts",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::createPdoResolverWithoutHosts",
		"doc": "Create a new Closure that resolves to a PDO instance where there is no configured host."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_createConnector",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::createConnector",
		"doc": "Create a connector instance based on the configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectionFactory",
		"fromLink": "Illuminate/Database/Connectors/ConnectionFactory.html",
		"link": "Illuminate/Database/Connectors/ConnectionFactory.html#method_createConnection",
		"name": "Illuminate\\Database\\Connectors\\ConnectionFactory::createConnection",
		"doc": "Create a new connection instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Connectors",
		"fromLink": "Illuminate/Database/Connectors.html",
		"link": "Illuminate/Database/Connectors/Connector.html",
		"name": "Illuminate\\Database\\Connectors\\Connector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\Connector",
		"fromLink": "Illuminate/Database/Connectors/Connector.html",
		"link": "Illuminate/Database/Connectors/Connector.html#method_createConnection",
		"name": "Illuminate\\Database\\Connectors\\Connector::createConnection",
		"doc": "Create a new PDO connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\Connector",
		"fromLink": "Illuminate/Database/Connectors/Connector.html",
		"link": "Illuminate/Database/Connectors/Connector.html#method_createPdoConnection",
		"name": "Illuminate\\Database\\Connectors\\Connector::createPdoConnection",
		"doc": "Create a new PDO connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\Connector",
		"fromLink": "Illuminate/Database/Connectors/Connector.html",
		"link": "Illuminate/Database/Connectors/Connector.html#method_isPersistentConnection",
		"name": "Illuminate\\Database\\Connectors\\Connector::isPersistentConnection",
		"doc": "Determine if the connection is persistent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\Connector",
		"fromLink": "Illuminate/Database/Connectors/Connector.html",
		"link": "Illuminate/Database/Connectors/Connector.html#method_tryAgainIfCausedByLostConnection",
		"name": "Illuminate\\Database\\Connectors\\Connector::tryAgainIfCausedByLostConnection",
		"doc": "Handle an exception that occurred during connect execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\Connector",
		"fromLink": "Illuminate/Database/Connectors/Connector.html",
		"link": "Illuminate/Database/Connectors/Connector.html#method_getOptions",
		"name": "Illuminate\\Database\\Connectors\\Connector::getOptions",
		"doc": "Get the PDO options based on the configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\Connector",
		"fromLink": "Illuminate/Database/Connectors/Connector.html",
		"link": "Illuminate/Database/Connectors/Connector.html#method_getDefaultOptions",
		"name": "Illuminate\\Database\\Connectors\\Connector::getDefaultOptions",
		"doc": "Get the default PDO connection options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\Connector",
		"fromLink": "Illuminate/Database/Connectors/Connector.html",
		"link": "Illuminate/Database/Connectors/Connector.html#method_setDefaultOptions",
		"name": "Illuminate\\Database\\Connectors\\Connector::setDefaultOptions",
		"doc": "Set the default PDO connection options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Connectors",
		"fromLink": "Illuminate/Database/Connectors.html",
		"link": "Illuminate/Database/Connectors/ConnectorInterface.html",
		"name": "Illuminate\\Database\\Connectors\\ConnectorInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\ConnectorInterface",
		"fromLink": "Illuminate/Database/Connectors/ConnectorInterface.html",
		"link": "Illuminate/Database/Connectors/ConnectorInterface.html#method_connect",
		"name": "Illuminate\\Database\\Connectors\\ConnectorInterface::connect",
		"doc": "Establish a database connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Connectors",
		"fromLink": "Illuminate/Database/Connectors.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_connect",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::connect",
		"doc": "Establish a database connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_configureIsolationLevel",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::configureIsolationLevel",
		"doc": "Set the connection transaction isolation level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_configureEncoding",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::configureEncoding",
		"doc": "Set the connection character set and collation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_getCollation",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::getCollation",
		"doc": "Get the collation for the configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_configureTimezone",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::configureTimezone",
		"doc": "Set the timezone on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_getDsn",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::getDsn",
		"doc": "Create a DSN string from a configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_hasSocket",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::hasSocket",
		"doc": "Determine if the given configuration array has a UNIX socket value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_getSocketDsn",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::getSocketDsn",
		"doc": "Get the DSN string for a socket configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_getHostDsn",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::getHostDsn",
		"doc": "Get the DSN string for a host / port configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_setModes",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::setModes",
		"doc": "Set the modes for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_setCustomModes",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::setCustomModes",
		"doc": "Set the custom modes on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\MySqlConnector",
		"fromLink": "Illuminate/Database/Connectors/MySqlConnector.html",
		"link": "Illuminate/Database/Connectors/MySqlConnector.html#method_strictMode",
		"name": "Illuminate\\Database\\Connectors\\MySqlConnector::strictMode",
		"doc": "Get the query to enable strict mode."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Connectors",
		"fromLink": "Illuminate/Database/Connectors.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_connect",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::connect",
		"doc": "Establish a database connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_configureEncoding",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::configureEncoding",
		"doc": "Set the connection character set and collation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_configureTimezone",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::configureTimezone",
		"doc": "Set the timezone on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_configureSchema",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::configureSchema",
		"doc": "Set the schema on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_formatSchema",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::formatSchema",
		"doc": "Format the schema for the DSN."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_configureApplicationName",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::configureApplicationName",
		"doc": "Set the schema on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_getDsn",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::getDsn",
		"doc": "Create a DSN string from a configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_addSslOptions",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::addSslOptions",
		"doc": "Add the SSL options to the DSN."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\PostgresConnector",
		"fromLink": "Illuminate/Database/Connectors/PostgresConnector.html",
		"link": "Illuminate/Database/Connectors/PostgresConnector.html#method_configureSynchronousCommit",
		"name": "Illuminate\\Database\\Connectors\\PostgresConnector::configureSynchronousCommit",
		"doc": "Configure the synchronous_commit setting."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Connectors",
		"fromLink": "Illuminate/Database/Connectors.html",
		"link": "Illuminate/Database/Connectors/SQLiteConnector.html",
		"name": "Illuminate\\Database\\Connectors\\SQLiteConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SQLiteConnector",
		"fromLink": "Illuminate/Database/Connectors/SQLiteConnector.html",
		"link": "Illuminate/Database/Connectors/SQLiteConnector.html#method_connect",
		"name": "Illuminate\\Database\\Connectors\\SQLiteConnector::connect",
		"doc": "Establish a database connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Connectors",
		"fromLink": "Illuminate/Database/Connectors.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_connect",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::connect",
		"doc": "Establish a database connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_getDsn",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::getDsn",
		"doc": "Create a DSN string from a configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_prefersOdbc",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::prefersOdbc",
		"doc": "Determine if the database configuration prefers ODBC."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_getDblibDsn",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::getDblibDsn",
		"doc": "Get the DSN string for a DbLib connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_getOdbcDsn",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::getOdbcDsn",
		"doc": "Get the DSN string for an ODBC connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_getSqlSrvDsn",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::getSqlSrvDsn",
		"doc": "Get the DSN string for a SqlSrv connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_buildConnectString",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::buildConnectString",
		"doc": "Build a connection string from the given arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_buildHostString",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::buildHostString",
		"doc": "Build a host string from the given configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Connectors\\SqlServerConnector",
		"fromLink": "Illuminate/Database/Connectors/SqlServerConnector.html",
		"link": "Illuminate/Database/Connectors/SqlServerConnector.html#method_getAvailableDrivers",
		"name": "Illuminate\\Database\\Connectors\\SqlServerConnector::getAvailableDrivers",
		"doc": "Get the available PDO drivers."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console",
		"fromLink": "Illuminate/Database/Console.html",
		"link": "Illuminate/Database/Console/DbCommand.html",
		"name": "Illuminate\\Database\\Console\\DbCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\DbCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_getConnection",
		"name": "Illuminate\\Database\\Console\\DbCommand::getConnection",
		"doc": "Get the database connection configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_commandArguments",
		"name": "Illuminate\\Database\\Console\\DbCommand::commandArguments",
		"doc": "Get the arguments for the database client command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_commandEnvironment",
		"name": "Illuminate\\Database\\Console\\DbCommand::commandEnvironment",
		"doc": "Get the environment variables for the database client command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_getCommand",
		"name": "Illuminate\\Database\\Console\\DbCommand::getCommand",
		"doc": "Get the database client command to run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_getMysqlArguments",
		"name": "Illuminate\\Database\\Console\\DbCommand::getMysqlArguments",
		"doc": "Get the arguments for the MySQL CLI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_getPgsqlArguments",
		"name": "Illuminate\\Database\\Console\\DbCommand::getPgsqlArguments",
		"doc": "Get the arguments for the Postgres CLI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_getSqliteArguments",
		"name": "Illuminate\\Database\\Console\\DbCommand::getSqliteArguments",
		"doc": "Get the arguments for the SQLite CLI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_getSqlsrvArguments",
		"name": "Illuminate\\Database\\Console\\DbCommand::getSqlsrvArguments",
		"doc": "Get the arguments for the SQL Server CLI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_getPgsqlEnvironment",
		"name": "Illuminate\\Database\\Console\\DbCommand::getPgsqlEnvironment",
		"doc": "Get the environment variables for the Postgres CLI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DbCommand",
		"fromLink": "Illuminate/Database/Console/DbCommand.html",
		"link": "Illuminate/Database/Console/DbCommand.html#method_getOptionalArguments",
		"name": "Illuminate\\Database\\Console\\DbCommand::getOptionalArguments",
		"doc": "Get the optional arguments based on the connection configuration."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console",
		"fromLink": "Illuminate/Database/Console.html",
		"link": "Illuminate/Database/Console/DumpCommand.html",
		"name": "Illuminate\\Database\\Console\\DumpCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DumpCommand",
		"fromLink": "Illuminate/Database/Console/DumpCommand.html",
		"link": "Illuminate/Database/Console/DumpCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\DumpCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DumpCommand",
		"fromLink": "Illuminate/Database/Console/DumpCommand.html",
		"link": "Illuminate/Database/Console/DumpCommand.html#method_schemaState",
		"name": "Illuminate\\Database\\Console\\DumpCommand::schemaState",
		"doc": "Create a schema state instance for the given connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\DumpCommand",
		"fromLink": "Illuminate/Database/Console/DumpCommand.html",
		"link": "Illuminate/Database/Console/DumpCommand.html#method_path",
		"name": "Illuminate\\Database\\Console\\DumpCommand::path",
		"doc": "Get the path that the dump should be written to."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Factories",
		"fromLink": "Illuminate/Database/Console/Factories.html",
		"link": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html",
		"name": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand",
		"fromLink": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html",
		"link": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html#method_getStub",
		"name": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand",
		"fromLink": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html",
		"link": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand",
		"fromLink": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html",
		"link": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand",
		"fromLink": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html",
		"link": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html#method_getPath",
		"name": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand::getPath",
		"doc": "Get the destination class path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand",
		"fromLink": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html",
		"link": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html#method_guessModelName",
		"name": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand::guessModelName",
		"doc": "Guess the model name from the Factory name or return a default model name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand",
		"fromLink": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html",
		"link": "Illuminate/Database/Console/Factories/FactoryMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/BaseCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\BaseCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\BaseCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/BaseCommand.html",
		"link": "Illuminate/Database/Console/Migrations/BaseCommand.html#method_getMigrationPaths",
		"name": "Illuminate\\Database\\Console\\Migrations\\BaseCommand::getMigrationPaths",
		"doc": "Get all of the migration paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\BaseCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/BaseCommand.html",
		"link": "Illuminate/Database/Console/Migrations/BaseCommand.html#method_usingRealPath",
		"name": "Illuminate\\Database\\Console\\Migrations\\BaseCommand::usingRealPath",
		"doc": "Determine if the given path(s) are pre-resolved \"real\" paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\BaseCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/BaseCommand.html",
		"link": "Illuminate/Database/Console/Migrations/BaseCommand.html#method_getMigrationPath",
		"name": "Illuminate\\Database\\Console\\Migrations\\BaseCommand::getMigrationPath",
		"doc": "Get the path to the migration directory."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/FreshCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\FreshCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\FreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/FreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/FreshCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Migrations\\FreshCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\FreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/FreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/FreshCommand.html#method_needsSeeding",
		"name": "Illuminate\\Database\\Console\\Migrations\\FreshCommand::needsSeeding",
		"doc": "Determine if the developer has requested database seeding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\FreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/FreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/FreshCommand.html#method_runSeeder",
		"name": "Illuminate\\Database\\Console\\Migrations\\FreshCommand::runSeeder",
		"doc": "Run the database seeder command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\FreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/FreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/FreshCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\Migrations\\FreshCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/InstallCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\InstallCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\InstallCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/InstallCommand.html",
		"link": "Illuminate/Database/Console/Migrations/InstallCommand.html#method___construct",
		"name": "Illuminate\\Database\\Console\\Migrations\\InstallCommand::__construct",
		"doc": "Create a new migration install command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\InstallCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/InstallCommand.html",
		"link": "Illuminate/Database/Console/Migrations/InstallCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Migrations\\InstallCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\InstallCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/InstallCommand.html",
		"link": "Illuminate/Database/Console/Migrations/InstallCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\Migrations\\InstallCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateCommand.html#method___construct",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand::__construct",
		"doc": "Create a new migration command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateCommand.html#method_prepareDatabase",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand::prepareDatabase",
		"doc": "Prepare the migration database for running."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateCommand.html#method_loadSchemaState",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand::loadSchemaState",
		"doc": "Load the schema state to seed the initial database schema structure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateCommand.html#method_schemaPath",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateCommand::schemaPath",
		"doc": "Get the path to the stored schema for the given connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html#method___construct",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand::__construct",
		"doc": "Create a new migration install command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html#method_writeMigration",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand::writeMigration",
		"doc": "Write the migration file to disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html",
		"link": "Illuminate/Database/Console/Migrations/MigrateMakeCommand.html#method_getMigrationPath",
		"name": "Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand::getMigrationPath",
		"doc": "Get migration path (either specified by '--path' option or default location)."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/RefreshCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RefreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RefreshCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RefreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RefreshCommand.html#method_runRollback",
		"name": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand::runRollback",
		"doc": "Run the rollback command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RefreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RefreshCommand.html#method_runReset",
		"name": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand::runReset",
		"doc": "Run the reset command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RefreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RefreshCommand.html#method_needsSeeding",
		"name": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand::needsSeeding",
		"doc": "Determine if the developer has requested database seeding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RefreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RefreshCommand.html#method_runSeeder",
		"name": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand::runSeeder",
		"doc": "Run the database seeder command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RefreshCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RefreshCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\Migrations\\RefreshCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/ResetCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\ResetCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\ResetCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/ResetCommand.html",
		"link": "Illuminate/Database/Console/Migrations/ResetCommand.html#method___construct",
		"name": "Illuminate\\Database\\Console\\Migrations\\ResetCommand::__construct",
		"doc": "Create a new migration rollback command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\ResetCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/ResetCommand.html",
		"link": "Illuminate/Database/Console/Migrations/ResetCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Migrations\\ResetCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\ResetCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/ResetCommand.html",
		"link": "Illuminate/Database/Console/Migrations/ResetCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\Migrations\\ResetCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/RollbackCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\RollbackCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RollbackCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RollbackCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RollbackCommand.html#method___construct",
		"name": "Illuminate\\Database\\Console\\Migrations\\RollbackCommand::__construct",
		"doc": "Create a new migration rollback command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RollbackCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RollbackCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RollbackCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Migrations\\RollbackCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\RollbackCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/RollbackCommand.html",
		"link": "Illuminate/Database/Console/Migrations/RollbackCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\Migrations\\RollbackCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/StatusCommand.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\StatusCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\StatusCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/StatusCommand.html",
		"link": "Illuminate/Database/Console/Migrations/StatusCommand.html#method___construct",
		"name": "Illuminate\\Database\\Console\\Migrations\\StatusCommand::__construct",
		"doc": "Create a new migration rollback command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\StatusCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/StatusCommand.html",
		"link": "Illuminate/Database/Console/Migrations/StatusCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Migrations\\StatusCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\StatusCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/StatusCommand.html",
		"link": "Illuminate/Database/Console/Migrations/StatusCommand.html#method_getStatusFor",
		"name": "Illuminate\\Database\\Console\\Migrations\\StatusCommand::getStatusFor",
		"doc": "Get the status for the given ran migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\StatusCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/StatusCommand.html",
		"link": "Illuminate/Database/Console/Migrations/StatusCommand.html#method_getAllMigrationFiles",
		"name": "Illuminate\\Database\\Console\\Migrations\\StatusCommand::getAllMigrationFiles",
		"doc": "Get an array of all of the migration files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\StatusCommand",
		"fromLink": "Illuminate/Database/Console/Migrations/StatusCommand.html",
		"link": "Illuminate/Database/Console/Migrations/StatusCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\Migrations\\StatusCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Migrations",
		"fromLink": "Illuminate/Database/Console/Migrations.html",
		"link": "Illuminate/Database/Console/Migrations/TableGuesser.html",
		"name": "Illuminate\\Database\\Console\\Migrations\\TableGuesser",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Migrations\\TableGuesser",
		"fromLink": "Illuminate/Database/Console/Migrations/TableGuesser.html",
		"link": "Illuminate/Database/Console/Migrations/TableGuesser.html#method_guess",
		"name": "Illuminate\\Database\\Console\\Migrations\\TableGuesser::guess",
		"doc": "Attempt to guess the table name and \"creation\" status of the given migration."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Seeds",
		"fromLink": "Illuminate/Database/Console/Seeds.html",
		"link": "Illuminate/Database/Console/Seeds/SeedCommand.html",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeedCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeedCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeedCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeedCommand.html#method___construct",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeedCommand::__construct",
		"doc": "Create a new database seed command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeedCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeedCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeedCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeedCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeedCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeedCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeedCommand.html#method_getSeeder",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeedCommand::getSeeder",
		"doc": "Get a seeder instance from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeedCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeedCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeedCommand.html#method_getDatabase",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeedCommand::getDatabase",
		"doc": "Get the name of the database connection to use."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeedCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeedCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeedCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeedCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console\\Seeds",
		"fromLink": "Illuminate/Database/Console/Seeds.html",
		"link": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html#method_getStub",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html#method_getPath",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand::getPath",
		"doc": "Get the destination class path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand",
		"fromLink": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html",
		"link": "Illuminate/Database/Console/Seeds/SeederMakeCommand.html#method_qualifyClass",
		"name": "Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand::qualifyClass",
		"doc": "Parse the class name and format according to the root namespace."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Console",
		"fromLink": "Illuminate/Database/Console.html",
		"link": "Illuminate/Database/Console/WipeCommand.html",
		"name": "Illuminate\\Database\\Console\\WipeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\WipeCommand",
		"fromLink": "Illuminate/Database/Console/WipeCommand.html",
		"link": "Illuminate/Database/Console/WipeCommand.html#method_handle",
		"name": "Illuminate\\Database\\Console\\WipeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\WipeCommand",
		"fromLink": "Illuminate/Database/Console/WipeCommand.html",
		"link": "Illuminate/Database/Console/WipeCommand.html#method_dropAllTables",
		"name": "Illuminate\\Database\\Console\\WipeCommand::dropAllTables",
		"doc": "Drop all of the database tables."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\WipeCommand",
		"fromLink": "Illuminate/Database/Console/WipeCommand.html",
		"link": "Illuminate/Database/Console/WipeCommand.html#method_dropAllViews",
		"name": "Illuminate\\Database\\Console\\WipeCommand::dropAllViews",
		"doc": "Drop all of the database views."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\WipeCommand",
		"fromLink": "Illuminate/Database/Console/WipeCommand.html",
		"link": "Illuminate/Database/Console/WipeCommand.html#method_dropAllTypes",
		"name": "Illuminate\\Database\\Console\\WipeCommand::dropAllTypes",
		"doc": "Drop all of the database types."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Console\\WipeCommand",
		"fromLink": "Illuminate/Database/Console/WipeCommand.html",
		"link": "Illuminate/Database/Console/WipeCommand.html#method_getOptions",
		"name": "Illuminate\\Database\\Console\\WipeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/DatabaseManager.html",
		"name": "Illuminate\\Database\\DatabaseManager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method___construct",
		"name": "Illuminate\\Database\\DatabaseManager::__construct",
		"doc": "Create a new database manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_connection",
		"name": "Illuminate\\Database\\DatabaseManager::connection",
		"doc": "Get a database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_parseConnectionName",
		"name": "Illuminate\\Database\\DatabaseManager::parseConnectionName",
		"doc": "Parse the connection into an array of the name and read / write type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_makeConnection",
		"name": "Illuminate\\Database\\DatabaseManager::makeConnection",
		"doc": "Make the database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_configuration",
		"name": "Illuminate\\Database\\DatabaseManager::configuration",
		"doc": "Get the configuration for a connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_configure",
		"name": "Illuminate\\Database\\DatabaseManager::configure",
		"doc": "Prepare the database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_setPdoForType",
		"name": "Illuminate\\Database\\DatabaseManager::setPdoForType",
		"doc": "Prepare the read / write mode for database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_purge",
		"name": "Illuminate\\Database\\DatabaseManager::purge",
		"doc": "Disconnect from the given database and remove from local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_disconnect",
		"name": "Illuminate\\Database\\DatabaseManager::disconnect",
		"doc": "Disconnect from the given database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_reconnect",
		"name": "Illuminate\\Database\\DatabaseManager::reconnect",
		"doc": "Reconnect to the given database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_usingConnection",
		"name": "Illuminate\\Database\\DatabaseManager::usingConnection",
		"doc": "Set the default database connection for the callback execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_refreshPdoConnections",
		"name": "Illuminate\\Database\\DatabaseManager::refreshPdoConnections",
		"doc": "Refresh the PDO connections on a given connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_getDefaultConnection",
		"name": "Illuminate\\Database\\DatabaseManager::getDefaultConnection",
		"doc": "Get the default connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_setDefaultConnection",
		"name": "Illuminate\\Database\\DatabaseManager::setDefaultConnection",
		"doc": "Set the default connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_supportedDrivers",
		"name": "Illuminate\\Database\\DatabaseManager::supportedDrivers",
		"doc": "Get all of the support drivers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_availableDrivers",
		"name": "Illuminate\\Database\\DatabaseManager::availableDrivers",
		"doc": "Get all of the drivers that are actually available."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_extend",
		"name": "Illuminate\\Database\\DatabaseManager::extend",
		"doc": "Register an extension connection resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_getConnections",
		"name": "Illuminate\\Database\\DatabaseManager::getConnections",
		"doc": "Return all of the created connections."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method_setReconnector",
		"name": "Illuminate\\Database\\DatabaseManager::setReconnector",
		"doc": "Set the database reconnector callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseManager",
		"fromLink": "Illuminate/Database/DatabaseManager.html",
		"link": "Illuminate/Database/DatabaseManager.html#method___call",
		"name": "Illuminate\\Database\\DatabaseManager::__call",
		"doc": "Dynamically pass methods to the default connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/DatabaseServiceProvider.html",
		"name": "Illuminate\\Database\\DatabaseServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseServiceProvider",
		"fromLink": "Illuminate/Database/DatabaseServiceProvider.html",
		"link": "Illuminate/Database/DatabaseServiceProvider.html#method_boot",
		"name": "Illuminate\\Database\\DatabaseServiceProvider::boot",
		"doc": "Bootstrap the application events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseServiceProvider",
		"fromLink": "Illuminate/Database/DatabaseServiceProvider.html",
		"link": "Illuminate/Database/DatabaseServiceProvider.html#method_register",
		"name": "Illuminate\\Database\\DatabaseServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseServiceProvider",
		"fromLink": "Illuminate/Database/DatabaseServiceProvider.html",
		"link": "Illuminate/Database/DatabaseServiceProvider.html#method_registerConnectionServices",
		"name": "Illuminate\\Database\\DatabaseServiceProvider::registerConnectionServices",
		"doc": "Register the primary database bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseServiceProvider",
		"fromLink": "Illuminate/Database/DatabaseServiceProvider.html",
		"link": "Illuminate/Database/DatabaseServiceProvider.html#method_registerEloquentFactory",
		"name": "Illuminate\\Database\\DatabaseServiceProvider::registerEloquentFactory",
		"doc": "Register the Eloquent factory instance in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseServiceProvider",
		"fromLink": "Illuminate/Database/DatabaseServiceProvider.html",
		"link": "Illuminate/Database/DatabaseServiceProvider.html#method_registerQueueableEntityResolver",
		"name": "Illuminate\\Database\\DatabaseServiceProvider::registerQueueableEntityResolver",
		"doc": "Register the queueable entity resolver implementation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/DatabaseTransactionRecord.html",
		"name": "Illuminate\\Database\\DatabaseTransactionRecord",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionRecord",
		"fromLink": "Illuminate/Database/DatabaseTransactionRecord.html",
		"link": "Illuminate/Database/DatabaseTransactionRecord.html#method___construct",
		"name": "Illuminate\\Database\\DatabaseTransactionRecord::__construct",
		"doc": "Create a new database transaction record instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionRecord",
		"fromLink": "Illuminate/Database/DatabaseTransactionRecord.html",
		"link": "Illuminate/Database/DatabaseTransactionRecord.html#method_addCallback",
		"name": "Illuminate\\Database\\DatabaseTransactionRecord::addCallback",
		"doc": "Register a callback to be executed after committing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionRecord",
		"fromLink": "Illuminate/Database/DatabaseTransactionRecord.html",
		"link": "Illuminate/Database/DatabaseTransactionRecord.html#method_executeCallbacks",
		"name": "Illuminate\\Database\\DatabaseTransactionRecord::executeCallbacks",
		"doc": "Execute all of the callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionRecord",
		"fromLink": "Illuminate/Database/DatabaseTransactionRecord.html",
		"link": "Illuminate/Database/DatabaseTransactionRecord.html#method_getCallbacks",
		"name": "Illuminate\\Database\\DatabaseTransactionRecord::getCallbacks",
		"doc": "Get all of the callbacks."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/DatabaseTransactionsManager.html",
		"name": "Illuminate\\Database\\DatabaseTransactionsManager",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionsManager",
		"fromLink": "Illuminate/Database/DatabaseTransactionsManager.html",
		"link": "Illuminate/Database/DatabaseTransactionsManager.html#method___construct",
		"name": "Illuminate\\Database\\DatabaseTransactionsManager::__construct",
		"doc": "Create a new database transactions manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionsManager",
		"fromLink": "Illuminate/Database/DatabaseTransactionsManager.html",
		"link": "Illuminate/Database/DatabaseTransactionsManager.html#method_begin",
		"name": "Illuminate\\Database\\DatabaseTransactionsManager::begin",
		"doc": "Start a new database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionsManager",
		"fromLink": "Illuminate/Database/DatabaseTransactionsManager.html",
		"link": "Illuminate/Database/DatabaseTransactionsManager.html#method_rollback",
		"name": "Illuminate\\Database\\DatabaseTransactionsManager::rollback",
		"doc": "Rollback the active database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionsManager",
		"fromLink": "Illuminate/Database/DatabaseTransactionsManager.html",
		"link": "Illuminate/Database/DatabaseTransactionsManager.html#method_commit",
		"name": "Illuminate\\Database\\DatabaseTransactionsManager::commit",
		"doc": "Commit the active database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionsManager",
		"fromLink": "Illuminate/Database/DatabaseTransactionsManager.html",
		"link": "Illuminate/Database/DatabaseTransactionsManager.html#method_addCallback",
		"name": "Illuminate\\Database\\DatabaseTransactionsManager::addCallback",
		"doc": "Register a transaction callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DatabaseTransactionsManager",
		"fromLink": "Illuminate/Database/DatabaseTransactionsManager.html",
		"link": "Illuminate/Database/DatabaseTransactionsManager.html#method_getTransactions",
		"name": "Illuminate\\Database\\DatabaseTransactionsManager::getTransactions",
		"doc": "Get all the transactions."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/DetectsConcurrencyErrors.html",
		"name": "Illuminate\\Database\\DetectsConcurrencyErrors",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DetectsConcurrencyErrors",
		"fromLink": "Illuminate/Database/DetectsConcurrencyErrors.html",
		"link": "Illuminate/Database/DetectsConcurrencyErrors.html#method_causedByConcurrencyError",
		"name": "Illuminate\\Database\\DetectsConcurrencyErrors::causedByConcurrencyError",
		"doc": "Determine if the given exception was caused by a concurrency error such as a deadlock or serialization failure."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/DetectsLostConnections.html",
		"name": "Illuminate\\Database\\DetectsLostConnections",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\DetectsLostConnections",
		"fromLink": "Illuminate/Database/DetectsLostConnections.html",
		"link": "Illuminate/Database/DetectsLostConnections.html#method_causedByLostConnection",
		"name": "Illuminate\\Database\\DetectsLostConnections::causedByLostConnection",
		"doc": "Determine if the given exception was caused by a lost connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/Builder.html",
		"name": "Illuminate\\Database\\Eloquent\\Builder",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Builder::__construct",
		"doc": "Create a new Eloquent query builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_make",
		"name": "Illuminate\\Database\\Eloquent\\Builder::make",
		"doc": "Create and return an un-saved model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_withGlobalScope",
		"name": "Illuminate\\Database\\Eloquent\\Builder::withGlobalScope",
		"doc": "Register a new global scope."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_withoutGlobalScope",
		"name": "Illuminate\\Database\\Eloquent\\Builder::withoutGlobalScope",
		"doc": "Remove a registered global scope."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_withoutGlobalScopes",
		"name": "Illuminate\\Database\\Eloquent\\Builder::withoutGlobalScopes",
		"doc": "Remove all or passed registered global scopes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_removedScopes",
		"name": "Illuminate\\Database\\Eloquent\\Builder::removedScopes",
		"doc": "Get an array of global scopes that were removed from the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_whereKey",
		"name": "Illuminate\\Database\\Eloquent\\Builder::whereKey",
		"doc": "Add a where clause on the primary key to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_whereKeyNot",
		"name": "Illuminate\\Database\\Eloquent\\Builder::whereKeyNot",
		"doc": "Add a where clause on the primary key to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_where",
		"name": "Illuminate\\Database\\Eloquent\\Builder::where",
		"doc": "Add a basic where clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_firstWhere",
		"name": "Illuminate\\Database\\Eloquent\\Builder::firstWhere",
		"doc": "Add a basic where clause to the query, and return the first result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_orWhere",
		"name": "Illuminate\\Database\\Eloquent\\Builder::orWhere",
		"doc": "Add an \"or where\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_latest",
		"name": "Illuminate\\Database\\Eloquent\\Builder::latest",
		"doc": "Add an \"order by\" clause for a timestamp to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_oldest",
		"name": "Illuminate\\Database\\Eloquent\\Builder::oldest",
		"doc": "Add an \"order by\" clause for a timestamp to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_hydrate",
		"name": "Illuminate\\Database\\Eloquent\\Builder::hydrate",
		"doc": "Create a collection of models from plain arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_fromQuery",
		"name": "Illuminate\\Database\\Eloquent\\Builder::fromQuery",
		"doc": "Create a collection of models from a raw query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_find",
		"name": "Illuminate\\Database\\Eloquent\\Builder::find",
		"doc": "Find a model by its primary key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_findMany",
		"name": "Illuminate\\Database\\Eloquent\\Builder::findMany",
		"doc": "Find multiple models by their primary keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_findOrFail",
		"name": "Illuminate\\Database\\Eloquent\\Builder::findOrFail",
		"doc": "Find a model by its primary key or throw an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_findOrNew",
		"name": "Illuminate\\Database\\Eloquent\\Builder::findOrNew",
		"doc": "Find a model by its primary key or return fresh model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_firstOrNew",
		"name": "Illuminate\\Database\\Eloquent\\Builder::firstOrNew",
		"doc": "Get the first record matching the attributes or instantiate it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_firstOrCreate",
		"name": "Illuminate\\Database\\Eloquent\\Builder::firstOrCreate",
		"doc": "Get the first record matching the attributes or create it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_updateOrCreate",
		"name": "Illuminate\\Database\\Eloquent\\Builder::updateOrCreate",
		"doc": "Create or update a record matching the attributes, and fill it with values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_firstOrFail",
		"name": "Illuminate\\Database\\Eloquent\\Builder::firstOrFail",
		"doc": "Execute the query and get the first result or throw an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_firstOr",
		"name": "Illuminate\\Database\\Eloquent\\Builder::firstOr",
		"doc": "Execute the query and get the first result or call a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_value",
		"name": "Illuminate\\Database\\Eloquent\\Builder::value",
		"doc": "Get a single column's value from the first result of a query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_get",
		"name": "Illuminate\\Database\\Eloquent\\Builder::get",
		"doc": "Execute the query as a \"select\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_getModels",
		"name": "Illuminate\\Database\\Eloquent\\Builder::getModels",
		"doc": "Get the hydrated models without eager loading."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_eagerLoadRelations",
		"name": "Illuminate\\Database\\Eloquent\\Builder::eagerLoadRelations",
		"doc": "Eager load the relationships for the models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_eagerLoadRelation",
		"name": "Illuminate\\Database\\Eloquent\\Builder::eagerLoadRelation",
		"doc": "Eagerly load the relationship on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_getRelation",
		"name": "Illuminate\\Database\\Eloquent\\Builder::getRelation",
		"doc": "Get the relation instance for the given relation name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_relationsNestedUnder",
		"name": "Illuminate\\Database\\Eloquent\\Builder::relationsNestedUnder",
		"doc": "Get the deeply nested relations for a given top-level relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_isNestedUnder",
		"name": "Illuminate\\Database\\Eloquent\\Builder::isNestedUnder",
		"doc": "Determine if the relationship is nested."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_cursor",
		"name": "Illuminate\\Database\\Eloquent\\Builder::cursor",
		"doc": "Get a lazy collection for the given query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_enforceOrderBy",
		"name": "Illuminate\\Database\\Eloquent\\Builder::enforceOrderBy",
		"doc": "Add a generic \"order by\" clause if the query doesn't already have one."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_pluck",
		"name": "Illuminate\\Database\\Eloquent\\Builder::pluck",
		"doc": "Get an array with the values of a given column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_paginate",
		"name": "Illuminate\\Database\\Eloquent\\Builder::paginate",
		"doc": "Paginate the given query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_simplePaginate",
		"name": "Illuminate\\Database\\Eloquent\\Builder::simplePaginate",
		"doc": "Paginate the given query into a simple paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_create",
		"name": "Illuminate\\Database\\Eloquent\\Builder::create",
		"doc": "Save a new model and return the instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_forceCreate",
		"name": "Illuminate\\Database\\Eloquent\\Builder::forceCreate",
		"doc": "Save a new model and return the instance. Allow mass-assignment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_update",
		"name": "Illuminate\\Database\\Eloquent\\Builder::update",
		"doc": "Update records in the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_upsert",
		"name": "Illuminate\\Database\\Eloquent\\Builder::upsert",
		"doc": "Insert new records or update the existing ones."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_increment",
		"name": "Illuminate\\Database\\Eloquent\\Builder::increment",
		"doc": "Increment a column's value by a given amount."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_decrement",
		"name": "Illuminate\\Database\\Eloquent\\Builder::decrement",
		"doc": "Decrement a column's value by a given amount."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_addUpdatedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\Builder::addUpdatedAtColumn",
		"doc": "Add the \"updated at\" column to an array of values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_addTimestampsToUpsertValues",
		"name": "Illuminate\\Database\\Eloquent\\Builder::addTimestampsToUpsertValues",
		"doc": "Add timestamps to the inserted values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_addUpdatedAtToUpsertColumns",
		"name": "Illuminate\\Database\\Eloquent\\Builder::addUpdatedAtToUpsertColumns",
		"doc": "Add the \"updated at\" column to the updated columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_delete",
		"name": "Illuminate\\Database\\Eloquent\\Builder::delete",
		"doc": "Delete records from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_forceDelete",
		"name": "Illuminate\\Database\\Eloquent\\Builder::forceDelete",
		"doc": "Run the default delete function on the builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_onDelete",
		"name": "Illuminate\\Database\\Eloquent\\Builder::onDelete",
		"doc": "Register a replacement for the default delete function."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_hasNamedScope",
		"name": "Illuminate\\Database\\Eloquent\\Builder::hasNamedScope",
		"doc": "Determine if the given model has a scope."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_scopes",
		"name": "Illuminate\\Database\\Eloquent\\Builder::scopes",
		"doc": "Call the given local model scopes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_applyScopes",
		"name": "Illuminate\\Database\\Eloquent\\Builder::applyScopes",
		"doc": "Apply the scopes to the Eloquent builder instance and return it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_callScope",
		"name": "Illuminate\\Database\\Eloquent\\Builder::callScope",
		"doc": "Apply the given scope on the current builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_callNamedScope",
		"name": "Illuminate\\Database\\Eloquent\\Builder::callNamedScope",
		"doc": "Apply the given named scope on the current builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_addNewWheresWithinGroup",
		"name": "Illuminate\\Database\\Eloquent\\Builder::addNewWheresWithinGroup",
		"doc": "Nest where conditions by slicing them at the given where count."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_groupWhereSliceForScope",
		"name": "Illuminate\\Database\\Eloquent\\Builder::groupWhereSliceForScope",
		"doc": "Slice where conditions at the given offset and add them to the query as a nested condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_createNestedWhere",
		"name": "Illuminate\\Database\\Eloquent\\Builder::createNestedWhere",
		"doc": "Create a where array with nested where conditions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_with",
		"name": "Illuminate\\Database\\Eloquent\\Builder::with",
		"doc": "Set the relationships that should be eager loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_without",
		"name": "Illuminate\\Database\\Eloquent\\Builder::without",
		"doc": "Prevent the specified relations from being eager loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_newModelInstance",
		"name": "Illuminate\\Database\\Eloquent\\Builder::newModelInstance",
		"doc": "Create a new instance of the model being queried."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_parseWithRelations",
		"name": "Illuminate\\Database\\Eloquent\\Builder::parseWithRelations",
		"doc": "Parse a list of relations into individuals."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_createSelectWithConstraint",
		"name": "Illuminate\\Database\\Eloquent\\Builder::createSelectWithConstraint",
		"doc": "Create a constraint to select the given columns for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_addNestedWiths",
		"name": "Illuminate\\Database\\Eloquent\\Builder::addNestedWiths",
		"doc": "Parse the nested relationships in a relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_withCasts",
		"name": "Illuminate\\Database\\Eloquent\\Builder::withCasts",
		"doc": "Apply query-time casts to the model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_getQuery",
		"name": "Illuminate\\Database\\Eloquent\\Builder::getQuery",
		"doc": "Get the underlying query builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_setQuery",
		"name": "Illuminate\\Database\\Eloquent\\Builder::setQuery",
		"doc": "Set the underlying query builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_toBase",
		"name": "Illuminate\\Database\\Eloquent\\Builder::toBase",
		"doc": "Get a base query builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_getEagerLoads",
		"name": "Illuminate\\Database\\Eloquent\\Builder::getEagerLoads",
		"doc": "Get the relationships being eagerly loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_setEagerLoads",
		"name": "Illuminate\\Database\\Eloquent\\Builder::setEagerLoads",
		"doc": "Set the relationships being eagerly loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_defaultKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Builder::defaultKeyName",
		"doc": "Get the default key name of the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_getModel",
		"name": "Illuminate\\Database\\Eloquent\\Builder::getModel",
		"doc": "Get the model instance being queried."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_setModel",
		"name": "Illuminate\\Database\\Eloquent\\Builder::setModel",
		"doc": "Set a model instance for the model being queried."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_qualifyColumn",
		"name": "Illuminate\\Database\\Eloquent\\Builder::qualifyColumn",
		"doc": "Qualify the given column name by the model's table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_getMacro",
		"name": "Illuminate\\Database\\Eloquent\\Builder::getMacro",
		"doc": "Get the given macro by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_hasMacro",
		"name": "Illuminate\\Database\\Eloquent\\Builder::hasMacro",
		"doc": "Checks if a macro is registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_getGlobalMacro",
		"name": "Illuminate\\Database\\Eloquent\\Builder::getGlobalMacro",
		"doc": "Get the given global macro by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_hasGlobalMacro",
		"name": "Illuminate\\Database\\Eloquent\\Builder::hasGlobalMacro",
		"doc": "Checks if a global macro is registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method___get",
		"name": "Illuminate\\Database\\Eloquent\\Builder::__get",
		"doc": "Dynamically access builder proxies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method___call",
		"name": "Illuminate\\Database\\Eloquent\\Builder::__call",
		"doc": "Dynamically handle calls into the query instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method___callStatic",
		"name": "Illuminate\\Database\\Eloquent\\Builder::__callStatic",
		"doc": "Dynamically handle calls into the query instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method_registerMixin",
		"name": "Illuminate\\Database\\Eloquent\\Builder::registerMixin",
		"doc": "Register the given mixin with the builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Builder",
		"fromLink": "Illuminate/Database/Eloquent/Builder.html",
		"link": "Illuminate/Database/Eloquent/Builder.html#method___clone",
		"name": "Illuminate\\Database\\Eloquent\\Builder::__clone",
		"doc": "Force a clone of the underlying query builder when cloning."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/Collection.html",
		"name": "Illuminate\\Database\\Eloquent\\Collection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_find",
		"name": "Illuminate\\Database\\Eloquent\\Collection::find",
		"doc": "Find a model in the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_load",
		"name": "Illuminate\\Database\\Eloquent\\Collection::load",
		"doc": "Load a set of relationships onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadAggregate",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadAggregate",
		"doc": "Load a set of aggregations over relationship's column onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadCount",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadCount",
		"doc": "Load a set of relationship counts onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadMax",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadMax",
		"doc": "Load a set of relationship's max column values onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadMin",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadMin",
		"doc": "Load a set of relationship's min column values onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadSum",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadSum",
		"doc": "Load a set of relationship's column summations onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadAvg",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadAvg",
		"doc": "Load a set of relationship's average column values onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadMissing",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadMissing",
		"doc": "Load a set of relationships onto the collection if they are not already eager loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadMissingRelation",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadMissingRelation",
		"doc": "Load a relationship path if it is not already eager loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadMorph",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadMorph",
		"doc": "Load a set of relationships onto the mixed relationship collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_loadMorphCount",
		"name": "Illuminate\\Database\\Eloquent\\Collection::loadMorphCount",
		"doc": "Load a set of relationship counts onto the mixed relationship collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_contains",
		"name": "Illuminate\\Database\\Eloquent\\Collection::contains",
		"doc": "Determine if a key exists in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_modelKeys",
		"name": "Illuminate\\Database\\Eloquent\\Collection::modelKeys",
		"doc": "Get the array of primary keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_merge",
		"name": "Illuminate\\Database\\Eloquent\\Collection::merge",
		"doc": "Merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_map",
		"name": "Illuminate\\Database\\Eloquent\\Collection::map",
		"doc": "Run a map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_mapWithKeys",
		"name": "Illuminate\\Database\\Eloquent\\Collection::mapWithKeys",
		"doc": "Run an associative map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_fresh",
		"name": "Illuminate\\Database\\Eloquent\\Collection::fresh",
		"doc": "Reload a fresh model instance from the database for all the entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_diff",
		"name": "Illuminate\\Database\\Eloquent\\Collection::diff",
		"doc": "Diff the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_intersect",
		"name": "Illuminate\\Database\\Eloquent\\Collection::intersect",
		"doc": "Intersect the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_unique",
		"name": "Illuminate\\Database\\Eloquent\\Collection::unique",
		"doc": "Return only unique items from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_only",
		"name": "Illuminate\\Database\\Eloquent\\Collection::only",
		"doc": "Returns only the models from the collection with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_except",
		"name": "Illuminate\\Database\\Eloquent\\Collection::except",
		"doc": "Returns all models in the collection except the models with specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_makeHidden",
		"name": "Illuminate\\Database\\Eloquent\\Collection::makeHidden",
		"doc": "Make the given, typically visible, attributes hidden across the entire collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_makeVisible",
		"name": "Illuminate\\Database\\Eloquent\\Collection::makeVisible",
		"doc": "Make the given, typically hidden, attributes visible across the entire collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_append",
		"name": "Illuminate\\Database\\Eloquent\\Collection::append",
		"doc": "Append an attribute across the entire collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_getDictionary",
		"name": "Illuminate\\Database\\Eloquent\\Collection::getDictionary",
		"doc": "Get a dictionary keyed by primary keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_pluck",
		"name": "Illuminate\\Database\\Eloquent\\Collection::pluck",
		"doc": "Get an array with the values of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_keys",
		"name": "Illuminate\\Database\\Eloquent\\Collection::keys",
		"doc": "Get the keys of the collection items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_zip",
		"name": "Illuminate\\Database\\Eloquent\\Collection::zip",
		"doc": "Zip the collection together with one or more arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_collapse",
		"name": "Illuminate\\Database\\Eloquent\\Collection::collapse",
		"doc": "Collapse the collection of items into a single array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_flatten",
		"name": "Illuminate\\Database\\Eloquent\\Collection::flatten",
		"doc": "Get a flattened array of the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_flip",
		"name": "Illuminate\\Database\\Eloquent\\Collection::flip",
		"doc": "Flip the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_pad",
		"name": "Illuminate\\Database\\Eloquent\\Collection::pad",
		"doc": "Pad collection to the specified length with a value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_duplicateComparator",
		"name": "Illuminate\\Database\\Eloquent\\Collection::duplicateComparator",
		"doc": "Get the comparison function to detect duplicates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_getQueueableClass",
		"name": "Illuminate\\Database\\Eloquent\\Collection::getQueueableClass",
		"doc": "Get the type of the entities being queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_getQueueableIds",
		"name": "Illuminate\\Database\\Eloquent\\Collection::getQueueableIds",
		"doc": "Get the identifiers for all of the entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_getQueueableRelations",
		"name": "Illuminate\\Database\\Eloquent\\Collection::getQueueableRelations",
		"doc": "Get the relationships of the entities being queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_getQueueableConnection",
		"name": "Illuminate\\Database\\Eloquent\\Collection::getQueueableConnection",
		"doc": "Get the connection of the entities being queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Collection",
		"fromLink": "Illuminate/Database/Eloquent/Collection.html",
		"link": "Illuminate/Database/Eloquent/Collection.html#method_toQuery",
		"name": "Illuminate\\Database\\Eloquent\\Collection::toQuery",
		"doc": "Get the Eloquent query builder from the collection."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_getFillable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::getFillable",
		"doc": "Get the fillable attributes for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_fillable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::fillable",
		"doc": "Set the fillable attributes for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_mergeFillable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::mergeFillable",
		"doc": "Merge new fillable attributes with existing fillable attributes on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_getGuarded",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::getGuarded",
		"doc": "Get the guarded attributes for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_guard",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::guard",
		"doc": "Set the guarded attributes for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_mergeGuarded",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::mergeGuarded",
		"doc": "Merge new guarded attributes with existing guarded attributes on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_unguard",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::unguard",
		"doc": "Disable all mass assignable restrictions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_reguard",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::reguard",
		"doc": "Enable the mass assignment restrictions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_isUnguarded",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::isUnguarded",
		"doc": "Determine if current state is \"unguarded\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_unguarded",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::unguarded",
		"doc": "Run the given callable while being unguarded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_isFillable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::isFillable",
		"doc": "Determine if the given attribute may be mass assigned."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_isGuarded",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::isGuarded",
		"doc": "Determine if the given key is guarded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_isGuardableColumn",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::isGuardableColumn",
		"doc": "Determine if the given column is a valid, guardable column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_totallyGuarded",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::totallyGuarded",
		"doc": "Determine if the model is totally guarded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/GuardsAttributes.html#method_fillableFromArray",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\GuardsAttributes::fillableFromArray",
		"doc": "Get the fillable attributes of a given array."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_attributesToArray",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::attributesToArray",
		"doc": "Convert the model's attributes to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_addDateAttributesToArray",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::addDateAttributesToArray",
		"doc": "Add the date attributes to the attributes array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_addMutatedAttributesToArray",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::addMutatedAttributesToArray",
		"doc": "Add the mutated attributes to the attributes array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_addCastAttributesToArray",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::addCastAttributesToArray",
		"doc": "Add the casted attributes to the attributes array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getArrayableAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getArrayableAttributes",
		"doc": "Get an attribute array of all arrayable attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getArrayableAppends",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getArrayableAppends",
		"doc": "Get all of the appendable values that are arrayable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_relationsToArray",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::relationsToArray",
		"doc": "Get the model's relationships in array form."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getArrayableRelations",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getArrayableRelations",
		"doc": "Get an attribute array of all arrayable relations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getArrayableItems",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getArrayableItems",
		"doc": "Get an attribute array of all arrayable values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getAttribute",
		"doc": "Get an attribute from the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getAttributeValue",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getAttributeValue",
		"doc": "Get a plain attribute (not a relationship)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getAttributeFromArray",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getAttributeFromArray",
		"doc": "Get an attribute from the $attributes array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getRelationValue",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getRelationValue",
		"doc": "Get a relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getRelationshipFromMethod",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getRelationshipFromMethod",
		"doc": "Get a relationship value from a method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_hasGetMutator",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::hasGetMutator",
		"doc": "Determine if a get mutator exists for an attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_mutateAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::mutateAttribute",
		"doc": "Get the value of an attribute using its mutator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_mutateAttributeForArray",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::mutateAttributeForArray",
		"doc": "Get the value of an attribute using its mutator for array conversion."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_mergeCasts",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::mergeCasts",
		"doc": "Merge new casts with existing casts on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_castAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::castAttribute",
		"doc": "Cast an attribute to a native PHP type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getClassCastableAttributeValue",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getClassCastableAttributeValue",
		"doc": "Cast the given attribute using a custom cast class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getCastType",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getCastType",
		"doc": "Get the type of cast for a model attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_deviateClassCastableAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::deviateClassCastableAttribute",
		"doc": "Increment or decrement the given attribute using the custom cast class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_serializeClassCastableAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::serializeClassCastableAttribute",
		"doc": "Serialize the given attribute using the custom cast class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isCustomDateTimeCast",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isCustomDateTimeCast",
		"doc": "Determine if the cast type is a custom date time cast."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isDecimalCast",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isDecimalCast",
		"doc": "Determine if the cast type is a decimal cast."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_setAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::setAttribute",
		"doc": "Set a given attribute on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_hasSetMutator",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::hasSetMutator",
		"doc": "Determine if a set mutator exists for an attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_setMutatedAttributeValue",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::setMutatedAttributeValue",
		"doc": "Set the value of an attribute using its mutator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isDateAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isDateAttribute",
		"doc": "Determine if the given attribute is a date or date castable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_fillJsonAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::fillJsonAttribute",
		"doc": "Set a given JSON attribute on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_setClassCastableAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::setClassCastableAttribute",
		"doc": "Set the value of a class castable attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getArrayAttributeWithValue",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getArrayAttributeWithValue",
		"doc": "Get an array attribute with the given key and value set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getArrayAttributeByKey",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getArrayAttributeByKey",
		"doc": "Get an array attribute or return an empty array if it is not set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_castAttributeAsJson",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::castAttributeAsJson",
		"doc": "Cast the given attribute to JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_asJson",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::asJson",
		"doc": "Encode the given value as JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_fromJson",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::fromJson",
		"doc": "Decode the given JSON back into an array or object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_fromEncryptedString",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::fromEncryptedString",
		"doc": "Decrypt the given encrypted string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_castAttributeAsEncryptedString",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::castAttributeAsEncryptedString",
		"doc": "Cast the given attribute to an encrypted string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_encryptUsing",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::encryptUsing",
		"doc": "Set the encrypter instance that will be used to encrypt attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_fromFloat",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::fromFloat",
		"doc": "Decode the given float."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_asDecimal",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::asDecimal",
		"doc": "Return a decimal as string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_asDate",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::asDate",
		"doc": "Return a timestamp as DateTime object with time set to 00:00:00."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_asDateTime",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::asDateTime",
		"doc": "Return a timestamp as DateTime object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isStandardDateFormat",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isStandardDateFormat",
		"doc": "Determine if the given value is a standard date format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_fromDateTime",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::fromDateTime",
		"doc": "Convert a DateTime to a storable string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_asTimestamp",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::asTimestamp",
		"doc": "Return a timestamp as unix timestamp."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_serializeDate",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::serializeDate",
		"doc": "Prepare a date for array / JSON serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getDates",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getDates",
		"doc": "Get the attributes that should be converted to dates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getDateFormat",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getDateFormat",
		"doc": "Get the format for database stored dates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_setDateFormat",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::setDateFormat",
		"doc": "Set the date format used by the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_hasCast",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::hasCast",
		"doc": "Determine whether an attribute should be cast to a native type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getCasts",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getCasts",
		"doc": "Get the casts array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isDateCastable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isDateCastable",
		"doc": "Determine whether a value is Date / DateTime castable for inbound manipulation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isJsonCastable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isJsonCastable",
		"doc": "Determine whether a value is JSON castable for inbound manipulation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isEncryptedCastable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isEncryptedCastable",
		"doc": "Determine whether a value is an encrypted castable for inbound manipulation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isClassCastable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isClassCastable",
		"doc": "Determine if the given key is cast using a custom class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isClassDeviable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isClassDeviable",
		"doc": "Determine if the key is deviable using a custom class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isClassSerializable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isClassSerializable",
		"doc": "Determine if the key is serializable using a custom class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_resolveCasterClass",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::resolveCasterClass",
		"doc": "Resolve the custom caster class for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_parseCasterClass",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::parseCasterClass",
		"doc": "Parse the given caster class, removing any arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_mergeAttributesFromClassCasts",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::mergeAttributesFromClassCasts",
		"doc": "Merge the cast class attributes back into the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_normalizeCastClassResponse",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::normalizeCastClassResponse",
		"doc": "Normalize the response from a custom class caster."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getAttributes",
		"doc": "Get all of the current attributes on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_setRawAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::setRawAttributes",
		"doc": "Set the array of model attributes. No checking is done."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getOriginal",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getOriginal",
		"doc": "Get the model's original attribute values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getOriginalWithoutRewindingModel",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getOriginalWithoutRewindingModel",
		"doc": "Get the model's original attribute values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getRawOriginal",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getRawOriginal",
		"doc": "Get the model's raw original attribute values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_only",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::only",
		"doc": "Get a subset of the model's attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_syncOriginal",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::syncOriginal",
		"doc": "Sync the original attributes with the current."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_syncOriginalAttribute",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::syncOriginalAttribute",
		"doc": "Sync a single original attribute with its current value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_syncOriginalAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::syncOriginalAttributes",
		"doc": "Sync multiple original attribute with their current values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_syncChanges",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::syncChanges",
		"doc": "Sync the changed attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isDirty",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isDirty",
		"doc": "Determine if the model or any of the given attribute(s) have been modified."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_isClean",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::isClean",
		"doc": "Determine if the model and all the given attribute(s) have remained the same."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_wasChanged",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::wasChanged",
		"doc": "Determine if the model or any of the given attribute(s) have been modified."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_hasChanges",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::hasChanges",
		"doc": "Determine if any of the given attributes were changed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getDirty",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getDirty",
		"doc": "Get the attributes that have been changed since last sync."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getChanges",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getChanges",
		"doc": "Get the attributes that were changed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_originalIsEquivalent",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::originalIsEquivalent",
		"doc": "Determine if the new and old values for a given key are equivalent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_transformModelValue",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::transformModelValue",
		"doc": "Transform a raw model value using mutators, casts, etc."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_append",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::append",
		"doc": "Append attributes to query when building a query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_setAppends",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::setAppends",
		"doc": "Set the accessors to append to model arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_hasAppended",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::hasAppended",
		"doc": "Return whether the accessor attribute has been appended."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getMutatedAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getMutatedAttributes",
		"doc": "Get the mutated attributes for a given instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_cacheMutatedAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::cacheMutatedAttributes",
		"doc": "Extract and cache all the mutated attributes of a class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasAttributes.html#method_getMutatorMethods",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasAttributes::getMutatorMethods",
		"doc": "Get all of the attribute mutator methods."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_observe",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::observe",
		"doc": "Register observers with the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_registerObserver",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::registerObserver",
		"doc": "Register a single observer with the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_getObservableEvents",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::getObservableEvents",
		"doc": "Get the observable event names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_setObservableEvents",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::setObservableEvents",
		"doc": "Set the observable event names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_addObservableEvents",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::addObservableEvents",
		"doc": "Add an observable event name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_removeObservableEvents",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::removeObservableEvents",
		"doc": "Remove an observable event name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_registerModelEvent",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::registerModelEvent",
		"doc": "Register a model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_fireModelEvent",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::fireModelEvent",
		"doc": "Fire the given event for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_fireCustomModelEvent",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::fireCustomModelEvent",
		"doc": "Fire a custom model event for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_filterModelEventResults",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::filterModelEventResults",
		"doc": "Filter the model event results."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_retrieved",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::retrieved",
		"doc": "Register a retrieved model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_saving",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::saving",
		"doc": "Register a saving model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_saved",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::saved",
		"doc": "Register a saved model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_updating",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::updating",
		"doc": "Register an updating model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_updated",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::updated",
		"doc": "Register an updated model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_creating",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::creating",
		"doc": "Register a creating model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_created",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::created",
		"doc": "Register a created model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_replicating",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::replicating",
		"doc": "Register a replicating model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_deleting",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::deleting",
		"doc": "Register a deleting model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_deleted",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::deleted",
		"doc": "Register a deleted model event with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_flushEventListeners",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::flushEventListeners",
		"doc": "Remove all of the event listeners for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_getEventDispatcher",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::getEventDispatcher",
		"doc": "Get the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_setEventDispatcher",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::setEventDispatcher",
		"doc": "Set the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_unsetEventDispatcher",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::unsetEventDispatcher",
		"doc": "Unset the event dispatcher for models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasEvents.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasEvents.html#method_withoutEvents",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasEvents::withoutEvents",
		"doc": "Execute a callback without firing any model events for any model type."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html#method_addGlobalScope",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes::addGlobalScope",
		"doc": "Register a new global scope on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html#method_hasGlobalScope",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes::hasGlobalScope",
		"doc": "Determine if a model has a global scope."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html#method_getGlobalScope",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes::getGlobalScope",
		"doc": "Get a global scope registered with the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasGlobalScopes.html#method_getGlobalScopes",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasGlobalScopes::getGlobalScopes",
		"doc": "Get the global scopes for this class instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_resolveRelationUsing",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::resolveRelationUsing",
		"doc": "Define a dynamic relation resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_hasOne",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::hasOne",
		"doc": "Define a one-to-one relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newHasOne",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newHasOne",
		"doc": "Instantiate a new HasOne relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_hasOneThrough",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::hasOneThrough",
		"doc": "Define a has-one-through relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newHasOneThrough",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newHasOneThrough",
		"doc": "Instantiate a new HasOneThrough relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_morphOne",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::morphOne",
		"doc": "Define a polymorphic one-to-one relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newMorphOne",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newMorphOne",
		"doc": "Instantiate a new MorphOne relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_belongsTo",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::belongsTo",
		"doc": "Define an inverse one-to-one or many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newBelongsTo",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newBelongsTo",
		"doc": "Instantiate a new BelongsTo relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_morphTo",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::morphTo",
		"doc": "Define a polymorphic, inverse one-to-one or many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_morphEagerTo",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::morphEagerTo",
		"doc": "Define a polymorphic, inverse one-to-one or many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_morphInstanceTo",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::morphInstanceTo",
		"doc": "Define a polymorphic, inverse one-to-one or many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newMorphTo",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newMorphTo",
		"doc": "Instantiate a new MorphTo relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_getActualClassNameForMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::getActualClassNameForMorph",
		"doc": "Retrieve the actual class name for a given morph class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_guessBelongsToRelation",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::guessBelongsToRelation",
		"doc": "Guess the \"belongs to\" relationship name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_hasMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::hasMany",
		"doc": "Define a one-to-many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newHasMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newHasMany",
		"doc": "Instantiate a new HasMany relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_hasManyThrough",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::hasManyThrough",
		"doc": "Define a has-many-through relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newHasManyThrough",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newHasManyThrough",
		"doc": "Instantiate a new HasManyThrough relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_morphMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::morphMany",
		"doc": "Define a polymorphic one-to-many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newMorphMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newMorphMany",
		"doc": "Instantiate a new MorphMany relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_belongsToMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::belongsToMany",
		"doc": "Define a many-to-many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newBelongsToMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newBelongsToMany",
		"doc": "Instantiate a new BelongsToMany relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_morphToMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::morphToMany",
		"doc": "Define a polymorphic many-to-many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newMorphToMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newMorphToMany",
		"doc": "Instantiate a new MorphToMany relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_morphedByMany",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::morphedByMany",
		"doc": "Define a polymorphic, inverse many-to-many relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_guessBelongsToManyRelation",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::guessBelongsToManyRelation",
		"doc": "Get the relationship name of the belongsToMany relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_joiningTable",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::joiningTable",
		"doc": "Get the joining table name for a many-to-many relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_joiningTableSegment",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::joiningTableSegment",
		"doc": "Get this model's half of the intermediate table name for belongsToMany relationships."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_touches",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::touches",
		"doc": "Determine if the model touches a given relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_touchOwners",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::touchOwners",
		"doc": "Touch the owning relations of the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_getMorphs",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::getMorphs",
		"doc": "Get the polymorphic relationship columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_getMorphClass",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::getMorphClass",
		"doc": "Get the class name for polymorphic relations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_newRelatedInstance",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::newRelatedInstance",
		"doc": "Create a new model instance for a related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_getRelations",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::getRelations",
		"doc": "Get all the loaded relations for the instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_getRelation",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::getRelation",
		"doc": "Get a specified relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_relationLoaded",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::relationLoaded",
		"doc": "Determine if the given relation is loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_setRelation",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::setRelation",
		"doc": "Set the given relationship on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_unsetRelation",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::unsetRelation",
		"doc": "Unset a loaded relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_setRelations",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::setRelations",
		"doc": "Set the entire relations array on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_withoutRelations",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::withoutRelations",
		"doc": "Duplicate the instance and unset all the loaded relations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_unsetRelations",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::unsetRelations",
		"doc": "Unset all the loaded relations for the instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_getTouchedRelations",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::getTouchedRelations",
		"doc": "Get the relationships that are touched on save."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_setTouchedRelations",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasRelationships::setTouchedRelations",
		"doc": "Set the relationships that are touched on save."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_touch",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::touch",
		"doc": "Update the model's update timestamp."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_updateTimestamps",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::updateTimestamps",
		"doc": "Update the creation and update timestamps."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_setCreatedAt",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::setCreatedAt",
		"doc": "Set the value of the \"created at\" attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_setUpdatedAt",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::setUpdatedAt",
		"doc": "Set the value of the \"updated at\" attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_freshTimestamp",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::freshTimestamp",
		"doc": "Get a fresh timestamp for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_freshTimestampString",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::freshTimestampString",
		"doc": "Get a fresh timestamp for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_usesTimestamps",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::usesTimestamps",
		"doc": "Determine if the model uses timestamps."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_getCreatedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::getCreatedAtColumn",
		"doc": "Get the name of the \"created at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_getUpdatedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::getUpdatedAtColumn",
		"doc": "Get the name of the \"updated at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_getQualifiedCreatedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::getQualifiedCreatedAtColumn",
		"doc": "Get the fully qualified \"created at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HasTimestamps.html#method_getQualifiedUpdatedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HasTimestamps::getQualifiedUpdatedAtColumn",
		"doc": "Get the fully qualified \"updated at\" column."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html#method_getHidden",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes::getHidden",
		"doc": "Get the hidden attributes for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html#method_setHidden",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes::setHidden",
		"doc": "Set the hidden attributes for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html#method_getVisible",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes::getVisible",
		"doc": "Get the visible attributes for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html#method_setVisible",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes::setVisible",
		"doc": "Set the visible attributes for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html#method_makeVisible",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes::makeVisible",
		"doc": "Make the given, typically hidden, attributes visible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html#method_makeVisibleIf",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes::makeVisibleIf",
		"doc": "Make the given, typically hidden, attributes visible if the given truth test passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html#method_makeHidden",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes::makeHidden",
		"doc": "Make the given, typically visible, attributes hidden."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html",
		"link": "Illuminate/Database/Eloquent/Concerns/HidesAttributes.html#method_makeHiddenIf",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\HidesAttributes::makeHiddenIf",
		"doc": "Make the given, typically visible, attributes hidden if the given truth test passes."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_has",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::has",
		"doc": "Add a relationship count / exists condition to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_hasNested",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::hasNested",
		"doc": "Add nested relationship count / exists conditions to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_orHas",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::orHas",
		"doc": "Add a relationship count / exists condition to the query with an \"or\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_doesntHave",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::doesntHave",
		"doc": "Add a relationship count / exists condition to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_orDoesntHave",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::orDoesntHave",
		"doc": "Add a relationship count / exists condition to the query with an \"or\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_whereHas",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::whereHas",
		"doc": "Add a relationship count / exists condition to the query with where clauses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_orWhereHas",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::orWhereHas",
		"doc": "Add a relationship count / exists condition to the query with where clauses and an \"or\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_whereDoesntHave",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::whereDoesntHave",
		"doc": "Add a relationship count / exists condition to the query with where clauses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_orWhereDoesntHave",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::orWhereDoesntHave",
		"doc": "Add a relationship count / exists condition to the query with where clauses and an \"or\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_hasMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::hasMorph",
		"doc": "Add a polymorphic relationship count / exists condition to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_getBelongsToRelation",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::getBelongsToRelation",
		"doc": "Get the BelongsTo relationship for a single polymorphic type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_orHasMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::orHasMorph",
		"doc": "Add a polymorphic relationship count / exists condition to the query with an \"or\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_doesntHaveMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::doesntHaveMorph",
		"doc": "Add a polymorphic relationship count / exists condition to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_orDoesntHaveMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::orDoesntHaveMorph",
		"doc": "Add a polymorphic relationship count / exists condition to the query with an \"or\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_whereHasMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::whereHasMorph",
		"doc": "Add a polymorphic relationship count / exists condition to the query with where clauses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_orWhereHasMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::orWhereHasMorph",
		"doc": "Add a polymorphic relationship count / exists condition to the query with where clauses and an \"or\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_whereDoesntHaveMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::whereDoesntHaveMorph",
		"doc": "Add a polymorphic relationship count / exists condition to the query with where clauses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_orWhereDoesntHaveMorph",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::orWhereDoesntHaveMorph",
		"doc": "Add a polymorphic relationship count / exists condition to the query with where clauses and an \"or\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_withAggregate",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::withAggregate",
		"doc": "Add subselect queries to include an aggregate value for a relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_withCount",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::withCount",
		"doc": "Add subselect queries to count the relations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_withMax",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::withMax",
		"doc": "Add subselect queries to include the max of the relation's column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_withMin",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::withMin",
		"doc": "Add subselect queries to include the min of the relation's column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_withSum",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::withSum",
		"doc": "Add subselect queries to include the sum of the relation's column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_withAvg",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::withAvg",
		"doc": "Add subselect queries to include the average of the relation's column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_addHasWhere",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::addHasWhere",
		"doc": "Add the \"has\" condition where clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_mergeConstraintsFrom",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::mergeConstraintsFrom",
		"doc": "Merge the where constraints from another query to the current query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_addWhereCountQuery",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::addWhereCountQuery",
		"doc": "Add a sub-query count clause to this query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_getRelationWithoutConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::getRelationWithoutConstraints",
		"doc": "Get the \"has relation\" base query instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships",
		"fromLink": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html",
		"link": "Illuminate/Database/Eloquent/Concerns/QueriesRelationships.html#method_canUseExistsForExistenceCheck",
		"name": "Illuminate\\Database\\Eloquent\\Concerns\\QueriesRelationships::canUseExistsForExistenceCheck",
		"doc": "Check if we can run an \"exists\" query to optimize performance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories",
		"fromLink": "Illuminate/Database/Eloquent/Factories.html",
		"link": "Illuminate/Database/Eloquent/Factories/BelongsToManyRelationship.html",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToManyRelationship",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToManyRelationship",
		"fromLink": "Illuminate/Database/Eloquent/Factories/BelongsToManyRelationship.html",
		"link": "Illuminate/Database/Eloquent/Factories/BelongsToManyRelationship.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToManyRelationship::__construct",
		"doc": "Create a new attached relationship definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToManyRelationship",
		"fromLink": "Illuminate/Database/Eloquent/Factories/BelongsToManyRelationship.html",
		"link": "Illuminate/Database/Eloquent/Factories/BelongsToManyRelationship.html#method_createFor",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToManyRelationship::createFor",
		"doc": "Create the attached relationship for the given model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories",
		"fromLink": "Illuminate/Database/Eloquent/Factories.html",
		"link": "Illuminate/Database/Eloquent/Factories/BelongsToRelationship.html",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToRelationship",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToRelationship",
		"fromLink": "Illuminate/Database/Eloquent/Factories/BelongsToRelationship.html",
		"link": "Illuminate/Database/Eloquent/Factories/BelongsToRelationship.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToRelationship::__construct",
		"doc": "Create a new \"belongs to\" relationship definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToRelationship",
		"fromLink": "Illuminate/Database/Eloquent/Factories/BelongsToRelationship.html",
		"link": "Illuminate/Database/Eloquent/Factories/BelongsToRelationship.html#method_attributesFor",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToRelationship::attributesFor",
		"doc": "Get the parent model attributes and resolvers for the given child model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToRelationship",
		"fromLink": "Illuminate/Database/Eloquent/Factories/BelongsToRelationship.html",
		"link": "Illuminate/Database/Eloquent/Factories/BelongsToRelationship.html#method_resolver",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\BelongsToRelationship::resolver",
		"doc": "Get the deferred resolver for this relationship's parent ID."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories",
		"fromLink": "Illuminate/Database/Eloquent/Factories.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::__construct",
		"doc": "Create a new factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_definition",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::definition",
		"doc": "Define the model's default state."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_new",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::new",
		"doc": "Get a new factory instance for the given attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_times",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::times",
		"doc": "Get a new factory instance for the given number of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_configure",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::configure",
		"doc": "Configure the factory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_raw",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::raw",
		"doc": "Get the raw attributes generated by the factory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_createOne",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::createOne",
		"doc": "Create a single model and persist it to the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_createMany",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::createMany",
		"doc": "Create a collection of models and persist them to the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_create",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::create",
		"doc": "Create a collection of models and persist them to the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_lazy",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::lazy",
		"doc": "Create a callback that persists a model in the database when invoked."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_store",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::store",
		"doc": "Set the connection name on the results and store them."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_createChildren",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::createChildren",
		"doc": "Create the children for the given model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_makeOne",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::makeOne",
		"doc": "Make a single instance of the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_make",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::make",
		"doc": "Create a collection of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_makeInstance",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::makeInstance",
		"doc": "Make an instance of the model with the given attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_getExpandedAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::getExpandedAttributes",
		"doc": "Get a raw attributes array for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_getRawAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::getRawAttributes",
		"doc": "Get the raw attributes for the model as an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_parentResolvers",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::parentResolvers",
		"doc": "Create the parent relationship resolvers (as deferred Closures)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_expandAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::expandAttributes",
		"doc": "Expand all attributes to their underlying values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_state",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::state",
		"doc": "Add a new state transformation to the model definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_sequence",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::sequence",
		"doc": "Add a new sequenced state transformation to the model definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_has",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::has",
		"doc": "Define a child relationship for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_guessRelationship",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::guessRelationship",
		"doc": "Attempt to guess the relationship name for a \"has\" relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_hasAttached",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::hasAttached",
		"doc": "Define an attached relationship for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_for",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::for",
		"doc": "Define a parent relationship for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_afterMaking",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::afterMaking",
		"doc": "Add a new \"after making\" callback to the model definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_afterCreating",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::afterCreating",
		"doc": "Add a new \"after creating\" callback to the model definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_callAfterMaking",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::callAfterMaking",
		"doc": "Call the \"after making\" callbacks for the given model instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_callAfterCreating",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::callAfterCreating",
		"doc": "Call the \"after creating\" callbacks for the given model instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_count",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::count",
		"doc": "Specify how many models should be generated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_connection",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::connection",
		"doc": "Specify the database connection that should be used to generate models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_newInstance",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::newInstance",
		"doc": "Create a new instance of the factory builder with the given mutated properties."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_newModel",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::newModel",
		"doc": "Get a new model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_modelName",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::modelName",
		"doc": "Get the name of the model that is generated by the factory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_guessModelNamesUsing",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::guessModelNamesUsing",
		"doc": "Specify the callback that should be invoked to guess model names based on factory names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_useNamespace",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::useNamespace",
		"doc": "Specify the default namespace that contains the application's model factories."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_factoryForModel",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::factoryForModel",
		"doc": "Get a new factory instance for the given model name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_guessFactoryNamesUsing",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::guessFactoryNamesUsing",
		"doc": "Specify the callback that should be invoked to guess factory names based on dynamic relationship names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_withFaker",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::withFaker",
		"doc": "Get a new Faker instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_resolveFactoryName",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::resolveFactoryName",
		"doc": "Get the factory name for the given model name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method_appNamespace",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::appNamespace",
		"doc": "Get the application namespace for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Factory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Factory.html",
		"link": "Illuminate/Database/Eloquent/Factories/Factory.html#method___call",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Factory::__call",
		"doc": "Proxy dynamic factory methods onto their proper methods."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories",
		"fromLink": "Illuminate/Database/Eloquent/Factories.html",
		"link": "Illuminate/Database/Eloquent/Factories/HasFactory.html",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/HasFactory.html",
		"link": "Illuminate/Database/Eloquent/Factories/HasFactory.html#method_factory",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\HasFactory::factory",
		"doc": "Get a new factory instance for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
		"fromLink": "Illuminate/Database/Eloquent/Factories/HasFactory.html",
		"link": "Illuminate/Database/Eloquent/Factories/HasFactory.html#method_newFactory",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\HasFactory::newFactory",
		"doc": "Create a new factory instance for the model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories",
		"fromLink": "Illuminate/Database/Eloquent/Factories.html",
		"link": "Illuminate/Database/Eloquent/Factories/Relationship.html",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Relationship",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Relationship",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Relationship.html",
		"link": "Illuminate/Database/Eloquent/Factories/Relationship.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Relationship::__construct",
		"doc": "Create a new child relationship instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Relationship",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Relationship.html",
		"link": "Illuminate/Database/Eloquent/Factories/Relationship.html#method_createFor",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Relationship::createFor",
		"doc": "Create the child relationship for the given parent model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories",
		"fromLink": "Illuminate/Database/Eloquent/Factories.html",
		"link": "Illuminate/Database/Eloquent/Factories/Sequence.html",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Sequence",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Sequence",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Sequence.html",
		"link": "Illuminate/Database/Eloquent/Factories/Sequence.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Sequence::__construct",
		"doc": "Create a new sequence instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Factories\\Sequence",
		"fromLink": "Illuminate/Database/Eloquent/Factories/Sequence.html",
		"link": "Illuminate/Database/Eloquent/Factories/Sequence.html#method___invoke",
		"name": "Illuminate\\Database\\Eloquent\\Factories\\Sequence::__invoke",
		"doc": "Get the next value in the sequence."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/HigherOrderBuilderProxy.html",
		"name": "Illuminate\\Database\\Eloquent\\HigherOrderBuilderProxy",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\HigherOrderBuilderProxy",
		"fromLink": "Illuminate/Database/Eloquent/HigherOrderBuilderProxy.html",
		"link": "Illuminate/Database/Eloquent/HigherOrderBuilderProxy.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\HigherOrderBuilderProxy::__construct",
		"doc": "Create a new proxy instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\HigherOrderBuilderProxy",
		"fromLink": "Illuminate/Database/Eloquent/HigherOrderBuilderProxy.html",
		"link": "Illuminate/Database/Eloquent/HigherOrderBuilderProxy.html#method___call",
		"name": "Illuminate\\Database\\Eloquent\\HigherOrderBuilderProxy::__call",
		"doc": "Proxy a scope call onto the query builder."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/InvalidCastException.html",
		"name": "Illuminate\\Database\\Eloquent\\InvalidCastException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\InvalidCastException",
		"fromLink": "Illuminate/Database/Eloquent/InvalidCastException.html",
		"link": "Illuminate/Database/Eloquent/InvalidCastException.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\InvalidCastException::__construct",
		"doc": "Create a new exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/JsonEncodingException.html",
		"name": "Illuminate\\Database\\Eloquent\\JsonEncodingException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\JsonEncodingException",
		"fromLink": "Illuminate/Database/Eloquent/JsonEncodingException.html",
		"link": "Illuminate/Database/Eloquent/JsonEncodingException.html#method_forModel",
		"name": "Illuminate\\Database\\Eloquent\\JsonEncodingException::forModel",
		"doc": "Create a new JSON encoding exception for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\JsonEncodingException",
		"fromLink": "Illuminate/Database/Eloquent/JsonEncodingException.html",
		"link": "Illuminate/Database/Eloquent/JsonEncodingException.html#method_forResource",
		"name": "Illuminate\\Database\\Eloquent\\JsonEncodingException::forResource",
		"doc": "Create a new JSON encoding exception for the resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\JsonEncodingException",
		"fromLink": "Illuminate/Database/Eloquent/JsonEncodingException.html",
		"link": "Illuminate/Database/Eloquent/JsonEncodingException.html#method_forAttribute",
		"name": "Illuminate\\Database\\Eloquent\\JsonEncodingException::forAttribute",
		"doc": "Create a new JSON encoding exception for an attribute."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/MassAssignmentException.html",
		"name": "Illuminate\\Database\\Eloquent\\MassAssignmentException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/Model.html",
		"name": "Illuminate\\Database\\Eloquent\\Model",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Model::__construct",
		"doc": "Create a new Eloquent model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_bootIfNotBooted",
		"name": "Illuminate\\Database\\Eloquent\\Model::bootIfNotBooted",
		"doc": "Check if the model needs to be booted and if so, do it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_booting",
		"name": "Illuminate\\Database\\Eloquent\\Model::booting",
		"doc": "Perform any actions required before the model boots."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_boot",
		"name": "Illuminate\\Database\\Eloquent\\Model::boot",
		"doc": "Bootstrap the model and its traits."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_bootTraits",
		"name": "Illuminate\\Database\\Eloquent\\Model::bootTraits",
		"doc": "Boot all of the bootable traits on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_initializeTraits",
		"name": "Illuminate\\Database\\Eloquent\\Model::initializeTraits",
		"doc": "Initialize any initializable traits on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_booted",
		"name": "Illuminate\\Database\\Eloquent\\Model::booted",
		"doc": "Perform any actions required after the model boots."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_clearBootedModels",
		"name": "Illuminate\\Database\\Eloquent\\Model::clearBootedModels",
		"doc": "Clear the list of booted models so they will be re-booted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_withoutTouching",
		"name": "Illuminate\\Database\\Eloquent\\Model::withoutTouching",
		"doc": "Disables relationship model touching for the current class during given callback scope."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_withoutTouchingOn",
		"name": "Illuminate\\Database\\Eloquent\\Model::withoutTouchingOn",
		"doc": "Disables relationship model touching for the given model classes during given callback scope."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_isIgnoringTouch",
		"name": "Illuminate\\Database\\Eloquent\\Model::isIgnoringTouch",
		"doc": "Determine if the given model is ignoring touches."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_fill",
		"name": "Illuminate\\Database\\Eloquent\\Model::fill",
		"doc": "Fill the model with an array of attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_forceFill",
		"name": "Illuminate\\Database\\Eloquent\\Model::forceFill",
		"doc": "Fill the model with an array of attributes. Force mass assignment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_qualifyColumn",
		"name": "Illuminate\\Database\\Eloquent\\Model::qualifyColumn",
		"doc": "Qualify the given column name by the model's table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newInstance",
		"name": "Illuminate\\Database\\Eloquent\\Model::newInstance",
		"doc": "Create a new instance of the given model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newFromBuilder",
		"name": "Illuminate\\Database\\Eloquent\\Model::newFromBuilder",
		"doc": "Create a new model instance that is existing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_on",
		"name": "Illuminate\\Database\\Eloquent\\Model::on",
		"doc": "Begin querying the model on a given connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_onWriteConnection",
		"name": "Illuminate\\Database\\Eloquent\\Model::onWriteConnection",
		"doc": "Begin querying the model on the write connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_all",
		"name": "Illuminate\\Database\\Eloquent\\Model::all",
		"doc": "Get all of the models from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_with",
		"name": "Illuminate\\Database\\Eloquent\\Model::with",
		"doc": "Begin querying a model with eager loading."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_load",
		"name": "Illuminate\\Database\\Eloquent\\Model::load",
		"doc": "Eager load relations on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMorph",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMorph",
		"doc": "Eager load relationships on the polymorphic relation of a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMissing",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMissing",
		"doc": "Eager load relations on the model if they are not already eager loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadAggregate",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadAggregate",
		"doc": "Eager load relation's column aggregations on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadCount",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadCount",
		"doc": "Eager load relation counts on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMax",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMax",
		"doc": "Eager load relation max column values on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMin",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMin",
		"doc": "Eager load relation min column values on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadSum",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadSum",
		"doc": "Eager load relation's column summations on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadAvg",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadAvg",
		"doc": "Eager load relation average column values on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMorphAggregate",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMorphAggregate",
		"doc": "Eager load relationship column aggregation on the polymorphic relation of a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMorphCount",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMorphCount",
		"doc": "Eager load relationship counts on the polymorphic relation of a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMorphMax",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMorphMax",
		"doc": "Eager load relationship max column values on the polymorphic relation of a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMorphMin",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMorphMin",
		"doc": "Eager load relationship min column values on the polymorphic relation of a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMorphSum",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMorphSum",
		"doc": "Eager load relationship column summations on the polymorphic relation of a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_loadMorphAvg",
		"name": "Illuminate\\Database\\Eloquent\\Model::loadMorphAvg",
		"doc": "Eager load relationship average column values on the polymorphic relation of a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_increment",
		"name": "Illuminate\\Database\\Eloquent\\Model::increment",
		"doc": "Increment a column's value by a given amount."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_decrement",
		"name": "Illuminate\\Database\\Eloquent\\Model::decrement",
		"doc": "Decrement a column's value by a given amount."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_incrementOrDecrement",
		"name": "Illuminate\\Database\\Eloquent\\Model::incrementOrDecrement",
		"doc": "Run the increment or decrement method on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_update",
		"name": "Illuminate\\Database\\Eloquent\\Model::update",
		"doc": "Update the model in the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_push",
		"name": "Illuminate\\Database\\Eloquent\\Model::push",
		"doc": "Save the model and all of its relationships."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_saveQuietly",
		"name": "Illuminate\\Database\\Eloquent\\Model::saveQuietly",
		"doc": "Save the model to the database without raising any events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_save",
		"name": "Illuminate\\Database\\Eloquent\\Model::save",
		"doc": "Save the model to the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_saveOrFail",
		"name": "Illuminate\\Database\\Eloquent\\Model::saveOrFail",
		"doc": "Save the model to the database using transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_finishSave",
		"name": "Illuminate\\Database\\Eloquent\\Model::finishSave",
		"doc": "Perform any actions that are necessary after the model is saved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_performUpdate",
		"name": "Illuminate\\Database\\Eloquent\\Model::performUpdate",
		"doc": "Perform a model update operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setKeysForSelectQuery",
		"name": "Illuminate\\Database\\Eloquent\\Model::setKeysForSelectQuery",
		"doc": "Set the keys for a select query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getKeyForSelectQuery",
		"name": "Illuminate\\Database\\Eloquent\\Model::getKeyForSelectQuery",
		"doc": "Get the primary key value for a select query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setKeysForSaveQuery",
		"name": "Illuminate\\Database\\Eloquent\\Model::setKeysForSaveQuery",
		"doc": "Set the keys for a save update query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getKeyForSaveQuery",
		"name": "Illuminate\\Database\\Eloquent\\Model::getKeyForSaveQuery",
		"doc": "Get the primary key value for a save query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_performInsert",
		"name": "Illuminate\\Database\\Eloquent\\Model::performInsert",
		"doc": "Perform a model insert operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_insertAndSetId",
		"name": "Illuminate\\Database\\Eloquent\\Model::insertAndSetId",
		"doc": "Insert the given attributes and set the ID on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_destroy",
		"name": "Illuminate\\Database\\Eloquent\\Model::destroy",
		"doc": "Destroy the models for the given IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_delete",
		"name": "Illuminate\\Database\\Eloquent\\Model::delete",
		"doc": "Delete the model from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_forceDelete",
		"name": "Illuminate\\Database\\Eloquent\\Model::forceDelete",
		"doc": "Force a hard delete on a soft deleted model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_performDeleteOnModel",
		"name": "Illuminate\\Database\\Eloquent\\Model::performDeleteOnModel",
		"doc": "Perform the actual delete query on this model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_query",
		"name": "Illuminate\\Database\\Eloquent\\Model::query",
		"doc": "Begin querying the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newQuery",
		"name": "Illuminate\\Database\\Eloquent\\Model::newQuery",
		"doc": "Get a new query builder for the model's table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newModelQuery",
		"name": "Illuminate\\Database\\Eloquent\\Model::newModelQuery",
		"doc": "Get a new query builder that doesn't have any global scopes or eager loading."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newQueryWithoutRelationships",
		"name": "Illuminate\\Database\\Eloquent\\Model::newQueryWithoutRelationships",
		"doc": "Get a new query builder with no relationships loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_registerGlobalScopes",
		"name": "Illuminate\\Database\\Eloquent\\Model::registerGlobalScopes",
		"doc": "Register the global scopes for this builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newQueryWithoutScopes",
		"name": "Illuminate\\Database\\Eloquent\\Model::newQueryWithoutScopes",
		"doc": "Get a new query builder that doesn't have any global scopes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newQueryWithoutScope",
		"name": "Illuminate\\Database\\Eloquent\\Model::newQueryWithoutScope",
		"doc": "Get a new query instance without a given scope."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newQueryForRestoration",
		"name": "Illuminate\\Database\\Eloquent\\Model::newQueryForRestoration",
		"doc": "Get a new query to restore one or more models by their queueable IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newEloquentBuilder",
		"name": "Illuminate\\Database\\Eloquent\\Model::newEloquentBuilder",
		"doc": "Create a new Eloquent query builder for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newBaseQueryBuilder",
		"name": "Illuminate\\Database\\Eloquent\\Model::newBaseQueryBuilder",
		"doc": "Get a new query builder instance for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newCollection",
		"name": "Illuminate\\Database\\Eloquent\\Model::newCollection",
		"doc": "Create a new Eloquent Collection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_newPivot",
		"name": "Illuminate\\Database\\Eloquent\\Model::newPivot",
		"doc": "Create a new pivot model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_hasNamedScope",
		"name": "Illuminate\\Database\\Eloquent\\Model::hasNamedScope",
		"doc": "Determine if the model has a given scope."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_callNamedScope",
		"name": "Illuminate\\Database\\Eloquent\\Model::callNamedScope",
		"doc": "Apply the given named scope if possible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_toArray",
		"name": "Illuminate\\Database\\Eloquent\\Model::toArray",
		"doc": "Convert the model instance to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_toJson",
		"name": "Illuminate\\Database\\Eloquent\\Model::toJson",
		"doc": "Convert the model instance to JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_jsonSerialize",
		"name": "Illuminate\\Database\\Eloquent\\Model::jsonSerialize",
		"doc": "Convert the object into something JSON serializable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_fresh",
		"name": "Illuminate\\Database\\Eloquent\\Model::fresh",
		"doc": "Reload a fresh model instance from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_refresh",
		"name": "Illuminate\\Database\\Eloquent\\Model::refresh",
		"doc": "Reload the current model instance with fresh attributes from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_replicate",
		"name": "Illuminate\\Database\\Eloquent\\Model::replicate",
		"doc": "Clone the model into a new, non-existing instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_is",
		"name": "Illuminate\\Database\\Eloquent\\Model::is",
		"doc": "Determine if two models have the same ID and belong to the same table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_isNot",
		"name": "Illuminate\\Database\\Eloquent\\Model::isNot",
		"doc": "Determine if two models are not the same."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getConnection",
		"name": "Illuminate\\Database\\Eloquent\\Model::getConnection",
		"doc": "Get the database connection for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getConnectionName",
		"name": "Illuminate\\Database\\Eloquent\\Model::getConnectionName",
		"doc": "Get the current connection name for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setConnection",
		"name": "Illuminate\\Database\\Eloquent\\Model::setConnection",
		"doc": "Set the connection associated with the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_resolveConnection",
		"name": "Illuminate\\Database\\Eloquent\\Model::resolveConnection",
		"doc": "Resolve a connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getConnectionResolver",
		"name": "Illuminate\\Database\\Eloquent\\Model::getConnectionResolver",
		"doc": "Get the connection resolver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setConnectionResolver",
		"name": "Illuminate\\Database\\Eloquent\\Model::setConnectionResolver",
		"doc": "Set the connection resolver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_unsetConnectionResolver",
		"name": "Illuminate\\Database\\Eloquent\\Model::unsetConnectionResolver",
		"doc": "Unset the connection resolver for models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getTable",
		"name": "Illuminate\\Database\\Eloquent\\Model::getTable",
		"doc": "Get the table associated with the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setTable",
		"name": "Illuminate\\Database\\Eloquent\\Model::setTable",
		"doc": "Set the table associated with the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Model::getKeyName",
		"doc": "Get the primary key for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Model::setKeyName",
		"doc": "Set the primary key for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getQualifiedKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Model::getQualifiedKeyName",
		"doc": "Get the table qualified key name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getKeyType",
		"name": "Illuminate\\Database\\Eloquent\\Model::getKeyType",
		"doc": "Get the auto-incrementing key type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setKeyType",
		"name": "Illuminate\\Database\\Eloquent\\Model::setKeyType",
		"doc": "Set the data type for the primary key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getIncrementing",
		"name": "Illuminate\\Database\\Eloquent\\Model::getIncrementing",
		"doc": "Get the value indicating whether the IDs are incrementing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setIncrementing",
		"name": "Illuminate\\Database\\Eloquent\\Model::setIncrementing",
		"doc": "Set whether IDs are incrementing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getKey",
		"name": "Illuminate\\Database\\Eloquent\\Model::getKey",
		"doc": "Get the value of the model's primary key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getQueueableId",
		"name": "Illuminate\\Database\\Eloquent\\Model::getQueueableId",
		"doc": "Get the queueable identity for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getQueueableRelations",
		"name": "Illuminate\\Database\\Eloquent\\Model::getQueueableRelations",
		"doc": "Get the queueable relationships for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getQueueableConnection",
		"name": "Illuminate\\Database\\Eloquent\\Model::getQueueableConnection",
		"doc": "Get the queueable connection for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getRouteKey",
		"name": "Illuminate\\Database\\Eloquent\\Model::getRouteKey",
		"doc": "Get the value of the model's route key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getRouteKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Model::getRouteKeyName",
		"doc": "Get the route key for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_resolveRouteBinding",
		"name": "Illuminate\\Database\\Eloquent\\Model::resolveRouteBinding",
		"doc": "Retrieve the model for a bound value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_resolveChildRouteBinding",
		"name": "Illuminate\\Database\\Eloquent\\Model::resolveChildRouteBinding",
		"doc": "Retrieve the child model for a bound value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getForeignKey",
		"name": "Illuminate\\Database\\Eloquent\\Model::getForeignKey",
		"doc": "Get the default foreign key name for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_getPerPage",
		"name": "Illuminate\\Database\\Eloquent\\Model::getPerPage",
		"doc": "Get the number of models to return per page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_setPerPage",
		"name": "Illuminate\\Database\\Eloquent\\Model::setPerPage",
		"doc": "Set the number of models to return per page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___get",
		"name": "Illuminate\\Database\\Eloquent\\Model::__get",
		"doc": "Dynamically retrieve attributes on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___set",
		"name": "Illuminate\\Database\\Eloquent\\Model::__set",
		"doc": "Dynamically set attributes on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_offsetExists",
		"name": "Illuminate\\Database\\Eloquent\\Model::offsetExists",
		"doc": "Determine if the given attribute exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_offsetGet",
		"name": "Illuminate\\Database\\Eloquent\\Model::offsetGet",
		"doc": "Get the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_offsetSet",
		"name": "Illuminate\\Database\\Eloquent\\Model::offsetSet",
		"doc": "Set the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method_offsetUnset",
		"name": "Illuminate\\Database\\Eloquent\\Model::offsetUnset",
		"doc": "Unset the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___isset",
		"name": "Illuminate\\Database\\Eloquent\\Model::__isset",
		"doc": "Determine if an attribute or relation exists on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___unset",
		"name": "Illuminate\\Database\\Eloquent\\Model::__unset",
		"doc": "Unset an attribute on the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___call",
		"name": "Illuminate\\Database\\Eloquent\\Model::__call",
		"doc": "Handle dynamic method calls into the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___callStatic",
		"name": "Illuminate\\Database\\Eloquent\\Model::__callStatic",
		"doc": "Handle dynamic static method calls into the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___toString",
		"name": "Illuminate\\Database\\Eloquent\\Model::__toString",
		"doc": "Convert the model to its string representation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___sleep",
		"name": "Illuminate\\Database\\Eloquent\\Model::__sleep",
		"doc": "Prepare the object for serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Model",
		"fromLink": "Illuminate/Database/Eloquent/Model.html",
		"link": "Illuminate/Database/Eloquent/Model.html#method___wakeup",
		"name": "Illuminate\\Database\\Eloquent\\Model::__wakeup",
		"doc": "When a model is being unserialized, check if it needs to be booted."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/ModelNotFoundException.html",
		"name": "Illuminate\\Database\\Eloquent\\ModelNotFoundException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\ModelNotFoundException",
		"fromLink": "Illuminate/Database/Eloquent/ModelNotFoundException.html",
		"link": "Illuminate/Database/Eloquent/ModelNotFoundException.html#method_setModel",
		"name": "Illuminate\\Database\\Eloquent\\ModelNotFoundException::setModel",
		"doc": "Set the affected Eloquent model and instance ids."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\ModelNotFoundException",
		"fromLink": "Illuminate/Database/Eloquent/ModelNotFoundException.html",
		"link": "Illuminate/Database/Eloquent/ModelNotFoundException.html#method_getModel",
		"name": "Illuminate\\Database\\Eloquent\\ModelNotFoundException::getModel",
		"doc": "Get the affected Eloquent model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\ModelNotFoundException",
		"fromLink": "Illuminate/Database/Eloquent/ModelNotFoundException.html",
		"link": "Illuminate/Database/Eloquent/ModelNotFoundException.html#method_getIds",
		"name": "Illuminate\\Database\\Eloquent\\ModelNotFoundException::getIds",
		"doc": "Get the affected Eloquent model IDs."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/QueueEntityResolver.html",
		"name": "Illuminate\\Database\\Eloquent\\QueueEntityResolver",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\QueueEntityResolver",
		"fromLink": "Illuminate/Database/Eloquent/QueueEntityResolver.html",
		"link": "Illuminate/Database/Eloquent/QueueEntityResolver.html#method_resolve",
		"name": "Illuminate\\Database\\Eloquent\\QueueEntityResolver::resolve",
		"doc": "Resolve the entity for the given ID."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/RelationNotFoundException.html",
		"name": "Illuminate\\Database\\Eloquent\\RelationNotFoundException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\RelationNotFoundException",
		"fromLink": "Illuminate/Database/Eloquent/RelationNotFoundException.html",
		"link": "Illuminate/Database/Eloquent/RelationNotFoundException.html#method_make",
		"name": "Illuminate\\Database\\Eloquent\\RelationNotFoundException::make",
		"doc": "Create a new exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::__construct",
		"doc": "Create a new belongs to relationship instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_addConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::addConstraints",
		"doc": "Set the base constraints on the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_addEagerConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::addEagerConstraints",
		"doc": "Set the constraints for an eager load of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getEagerModelKeys",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getEagerModelKeys",
		"doc": "Gather the keys from an array of related models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::match",
		"doc": "Match the eagerly loaded results to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_associate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::associate",
		"doc": "Associate the model instance to the given parent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_dissociate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::dissociate",
		"doc": "Dissociate previously associated model from the given parent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_disassociate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::disassociate",
		"doc": "Alias of \"dissociate\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getRelationExistenceQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getRelationExistenceQuery",
		"doc": "Add the constraints for a relationship query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getRelationExistenceQueryForSelfRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getRelationExistenceQueryForSelfRelation",
		"doc": "Add the constraints for a relationship query on the same table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getRelationCountHash",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getRelationCountHash",
		"doc": "Get a relationship join table hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_relationHasIncrementingId",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::relationHasIncrementingId",
		"doc": "Determine if the related model has an auto-incrementing ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_newRelatedInstanceFor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::newRelatedInstanceFor",
		"doc": "Make a new related instance for the given model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getChild",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getChild",
		"doc": "Get the child of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getForeignKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getForeignKeyName",
		"doc": "Get the foreign key of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getQualifiedForeignKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getQualifiedForeignKeyName",
		"doc": "Get the fully qualified foreign key of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getParentKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getParentKey",
		"doc": "Get the key value of the child's foreign key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getOwnerKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getOwnerKeyName",
		"doc": "Get the associated key of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getQualifiedOwnerKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getQualifiedOwnerKeyName",
		"doc": "Get the fully qualified associated key of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getRelatedKeyFrom",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getRelatedKeyFrom",
		"doc": "Get the value of the model's associated key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsTo.html#method_getRelationName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo::getRelationName",
		"doc": "Get the name of the relationship."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::__construct",
		"doc": "Create a new belongs to many relationship instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_resolveTableName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::resolveTableName",
		"doc": "Attempt to resolve the intermediate table name from the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_addConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::addConstraints",
		"doc": "Set the base constraints on the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_performJoin",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::performJoin",
		"doc": "Set the join clause for the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_addWhereConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::addWhereConstraints",
		"doc": "Set the where clause for the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_addEagerConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::addEagerConstraints",
		"doc": "Set the constraints for an eager load of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::match",
		"doc": "Match the eagerly loaded results to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_buildDictionary",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::buildDictionary",
		"doc": "Build model dictionary keyed by the relation's foreign key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getPivotClass",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getPivotClass",
		"doc": "Get the class being used for pivot models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_using",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::using",
		"doc": "Specify the custom pivot model to use for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_as",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::as",
		"doc": "Specify the custom pivot accessor to use for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_wherePivot",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::wherePivot",
		"doc": "Set a where clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_wherePivotBetween",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::wherePivotBetween",
		"doc": "Set a \"where between\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_orWherePivotBetween",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::orWherePivotBetween",
		"doc": "Set a \"or where between\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_wherePivotNotBetween",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::wherePivotNotBetween",
		"doc": "Set a \"where pivot not between\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_orWherePivotNotBetween",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::orWherePivotNotBetween",
		"doc": "Set a \"or where not between\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_wherePivotIn",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::wherePivotIn",
		"doc": "Set a \"where in\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_orWherePivot",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::orWherePivot",
		"doc": "Set an \"or where\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_withPivotValue",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::withPivotValue",
		"doc": "Set a where clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_orWherePivotIn",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::orWherePivotIn",
		"doc": "Set an \"or where in\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_wherePivotNotIn",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::wherePivotNotIn",
		"doc": "Set a \"where not in\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_orWherePivotNotIn",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::orWherePivotNotIn",
		"doc": "Set an \"or where not in\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_wherePivotNull",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::wherePivotNull",
		"doc": "Set a \"where null\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_wherePivotNotNull",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::wherePivotNotNull",
		"doc": "Set a \"where not null\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_orWherePivotNull",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::orWherePivotNull",
		"doc": "Set a \"or where null\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_orWherePivotNotNull",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::orWherePivotNotNull",
		"doc": "Set a \"or where not null\" clause for a pivot table column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_findOrNew",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::findOrNew",
		"doc": "Find a related model by its primary key or return new instance of the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_firstOrNew",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::firstOrNew",
		"doc": "Get the first related model record matching the attributes or instantiate it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_firstOrCreate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::firstOrCreate",
		"doc": "Get the first related record matching the attributes or create it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_updateOrCreate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::updateOrCreate",
		"doc": "Create or update a related record matching the attributes, and fill it with values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_find",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::find",
		"doc": "Find a related model by its primary key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_findMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::findMany",
		"doc": "Find multiple related models by their primary keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_findOrFail",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::findOrFail",
		"doc": "Find a related model by its primary key or throw an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_firstWhere",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::firstWhere",
		"doc": "Add a basic where clause to the query, and return the first result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_first",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::first",
		"doc": "Execute the query and get the first result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_firstOrFail",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::firstOrFail",
		"doc": "Execute the query and get the first result or throw an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_get",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::get",
		"doc": "Execute the query as a \"select\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_shouldSelect",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::shouldSelect",
		"doc": "Get the select columns for the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_aliasedPivotColumns",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::aliasedPivotColumns",
		"doc": "Get the pivot columns for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_paginate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::paginate",
		"doc": "Get a paginator for the \"select\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_simplePaginate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::simplePaginate",
		"doc": "Paginate the given query into a simple paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_chunk",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::chunk",
		"doc": "Chunk the results of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_chunkById",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::chunkById",
		"doc": "Chunk the results of a query by comparing numeric IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_each",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::each",
		"doc": "Execute a callback over each item while chunking."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_cursor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::cursor",
		"doc": "Get a lazy collection for the given query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_hydratePivotRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::hydratePivotRelation",
		"doc": "Hydrate the pivot table relationship on the models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_migratePivotAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::migratePivotAttributes",
		"doc": "Get the pivot attributes from a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_touchIfTouching",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::touchIfTouching",
		"doc": "If we're touching the parent model, touch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_touchingParent",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::touchingParent",
		"doc": "Determine if we should touch the parent on sync."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_guessInverseRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::guessInverseRelation",
		"doc": "Attempt to guess the name of the inverse of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_touch",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::touch",
		"doc": "Touch all of the related models for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_allRelatedIds",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::allRelatedIds",
		"doc": "Get all of the IDs for the related models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_save",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::save",
		"doc": "Save a new model and attach it to the parent model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_saveMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::saveMany",
		"doc": "Save an array of new models and attach them to the parent model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_create",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::create",
		"doc": "Create a new instance of the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_createMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::createMany",
		"doc": "Create an array of new instances of the related models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getRelationExistenceQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getRelationExistenceQuery",
		"doc": "Add the constraints for a relationship query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getRelationExistenceQueryForSelfJoin",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getRelationExistenceQueryForSelfJoin",
		"doc": "Add the constraints for a relationship query on the same table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getExistenceCompareKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getExistenceCompareKey",
		"doc": "Get the key for comparing against the parent key in \"has\" query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getRelationCountHash",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getRelationCountHash",
		"doc": "Get a relationship join table hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_withTimestamps",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::withTimestamps",
		"doc": "Specify that the pivot table has creation and update timestamps."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_createdAt",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::createdAt",
		"doc": "Get the name of the \"created at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_updatedAt",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::updatedAt",
		"doc": "Get the name of the \"updated at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getForeignPivotKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getForeignPivotKeyName",
		"doc": "Get the foreign key for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getQualifiedForeignPivotKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getQualifiedForeignPivotKeyName",
		"doc": "Get the fully qualified foreign key for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getRelatedPivotKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getRelatedPivotKeyName",
		"doc": "Get the \"related key\" for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getQualifiedRelatedPivotKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getQualifiedRelatedPivotKeyName",
		"doc": "Get the fully qualified \"related key\" for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getParentKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getParentKeyName",
		"doc": "Get the parent key for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getQualifiedParentKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getQualifiedParentKeyName",
		"doc": "Get the fully qualified parent key name for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getRelatedKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getRelatedKeyName",
		"doc": "Get the related key for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getQualifiedRelatedKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getQualifiedRelatedKeyName",
		"doc": "Get the fully qualified related key name for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getTable",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getTable",
		"doc": "Get the intermediate table for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getRelationName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getRelationName",
		"doc": "Get the relationship name for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getPivotAccessor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getPivotAccessor",
		"doc": "Get the name of the pivot accessor for this relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_getPivotColumns",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::getPivotColumns",
		"doc": "Get the pivot columns for this relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/BelongsToMany.html#method_qualifyPivotColumn",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany::qualifyPivotColumn",
		"doc": "Qualify the given column name by the pivot table."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_fromAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::fromAttributes",
		"doc": "Create a new pivot model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_fromRawAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::fromRawAttributes",
		"doc": "Create a new pivot model from raw values returned from a query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_setKeysForSelectQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::setKeysForSelectQuery",
		"doc": "Set the keys for a select query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_setKeysForSaveQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::setKeysForSaveQuery",
		"doc": "Set the keys for a save update query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_delete",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::delete",
		"doc": "Delete the pivot model record from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_getDeleteQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::getDeleteQuery",
		"doc": "Get the query builder for a delete operation on the pivot."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_getTable",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::getTable",
		"doc": "Get the table associated with the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_getForeignKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::getForeignKey",
		"doc": "Get the foreign key column name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_getRelatedKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::getRelatedKey",
		"doc": "Get the \"related key\" column name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_getOtherKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::getOtherKey",
		"doc": "Get the \"related key\" column name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_setPivotKeys",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::setPivotKeys",
		"doc": "Set the key names for the pivot model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_hasTimestampAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::hasTimestampAttributes",
		"doc": "Determine if the pivot model or given attributes has timestamp attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_getCreatedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::getCreatedAtColumn",
		"doc": "Get the name of the \"created at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_getUpdatedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::getUpdatedAtColumn",
		"doc": "Get the name of the \"updated at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_getQueueableId",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::getQueueableId",
		"doc": "Get the queueable identity for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_newQueryForRestoration",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::newQueryForRestoration",
		"doc": "Get a new query to restore one or more models by their queueable IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_newQueryForCollectionRestoration",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::newQueryForCollectionRestoration",
		"doc": "Get a new query to restore multiple models by their queueable IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/AsPivot.html#method_unsetRelations",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\AsPivot::unsetRelations",
		"doc": "Unset all the loaded relations for the instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html#method_is",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels::is",
		"doc": "Determine if the model is the related instance of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html#method_isNot",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels::isNot",
		"doc": "Determine if the model is not the related instance of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html#method_getParentKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels::getParentKey",
		"doc": "Get the value of the parent model's key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html#method_getRelatedKeyFrom",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels::getRelatedKeyFrom",
		"doc": "Get the value of the model's related key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/ComparesRelatedModels.html#method_compareKeys",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\ComparesRelatedModels::compareKeys",
		"doc": "Compare the parent key with the related key."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_toggle",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::toggle",
		"doc": "Toggles a model (or models) from the parent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_syncWithoutDetaching",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::syncWithoutDetaching",
		"doc": "Sync the intermediate tables with a list of IDs without detaching."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_sync",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::sync",
		"doc": "Sync the intermediate tables with a list of IDs or collection of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_formatRecordsList",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::formatRecordsList",
		"doc": "Format the sync / toggle record list so that it is keyed by ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_attachNew",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::attachNew",
		"doc": "Attach all of the records that aren't in the given current records."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_updateExistingPivot",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::updateExistingPivot",
		"doc": "Update an existing pivot record on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_updateExistingPivotUsingCustomClass",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::updateExistingPivotUsingCustomClass",
		"doc": "Update an existing pivot record on the table via a custom class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_attach",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::attach",
		"doc": "Attach a model to the parent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_attachUsingCustomClass",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::attachUsingCustomClass",
		"doc": "Attach a model to the parent using a custom class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_formatAttachRecords",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::formatAttachRecords",
		"doc": "Create an array of records to insert into the pivot table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_formatAttachRecord",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::formatAttachRecord",
		"doc": "Create a full attachment record payload."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_extractAttachIdAndAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::extractAttachIdAndAttributes",
		"doc": "Get the attach record ID and extra attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_baseAttachRecord",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::baseAttachRecord",
		"doc": "Create a new pivot attachment record."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_addTimestampsToAttachment",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::addTimestampsToAttachment",
		"doc": "Set the creation and update timestamps on an attach record."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_hasPivotColumn",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::hasPivotColumn",
		"doc": "Determine whether the given column is defined as a pivot column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_detach",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::detach",
		"doc": "Detach models from the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_detachUsingCustomClass",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::detachUsingCustomClass",
		"doc": "Detach models from the relationship using a custom class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_getCurrentlyAttachedPivots",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::getCurrentlyAttachedPivots",
		"doc": "Get the pivot models that are currently attached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_newPivot",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::newPivot",
		"doc": "Create a new pivot model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_newExistingPivot",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::newExistingPivot",
		"doc": "Create a new existing pivot model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_newPivotStatement",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::newPivotStatement",
		"doc": "Get a new plain query builder for the pivot table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_newPivotStatementForId",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::newPivotStatementForId",
		"doc": "Get a new pivot statement for a given \"other\" ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_newPivotQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::newPivotQuery",
		"doc": "Create a new query builder for the pivot table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_withPivot",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::withPivot",
		"doc": "Set the columns on the pivot table to retrieve."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_parseIds",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::parseIds",
		"doc": "Get all of the IDs from the given mixed value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_parseId",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::parseId",
		"doc": "Get the ID from the given mixed value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_castKeys",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::castKeys",
		"doc": "Cast the given keys to integers if they are numeric and string otherwise."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_castKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::castKey",
		"doc": "Cast the given key to convert to primary key type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_castAttributes",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::castAttributes",
		"doc": "Cast the given pivot attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/InteractsWithPivotTable.html#method_getTypeSwapValue",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\InteractsWithPivotTable::getTypeSwapValue",
		"doc": "Converts a given value to a given type value."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/SupportsDefaultModels.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\SupportsDefaultModels",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\SupportsDefaultModels",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/SupportsDefaultModels.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/SupportsDefaultModels.html#method_newRelatedInstanceFor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\SupportsDefaultModels::newRelatedInstanceFor",
		"doc": "Make a new related instance for the given model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\SupportsDefaultModels",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/SupportsDefaultModels.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/SupportsDefaultModels.html#method_withDefault",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\SupportsDefaultModels::withDefault",
		"doc": "Return a new model instance in case the relationship does not exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\SupportsDefaultModels",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Concerns/SupportsDefaultModels.html",
		"link": "Illuminate/Database/Eloquent/Relations/Concerns/SupportsDefaultModels.html#method_getDefaultFor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Concerns\\SupportsDefaultModels::getDefaultFor",
		"doc": "Get the default value for this relation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasMany.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasMany",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasMany.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasMany::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasMany.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasMany::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasMany.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasMany::match",
		"doc": "Match the eagerly loaded results to their parents."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::__construct",
		"doc": "Create a new has many through relationship instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_addConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::addConstraints",
		"doc": "Set the base constraints on the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_performJoin",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::performJoin",
		"doc": "Set the join clause on the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getQualifiedParentKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getQualifiedParentKeyName",
		"doc": "Get the fully qualified parent key name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_throughParentSoftDeletes",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::throughParentSoftDeletes",
		"doc": "Determine whether \"through\" parent of the relation uses Soft Deletes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_withTrashedParents",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::withTrashedParents",
		"doc": "Indicate that trashed \"through\" parents should be included in the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_addEagerConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::addEagerConstraints",
		"doc": "Set the constraints for an eager load of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::match",
		"doc": "Match the eagerly loaded results to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_buildDictionary",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::buildDictionary",
		"doc": "Build model dictionary keyed by the relation's foreign key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_firstOrNew",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::firstOrNew",
		"doc": "Get the first related model record matching the attributes or instantiate it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_updateOrCreate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::updateOrCreate",
		"doc": "Create or update a related record matching the attributes, and fill it with values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_firstWhere",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::firstWhere",
		"doc": "Add a basic where clause to the query, and return the first result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_first",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::first",
		"doc": "Execute the query and get the first related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_firstOrFail",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::firstOrFail",
		"doc": "Execute the query and get the first result or throw an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_find",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::find",
		"doc": "Find a related model by its primary key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_findMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::findMany",
		"doc": "Find multiple related models by their primary keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_findOrFail",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::findOrFail",
		"doc": "Find a related model by its primary key or throw an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_get",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::get",
		"doc": "Execute the query as a \"select\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_paginate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::paginate",
		"doc": "Get a paginator for the \"select\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_simplePaginate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::simplePaginate",
		"doc": "Paginate the given query into a simple paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_shouldSelect",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::shouldSelect",
		"doc": "Set the select clause for the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_chunk",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::chunk",
		"doc": "Chunk the results of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_chunkById",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::chunkById",
		"doc": "Chunk the results of a query by comparing numeric IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_cursor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::cursor",
		"doc": "Get a generator for the given query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_each",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::each",
		"doc": "Execute a callback over each item while chunking."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_prepareQueryBuilder",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::prepareQueryBuilder",
		"doc": "Prepare the query builder for query execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getRelationExistenceQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getRelationExistenceQuery",
		"doc": "Add the constraints for a relationship query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getRelationExistenceQueryForSelfRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getRelationExistenceQueryForSelfRelation",
		"doc": "Add the constraints for a relationship query on the same table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getRelationExistenceQueryForThroughSelfRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getRelationExistenceQueryForThroughSelfRelation",
		"doc": "Add the constraints for a relationship query on the same table as the through parent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getRelationCountHash",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getRelationCountHash",
		"doc": "Get a relationship join table hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getQualifiedFarKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getQualifiedFarKeyName",
		"doc": "Get the qualified foreign key on the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getFirstKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getFirstKeyName",
		"doc": "Get the foreign key on the \"through\" model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getQualifiedFirstKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getQualifiedFirstKeyName",
		"doc": "Get the qualified foreign key on the \"through\" model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getForeignKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getForeignKeyName",
		"doc": "Get the foreign key on the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getQualifiedForeignKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getQualifiedForeignKeyName",
		"doc": "Get the qualified foreign key on the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getLocalKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getLocalKeyName",
		"doc": "Get the local key on the far parent model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getQualifiedLocalKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getQualifiedLocalKeyName",
		"doc": "Get the qualified local key on the far parent model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasManyThrough.html#method_getSecondLocalKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough::getSecondLocalKeyName",
		"doc": "Get the local key on the intermediary model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOne.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOne",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOne.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOne::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOne.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOne::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOne.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOne::match",
		"doc": "Match the eagerly loaded results to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOne.html#method_newRelatedInstanceFor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOne::newRelatedInstanceFor",
		"doc": "Make a new related instance for the given model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOne.html#method_getRelatedKeyFrom",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOne::getRelatedKeyFrom",
		"doc": "Get the value of the model's foreign key."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::__construct",
		"doc": "Create a new has one or many relationship instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_make",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::make",
		"doc": "Create and return an un-saved instance of the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_makeMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::makeMany",
		"doc": "Create and return an un-saved instances of the related models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_addConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::addConstraints",
		"doc": "Set the base constraints on the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_addEagerConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::addEagerConstraints",
		"doc": "Set the constraints for an eager load of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_matchOne",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::matchOne",
		"doc": "Match the eagerly loaded results to their single parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_matchMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::matchMany",
		"doc": "Match the eagerly loaded results to their many parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_matchOneOrMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::matchOneOrMany",
		"doc": "Match the eagerly loaded results to their many parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getRelationValue",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getRelationValue",
		"doc": "Get the value of a relationship by one or many type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_buildDictionary",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::buildDictionary",
		"doc": "Build model dictionary keyed by the relation's foreign key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_findOrNew",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::findOrNew",
		"doc": "Find a model by its primary key or return new instance of the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_firstOrNew",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::firstOrNew",
		"doc": "Get the first related model record matching the attributes or instantiate it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_firstOrCreate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::firstOrCreate",
		"doc": "Get the first related record matching the attributes or create it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_updateOrCreate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::updateOrCreate",
		"doc": "Create or update a related record matching the attributes, and fill it with values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_save",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::save",
		"doc": "Attach a model instance to the parent model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_saveMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::saveMany",
		"doc": "Attach a collection of models to the parent instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_create",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::create",
		"doc": "Create a new instance of the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_createMany",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::createMany",
		"doc": "Create a Collection of new instances of the related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_setForeignAttributesForCreate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::setForeignAttributesForCreate",
		"doc": "Set the foreign ID for creating a related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getRelationExistenceQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getRelationExistenceQuery",
		"doc": "Add the constraints for a relationship query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getRelationExistenceQueryForSelfRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getRelationExistenceQueryForSelfRelation",
		"doc": "Add the constraints for a relationship query on the same table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getRelationCountHash",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getRelationCountHash",
		"doc": "Get a relationship join table hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getExistenceCompareKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getExistenceCompareKey",
		"doc": "Get the key for comparing against the parent key in \"has\" query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getParentKey",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getParentKey",
		"doc": "Get the key value of the parent's local key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getQualifiedParentKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getQualifiedParentKeyName",
		"doc": "Get the fully qualified parent key name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getForeignKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getForeignKeyName",
		"doc": "Get the plain foreign key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getQualifiedForeignKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getQualifiedForeignKeyName",
		"doc": "Get the foreign key for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneOrMany.html#method_getLocalKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany::getLocalKeyName",
		"doc": "Get the local key for the relationship."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough::match",
		"doc": "Match the eagerly loaded results to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough",
		"fromLink": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html",
		"link": "Illuminate/Database/Eloquent/Relations/HasOneThrough.html#method_newRelatedInstanceFor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough::newRelatedInstanceFor",
		"doc": "Make a new related instance for the given model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphMany.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphMany",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphMany.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphMany::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphMany.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphMany::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphMany.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphMany::match",
		"doc": "Match the eagerly loaded results to their parents."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOne.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOne.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOne.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOne.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne::match",
		"doc": "Match the eagerly loaded results to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOne.html#method_newRelatedInstanceFor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne::newRelatedInstanceFor",
		"doc": "Make a new related instance for the given model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOne.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOne.html#method_getRelatedKeyFrom",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOne::getRelatedKeyFrom",
		"doc": "Get the value of the model's foreign key."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany::__construct",
		"doc": "Create a new morph one or many relationship instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html#method_addConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany::addConstraints",
		"doc": "Set the base constraints on the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html#method_addEagerConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany::addEagerConstraints",
		"doc": "Set the constraints for an eager load of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html#method_setForeignAttributesForCreate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany::setForeignAttributesForCreate",
		"doc": "Set the foreign ID and type for creating a related model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html#method_getRelationExistenceQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany::getRelationExistenceQuery",
		"doc": "Get the relationship query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html#method_getQualifiedMorphType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany::getQualifiedMorphType",
		"doc": "Get the foreign key \"type\" name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html#method_getMorphType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany::getMorphType",
		"doc": "Get the plain morph type name without the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphOneOrMany.html#method_getMorphClass",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany::getMorphClass",
		"doc": "Get the class name of the parent model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html#method_setKeysForSaveQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::setKeysForSaveQuery",
		"doc": "Set the keys for a save update query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html#method_setKeysForSelectQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::setKeysForSelectQuery",
		"doc": "Set the keys for a select query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html#method_delete",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::delete",
		"doc": "Delete the pivot model record from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html#method_setMorphType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::setMorphType",
		"doc": "Set the morph type for the pivot."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html#method_setMorphClass",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::setMorphClass",
		"doc": "Set the morph class for the pivot."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html#method_getQueueableId",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::getQueueableId",
		"doc": "Get the queueable identity for the entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html#method_newQueryForRestoration",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::newQueryForRestoration",
		"doc": "Get a new query to restore one or more models by their queueable IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphPivot.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphPivot.html#method_newQueryForCollectionRestoration",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphPivot::newQueryForCollectionRestoration",
		"doc": "Get a new query to restore multiple models by their queueable IDs."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::__construct",
		"doc": "Create a new morph to relationship instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_addEagerConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::addEagerConstraints",
		"doc": "Set the constraints for an eager load of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_buildDictionary",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::buildDictionary",
		"doc": "Build a dictionary with the models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_getEager",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::getEager",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_getResultsByType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::getResultsByType",
		"doc": "Get all of the relation results for a type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_gatherKeysByType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::gatherKeysByType",
		"doc": "Gather all of the foreign keys for a given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_createModelByType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::createModelByType",
		"doc": "Create a new model instance by type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::match",
		"doc": "Match the eagerly loaded results to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_matchToMorphParents",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::matchToMorphParents",
		"doc": "Match the results for a given type to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_associate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::associate",
		"doc": "Associate the model instance to the given parent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_dissociate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::dissociate",
		"doc": "Dissociate previously associated model from the given parent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_touch",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::touch",
		"doc": "Touch all of the related models for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_newRelatedInstanceFor",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::newRelatedInstanceFor",
		"doc": "Make a new related instance for the given model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_getMorphType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::getMorphType",
		"doc": "Get the foreign key \"type\" name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_getDictionary",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::getDictionary",
		"doc": "Get the dictionary used by the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_morphWith",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::morphWith",
		"doc": "Specify which relations to load for a given morph type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_morphWithCount",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::morphWithCount",
		"doc": "Specify which relationship counts to load for a given morph type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_constrain",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::constrain",
		"doc": "Specify constraints on the query for a given morph types."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method_replayMacros",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::replayMacros",
		"doc": "Replay stored macro calls on the actual related instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphTo.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphTo.html#method___call",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphTo::__call",
		"doc": "Handle dynamic method calls to the relationship."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::__construct",
		"doc": "Create a new morph to many relationship instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_addWhereConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::addWhereConstraints",
		"doc": "Set the where clause for the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_addEagerConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::addEagerConstraints",
		"doc": "Set the constraints for an eager load of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_baseAttachRecord",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::baseAttachRecord",
		"doc": "Create a new pivot attachment record."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_getRelationExistenceQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::getRelationExistenceQuery",
		"doc": "Add the constraints for a relationship count query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_getCurrentlyAttachedPivots",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::getCurrentlyAttachedPivots",
		"doc": "Get the pivot models that are currently attached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_newPivotQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::newPivotQuery",
		"doc": "Create a new query builder for the pivot table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_newPivot",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::newPivot",
		"doc": "Create a new pivot model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_aliasedPivotColumns",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::aliasedPivotColumns",
		"doc": "Get the pivot columns for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_getMorphType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::getMorphType",
		"doc": "Get the foreign key \"type\" name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_getMorphClass",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::getMorphClass",
		"doc": "Get the class name of the parent model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
		"fromLink": "Illuminate/Database/Eloquent/Relations/MorphToMany.html",
		"link": "Illuminate/Database/Eloquent/Relations/MorphToMany.html#method_getInverse",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\MorphToMany::getInverse",
		"doc": "Get the indicator for a reverse relationship."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/Pivot.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Pivot",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations",
		"fromLink": "Illuminate/Database/Eloquent/Relations.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method___construct",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::__construct",
		"doc": "Create a new relation instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_noConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::noConstraints",
		"doc": "Run a callback with constraints disabled on the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_addConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::addConstraints",
		"doc": "Set the base constraints on the relation query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_addEagerConstraints",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::addEagerConstraints",
		"doc": "Set the constraints for an eager load of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_initRelation",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::initRelation",
		"doc": "Initialize the relation on a set of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_match",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::match",
		"doc": "Match the eagerly loaded results to their parents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getResults",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getResults",
		"doc": "Get the results of the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getEager",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getEager",
		"doc": "Get the relationship for eager loading."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_get",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::get",
		"doc": "Execute the query as a \"select\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_touch",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::touch",
		"doc": "Touch all of the related models for the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_rawUpdate",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::rawUpdate",
		"doc": "Run a raw update against the base query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getRelationExistenceCountQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getRelationExistenceCountQuery",
		"doc": "Add the constraints for a relationship count query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getRelationExistenceQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getRelationExistenceQuery",
		"doc": "Add the constraints for an internal relationship existence query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getKeys",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getKeys",
		"doc": "Get all of the primary keys for an array of models."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getQuery",
		"doc": "Get the underlying query for the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getBaseQuery",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getBaseQuery",
		"doc": "Get the base query builder driving the Eloquent builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getParent",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getParent",
		"doc": "Get the parent model of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getQualifiedParentKeyName",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getQualifiedParentKeyName",
		"doc": "Get the fully qualified parent key name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getRelated",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getRelated",
		"doc": "Get the related model of the relation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_createdAt",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::createdAt",
		"doc": "Get the name of the \"created at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_updatedAt",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::updatedAt",
		"doc": "Get the name of the \"updated at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_relatedUpdatedAt",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::relatedUpdatedAt",
		"doc": "Get the name of the related model's \"updated at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_whereInMethod",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::whereInMethod",
		"doc": "Get the name of the \"where in\" method for eager loading."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_morphMap",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::morphMap",
		"doc": "Set or get the morph map for polymorphic relations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_tableNameAsMorphType",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::tableNameAsMorphType",
		"doc": "Specifies that the morph types should be table names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_buildMorphMapFromModels",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::buildMorphMapFromModels",
		"doc": "Builds a table-keyed array from model class names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method_getMorphedModel",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::getMorphedModel",
		"doc": "Get the model associated with a custom polymorphic type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method___call",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::__call",
		"doc": "Handle dynamic method calls to the relationship."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Relations\\Relation",
		"fromLink": "Illuminate/Database/Eloquent/Relations/Relation.html",
		"link": "Illuminate/Database/Eloquent/Relations/Relation.html#method___clone",
		"name": "Illuminate\\Database\\Eloquent\\Relations\\Relation::__clone",
		"doc": "Force a clone of the underlying query builder when cloning."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/Scope.html",
		"name": "Illuminate\\Database\\Eloquent\\Scope",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\Scope",
		"fromLink": "Illuminate/Database/Eloquent/Scope.html",
		"link": "Illuminate/Database/Eloquent/Scope.html#method_apply",
		"name": "Illuminate\\Database\\Eloquent\\Scope::apply",
		"doc": "Apply the scope to a given Eloquent query builder."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_bootSoftDeletes",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::bootSoftDeletes",
		"doc": "Boot the soft deleting trait for a model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_initializeSoftDeletes",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::initializeSoftDeletes",
		"doc": "Initialize the soft deleting trait for an instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_forceDelete",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::forceDelete",
		"doc": "Force a hard delete on a soft deleted model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_performDeleteOnModel",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::performDeleteOnModel",
		"doc": "Perform the actual delete query on this model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_runSoftDelete",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::runSoftDelete",
		"doc": "Perform the actual delete query on this model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_restore",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::restore",
		"doc": "Restore a soft-deleted model instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_trashed",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::trashed",
		"doc": "Determine if the model instance has been soft-deleted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_restoring",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::restoring",
		"doc": "Register a \"restoring\" model event callback with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_restored",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::restored",
		"doc": "Register a \"restored\" model event callback with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_forceDeleted",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::forceDeleted",
		"doc": "Register a \"forceDeleted\" model event callback with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_isForceDeleting",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::isForceDeleting",
		"doc": "Determine if the model is currently force deleting."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_getDeletedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::getDeletedAtColumn",
		"doc": "Get the name of the \"deleted at\" column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletes",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletes.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletes.html#method_getQualifiedDeletedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletes::getQualifiedDeletedAtColumn",
		"doc": "Get the fully qualified \"deleted at\" column."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Eloquent",
		"fromLink": "Illuminate/Database/Eloquent.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletingScope.html",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletingScope",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletingScope",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletingScope.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletingScope.html#method_apply",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletingScope::apply",
		"doc": "Apply the scope to a given Eloquent query builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletingScope",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletingScope.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletingScope.html#method_extend",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletingScope::extend",
		"doc": "Extend the query builder with the needed functions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletingScope",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletingScope.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletingScope.html#method_getDeletedAtColumn",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletingScope::getDeletedAtColumn",
		"doc": "Get the \"deleted at\" column for the builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletingScope",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletingScope.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletingScope.html#method_addRestore",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletingScope::addRestore",
		"doc": "Add the restore extension to the builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletingScope",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletingScope.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletingScope.html#method_addWithTrashed",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletingScope::addWithTrashed",
		"doc": "Add the with-trashed extension to the builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletingScope",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletingScope.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletingScope.html#method_addWithoutTrashed",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletingScope::addWithoutTrashed",
		"doc": "Add the without-trashed extension to the builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Eloquent\\SoftDeletingScope",
		"fromLink": "Illuminate/Database/Eloquent/SoftDeletingScope.html",
		"link": "Illuminate/Database/Eloquent/SoftDeletingScope.html#method_addOnlyTrashed",
		"name": "Illuminate\\Database\\Eloquent\\SoftDeletingScope::addOnlyTrashed",
		"doc": "Add the only-trashed extension to the builder."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/ConnectionEvent.html",
		"name": "Illuminate\\Database\\Events\\ConnectionEvent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Events\\ConnectionEvent",
		"fromLink": "Illuminate/Database/Events/ConnectionEvent.html",
		"link": "Illuminate/Database/Events/ConnectionEvent.html#method___construct",
		"name": "Illuminate\\Database\\Events\\ConnectionEvent::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/DatabaseRefreshed.html",
		"name": "Illuminate\\Database\\Events\\DatabaseRefreshed",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/MigrationEnded.html",
		"name": "Illuminate\\Database\\Events\\MigrationEnded",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/MigrationEvent.html",
		"name": "Illuminate\\Database\\Events\\MigrationEvent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Events\\MigrationEvent",
		"fromLink": "Illuminate/Database/Events/MigrationEvent.html",
		"link": "Illuminate/Database/Events/MigrationEvent.html#method___construct",
		"name": "Illuminate\\Database\\Events\\MigrationEvent::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/MigrationStarted.html",
		"name": "Illuminate\\Database\\Events\\MigrationStarted",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/MigrationsEnded.html",
		"name": "Illuminate\\Database\\Events\\MigrationsEnded",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/MigrationsStarted.html",
		"name": "Illuminate\\Database\\Events\\MigrationsStarted",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/NoPendingMigrations.html",
		"name": "Illuminate\\Database\\Events\\NoPendingMigrations",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Events\\NoPendingMigrations",
		"fromLink": "Illuminate/Database/Events/NoPendingMigrations.html",
		"link": "Illuminate/Database/Events/NoPendingMigrations.html#method___construct",
		"name": "Illuminate\\Database\\Events\\NoPendingMigrations::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/QueryExecuted.html",
		"name": "Illuminate\\Database\\Events\\QueryExecuted",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Events\\QueryExecuted",
		"fromLink": "Illuminate/Database/Events/QueryExecuted.html",
		"link": "Illuminate/Database/Events/QueryExecuted.html#method___construct",
		"name": "Illuminate\\Database\\Events\\QueryExecuted::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/SchemaDumped.html",
		"name": "Illuminate\\Database\\Events\\SchemaDumped",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Events\\SchemaDumped",
		"fromLink": "Illuminate/Database/Events/SchemaDumped.html",
		"link": "Illuminate/Database/Events/SchemaDumped.html#method___construct",
		"name": "Illuminate\\Database\\Events\\SchemaDumped::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/SchemaLoaded.html",
		"name": "Illuminate\\Database\\Events\\SchemaLoaded",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Events\\SchemaLoaded",
		"fromLink": "Illuminate/Database/Events/SchemaLoaded.html",
		"link": "Illuminate/Database/Events/SchemaLoaded.html#method___construct",
		"name": "Illuminate\\Database\\Events\\SchemaLoaded::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/StatementPrepared.html",
		"name": "Illuminate\\Database\\Events\\StatementPrepared",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Events\\StatementPrepared",
		"fromLink": "Illuminate/Database/Events/StatementPrepared.html",
		"link": "Illuminate/Database/Events/StatementPrepared.html#method___construct",
		"name": "Illuminate\\Database\\Events\\StatementPrepared::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/TransactionBeginning.html",
		"name": "Illuminate\\Database\\Events\\TransactionBeginning",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/TransactionCommitted.html",
		"name": "Illuminate\\Database\\Events\\TransactionCommitted",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Events",
		"fromLink": "Illuminate/Database/Events.html",
		"link": "Illuminate/Database/Events/TransactionRolledBack.html",
		"name": "Illuminate\\Database\\Events\\TransactionRolledBack",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/Grammar.html",
		"name": "Illuminate\\Database\\Grammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_wrapArray",
		"name": "Illuminate\\Database\\Grammar::wrapArray",
		"doc": "Wrap an array of values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_wrapTable",
		"name": "Illuminate\\Database\\Grammar::wrapTable",
		"doc": "Wrap a table in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_wrap",
		"name": "Illuminate\\Database\\Grammar::wrap",
		"doc": "Wrap a value in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_wrapAliasedValue",
		"name": "Illuminate\\Database\\Grammar::wrapAliasedValue",
		"doc": "Wrap a value that has an alias."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_wrapSegments",
		"name": "Illuminate\\Database\\Grammar::wrapSegments",
		"doc": "Wrap the given value segments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_wrapValue",
		"name": "Illuminate\\Database\\Grammar::wrapValue",
		"doc": "Wrap a single string in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_columnize",
		"name": "Illuminate\\Database\\Grammar::columnize",
		"doc": "Convert an array of column names into a delimited string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_parameterize",
		"name": "Illuminate\\Database\\Grammar::parameterize",
		"doc": "Create query parameter place-holders for an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_parameter",
		"name": "Illuminate\\Database\\Grammar::parameter",
		"doc": "Get the appropriate query parameter place-holder for a value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_quoteString",
		"name": "Illuminate\\Database\\Grammar::quoteString",
		"doc": "Quote the given string literal."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_isExpression",
		"name": "Illuminate\\Database\\Grammar::isExpression",
		"doc": "Determine if the given value is a raw expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_getValue",
		"name": "Illuminate\\Database\\Grammar::getValue",
		"doc": "Get the value of a raw expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_getDateFormat",
		"name": "Illuminate\\Database\\Grammar::getDateFormat",
		"doc": "Get the format for database stored dates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_getTablePrefix",
		"name": "Illuminate\\Database\\Grammar::getTablePrefix",
		"doc": "Get the grammar's table prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Grammar",
		"fromLink": "Illuminate/Database/Grammar.html",
		"link": "Illuminate/Database/Grammar.html#method_setTablePrefix",
		"name": "Illuminate\\Database\\Grammar::setTablePrefix",
		"doc": "Set the grammar's table prefix."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html",
		"name": "Illuminate\\Database\\MigrationServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_register",
		"name": "Illuminate\\Database\\MigrationServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerRepository",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerRepository",
		"doc": "Register the migration repository service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrator",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrator",
		"doc": "Register the migrator service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerCreator",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerCreator",
		"doc": "Register the migration creator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerCommands",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerCommands",
		"doc": "Register the given commands."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrateCommand",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrateCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrateFreshCommand",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrateFreshCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrateInstallCommand",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrateInstallCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrateMakeCommand",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrateMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrateRefreshCommand",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrateRefreshCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrateResetCommand",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrateResetCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrateRollbackCommand",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrateRollbackCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_registerMigrateStatusCommand",
		"name": "Illuminate\\Database\\MigrationServiceProvider::registerMigrateStatusCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MigrationServiceProvider",
		"fromLink": "Illuminate/Database/MigrationServiceProvider.html",
		"link": "Illuminate/Database/MigrationServiceProvider.html#method_provides",
		"name": "Illuminate\\Database\\MigrationServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Migrations",
		"fromLink": "Illuminate/Database/Migrations.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method___construct",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::__construct",
		"doc": "Create a new database migration repository instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_getRan",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::getRan",
		"doc": "Get the completed migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_getMigrations",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::getMigrations",
		"doc": "Get list of migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_getLast",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::getLast",
		"doc": "Get the last migration batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_getMigrationBatches",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::getMigrationBatches",
		"doc": "Get the completed migrations with their batch numbers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_log",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::log",
		"doc": "Log that a migration was run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_delete",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::delete",
		"doc": "Remove a migration from the log."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_getNextBatchNumber",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::getNextBatchNumber",
		"doc": "Get the next migration batch number."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_getLastBatchNumber",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::getLastBatchNumber",
		"doc": "Get the last migration batch number."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_createRepository",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::createRepository",
		"doc": "Create the migration repository data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_repositoryExists",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::repositoryExists",
		"doc": "Determine if the migration repository exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_deleteRepository",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::deleteRepository",
		"doc": "Delete the migration repository data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_table",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::table",
		"doc": "Get a query builder for the migration table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_getConnectionResolver",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::getConnectionResolver",
		"doc": "Get the connection resolver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_getConnection",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::getConnection",
		"doc": "Resolve the database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository",
		"fromLink": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html",
		"link": "Illuminate/Database/Migrations/DatabaseMigrationRepository.html#method_setSource",
		"name": "Illuminate\\Database\\Migrations\\DatabaseMigrationRepository::setSource",
		"doc": "Set the information source to gather data."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Migrations",
		"fromLink": "Illuminate/Database/Migrations.html",
		"link": "Illuminate/Database/Migrations/Migration.html",
		"name": "Illuminate\\Database\\Migrations\\Migration",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migration",
		"fromLink": "Illuminate/Database/Migrations/Migration.html",
		"link": "Illuminate/Database/Migrations/Migration.html#method_getConnection",
		"name": "Illuminate\\Database\\Migrations\\Migration::getConnection",
		"doc": "Get the migration connection name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Migrations",
		"fromLink": "Illuminate/Database/Migrations.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method___construct",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::__construct",
		"doc": "Create a new migration creator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_create",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::create",
		"doc": "Create a new migration at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_ensureMigrationDoesntAlreadyExist",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::ensureMigrationDoesntAlreadyExist",
		"doc": "Ensure that a migration with the given name doesn't already exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_getStub",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::getStub",
		"doc": "Get the migration stub file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_populateStub",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::populateStub",
		"doc": "Populate the place-holders in the migration stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_getClassName",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::getClassName",
		"doc": "Get the class name of a migration name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_getPath",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::getPath",
		"doc": "Get the full path to the migration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_firePostCreateHooks",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::firePostCreateHooks",
		"doc": "Fire the registered post create hooks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_afterCreate",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::afterCreate",
		"doc": "Register a post migration create hook."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_getDatePrefix",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::getDatePrefix",
		"doc": "Get the date prefix for the migration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_stubPath",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::stubPath",
		"doc": "Get the path to the stubs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationCreator",
		"fromLink": "Illuminate/Database/Migrations/MigrationCreator.html",
		"link": "Illuminate/Database/Migrations/MigrationCreator.html#method_getFilesystem",
		"name": "Illuminate\\Database\\Migrations\\MigrationCreator::getFilesystem",
		"doc": "Get the filesystem instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Migrations",
		"fromLink": "Illuminate/Database/Migrations.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getRan",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getRan",
		"doc": "Get the completed migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getMigrations",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getMigrations",
		"doc": "Get list of migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getLast",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getLast",
		"doc": "Get the last migration batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getMigrationBatches",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getMigrationBatches",
		"doc": "Get the completed migrations with their batch numbers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_log",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::log",
		"doc": "Log that a migration was run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_delete",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::delete",
		"doc": "Remove a migration from the log."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_getNextBatchNumber",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::getNextBatchNumber",
		"doc": "Get the next migration batch number."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_createRepository",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::createRepository",
		"doc": "Create the migration repository data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_repositoryExists",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::repositoryExists",
		"doc": "Determine if the migration repository exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_deleteRepository",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::deleteRepository",
		"doc": "Delete the migration repository data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface",
		"fromLink": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html",
		"link": "Illuminate/Database/Migrations/MigrationRepositoryInterface.html#method_setSource",
		"name": "Illuminate\\Database\\Migrations\\MigrationRepositoryInterface::setSource",
		"doc": "Set the information source to gather data."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Migrations",
		"fromLink": "Illuminate/Database/Migrations.html",
		"link": "Illuminate/Database/Migrations/Migrator.html",
		"name": "Illuminate\\Database\\Migrations\\Migrator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method___construct",
		"name": "Illuminate\\Database\\Migrations\\Migrator::__construct",
		"doc": "Create a new migrator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_run",
		"name": "Illuminate\\Database\\Migrations\\Migrator::run",
		"doc": "Run the pending migrations at a given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_pendingMigrations",
		"name": "Illuminate\\Database\\Migrations\\Migrator::pendingMigrations",
		"doc": "Get the migration files that have not yet run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_runPending",
		"name": "Illuminate\\Database\\Migrations\\Migrator::runPending",
		"doc": "Run an array of migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_runUp",
		"name": "Illuminate\\Database\\Migrations\\Migrator::runUp",
		"doc": "Run \"up\" a migration instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_rollback",
		"name": "Illuminate\\Database\\Migrations\\Migrator::rollback",
		"doc": "Rollback the last migration operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_getMigrationsForRollback",
		"name": "Illuminate\\Database\\Migrations\\Migrator::getMigrationsForRollback",
		"doc": "Get the migrations for a rollback operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_rollbackMigrations",
		"name": "Illuminate\\Database\\Migrations\\Migrator::rollbackMigrations",
		"doc": "Rollback the given migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_reset",
		"name": "Illuminate\\Database\\Migrations\\Migrator::reset",
		"doc": "Rolls all of the currently applied migrations back."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_resetMigrations",
		"name": "Illuminate\\Database\\Migrations\\Migrator::resetMigrations",
		"doc": "Reset the given migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_runDown",
		"name": "Illuminate\\Database\\Migrations\\Migrator::runDown",
		"doc": "Run \"down\" a migration instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_runMigration",
		"name": "Illuminate\\Database\\Migrations\\Migrator::runMigration",
		"doc": "Run a migration inside a transaction if the database supports it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_pretendToRun",
		"name": "Illuminate\\Database\\Migrations\\Migrator::pretendToRun",
		"doc": "Pretend to run the migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_getQueries",
		"name": "Illuminate\\Database\\Migrations\\Migrator::getQueries",
		"doc": "Get all of the queries that would be run for a migration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_resolve",
		"name": "Illuminate\\Database\\Migrations\\Migrator::resolve",
		"doc": "Resolve a migration instance from a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_getMigrationFiles",
		"name": "Illuminate\\Database\\Migrations\\Migrator::getMigrationFiles",
		"doc": "Get all of the migration files in a given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_requireFiles",
		"name": "Illuminate\\Database\\Migrations\\Migrator::requireFiles",
		"doc": "Require in all the migration files in a given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_getMigrationName",
		"name": "Illuminate\\Database\\Migrations\\Migrator::getMigrationName",
		"doc": "Get the name of the migration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_path",
		"name": "Illuminate\\Database\\Migrations\\Migrator::path",
		"doc": "Register a custom migration path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_paths",
		"name": "Illuminate\\Database\\Migrations\\Migrator::paths",
		"doc": "Get all of the custom migration paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_getConnection",
		"name": "Illuminate\\Database\\Migrations\\Migrator::getConnection",
		"doc": "Get the default connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_usingConnection",
		"name": "Illuminate\\Database\\Migrations\\Migrator::usingConnection",
		"doc": "Execute the given callback using the given connection as the default connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_setConnection",
		"name": "Illuminate\\Database\\Migrations\\Migrator::setConnection",
		"doc": "Set the default connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_resolveConnection",
		"name": "Illuminate\\Database\\Migrations\\Migrator::resolveConnection",
		"doc": "Resolve the database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_getSchemaGrammar",
		"name": "Illuminate\\Database\\Migrations\\Migrator::getSchemaGrammar",
		"doc": "Get the schema grammar out of a migration connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_getRepository",
		"name": "Illuminate\\Database\\Migrations\\Migrator::getRepository",
		"doc": "Get the migration repository instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_repositoryExists",
		"name": "Illuminate\\Database\\Migrations\\Migrator::repositoryExists",
		"doc": "Determine if the migration repository exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_hasRunAnyMigrations",
		"name": "Illuminate\\Database\\Migrations\\Migrator::hasRunAnyMigrations",
		"doc": "Determine if any migrations have been run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_deleteRepository",
		"name": "Illuminate\\Database\\Migrations\\Migrator::deleteRepository",
		"doc": "Delete the migration repository data store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_getFilesystem",
		"name": "Illuminate\\Database\\Migrations\\Migrator::getFilesystem",
		"doc": "Get the file system instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_setOutput",
		"name": "Illuminate\\Database\\Migrations\\Migrator::setOutput",
		"doc": "Set the output implementation that should be used by the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_note",
		"name": "Illuminate\\Database\\Migrations\\Migrator::note",
		"doc": "Write a note to the console's output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Migrations\\Migrator",
		"fromLink": "Illuminate/Database/Migrations/Migrator.html",
		"link": "Illuminate/Database/Migrations/Migrator.html#method_fireMigrationEvent",
		"name": "Illuminate\\Database\\Migrations\\Migrator::fireMigrationEvent",
		"doc": "Fire the given event for the migration."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/MySqlConnection.html",
		"name": "Illuminate\\Database\\MySqlConnection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MySqlConnection",
		"fromLink": "Illuminate/Database/MySqlConnection.html",
		"link": "Illuminate/Database/MySqlConnection.html#method_isMaria",
		"name": "Illuminate\\Database\\MySqlConnection::isMaria",
		"doc": "Determine if the connected database is a MariaDB database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MySqlConnection",
		"fromLink": "Illuminate/Database/MySqlConnection.html",
		"link": "Illuminate/Database/MySqlConnection.html#method_getDefaultQueryGrammar",
		"name": "Illuminate\\Database\\MySqlConnection::getDefaultQueryGrammar",
		"doc": "Get the default query grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MySqlConnection",
		"fromLink": "Illuminate/Database/MySqlConnection.html",
		"link": "Illuminate/Database/MySqlConnection.html#method_getSchemaBuilder",
		"name": "Illuminate\\Database\\MySqlConnection::getSchemaBuilder",
		"doc": "Get a schema builder instance for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MySqlConnection",
		"fromLink": "Illuminate/Database/MySqlConnection.html",
		"link": "Illuminate/Database/MySqlConnection.html#method_getDefaultSchemaGrammar",
		"name": "Illuminate\\Database\\MySqlConnection::getDefaultSchemaGrammar",
		"doc": "Get the default schema grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MySqlConnection",
		"fromLink": "Illuminate/Database/MySqlConnection.html",
		"link": "Illuminate/Database/MySqlConnection.html#method_getSchemaState",
		"name": "Illuminate\\Database\\MySqlConnection::getSchemaState",
		"doc": "Get the schema state for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MySqlConnection",
		"fromLink": "Illuminate/Database/MySqlConnection.html",
		"link": "Illuminate/Database/MySqlConnection.html#method_getDefaultPostProcessor",
		"name": "Illuminate\\Database\\MySqlConnection::getDefaultPostProcessor",
		"doc": "Get the default post processor instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\MySqlConnection",
		"fromLink": "Illuminate/Database/MySqlConnection.html",
		"link": "Illuminate/Database/MySqlConnection.html#method_getDoctrineDriver",
		"name": "Illuminate\\Database\\MySqlConnection::getDoctrineDriver",
		"doc": "Get the Doctrine DBAL driver."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Database\\PDO\\Concerns",
		"fromLink": "Illuminate/Database/PDO/Concerns.html",
		"link": "Illuminate/Database/PDO/Concerns/ConnectsToDatabase.html",
		"name": "Illuminate\\Database\\PDO\\Concerns\\ConnectsToDatabase",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Concerns\\ConnectsToDatabase",
		"fromLink": "Illuminate/Database/PDO/Concerns/ConnectsToDatabase.html",
		"link": "Illuminate/Database/PDO/Concerns/ConnectsToDatabase.html#method_connect",
		"name": "Illuminate\\Database\\PDO\\Concerns\\ConnectsToDatabase::connect",
		"doc": "Create a new database connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\PDO",
		"fromLink": "Illuminate/Database/PDO.html",
		"link": "Illuminate/Database/PDO/Connection.html",
		"name": "Illuminate\\Database\\PDO\\Connection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method___construct",
		"name": "Illuminate\\Database\\PDO\\Connection::__construct",
		"doc": "Create a new PDO connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_exec",
		"name": "Illuminate\\Database\\PDO\\Connection::exec",
		"doc": "Execute an SQL statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_prepare",
		"name": "Illuminate\\Database\\PDO\\Connection::prepare",
		"doc": "Prepare a new SQL statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_query",
		"name": "Illuminate\\Database\\PDO\\Connection::query",
		"doc": "Execute a new query against the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_lastInsertId",
		"name": "Illuminate\\Database\\PDO\\Connection::lastInsertId",
		"doc": "Get the last insert ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_createStatement",
		"name": "Illuminate\\Database\\PDO\\Connection::createStatement",
		"doc": "Create a new statement instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_beginTransaction",
		"name": "Illuminate\\Database\\PDO\\Connection::beginTransaction",
		"doc": "Begin a new database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_commit",
		"name": "Illuminate\\Database\\PDO\\Connection::commit",
		"doc": "Commit a database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_rollBack",
		"name": "Illuminate\\Database\\PDO\\Connection::rollBack",
		"doc": "Roll back a database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_quote",
		"name": "Illuminate\\Database\\PDO\\Connection::quote",
		"doc": "Wrap quotes around the given input."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_getServerVersion",
		"name": "Illuminate\\Database\\PDO\\Connection::getServerVersion",
		"doc": "Get the server version for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\Connection",
		"fromLink": "Illuminate/Database/PDO/Connection.html",
		"link": "Illuminate/Database/PDO/Connection.html#method_getWrappedConnection",
		"name": "Illuminate\\Database\\PDO\\Connection::getWrappedConnection",
		"doc": "Get the wrapped PDO connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\PDO",
		"fromLink": "Illuminate/Database/PDO.html",
		"link": "Illuminate/Database/PDO/MySqlDriver.html",
		"name": "Illuminate\\Database\\PDO\\MySqlDriver",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\PDO",
		"fromLink": "Illuminate/Database/PDO.html",
		"link": "Illuminate/Database/PDO/PostgresDriver.html",
		"name": "Illuminate\\Database\\PDO\\PostgresDriver",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\PDO",
		"fromLink": "Illuminate/Database/PDO.html",
		"link": "Illuminate/Database/PDO/SQLiteDriver.html",
		"name": "Illuminate\\Database\\PDO\\SQLiteDriver",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\PDO",
		"fromLink": "Illuminate/Database/PDO.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method___construct",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::__construct",
		"doc": "Create a new SQL Server connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_prepare",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::prepare",
		"doc": "Prepare a new SQL statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_query",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::query",
		"doc": "Execute a new query against the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_exec",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::exec",
		"doc": "Execute an SQL statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_lastInsertId",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::lastInsertId",
		"doc": "Get the last insert ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_beginTransaction",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::beginTransaction",
		"doc": "Begin a new database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_commit",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::commit",
		"doc": "Commit a database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_rollBack",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::rollBack",
		"doc": "Roll back a database transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_quote",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::quote",
		"doc": "Wrap quotes around the given input."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_getServerVersion",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::getServerVersion",
		"doc": "Get the server version for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerConnection",
		"fromLink": "Illuminate/Database/PDO/SqlServerConnection.html",
		"link": "Illuminate/Database/PDO/SqlServerConnection.html#method_getWrappedConnection",
		"name": "Illuminate\\Database\\PDO\\SqlServerConnection::getWrappedConnection",
		"doc": "Get the wrapped PDO connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\PDO",
		"fromLink": "Illuminate/Database/PDO.html",
		"link": "Illuminate/Database/PDO/SqlServerDriver.html",
		"name": "Illuminate\\Database\\PDO\\SqlServerDriver",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PDO\\SqlServerDriver",
		"fromLink": "Illuminate/Database/PDO/SqlServerDriver.html",
		"link": "Illuminate/Database/PDO/SqlServerDriver.html#method_connect",
		"name": "Illuminate\\Database\\PDO\\SqlServerDriver::connect",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/PostgresConnection.html",
		"name": "Illuminate\\Database\\PostgresConnection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PostgresConnection",
		"fromLink": "Illuminate/Database/PostgresConnection.html",
		"link": "Illuminate/Database/PostgresConnection.html#method_bindValues",
		"name": "Illuminate\\Database\\PostgresConnection::bindValues",
		"doc": "Bind values to their parameters in the given statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PostgresConnection",
		"fromLink": "Illuminate/Database/PostgresConnection.html",
		"link": "Illuminate/Database/PostgresConnection.html#method_getDefaultQueryGrammar",
		"name": "Illuminate\\Database\\PostgresConnection::getDefaultQueryGrammar",
		"doc": "Get the default query grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PostgresConnection",
		"fromLink": "Illuminate/Database/PostgresConnection.html",
		"link": "Illuminate/Database/PostgresConnection.html#method_getSchemaBuilder",
		"name": "Illuminate\\Database\\PostgresConnection::getSchemaBuilder",
		"doc": "Get a schema builder instance for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PostgresConnection",
		"fromLink": "Illuminate/Database/PostgresConnection.html",
		"link": "Illuminate/Database/PostgresConnection.html#method_getDefaultSchemaGrammar",
		"name": "Illuminate\\Database\\PostgresConnection::getDefaultSchemaGrammar",
		"doc": "Get the default schema grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PostgresConnection",
		"fromLink": "Illuminate/Database/PostgresConnection.html",
		"link": "Illuminate/Database/PostgresConnection.html#method_getSchemaState",
		"name": "Illuminate\\Database\\PostgresConnection::getSchemaState",
		"doc": "Get the schema state for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PostgresConnection",
		"fromLink": "Illuminate/Database/PostgresConnection.html",
		"link": "Illuminate/Database/PostgresConnection.html#method_getDefaultPostProcessor",
		"name": "Illuminate\\Database\\PostgresConnection::getDefaultPostProcessor",
		"doc": "Get the default post processor instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\PostgresConnection",
		"fromLink": "Illuminate/Database/PostgresConnection.html",
		"link": "Illuminate/Database/PostgresConnection.html#method_getDoctrineDriver",
		"name": "Illuminate\\Database\\PostgresConnection::getDoctrineDriver",
		"doc": "Get the Doctrine DBAL driver."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/QueryException.html",
		"name": "Illuminate\\Database\\QueryException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\QueryException",
		"fromLink": "Illuminate/Database/QueryException.html",
		"link": "Illuminate/Database/QueryException.html#method___construct",
		"name": "Illuminate\\Database\\QueryException::__construct",
		"doc": "Create a new query exception instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\QueryException",
		"fromLink": "Illuminate/Database/QueryException.html",
		"link": "Illuminate/Database/QueryException.html#method_formatMessage",
		"name": "Illuminate\\Database\\QueryException::formatMessage",
		"doc": "Format the SQL error message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\QueryException",
		"fromLink": "Illuminate/Database/QueryException.html",
		"link": "Illuminate/Database/QueryException.html#method_getSql",
		"name": "Illuminate\\Database\\QueryException::getSql",
		"doc": "Get the SQL for the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\QueryException",
		"fromLink": "Illuminate/Database/QueryException.html",
		"link": "Illuminate/Database/QueryException.html#method_getBindings",
		"name": "Illuminate\\Database\\QueryException::getBindings",
		"doc": "Get the bindings for the query."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query",
		"fromLink": "Illuminate/Database/Query.html",
		"link": "Illuminate/Database/Query/Builder.html",
		"name": "Illuminate\\Database\\Query\\Builder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method___construct",
		"name": "Illuminate\\Database\\Query\\Builder::__construct",
		"doc": "Create a new query builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_select",
		"name": "Illuminate\\Database\\Query\\Builder::select",
		"doc": "Set the columns to be selected."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_selectSub",
		"name": "Illuminate\\Database\\Query\\Builder::selectSub",
		"doc": "Add a subselect expression to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_selectRaw",
		"name": "Illuminate\\Database\\Query\\Builder::selectRaw",
		"doc": "Add a new \"raw\" select expression to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_fromSub",
		"name": "Illuminate\\Database\\Query\\Builder::fromSub",
		"doc": "Makes \"from\" fetch from a subquery."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_fromRaw",
		"name": "Illuminate\\Database\\Query\\Builder::fromRaw",
		"doc": "Add a raw from clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_createSub",
		"name": "Illuminate\\Database\\Query\\Builder::createSub",
		"doc": "Creates a subquery and parse it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_parseSub",
		"name": "Illuminate\\Database\\Query\\Builder::parseSub",
		"doc": "Parse the subquery into SQL and bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_prependDatabaseNameIfCrossDatabaseQuery",
		"name": "Illuminate\\Database\\Query\\Builder::prependDatabaseNameIfCrossDatabaseQuery",
		"doc": "Prepend the database name if the given query is on another database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_addSelect",
		"name": "Illuminate\\Database\\Query\\Builder::addSelect",
		"doc": "Add a new select column to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_distinct",
		"name": "Illuminate\\Database\\Query\\Builder::distinct",
		"doc": "Force the query to only return distinct results."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_from",
		"name": "Illuminate\\Database\\Query\\Builder::from",
		"doc": "Set the table which the query is targeting."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_join",
		"name": "Illuminate\\Database\\Query\\Builder::join",
		"doc": "Add a join clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_joinWhere",
		"name": "Illuminate\\Database\\Query\\Builder::joinWhere",
		"doc": "Add a \"join where\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_joinSub",
		"name": "Illuminate\\Database\\Query\\Builder::joinSub",
		"doc": "Add a subquery join clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_leftJoin",
		"name": "Illuminate\\Database\\Query\\Builder::leftJoin",
		"doc": "Add a left join to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_leftJoinWhere",
		"name": "Illuminate\\Database\\Query\\Builder::leftJoinWhere",
		"doc": "Add a \"join where\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_leftJoinSub",
		"name": "Illuminate\\Database\\Query\\Builder::leftJoinSub",
		"doc": "Add a subquery left join to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_rightJoin",
		"name": "Illuminate\\Database\\Query\\Builder::rightJoin",
		"doc": "Add a right join to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_rightJoinWhere",
		"name": "Illuminate\\Database\\Query\\Builder::rightJoinWhere",
		"doc": "Add a \"right join where\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_rightJoinSub",
		"name": "Illuminate\\Database\\Query\\Builder::rightJoinSub",
		"doc": "Add a subquery right join to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_crossJoin",
		"name": "Illuminate\\Database\\Query\\Builder::crossJoin",
		"doc": "Add a \"cross join\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_crossJoinSub",
		"name": "Illuminate\\Database\\Query\\Builder::crossJoinSub",
		"doc": "Add a subquery cross join to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_newJoinClause",
		"name": "Illuminate\\Database\\Query\\Builder::newJoinClause",
		"doc": "Get a new join clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_mergeWheres",
		"name": "Illuminate\\Database\\Query\\Builder::mergeWheres",
		"doc": "Merge an array of where clauses and bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_where",
		"name": "Illuminate\\Database\\Query\\Builder::where",
		"doc": "Add a basic where clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_addArrayOfWheres",
		"name": "Illuminate\\Database\\Query\\Builder::addArrayOfWheres",
		"doc": "Add an array of where clauses to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_prepareValueAndOperator",
		"name": "Illuminate\\Database\\Query\\Builder::prepareValueAndOperator",
		"doc": "Prepare the value and operator for a where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_invalidOperatorAndValue",
		"name": "Illuminate\\Database\\Query\\Builder::invalidOperatorAndValue",
		"doc": "Determine if the given operator and value combination is legal."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_invalidOperator",
		"name": "Illuminate\\Database\\Query\\Builder::invalidOperator",
		"doc": "Determine if the given operator is supported."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhere",
		"name": "Illuminate\\Database\\Query\\Builder::orWhere",
		"doc": "Add an \"or where\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereColumn",
		"name": "Illuminate\\Database\\Query\\Builder::whereColumn",
		"doc": "Add a \"where\" clause comparing two columns to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereColumn",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereColumn",
		"doc": "Add an \"or where\" clause comparing two columns to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereRaw",
		"name": "Illuminate\\Database\\Query\\Builder::whereRaw",
		"doc": "Add a raw where clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereRaw",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereRaw",
		"doc": "Add a raw or where clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereIn",
		"name": "Illuminate\\Database\\Query\\Builder::whereIn",
		"doc": "Add a \"where in\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereIn",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereIn",
		"doc": "Add an \"or where in\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereNotIn",
		"name": "Illuminate\\Database\\Query\\Builder::whereNotIn",
		"doc": "Add a \"where not in\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereNotIn",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereNotIn",
		"doc": "Add an \"or where not in\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereIntegerInRaw",
		"name": "Illuminate\\Database\\Query\\Builder::whereIntegerInRaw",
		"doc": "Add a \"where in raw\" clause for integer values to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereIntegerInRaw",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereIntegerInRaw",
		"doc": "Add an \"or where in raw\" clause for integer values to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereIntegerNotInRaw",
		"name": "Illuminate\\Database\\Query\\Builder::whereIntegerNotInRaw",
		"doc": "Add a \"where not in raw\" clause for integer values to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereIntegerNotInRaw",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereIntegerNotInRaw",
		"doc": "Add an \"or where not in raw\" clause for integer values to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereNull",
		"name": "Illuminate\\Database\\Query\\Builder::whereNull",
		"doc": "Add a \"where null\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereNull",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereNull",
		"doc": "Add an \"or where null\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereNotNull",
		"name": "Illuminate\\Database\\Query\\Builder::whereNotNull",
		"doc": "Add a \"where not null\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereBetween",
		"name": "Illuminate\\Database\\Query\\Builder::whereBetween",
		"doc": "Add a where between statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereBetweenColumns",
		"name": "Illuminate\\Database\\Query\\Builder::whereBetweenColumns",
		"doc": "Add a where between statement using columns to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereBetween",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereBetween",
		"doc": "Add an or where between statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereBetweenColumns",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereBetweenColumns",
		"doc": "Add an or where between statement using columns to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereNotBetween",
		"name": "Illuminate\\Database\\Query\\Builder::whereNotBetween",
		"doc": "Add a where not between statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereNotBetweenColumns",
		"name": "Illuminate\\Database\\Query\\Builder::whereNotBetweenColumns",
		"doc": "Add a where not between statement using columns to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereNotBetween",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereNotBetween",
		"doc": "Add an or where not between statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereNotBetweenColumns",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereNotBetweenColumns",
		"doc": "Add an or where not between statement using columns to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereNotNull",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereNotNull",
		"doc": "Add an \"or where not null\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereDate",
		"name": "Illuminate\\Database\\Query\\Builder::whereDate",
		"doc": "Add a \"where date\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereDate",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereDate",
		"doc": "Add an \"or where date\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereTime",
		"name": "Illuminate\\Database\\Query\\Builder::whereTime",
		"doc": "Add a \"where time\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereTime",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereTime",
		"doc": "Add an \"or where time\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereDay",
		"name": "Illuminate\\Database\\Query\\Builder::whereDay",
		"doc": "Add a \"where day\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereDay",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereDay",
		"doc": "Add an \"or where day\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereMonth",
		"name": "Illuminate\\Database\\Query\\Builder::whereMonth",
		"doc": "Add a \"where month\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereMonth",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereMonth",
		"doc": "Add an \"or where month\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereYear",
		"name": "Illuminate\\Database\\Query\\Builder::whereYear",
		"doc": "Add a \"where year\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereYear",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereYear",
		"doc": "Add an \"or where year\" statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_addDateBasedWhere",
		"name": "Illuminate\\Database\\Query\\Builder::addDateBasedWhere",
		"doc": "Add a date based (year, month, day, time) statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereNested",
		"name": "Illuminate\\Database\\Query\\Builder::whereNested",
		"doc": "Add a nested where statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_forNestedWhere",
		"name": "Illuminate\\Database\\Query\\Builder::forNestedWhere",
		"doc": "Create a new query instance for nested where condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_addNestedWhereQuery",
		"name": "Illuminate\\Database\\Query\\Builder::addNestedWhereQuery",
		"doc": "Add another query builder as a nested where to the query builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereSub",
		"name": "Illuminate\\Database\\Query\\Builder::whereSub",
		"doc": "Add a full sub-select to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereExists",
		"name": "Illuminate\\Database\\Query\\Builder::whereExists",
		"doc": "Add an exists clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereExists",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereExists",
		"doc": "Add an or exists clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereNotExists",
		"name": "Illuminate\\Database\\Query\\Builder::whereNotExists",
		"doc": "Add a where not exists clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereNotExists",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereNotExists",
		"doc": "Add a where not exists clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_addWhereExistsQuery",
		"name": "Illuminate\\Database\\Query\\Builder::addWhereExistsQuery",
		"doc": "Add an exists clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereRowValues",
		"name": "Illuminate\\Database\\Query\\Builder::whereRowValues",
		"doc": "Adds a where condition using row values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereRowValues",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereRowValues",
		"doc": "Adds an or where condition using row values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereJsonContains",
		"name": "Illuminate\\Database\\Query\\Builder::whereJsonContains",
		"doc": "Add a \"where JSON contains\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereJsonContains",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereJsonContains",
		"doc": "Add an \"or where JSON contains\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereJsonDoesntContain",
		"name": "Illuminate\\Database\\Query\\Builder::whereJsonDoesntContain",
		"doc": "Add a \"where JSON not contains\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereJsonDoesntContain",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereJsonDoesntContain",
		"doc": "Add an \"or where JSON not contains\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_whereJsonLength",
		"name": "Illuminate\\Database\\Query\\Builder::whereJsonLength",
		"doc": "Add a \"where JSON length\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orWhereJsonLength",
		"name": "Illuminate\\Database\\Query\\Builder::orWhereJsonLength",
		"doc": "Add an \"or where JSON length\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_dynamicWhere",
		"name": "Illuminate\\Database\\Query\\Builder::dynamicWhere",
		"doc": "Handles dynamic \"where\" clauses to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_addDynamic",
		"name": "Illuminate\\Database\\Query\\Builder::addDynamic",
		"doc": "Add a single dynamic where clause statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_groupBy",
		"name": "Illuminate\\Database\\Query\\Builder::groupBy",
		"doc": "Add a \"group by\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_groupByRaw",
		"name": "Illuminate\\Database\\Query\\Builder::groupByRaw",
		"doc": "Add a raw groupBy clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_having",
		"name": "Illuminate\\Database\\Query\\Builder::having",
		"doc": "Add a \"having\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orHaving",
		"name": "Illuminate\\Database\\Query\\Builder::orHaving",
		"doc": "Add an \"or having\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_havingBetween",
		"name": "Illuminate\\Database\\Query\\Builder::havingBetween",
		"doc": "Add a \"having between \" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_havingRaw",
		"name": "Illuminate\\Database\\Query\\Builder::havingRaw",
		"doc": "Add a raw having clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orHavingRaw",
		"name": "Illuminate\\Database\\Query\\Builder::orHavingRaw",
		"doc": "Add a raw or having clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orderBy",
		"name": "Illuminate\\Database\\Query\\Builder::orderBy",
		"doc": "Add an \"order by\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orderByDesc",
		"name": "Illuminate\\Database\\Query\\Builder::orderByDesc",
		"doc": "Add a descending \"order by\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_latest",
		"name": "Illuminate\\Database\\Query\\Builder::latest",
		"doc": "Add an \"order by\" clause for a timestamp to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_oldest",
		"name": "Illuminate\\Database\\Query\\Builder::oldest",
		"doc": "Add an \"order by\" clause for a timestamp to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_inRandomOrder",
		"name": "Illuminate\\Database\\Query\\Builder::inRandomOrder",
		"doc": "Put the query's results in random order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_orderByRaw",
		"name": "Illuminate\\Database\\Query\\Builder::orderByRaw",
		"doc": "Add a raw \"order by\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_skip",
		"name": "Illuminate\\Database\\Query\\Builder::skip",
		"doc": "Alias to set the \"offset\" value of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_offset",
		"name": "Illuminate\\Database\\Query\\Builder::offset",
		"doc": "Set the \"offset\" value of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_take",
		"name": "Illuminate\\Database\\Query\\Builder::take",
		"doc": "Alias to set the \"limit\" value of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_limit",
		"name": "Illuminate\\Database\\Query\\Builder::limit",
		"doc": "Set the \"limit\" value of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_forPage",
		"name": "Illuminate\\Database\\Query\\Builder::forPage",
		"doc": "Set the limit and offset for a given page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_forPageBeforeId",
		"name": "Illuminate\\Database\\Query\\Builder::forPageBeforeId",
		"doc": "Constrain the query to the previous \"page\" of results before a given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_forPageAfterId",
		"name": "Illuminate\\Database\\Query\\Builder::forPageAfterId",
		"doc": "Constrain the query to the next \"page\" of results after a given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_reorder",
		"name": "Illuminate\\Database\\Query\\Builder::reorder",
		"doc": "Remove all existing orders and optionally add a new order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_removeExistingOrdersFor",
		"name": "Illuminate\\Database\\Query\\Builder::removeExistingOrdersFor",
		"doc": "Get an array with all orders with a given column removed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_union",
		"name": "Illuminate\\Database\\Query\\Builder::union",
		"doc": "Add a union statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_unionAll",
		"name": "Illuminate\\Database\\Query\\Builder::unionAll",
		"doc": "Add a union all statement to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_lock",
		"name": "Illuminate\\Database\\Query\\Builder::lock",
		"doc": "Lock the selected rows in the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_lockForUpdate",
		"name": "Illuminate\\Database\\Query\\Builder::lockForUpdate",
		"doc": "Lock the selected rows in the table for updating."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_sharedLock",
		"name": "Illuminate\\Database\\Query\\Builder::sharedLock",
		"doc": "Share lock the selected rows in the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_toSql",
		"name": "Illuminate\\Database\\Query\\Builder::toSql",
		"doc": "Get the SQL representation of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_find",
		"name": "Illuminate\\Database\\Query\\Builder::find",
		"doc": "Execute a query for a single record by ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_value",
		"name": "Illuminate\\Database\\Query\\Builder::value",
		"doc": "Get a single column's value from the first result of a query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_get",
		"name": "Illuminate\\Database\\Query\\Builder::get",
		"doc": "Execute the query as a \"select\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_runSelect",
		"name": "Illuminate\\Database\\Query\\Builder::runSelect",
		"doc": "Run the query as a \"select\" statement against the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_paginate",
		"name": "Illuminate\\Database\\Query\\Builder::paginate",
		"doc": "Paginate the given query into a simple paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_simplePaginate",
		"name": "Illuminate\\Database\\Query\\Builder::simplePaginate",
		"doc": "Get a paginator only supporting simple next and previous links."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_getCountForPagination",
		"name": "Illuminate\\Database\\Query\\Builder::getCountForPagination",
		"doc": "Get the count of the total records for the paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_runPaginationCountQuery",
		"name": "Illuminate\\Database\\Query\\Builder::runPaginationCountQuery",
		"doc": "Run a pagination count query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_cloneForPaginationCount",
		"name": "Illuminate\\Database\\Query\\Builder::cloneForPaginationCount",
		"doc": "Clone the existing query instance for usage in a pagination subquery."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_withoutSelectAliases",
		"name": "Illuminate\\Database\\Query\\Builder::withoutSelectAliases",
		"doc": "Remove the column aliases since they will break count queries."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_cursor",
		"name": "Illuminate\\Database\\Query\\Builder::cursor",
		"doc": "Get a lazy collection for the given query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_enforceOrderBy",
		"name": "Illuminate\\Database\\Query\\Builder::enforceOrderBy",
		"doc": "Throw an exception if the query doesn't have an orderBy clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_pluck",
		"name": "Illuminate\\Database\\Query\\Builder::pluck",
		"doc": "Get an array with the values of a given column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_stripTableForPluck",
		"name": "Illuminate\\Database\\Query\\Builder::stripTableForPluck",
		"doc": "Strip off the table name or alias from a column identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_pluckFromObjectColumn",
		"name": "Illuminate\\Database\\Query\\Builder::pluckFromObjectColumn",
		"doc": "Retrieve column values from rows represented as objects."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_pluckFromArrayColumn",
		"name": "Illuminate\\Database\\Query\\Builder::pluckFromArrayColumn",
		"doc": "Retrieve column values from rows represented as arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_implode",
		"name": "Illuminate\\Database\\Query\\Builder::implode",
		"doc": "Concatenate values of a given column as a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_exists",
		"name": "Illuminate\\Database\\Query\\Builder::exists",
		"doc": "Determine if any rows exist for the current query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_doesntExist",
		"name": "Illuminate\\Database\\Query\\Builder::doesntExist",
		"doc": "Determine if no rows exist for the current query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_existsOr",
		"name": "Illuminate\\Database\\Query\\Builder::existsOr",
		"doc": "Execute the given callback if no rows exist for the current query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_doesntExistOr",
		"name": "Illuminate\\Database\\Query\\Builder::doesntExistOr",
		"doc": "Execute the given callback if rows exist for the current query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_count",
		"name": "Illuminate\\Database\\Query\\Builder::count",
		"doc": "Retrieve the \"count\" result of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_min",
		"name": "Illuminate\\Database\\Query\\Builder::min",
		"doc": "Retrieve the minimum value of a given column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_max",
		"name": "Illuminate\\Database\\Query\\Builder::max",
		"doc": "Retrieve the maximum value of a given column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_sum",
		"name": "Illuminate\\Database\\Query\\Builder::sum",
		"doc": "Retrieve the sum of the values of a given column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_avg",
		"name": "Illuminate\\Database\\Query\\Builder::avg",
		"doc": "Retrieve the average of the values of a given column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_average",
		"name": "Illuminate\\Database\\Query\\Builder::average",
		"doc": "Alias for the \"avg\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_aggregate",
		"name": "Illuminate\\Database\\Query\\Builder::aggregate",
		"doc": "Execute an aggregate function on the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_numericAggregate",
		"name": "Illuminate\\Database\\Query\\Builder::numericAggregate",
		"doc": "Execute a numeric aggregate function on the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_setAggregate",
		"name": "Illuminate\\Database\\Query\\Builder::setAggregate",
		"doc": "Set the aggregate property without running the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_onceWithColumns",
		"name": "Illuminate\\Database\\Query\\Builder::onceWithColumns",
		"doc": "Execute the given callback while selecting the given columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_insert",
		"name": "Illuminate\\Database\\Query\\Builder::insert",
		"doc": "Insert new records into the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_insertOrIgnore",
		"name": "Illuminate\\Database\\Query\\Builder::insertOrIgnore",
		"doc": "Insert new records into the database while ignoring errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_insertGetId",
		"name": "Illuminate\\Database\\Query\\Builder::insertGetId",
		"doc": "Insert a new record and get the value of the primary key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_insertUsing",
		"name": "Illuminate\\Database\\Query\\Builder::insertUsing",
		"doc": "Insert new records into the table using a subquery."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_update",
		"name": "Illuminate\\Database\\Query\\Builder::update",
		"doc": "Update records in the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_updateOrInsert",
		"name": "Illuminate\\Database\\Query\\Builder::updateOrInsert",
		"doc": "Insert or update a record matching the attributes, and fill it with values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_upsert",
		"name": "Illuminate\\Database\\Query\\Builder::upsert",
		"doc": "Insert new records or update the existing ones."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_increment",
		"name": "Illuminate\\Database\\Query\\Builder::increment",
		"doc": "Increment a column's value by a given amount."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_decrement",
		"name": "Illuminate\\Database\\Query\\Builder::decrement",
		"doc": "Decrement a column's value by a given amount."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_delete",
		"name": "Illuminate\\Database\\Query\\Builder::delete",
		"doc": "Delete records from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_truncate",
		"name": "Illuminate\\Database\\Query\\Builder::truncate",
		"doc": "Run a truncate statement on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_newQuery",
		"name": "Illuminate\\Database\\Query\\Builder::newQuery",
		"doc": "Get a new instance of the query builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_forSubQuery",
		"name": "Illuminate\\Database\\Query\\Builder::forSubQuery",
		"doc": "Create a new query instance for a sub-query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_raw",
		"name": "Illuminate\\Database\\Query\\Builder::raw",
		"doc": "Create a raw database expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_getBindings",
		"name": "Illuminate\\Database\\Query\\Builder::getBindings",
		"doc": "Get the current query value bindings in a flattened array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_getRawBindings",
		"name": "Illuminate\\Database\\Query\\Builder::getRawBindings",
		"doc": "Get the raw array of bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_setBindings",
		"name": "Illuminate\\Database\\Query\\Builder::setBindings",
		"doc": "Set the bindings on the query builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_addBinding",
		"name": "Illuminate\\Database\\Query\\Builder::addBinding",
		"doc": "Add a binding to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_mergeBindings",
		"name": "Illuminate\\Database\\Query\\Builder::mergeBindings",
		"doc": "Merge an array of bindings into our bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_cleanBindings",
		"name": "Illuminate\\Database\\Query\\Builder::cleanBindings",
		"doc": "Remove all of the expressions from a list of bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_defaultKeyName",
		"name": "Illuminate\\Database\\Query\\Builder::defaultKeyName",
		"doc": "Get the default key name of the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_getConnection",
		"name": "Illuminate\\Database\\Query\\Builder::getConnection",
		"doc": "Get the database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_getProcessor",
		"name": "Illuminate\\Database\\Query\\Builder::getProcessor",
		"doc": "Get the database query processor instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_getGrammar",
		"name": "Illuminate\\Database\\Query\\Builder::getGrammar",
		"doc": "Get the query grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_useWritePdo",
		"name": "Illuminate\\Database\\Query\\Builder::useWritePdo",
		"doc": "Use the write pdo for query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_isQueryable",
		"name": "Illuminate\\Database\\Query\\Builder::isQueryable",
		"doc": "Determine if the value is a query builder instance or a Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_clone",
		"name": "Illuminate\\Database\\Query\\Builder::clone",
		"doc": "Clone the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_cloneWithout",
		"name": "Illuminate\\Database\\Query\\Builder::cloneWithout",
		"doc": "Clone the query without the given properties."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_cloneWithoutBindings",
		"name": "Illuminate\\Database\\Query\\Builder::cloneWithoutBindings",
		"doc": "Clone the query without the given bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_dump",
		"name": "Illuminate\\Database\\Query\\Builder::dump",
		"doc": "Dump the current SQL and bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method_dd",
		"name": "Illuminate\\Database\\Query\\Builder::dd",
		"doc": "Die and dump the current SQL and bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Builder",
		"fromLink": "Illuminate/Database/Query/Builder.html",
		"link": "Illuminate/Database/Query/Builder.html#method___call",
		"name": "Illuminate\\Database\\Query\\Builder::__call",
		"doc": "Handle dynamic method calls into the method."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query",
		"fromLink": "Illuminate/Database/Query.html",
		"link": "Illuminate/Database/Query/Expression.html",
		"name": "Illuminate\\Database\\Query\\Expression",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Expression",
		"fromLink": "Illuminate/Database/Query/Expression.html",
		"link": "Illuminate/Database/Query/Expression.html#method___construct",
		"name": "Illuminate\\Database\\Query\\Expression::__construct",
		"doc": "Create a new raw query expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Expression",
		"fromLink": "Illuminate/Database/Query/Expression.html",
		"link": "Illuminate/Database/Query/Expression.html#method_getValue",
		"name": "Illuminate\\Database\\Query\\Expression::getValue",
		"doc": "Get the value of the expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Expression",
		"fromLink": "Illuminate/Database/Query/Expression.html",
		"link": "Illuminate/Database/Query/Expression.html#method___toString",
		"name": "Illuminate\\Database\\Query\\Expression::__toString",
		"doc": "Get the value of the expression."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Grammars",
		"fromLink": "Illuminate/Database/Query/Grammars.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileSelect",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileSelect",
		"doc": "Compile a select query into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileComponents",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileComponents",
		"doc": "Compile the components necessary for a select clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileAggregate",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileAggregate",
		"doc": "Compile an aggregated select clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileColumns",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileColumns",
		"doc": "Compile the \"select *\" portion of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileFrom",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileFrom",
		"doc": "Compile the \"from\" portion of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileJoins",
		"doc": "Compile the \"join\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileWheres",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileWheres",
		"doc": "Compile the \"where\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileWheresToArray",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileWheresToArray",
		"doc": "Get an array of all the where clauses for the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_concatenateWhereClauses",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::concatenateWhereClauses",
		"doc": "Format the where clause statements into one string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereRaw",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereRaw",
		"doc": "Compile a raw where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereBasic",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereBasic",
		"doc": "Compile a basic where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereIn",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereIn",
		"doc": "Compile a \"where in\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereNotIn",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereNotIn",
		"doc": "Compile a \"where not in\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereNotInRaw",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereNotInRaw",
		"doc": "Compile a \"where not in raw\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereInRaw",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereInRaw",
		"doc": "Compile a \"where in raw\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereNull",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereNull",
		"doc": "Compile a \"where null\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereNotNull",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereNotNull",
		"doc": "Compile a \"where not null\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereBetween",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereBetween",
		"doc": "Compile a \"between\" where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereBetweenColumns",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereBetweenColumns",
		"doc": "Compile a \"between\" where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereDate",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereDate",
		"doc": "Compile a \"where date\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereTime",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereTime",
		"doc": "Compile a \"where time\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereDay",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereDay",
		"doc": "Compile a \"where day\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereMonth",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereMonth",
		"doc": "Compile a \"where month\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereYear",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereYear",
		"doc": "Compile a \"where year\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_dateBasedWhere",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::dateBasedWhere",
		"doc": "Compile a date based where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereColumn",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereColumn",
		"doc": "Compile a where clause comparing two columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereNested",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereNested",
		"doc": "Compile a nested where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereSub",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereSub",
		"doc": "Compile a where condition with a sub-select."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereExists",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereExists",
		"doc": "Compile a where exists clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereNotExists",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereNotExists",
		"doc": "Compile a where exists clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereRowValues",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereRowValues",
		"doc": "Compile a where row values condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereJsonBoolean",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereJsonBoolean",
		"doc": "Compile a \"where JSON boolean\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereJsonContains",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereJsonContains",
		"doc": "Compile a \"where JSON contains\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileJsonContains",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileJsonContains",
		"doc": "Compile a \"JSON contains\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_prepareBindingForJsonContains",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::prepareBindingForJsonContains",
		"doc": "Prepare the binding for a \"JSON contains\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_whereJsonLength",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::whereJsonLength",
		"doc": "Compile a \"where JSON length\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileJsonLength",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileJsonLength",
		"doc": "Compile a \"JSON length\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileGroups",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileGroups",
		"doc": "Compile the \"group by\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileHavings",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileHavings",
		"doc": "Compile the \"having\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileHaving",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileHaving",
		"doc": "Compile a single having clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileBasicHaving",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileBasicHaving",
		"doc": "Compile a basic having clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileHavingBetween",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileHavingBetween",
		"doc": "Compile a \"between\" having clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileOrders",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileOrders",
		"doc": "Compile the \"order by\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileOrdersToArray",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileOrdersToArray",
		"doc": "Compile the query orders to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileRandom",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileRandom",
		"doc": "Compile the random statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileLimit",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileLimit",
		"doc": "Compile the \"limit\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileOffset",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileOffset",
		"doc": "Compile the \"offset\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileUnions",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileUnions",
		"doc": "Compile the \"union\" queries attached to the main query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileUnion",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileUnion",
		"doc": "Compile a single union statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_wrapUnion",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::wrapUnion",
		"doc": "Wrap a union subquery in parentheses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileUnionAggregate",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileUnionAggregate",
		"doc": "Compile a union aggregate query into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileExists",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileExists",
		"doc": "Compile an exists statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileInsert",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileInsert",
		"doc": "Compile an insert statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileInsertOrIgnore",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileInsertOrIgnore",
		"doc": "Compile an insert ignore statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileInsertGetId",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileInsertGetId",
		"doc": "Compile an insert and get ID statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileInsertUsing",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileInsertUsing",
		"doc": "Compile an insert statement using a subquery into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileUpdate",
		"doc": "Compile an update statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileUpdateColumns",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileUpdateColumns",
		"doc": "Compile the columns for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileUpdateWithoutJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileUpdateWithoutJoins",
		"doc": "Compile an update statement without joins into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileUpdateWithJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileUpdateWithJoins",
		"doc": "Compile an update statement with joins into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileUpsert",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileUpsert",
		"doc": "Compile an \"upsert\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_prepareBindingsForUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::prepareBindingsForUpdate",
		"doc": "Prepare the bindings for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileDelete",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileDelete",
		"doc": "Compile a delete statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileDeleteWithoutJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileDeleteWithoutJoins",
		"doc": "Compile a delete statement without joins into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileDeleteWithJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileDeleteWithJoins",
		"doc": "Compile a delete statement with joins into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_prepareBindingsForDelete",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::prepareBindingsForDelete",
		"doc": "Prepare the bindings for a delete statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileTruncate",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileTruncate",
		"doc": "Compile a truncate table statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileLock",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileLock",
		"doc": "Compile the lock into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_supportsSavepoints",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::supportsSavepoints",
		"doc": "Determine if the grammar supports savepoints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileSavepoint",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileSavepoint",
		"doc": "Compile the SQL statement to define a savepoint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_compileSavepointRollBack",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::compileSavepointRollBack",
		"doc": "Compile the SQL statement to execute a savepoint rollback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_wrap",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::wrap",
		"doc": "Wrap a value in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_wrapJsonSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::wrapJsonSelector",
		"doc": "Wrap the given JSON selector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_wrapJsonBooleanSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::wrapJsonBooleanSelector",
		"doc": "Wrap the given JSON selector for boolean values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_wrapJsonBooleanValue",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::wrapJsonBooleanValue",
		"doc": "Wrap the given JSON boolean value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_wrapJsonFieldAndPath",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::wrapJsonFieldAndPath",
		"doc": "Split the given JSON selector into the field and the optional path and wrap them separately."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_wrapJsonPath",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::wrapJsonPath",
		"doc": "Wrap the given JSON path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_isJsonSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::isJsonSelector",
		"doc": "Determine if the given string is a JSON selector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_concatenate",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::concatenate",
		"doc": "Concatenate an array of segments, removing empties."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_removeLeadingBoolean",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::removeLeadingBoolean",
		"doc": "Remove the leading boolean from a statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Query/Grammars/Grammar.html",
		"link": "Illuminate/Database/Query/Grammars/Grammar.html#method_getOperators",
		"name": "Illuminate\\Database\\Query\\Grammars\\Grammar::getOperators",
		"doc": "Get the grammar specific operators."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Grammars",
		"fromLink": "Illuminate/Database/Query/Grammars.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_whereNull",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::whereNull",
		"doc": "Add a \"where null\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_whereNotNull",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::whereNotNull",
		"doc": "Add a \"where not null\" clause to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileInsertOrIgnore",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileInsertOrIgnore",
		"doc": "Compile an insert ignore statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileJsonContains",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileJsonContains",
		"doc": "Compile a \"JSON contains\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileJsonLength",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileJsonLength",
		"doc": "Compile a \"JSON length\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileRandom",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileRandom",
		"doc": "Compile the random statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileLock",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileLock",
		"doc": "Compile the lock into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileInsert",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileInsert",
		"doc": "Compile an insert statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileUpdateColumns",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileUpdateColumns",
		"doc": "Compile the columns for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileUpsert",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileUpsert",
		"doc": "Compile an \"upsert\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileJsonUpdateColumn",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileJsonUpdateColumn",
		"doc": "Prepare a JSON column being updated using the JSON_SET function."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileUpdateWithoutJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileUpdateWithoutJoins",
		"doc": "Compile an update statement without joins into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_prepareBindingsForUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::prepareBindingsForUpdate",
		"doc": "Prepare the bindings for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_compileDeleteWithoutJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::compileDeleteWithoutJoins",
		"doc": "Compile a delete query that does not use joins."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_wrapValue",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::wrapValue",
		"doc": "Wrap a single string in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_wrapJsonSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::wrapJsonSelector",
		"doc": "Wrap the given JSON selector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/MySqlGrammar.html#method_wrapJsonBooleanSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\MySqlGrammar::wrapJsonBooleanSelector",
		"doc": "Wrap the given JSON selector for boolean values."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Grammars",
		"fromLink": "Illuminate/Database/Query/Grammars.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_whereBasic",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::whereBasic",
		"doc": "Compile a basic where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_whereDate",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::whereDate",
		"doc": "Compile a \"where date\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_whereTime",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::whereTime",
		"doc": "Compile a \"where time\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_dateBasedWhere",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::dateBasedWhere",
		"doc": "Compile a date based where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileColumns",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileColumns",
		"doc": "Compile the \"select *\" portion of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileJsonContains",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileJsonContains",
		"doc": "Compile a \"JSON contains\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileJsonLength",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileJsonLength",
		"doc": "Compile a \"JSON length\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileLock",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileLock",
		"doc": "Compile the lock into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileInsertOrIgnore",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileInsertOrIgnore",
		"doc": "Compile an insert ignore statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileInsertGetId",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileInsertGetId",
		"doc": "Compile an insert and get ID statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileUpdate",
		"doc": "Compile an update statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileUpdateColumns",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileUpdateColumns",
		"doc": "Compile the columns for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileUpsert",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileUpsert",
		"doc": "Compile an \"upsert\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileJsonUpdateColumn",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileJsonUpdateColumn",
		"doc": "Prepares a JSON column being updated using the JSONB_SET function."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileUpdateWithJoinsOrLimit",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileUpdateWithJoinsOrLimit",
		"doc": "Compile an update statement with joins or limit into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_prepareBindingsForUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::prepareBindingsForUpdate",
		"doc": "Prepare the bindings for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileDelete",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileDelete",
		"doc": "Compile a delete statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileDeleteWithJoinsOrLimit",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileDeleteWithJoinsOrLimit",
		"doc": "Compile a delete statement with joins or limit into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_compileTruncate",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::compileTruncate",
		"doc": "Compile a truncate table statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_wrapJsonSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::wrapJsonSelector",
		"doc": "Wrap the given JSON selector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_wrapJsonBooleanSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::wrapJsonBooleanSelector",
		"doc": "Wrap the given JSON selector for boolean values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_wrapJsonBooleanValue",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::wrapJsonBooleanValue",
		"doc": "Wrap the given JSON boolean value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/PostgresGrammar.html#method_wrapJsonPathAttributes",
		"name": "Illuminate\\Database\\Query\\Grammars\\PostgresGrammar::wrapJsonPathAttributes",
		"doc": "Wrap the attributes of the give JSON path."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Grammars",
		"fromLink": "Illuminate/Database/Query/Grammars.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileLock",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileLock",
		"doc": "Compile the lock into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_wrapUnion",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::wrapUnion",
		"doc": "Wrap a union subquery in parentheses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_whereDate",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::whereDate",
		"doc": "Compile a \"where date\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_whereDay",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::whereDay",
		"doc": "Compile a \"where day\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_whereMonth",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::whereMonth",
		"doc": "Compile a \"where month\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_whereYear",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::whereYear",
		"doc": "Compile a \"where year\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_whereTime",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::whereTime",
		"doc": "Compile a \"where time\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_dateBasedWhere",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::dateBasedWhere",
		"doc": "Compile a date based where clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileJsonLength",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileJsonLength",
		"doc": "Compile a \"JSON length\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileUpdate",
		"doc": "Compile an update statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileInsertOrIgnore",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileInsertOrIgnore",
		"doc": "Compile an insert ignore statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileUpdateColumns",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileUpdateColumns",
		"doc": "Compile the columns for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileUpsert",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileUpsert",
		"doc": "Compile an \"upsert\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_groupJsonColumnsForUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::groupJsonColumnsForUpdate",
		"doc": "Group the nested JSON columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileJsonPatch",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileJsonPatch",
		"doc": "Compile a \"JSON\" patch statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileUpdateWithJoinsOrLimit",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileUpdateWithJoinsOrLimit",
		"doc": "Compile an update statement with joins or limit into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_prepareBindingsForUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::prepareBindingsForUpdate",
		"doc": "Prepare the bindings for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileDelete",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileDelete",
		"doc": "Compile a delete statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileDeleteWithJoinsOrLimit",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileDeleteWithJoinsOrLimit",
		"doc": "Compile a delete statement with joins or limit into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_compileTruncate",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::compileTruncate",
		"doc": "Compile a truncate table statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SQLiteGrammar.html#method_wrapJsonSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar::wrapJsonSelector",
		"doc": "Wrap the given JSON selector."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Grammars",
		"fromLink": "Illuminate/Database/Query/Grammars.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileSelect",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileSelect",
		"doc": "Compile a select query into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileColumns",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileColumns",
		"doc": "Compile the \"select *\" portion of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileFrom",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileFrom",
		"doc": "Compile the \"from\" portion of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_whereDate",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::whereDate",
		"doc": "Compile a \"where date\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_whereTime",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::whereTime",
		"doc": "Compile a \"where time\" clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileJsonContains",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileJsonContains",
		"doc": "Compile a \"JSON contains\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_prepareBindingForJsonContains",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::prepareBindingForJsonContains",
		"doc": "Prepare the binding for a \"JSON contains\" statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileJsonLength",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileJsonLength",
		"doc": "Compile a \"JSON length\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileAnsiOffset",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileAnsiOffset",
		"doc": "Create a full ANSI offset clause for the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileOver",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileOver",
		"doc": "Compile the over statement for a table expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileTableExpression",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileTableExpression",
		"doc": "Compile a common table expression for a query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileRowConstraint",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileRowConstraint",
		"doc": "Compile the limit / offset row constraint for a query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileDeleteWithoutJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileDeleteWithoutJoins",
		"doc": "Compile a delete statement without joins into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileRandom",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileRandom",
		"doc": "Compile the random statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileLimit",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileLimit",
		"doc": "Compile the \"limit\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileOffset",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileOffset",
		"doc": "Compile the \"offset\" portions of the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileLock",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileLock",
		"doc": "Compile the lock into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_wrapUnion",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::wrapUnion",
		"doc": "Wrap a union subquery in parentheses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileExists",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileExists",
		"doc": "Compile an exists statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileUpdateWithJoins",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileUpdateWithJoins",
		"doc": "Compile an update statement with joins into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileUpsert",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileUpsert",
		"doc": "Compile an \"upsert\" statement into SQL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_prepareBindingsForUpdate",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::prepareBindingsForUpdate",
		"doc": "Prepare the bindings for an update statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileSavepoint",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileSavepoint",
		"doc": "Compile the SQL statement to define a savepoint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_compileSavepointRollBack",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::compileSavepointRollBack",
		"doc": "Compile the SQL statement to execute a savepoint rollback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_getDateFormat",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::getDateFormat",
		"doc": "Get the format for database stored dates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_wrapValue",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::wrapValue",
		"doc": "Wrap a single string in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_wrapJsonSelector",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::wrapJsonSelector",
		"doc": "Wrap the given JSON selector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_wrapJsonBooleanValue",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::wrapJsonBooleanValue",
		"doc": "Wrap the given JSON boolean value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_wrapTable",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::wrapTable",
		"doc": "Wrap a table in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Query/Grammars/SqlServerGrammar.html#method_wrapTableValuedFunction",
		"name": "Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar::wrapTableValuedFunction",
		"doc": "Wrap a table in keyword identifiers."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query",
		"fromLink": "Illuminate/Database/Query.html",
		"link": "Illuminate/Database/Query/JoinClause.html",
		"name": "Illuminate\\Database\\Query\\JoinClause",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\JoinClause",
		"fromLink": "Illuminate/Database/Query/JoinClause.html",
		"link": "Illuminate/Database/Query/JoinClause.html#method___construct",
		"name": "Illuminate\\Database\\Query\\JoinClause::__construct",
		"doc": "Create a new join clause instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\JoinClause",
		"fromLink": "Illuminate/Database/Query/JoinClause.html",
		"link": "Illuminate/Database/Query/JoinClause.html#method_on",
		"name": "Illuminate\\Database\\Query\\JoinClause::on",
		"doc": "Add an \"on\" clause to the join."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\JoinClause",
		"fromLink": "Illuminate/Database/Query/JoinClause.html",
		"link": "Illuminate/Database/Query/JoinClause.html#method_orOn",
		"name": "Illuminate\\Database\\Query\\JoinClause::orOn",
		"doc": "Add an \"or on\" clause to the join."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\JoinClause",
		"fromLink": "Illuminate/Database/Query/JoinClause.html",
		"link": "Illuminate/Database/Query/JoinClause.html#method_newQuery",
		"name": "Illuminate\\Database\\Query\\JoinClause::newQuery",
		"doc": "Get a new instance of the join clause builder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\JoinClause",
		"fromLink": "Illuminate/Database/Query/JoinClause.html",
		"link": "Illuminate/Database/Query/JoinClause.html#method_forSubQuery",
		"name": "Illuminate\\Database\\Query\\JoinClause::forSubQuery",
		"doc": "Create a new query instance for sub-query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\JoinClause",
		"fromLink": "Illuminate/Database/Query/JoinClause.html",
		"link": "Illuminate/Database/Query/JoinClause.html#method_newParentQuery",
		"name": "Illuminate\\Database\\Query\\JoinClause::newParentQuery",
		"doc": "Create a new parent query instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Processors",
		"fromLink": "Illuminate/Database/Query/Processors.html",
		"link": "Illuminate/Database/Query/Processors/MySqlProcessor.html",
		"name": "Illuminate\\Database\\Query\\Processors\\MySqlProcessor",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\MySqlProcessor",
		"fromLink": "Illuminate/Database/Query/Processors/MySqlProcessor.html",
		"link": "Illuminate/Database/Query/Processors/MySqlProcessor.html#method_processColumnListing",
		"name": "Illuminate\\Database\\Query\\Processors\\MySqlProcessor::processColumnListing",
		"doc": "Process the results of a column listing query."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Processors",
		"fromLink": "Illuminate/Database/Query/Processors.html",
		"link": "Illuminate/Database/Query/Processors/PostgresProcessor.html",
		"name": "Illuminate\\Database\\Query\\Processors\\PostgresProcessor",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\PostgresProcessor",
		"fromLink": "Illuminate/Database/Query/Processors/PostgresProcessor.html",
		"link": "Illuminate/Database/Query/Processors/PostgresProcessor.html#method_processInsertGetId",
		"name": "Illuminate\\Database\\Query\\Processors\\PostgresProcessor::processInsertGetId",
		"doc": "Process an \"insert get ID\" query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\PostgresProcessor",
		"fromLink": "Illuminate/Database/Query/Processors/PostgresProcessor.html",
		"link": "Illuminate/Database/Query/Processors/PostgresProcessor.html#method_processColumnListing",
		"name": "Illuminate\\Database\\Query\\Processors\\PostgresProcessor::processColumnListing",
		"doc": "Process the results of a column listing query."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Processors",
		"fromLink": "Illuminate/Database/Query/Processors.html",
		"link": "Illuminate/Database/Query/Processors/Processor.html",
		"name": "Illuminate\\Database\\Query\\Processors\\Processor",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\Processor",
		"fromLink": "Illuminate/Database/Query/Processors/Processor.html",
		"link": "Illuminate/Database/Query/Processors/Processor.html#method_processSelect",
		"name": "Illuminate\\Database\\Query\\Processors\\Processor::processSelect",
		"doc": "Process the results of a \"select\" query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\Processor",
		"fromLink": "Illuminate/Database/Query/Processors/Processor.html",
		"link": "Illuminate/Database/Query/Processors/Processor.html#method_processInsertGetId",
		"name": "Illuminate\\Database\\Query\\Processors\\Processor::processInsertGetId",
		"doc": "Process an  \"insert get ID\" query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\Processor",
		"fromLink": "Illuminate/Database/Query/Processors/Processor.html",
		"link": "Illuminate/Database/Query/Processors/Processor.html#method_processColumnListing",
		"name": "Illuminate\\Database\\Query\\Processors\\Processor::processColumnListing",
		"doc": "Process the results of a column listing query."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Processors",
		"fromLink": "Illuminate/Database/Query/Processors.html",
		"link": "Illuminate/Database/Query/Processors/SQLiteProcessor.html",
		"name": "Illuminate\\Database\\Query\\Processors\\SQLiteProcessor",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\SQLiteProcessor",
		"fromLink": "Illuminate/Database/Query/Processors/SQLiteProcessor.html",
		"link": "Illuminate/Database/Query/Processors/SQLiteProcessor.html#method_processColumnListing",
		"name": "Illuminate\\Database\\Query\\Processors\\SQLiteProcessor::processColumnListing",
		"doc": "Process the results of a column listing query."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Query\\Processors",
		"fromLink": "Illuminate/Database/Query/Processors.html",
		"link": "Illuminate/Database/Query/Processors/SqlServerProcessor.html",
		"name": "Illuminate\\Database\\Query\\Processors\\SqlServerProcessor",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\SqlServerProcessor",
		"fromLink": "Illuminate/Database/Query/Processors/SqlServerProcessor.html",
		"link": "Illuminate/Database/Query/Processors/SqlServerProcessor.html#method_processInsertGetId",
		"name": "Illuminate\\Database\\Query\\Processors\\SqlServerProcessor::processInsertGetId",
		"doc": "Process an \"insert get ID\" query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\SqlServerProcessor",
		"fromLink": "Illuminate/Database/Query/Processors/SqlServerProcessor.html",
		"link": "Illuminate/Database/Query/Processors/SqlServerProcessor.html#method_processInsertGetIdForOdbc",
		"name": "Illuminate\\Database\\Query\\Processors\\SqlServerProcessor::processInsertGetIdForOdbc",
		"doc": "Process an \"insert get ID\" query for ODBC."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Query\\Processors\\SqlServerProcessor",
		"fromLink": "Illuminate/Database/Query/Processors/SqlServerProcessor.html",
		"link": "Illuminate/Database/Query/Processors/SqlServerProcessor.html#method_processColumnListing",
		"name": "Illuminate\\Database\\Query\\Processors\\SqlServerProcessor::processColumnListing",
		"doc": "Process the results of a column listing query."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/SQLiteConnection.html",
		"name": "Illuminate\\Database\\SQLiteConnection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SQLiteConnection",
		"fromLink": "Illuminate/Database/SQLiteConnection.html",
		"link": "Illuminate/Database/SQLiteConnection.html#method___construct",
		"name": "Illuminate\\Database\\SQLiteConnection::__construct",
		"doc": "Create a new database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SQLiteConnection",
		"fromLink": "Illuminate/Database/SQLiteConnection.html",
		"link": "Illuminate/Database/SQLiteConnection.html#method_getDefaultQueryGrammar",
		"name": "Illuminate\\Database\\SQLiteConnection::getDefaultQueryGrammar",
		"doc": "Get the default query grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SQLiteConnection",
		"fromLink": "Illuminate/Database/SQLiteConnection.html",
		"link": "Illuminate/Database/SQLiteConnection.html#method_getSchemaBuilder",
		"name": "Illuminate\\Database\\SQLiteConnection::getSchemaBuilder",
		"doc": "Get a schema builder instance for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SQLiteConnection",
		"fromLink": "Illuminate/Database/SQLiteConnection.html",
		"link": "Illuminate/Database/SQLiteConnection.html#method_getDefaultSchemaGrammar",
		"name": "Illuminate\\Database\\SQLiteConnection::getDefaultSchemaGrammar",
		"doc": "Get the default schema grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SQLiteConnection",
		"fromLink": "Illuminate/Database/SQLiteConnection.html",
		"link": "Illuminate/Database/SQLiteConnection.html#method_getSchemaState",
		"name": "Illuminate\\Database\\SQLiteConnection::getSchemaState",
		"doc": "Get the schema state for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SQLiteConnection",
		"fromLink": "Illuminate/Database/SQLiteConnection.html",
		"link": "Illuminate/Database/SQLiteConnection.html#method_getDefaultPostProcessor",
		"name": "Illuminate\\Database\\SQLiteConnection::getDefaultPostProcessor",
		"doc": "Get the default post processor instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SQLiteConnection",
		"fromLink": "Illuminate/Database/SQLiteConnection.html",
		"link": "Illuminate/Database/SQLiteConnection.html#method_getDoctrineDriver",
		"name": "Illuminate\\Database\\SQLiteConnection::getDoctrineDriver",
		"doc": "Get the Doctrine DBAL driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SQLiteConnection",
		"fromLink": "Illuminate/Database/SQLiteConnection.html",
		"link": "Illuminate/Database/SQLiteConnection.html#method_getForeignKeyConstraintsConfigurationValue",
		"name": "Illuminate\\Database\\SQLiteConnection::getForeignKeyConstraintsConfigurationValue",
		"doc": "Get the database connection foreign key constraints configuration option."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/Blueprint.html",
		"name": "Illuminate\\Database\\Schema\\Blueprint",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method___construct",
		"name": "Illuminate\\Database\\Schema\\Blueprint::__construct",
		"doc": "Create a new schema blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_build",
		"name": "Illuminate\\Database\\Schema\\Blueprint::build",
		"doc": "Execute the blueprint against the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_toSql",
		"name": "Illuminate\\Database\\Schema\\Blueprint::toSql",
		"doc": "Get the raw SQL statements for the blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_ensureCommandsAreValid",
		"name": "Illuminate\\Database\\Schema\\Blueprint::ensureCommandsAreValid",
		"doc": "Ensure the commands on the blueprint are valid for the connection type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_commandsNamed",
		"name": "Illuminate\\Database\\Schema\\Blueprint::commandsNamed",
		"doc": "Get all of the commands matching the given names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_addImpliedCommands",
		"name": "Illuminate\\Database\\Schema\\Blueprint::addImpliedCommands",
		"doc": "Add the commands that are implied by the blueprint's state."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_addFluentIndexes",
		"name": "Illuminate\\Database\\Schema\\Blueprint::addFluentIndexes",
		"doc": "Add the index commands fluently specified on columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_addFluentCommands",
		"name": "Illuminate\\Database\\Schema\\Blueprint::addFluentCommands",
		"doc": "Add the fluent commands specified on any columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_creating",
		"name": "Illuminate\\Database\\Schema\\Blueprint::creating",
		"doc": "Determine if the blueprint has a create command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_create",
		"name": "Illuminate\\Database\\Schema\\Blueprint::create",
		"doc": "Indicate that the table needs to be created."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_temporary",
		"name": "Illuminate\\Database\\Schema\\Blueprint::temporary",
		"doc": "Indicate that the table needs to be temporary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_drop",
		"name": "Illuminate\\Database\\Schema\\Blueprint::drop",
		"doc": "Indicate that the table should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropIfExists",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropIfExists",
		"doc": "Indicate that the table should be dropped if it exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropColumn",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropColumn",
		"doc": "Indicate that the given columns should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_renameColumn",
		"name": "Illuminate\\Database\\Schema\\Blueprint::renameColumn",
		"doc": "Indicate that the given columns should be renamed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropPrimary",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropPrimary",
		"doc": "Indicate that the given primary key should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropUnique",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropUnique",
		"doc": "Indicate that the given unique key should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropIndex",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropIndex",
		"doc": "Indicate that the given index should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropSpatialIndex",
		"doc": "Indicate that the given spatial index should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropForeign",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropForeign",
		"doc": "Indicate that the given foreign key should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropConstrainedForeignId",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropConstrainedForeignId",
		"doc": "Indicate that the given column and foreign key should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_renameIndex",
		"name": "Illuminate\\Database\\Schema\\Blueprint::renameIndex",
		"doc": "Indicate that the given indexes should be renamed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropTimestamps",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropTimestamps",
		"doc": "Indicate that the timestamp columns should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropTimestampsTz",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropTimestampsTz",
		"doc": "Indicate that the timestamp columns should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropSoftDeletes",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropSoftDeletes",
		"doc": "Indicate that the soft delete column should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropSoftDeletesTz",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropSoftDeletesTz",
		"doc": "Indicate that the soft delete column should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropRememberToken",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropRememberToken",
		"doc": "Indicate that the remember token column should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropMorphs",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropMorphs",
		"doc": "Indicate that the polymorphic columns should be dropped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_rename",
		"name": "Illuminate\\Database\\Schema\\Blueprint::rename",
		"doc": "Rename the table to a given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_primary",
		"name": "Illuminate\\Database\\Schema\\Blueprint::primary",
		"doc": "Specify the primary key(s) for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unique",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unique",
		"doc": "Specify a unique index for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_index",
		"name": "Illuminate\\Database\\Schema\\Blueprint::index",
		"doc": "Specify an index for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_spatialIndex",
		"name": "Illuminate\\Database\\Schema\\Blueprint::spatialIndex",
		"doc": "Specify a spatial index for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_rawIndex",
		"name": "Illuminate\\Database\\Schema\\Blueprint::rawIndex",
		"doc": "Specify a raw index for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_foreign",
		"name": "Illuminate\\Database\\Schema\\Blueprint::foreign",
		"doc": "Specify a foreign key for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_id",
		"name": "Illuminate\\Database\\Schema\\Blueprint::id",
		"doc": "Create a new auto-incrementing big integer (8-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_increments",
		"name": "Illuminate\\Database\\Schema\\Blueprint::increments",
		"doc": "Create a new auto-incrementing integer (4-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_integerIncrements",
		"name": "Illuminate\\Database\\Schema\\Blueprint::integerIncrements",
		"doc": "Create a new auto-incrementing integer (4-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_tinyIncrements",
		"name": "Illuminate\\Database\\Schema\\Blueprint::tinyIncrements",
		"doc": "Create a new auto-incrementing tiny integer (1-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_smallIncrements",
		"name": "Illuminate\\Database\\Schema\\Blueprint::smallIncrements",
		"doc": "Create a new auto-incrementing small integer (2-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_mediumIncrements",
		"name": "Illuminate\\Database\\Schema\\Blueprint::mediumIncrements",
		"doc": "Create a new auto-incrementing medium integer (3-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_bigIncrements",
		"name": "Illuminate\\Database\\Schema\\Blueprint::bigIncrements",
		"doc": "Create a new auto-incrementing big integer (8-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_char",
		"name": "Illuminate\\Database\\Schema\\Blueprint::char",
		"doc": "Create a new char column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_string",
		"name": "Illuminate\\Database\\Schema\\Blueprint::string",
		"doc": "Create a new string column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_text",
		"name": "Illuminate\\Database\\Schema\\Blueprint::text",
		"doc": "Create a new text column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_mediumText",
		"name": "Illuminate\\Database\\Schema\\Blueprint::mediumText",
		"doc": "Create a new medium text column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_longText",
		"name": "Illuminate\\Database\\Schema\\Blueprint::longText",
		"doc": "Create a new long text column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_integer",
		"name": "Illuminate\\Database\\Schema\\Blueprint::integer",
		"doc": "Create a new integer (4-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_tinyInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::tinyInteger",
		"doc": "Create a new tiny integer (1-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_smallInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::smallInteger",
		"doc": "Create a new small integer (2-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_mediumInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::mediumInteger",
		"doc": "Create a new medium integer (3-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_bigInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::bigInteger",
		"doc": "Create a new big integer (8-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unsignedInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unsignedInteger",
		"doc": "Create a new unsigned integer (4-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unsignedTinyInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unsignedTinyInteger",
		"doc": "Create a new unsigned tiny integer (1-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unsignedSmallInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unsignedSmallInteger",
		"doc": "Create a new unsigned small integer (2-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unsignedMediumInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unsignedMediumInteger",
		"doc": "Create a new unsigned medium integer (3-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unsignedBigInteger",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unsignedBigInteger",
		"doc": "Create a new unsigned big integer (8-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_foreignId",
		"name": "Illuminate\\Database\\Schema\\Blueprint::foreignId",
		"doc": "Create a new unsigned big integer (8-byte) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_foreignIdFor",
		"name": "Illuminate\\Database\\Schema\\Blueprint::foreignIdFor",
		"doc": "Create a foreign ID column for the given model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_float",
		"name": "Illuminate\\Database\\Schema\\Blueprint::float",
		"doc": "Create a new float column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_double",
		"name": "Illuminate\\Database\\Schema\\Blueprint::double",
		"doc": "Create a new double column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_decimal",
		"name": "Illuminate\\Database\\Schema\\Blueprint::decimal",
		"doc": "Create a new decimal column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unsignedFloat",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unsignedFloat",
		"doc": "Create a new unsigned float column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unsignedDouble",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unsignedDouble",
		"doc": "Create a new unsigned double column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_unsignedDecimal",
		"name": "Illuminate\\Database\\Schema\\Blueprint::unsignedDecimal",
		"doc": "Create a new unsigned decimal column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_boolean",
		"name": "Illuminate\\Database\\Schema\\Blueprint::boolean",
		"doc": "Create a new boolean column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_enum",
		"name": "Illuminate\\Database\\Schema\\Blueprint::enum",
		"doc": "Create a new enum column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_set",
		"name": "Illuminate\\Database\\Schema\\Blueprint::set",
		"doc": "Create a new set column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_json",
		"name": "Illuminate\\Database\\Schema\\Blueprint::json",
		"doc": "Create a new json column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_jsonb",
		"name": "Illuminate\\Database\\Schema\\Blueprint::jsonb",
		"doc": "Create a new jsonb column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_date",
		"name": "Illuminate\\Database\\Schema\\Blueprint::date",
		"doc": "Create a new date column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dateTime",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dateTime",
		"doc": "Create a new date-time column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dateTimeTz",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dateTimeTz",
		"doc": "Create a new date-time column (with time zone) on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_time",
		"name": "Illuminate\\Database\\Schema\\Blueprint::time",
		"doc": "Create a new time column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_timeTz",
		"name": "Illuminate\\Database\\Schema\\Blueprint::timeTz",
		"doc": "Create a new time column (with time zone) on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_timestamp",
		"name": "Illuminate\\Database\\Schema\\Blueprint::timestamp",
		"doc": "Create a new timestamp column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_timestampTz",
		"name": "Illuminate\\Database\\Schema\\Blueprint::timestampTz",
		"doc": "Create a new timestamp (with time zone) column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_timestamps",
		"name": "Illuminate\\Database\\Schema\\Blueprint::timestamps",
		"doc": "Add nullable creation and update timestamps to the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_nullableTimestamps",
		"name": "Illuminate\\Database\\Schema\\Blueprint::nullableTimestamps",
		"doc": "Add nullable creation and update timestamps to the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_timestampsTz",
		"name": "Illuminate\\Database\\Schema\\Blueprint::timestampsTz",
		"doc": "Add creation and update timestampTz columns to the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_softDeletes",
		"name": "Illuminate\\Database\\Schema\\Blueprint::softDeletes",
		"doc": "Add a \"deleted at\" timestamp for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_softDeletesTz",
		"name": "Illuminate\\Database\\Schema\\Blueprint::softDeletesTz",
		"doc": "Add a \"deleted at\" timestampTz for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_year",
		"name": "Illuminate\\Database\\Schema\\Blueprint::year",
		"doc": "Create a new year column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_binary",
		"name": "Illuminate\\Database\\Schema\\Blueprint::binary",
		"doc": "Create a new binary column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_uuid",
		"name": "Illuminate\\Database\\Schema\\Blueprint::uuid",
		"doc": "Create a new uuid column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_foreignUuid",
		"name": "Illuminate\\Database\\Schema\\Blueprint::foreignUuid",
		"doc": "Create a new UUID column on the table with a foreign key constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_ipAddress",
		"name": "Illuminate\\Database\\Schema\\Blueprint::ipAddress",
		"doc": "Create a new IP address column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_macAddress",
		"name": "Illuminate\\Database\\Schema\\Blueprint::macAddress",
		"doc": "Create a new MAC address column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_geometry",
		"name": "Illuminate\\Database\\Schema\\Blueprint::geometry",
		"doc": "Create a new geometry column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_point",
		"name": "Illuminate\\Database\\Schema\\Blueprint::point",
		"doc": "Create a new point column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_lineString",
		"name": "Illuminate\\Database\\Schema\\Blueprint::lineString",
		"doc": "Create a new linestring column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_polygon",
		"name": "Illuminate\\Database\\Schema\\Blueprint::polygon",
		"doc": "Create a new polygon column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_geometryCollection",
		"name": "Illuminate\\Database\\Schema\\Blueprint::geometryCollection",
		"doc": "Create a new geometrycollection column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_multiPoint",
		"name": "Illuminate\\Database\\Schema\\Blueprint::multiPoint",
		"doc": "Create a new multipoint column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_multiLineString",
		"name": "Illuminate\\Database\\Schema\\Blueprint::multiLineString",
		"doc": "Create a new multilinestring column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_multiPolygon",
		"name": "Illuminate\\Database\\Schema\\Blueprint::multiPolygon",
		"doc": "Create a new multipolygon column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_multiPolygonZ",
		"name": "Illuminate\\Database\\Schema\\Blueprint::multiPolygonZ",
		"doc": "Create a new multipolygon column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_computed",
		"name": "Illuminate\\Database\\Schema\\Blueprint::computed",
		"doc": "Create a new generated, computed column on the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_morphs",
		"name": "Illuminate\\Database\\Schema\\Blueprint::morphs",
		"doc": "Add the proper columns for a polymorphic table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_nullableMorphs",
		"name": "Illuminate\\Database\\Schema\\Blueprint::nullableMorphs",
		"doc": "Add nullable columns for a polymorphic table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_numericMorphs",
		"name": "Illuminate\\Database\\Schema\\Blueprint::numericMorphs",
		"doc": "Add the proper columns for a polymorphic table using numeric IDs (incremental)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_nullableNumericMorphs",
		"name": "Illuminate\\Database\\Schema\\Blueprint::nullableNumericMorphs",
		"doc": "Add nullable columns for a polymorphic table using numeric IDs (incremental)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_uuidMorphs",
		"name": "Illuminate\\Database\\Schema\\Blueprint::uuidMorphs",
		"doc": "Add the proper columns for a polymorphic table using UUIDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_nullableUuidMorphs",
		"name": "Illuminate\\Database\\Schema\\Blueprint::nullableUuidMorphs",
		"doc": "Add nullable columns for a polymorphic table using UUIDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_rememberToken",
		"name": "Illuminate\\Database\\Schema\\Blueprint::rememberToken",
		"doc": "Adds the <code>remember_token</code> column to the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_indexCommand",
		"name": "Illuminate\\Database\\Schema\\Blueprint::indexCommand",
		"doc": "Add a new index command to the blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_dropIndexCommand",
		"name": "Illuminate\\Database\\Schema\\Blueprint::dropIndexCommand",
		"doc": "Create a new drop index command on the blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_createIndexName",
		"name": "Illuminate\\Database\\Schema\\Blueprint::createIndexName",
		"doc": "Create a default index name for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_addColumn",
		"name": "Illuminate\\Database\\Schema\\Blueprint::addColumn",
		"doc": "Add a new column to the blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_removeColumn",
		"name": "Illuminate\\Database\\Schema\\Blueprint::removeColumn",
		"doc": "Remove a column from the schema blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_addCommand",
		"name": "Illuminate\\Database\\Schema\\Blueprint::addCommand",
		"doc": "Add a new command to the blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_createCommand",
		"name": "Illuminate\\Database\\Schema\\Blueprint::createCommand",
		"doc": "Create a new Fluent command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_getTable",
		"name": "Illuminate\\Database\\Schema\\Blueprint::getTable",
		"doc": "Get the table the blueprint describes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_getColumns",
		"name": "Illuminate\\Database\\Schema\\Blueprint::getColumns",
		"doc": "Get the columns on the blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_getCommands",
		"name": "Illuminate\\Database\\Schema\\Blueprint::getCommands",
		"doc": "Get the commands on the blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_getAddedColumns",
		"name": "Illuminate\\Database\\Schema\\Blueprint::getAddedColumns",
		"doc": "Get the columns on the blueprint that should be added."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_getChangedColumns",
		"name": "Illuminate\\Database\\Schema\\Blueprint::getChangedColumns",
		"doc": "Get the columns on the blueprint that should be changed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_hasAutoIncrementColumn",
		"name": "Illuminate\\Database\\Schema\\Blueprint::hasAutoIncrementColumn",
		"doc": "Determine if the blueprint has auto increment columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Blueprint",
		"fromLink": "Illuminate/Database/Schema/Blueprint.html",
		"link": "Illuminate/Database/Schema/Blueprint.html#method_autoIncrementingStartingValues",
		"name": "Illuminate\\Database\\Schema\\Blueprint::autoIncrementingStartingValues",
		"doc": "Get the auto increment column starting values."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/Builder.html",
		"name": "Illuminate\\Database\\Schema\\Builder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method___construct",
		"name": "Illuminate\\Database\\Schema\\Builder::__construct",
		"doc": "Create a new database Schema manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_defaultStringLength",
		"name": "Illuminate\\Database\\Schema\\Builder::defaultStringLength",
		"doc": "Set the default string length for migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_defaultMorphKeyType",
		"name": "Illuminate\\Database\\Schema\\Builder::defaultMorphKeyType",
		"doc": "Set the default morph key type for migrations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_morphUsingUuids",
		"name": "Illuminate\\Database\\Schema\\Builder::morphUsingUuids",
		"doc": "Set the default morph key type for migrations to UUIDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_hasTable",
		"name": "Illuminate\\Database\\Schema\\Builder::hasTable",
		"doc": "Determine if the given table exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_hasColumn",
		"name": "Illuminate\\Database\\Schema\\Builder::hasColumn",
		"doc": "Determine if the given table has a given column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_hasColumns",
		"name": "Illuminate\\Database\\Schema\\Builder::hasColumns",
		"doc": "Determine if the given table has given columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_getColumnType",
		"name": "Illuminate\\Database\\Schema\\Builder::getColumnType",
		"doc": "Get the data type for the given column name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_getColumnListing",
		"name": "Illuminate\\Database\\Schema\\Builder::getColumnListing",
		"doc": "Get the column listing for a given table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_table",
		"name": "Illuminate\\Database\\Schema\\Builder::table",
		"doc": "Modify a table on the schema."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_create",
		"name": "Illuminate\\Database\\Schema\\Builder::create",
		"doc": "Create a new table on the schema."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_drop",
		"name": "Illuminate\\Database\\Schema\\Builder::drop",
		"doc": "Drop a table from the schema."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_dropIfExists",
		"name": "Illuminate\\Database\\Schema\\Builder::dropIfExists",
		"doc": "Drop a table from the schema if it exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_dropColumns",
		"name": "Illuminate\\Database\\Schema\\Builder::dropColumns",
		"doc": "Drop columns from a table schema."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_dropAllTables",
		"name": "Illuminate\\Database\\Schema\\Builder::dropAllTables",
		"doc": "Drop all tables from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_dropAllViews",
		"name": "Illuminate\\Database\\Schema\\Builder::dropAllViews",
		"doc": "Drop all views from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_dropAllTypes",
		"name": "Illuminate\\Database\\Schema\\Builder::dropAllTypes",
		"doc": "Drop all types from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_getAllTables",
		"name": "Illuminate\\Database\\Schema\\Builder::getAllTables",
		"doc": "Get all of the table names for the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_rename",
		"name": "Illuminate\\Database\\Schema\\Builder::rename",
		"doc": "Rename a table on the schema."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_enableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Builder::enableForeignKeyConstraints",
		"doc": "Enable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_disableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Builder::disableForeignKeyConstraints",
		"doc": "Disable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_build",
		"name": "Illuminate\\Database\\Schema\\Builder::build",
		"doc": "Execute the blueprint to build / modify the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_createBlueprint",
		"name": "Illuminate\\Database\\Schema\\Builder::createBlueprint",
		"doc": "Create a new command set with a Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_registerCustomDoctrineType",
		"name": "Illuminate\\Database\\Schema\\Builder::registerCustomDoctrineType",
		"doc": "Register a custom Doctrine mapping type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_getConnection",
		"name": "Illuminate\\Database\\Schema\\Builder::getConnection",
		"doc": "Get the database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_setConnection",
		"name": "Illuminate\\Database\\Schema\\Builder::setConnection",
		"doc": "Set the database connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Builder",
		"fromLink": "Illuminate/Database/Schema/Builder.html",
		"link": "Illuminate/Database/Schema/Builder.html#method_blueprintResolver",
		"name": "Illuminate\\Database\\Schema\\Builder::blueprintResolver",
		"doc": "Set the Schema Blueprint resolver callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/ColumnDefinition.html",
		"name": "Illuminate\\Database\\Schema\\ColumnDefinition",
		"doc": ""
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/ForeignIdColumnDefinition.html",
		"name": "Illuminate\\Database\\Schema\\ForeignIdColumnDefinition",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignIdColumnDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignIdColumnDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignIdColumnDefinition.html#method___construct",
		"name": "Illuminate\\Database\\Schema\\ForeignIdColumnDefinition::__construct",
		"doc": "Create a new foreign ID column definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignIdColumnDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignIdColumnDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignIdColumnDefinition.html#method_constrained",
		"name": "Illuminate\\Database\\Schema\\ForeignIdColumnDefinition::constrained",
		"doc": "Create a foreign key constraint on this column referencing the \"id\" column of the conventionally related table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignIdColumnDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignIdColumnDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignIdColumnDefinition.html#method_references",
		"name": "Illuminate\\Database\\Schema\\ForeignIdColumnDefinition::references",
		"doc": "Specify which column this foreign ID references on another table."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_cascadeOnUpdate",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::cascadeOnUpdate",
		"doc": "Indicate that updates should cascade."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_cascadeOnDelete",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::cascadeOnDelete",
		"doc": "Indicate that deletes should cascade."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_restrictOnDelete",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::restrictOnDelete",
		"doc": "Indicate that deletes should be restricted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_nullOnDelete",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::nullOnDelete",
		"doc": "Indicate that deletes should set the foreign key value to null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_deferrable",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::deferrable",
		"doc": "Set the foreign key as deferrable (PostgreSQL)"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_initiallyImmediate",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::initiallyImmediate",
		"doc": "Set the default time to check the constraint (PostgreSQL)"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_on",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::on",
		"doc": "Specify the referenced table"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_onDelete",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::onDelete",
		"doc": "Add an ON DELETE action"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_onUpdate",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::onUpdate",
		"doc": "Add an ON UPDATE action"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\ForeignKeyDefinition",
		"fromLink": "Illuminate/Database/Schema/ForeignKeyDefinition.html",
		"link": "Illuminate/Database/Schema/ForeignKeyDefinition.html#method_references",
		"name": "Illuminate\\Database\\Schema\\ForeignKeyDefinition::references",
		"doc": "Specify the referenced column(s)"
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema\\Grammars",
		"fromLink": "Illuminate/Database/Schema/Grammars.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_compile",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::compile",
		"doc": "Compile a change column command into a series of SQL statements."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_getChangedDiff",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::getChangedDiff",
		"doc": "Get the Doctrine table difference for the given changes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_getTableWithColumnChanges",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::getTableWithColumnChanges",
		"doc": "Get a copy of the given Doctrine table after making the column changes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_getDoctrineColumn",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::getDoctrineColumn",
		"doc": "Get the Doctrine column instance for a column change."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_getDoctrineColumnChangeOptions",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::getDoctrineColumnChangeOptions",
		"doc": "Get the Doctrine column change options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_getDoctrineColumnType",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::getDoctrineColumnType",
		"doc": "Get the doctrine column type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_calculateDoctrineTextLength",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::calculateDoctrineTextLength",
		"doc": "Calculate the proper column length to force the Doctrine text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_doesntNeedCharacterOptions",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::doesntNeedCharacterOptions",
		"doc": "Determine if the given type does not need character / collation options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_mapFluentOptionToDoctrine",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::mapFluentOptionToDoctrine",
		"doc": "Get the matching Doctrine option for a given Fluent attribute name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/ChangeColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/ChangeColumn.html#method_mapFluentValueToDoctrine",
		"name": "Illuminate\\Database\\Schema\\Grammars\\ChangeColumn::mapFluentValueToDoctrine",
		"doc": "Get the matching Doctrine value for a given Fluent attribute."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema\\Grammars",
		"fromLink": "Illuminate/Database/Schema/Grammars.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_compileRenameColumn",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::compileRenameColumn",
		"doc": "Compile a rename column command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_compileChange",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::compileChange",
		"doc": "Compile a change column command into a series of SQL statements."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_compileForeign",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::compileForeign",
		"doc": "Compile a foreign key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_getColumns",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::getColumns",
		"doc": "Compile the blueprint's column definitions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_getType",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::getType",
		"doc": "Get the SQL for the column data type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_typeComputed",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::typeComputed",
		"doc": "Create the column definition for a generated, computed column type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_addModifiers",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::addModifiers",
		"doc": "Add the column modifiers to the definition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_getCommandByName",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::getCommandByName",
		"doc": "Get the primary key command if it exists on the blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_getCommandsByName",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::getCommandsByName",
		"doc": "Get all of the commands with a given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_prefixArray",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::prefixArray",
		"doc": "Add a prefix to an array of values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_wrapTable",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::wrapTable",
		"doc": "Wrap a table in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_wrap",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::wrap",
		"doc": "Wrap a value in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_getDefaultValue",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::getDefaultValue",
		"doc": "Format a value so that it can be used in \"default\" clauses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_getDoctrineTableDiff",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::getDoctrineTableDiff",
		"doc": "Create an empty Doctrine DBAL TableDiff from the Blueprint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_getFluentCommands",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::getFluentCommands",
		"doc": "Get the fluent commands for the grammar."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\Grammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/Grammar.html",
		"link": "Illuminate/Database/Schema/Grammars/Grammar.html#method_supportsSchemaTransactions",
		"name": "Illuminate\\Database\\Schema\\Grammars\\Grammar::supportsSchemaTransactions",
		"doc": "Check if this Grammar supports schema changes wrapped in a transaction."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema\\Grammars",
		"fromLink": "Illuminate/Database/Schema/Grammars.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileTableExists",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileTableExists",
		"doc": "Compile the query to determine the list of tables."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileColumnListing",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileColumnListing",
		"doc": "Compile the query to determine the list of columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileCreate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileCreate",
		"doc": "Compile a create table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileCreateTable",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileCreateTable",
		"doc": "Create the main create table clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileCreateEncoding",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileCreateEncoding",
		"doc": "Append the character set specifications to a command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileCreateEngine",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileCreateEngine",
		"doc": "Append the engine specifications to a command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileAdd",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileAdd",
		"doc": "Compile an add column command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileAutoIncrementStartingValues",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileAutoIncrementStartingValues",
		"doc": "Compile the auto incrementing column starting values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compilePrimary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compilePrimary",
		"doc": "Compile a primary key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileUnique",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileUnique",
		"doc": "Compile a unique key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileIndex",
		"doc": "Compile a plain index key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileSpatialIndex",
		"doc": "Compile a spatial index key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileKey",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileKey",
		"doc": "Compile an index creation command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDrop",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDrop",
		"doc": "Compile a drop table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropIfExists",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropIfExists",
		"doc": "Compile a drop table (if exists) command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropColumn",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropColumn",
		"doc": "Compile a drop column command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropPrimary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropPrimary",
		"doc": "Compile a drop primary key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropUnique",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropUnique",
		"doc": "Compile a drop unique key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropIndex",
		"doc": "Compile a drop index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropSpatialIndex",
		"doc": "Compile a drop spatial index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropForeign",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropForeign",
		"doc": "Compile a drop foreign key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileRename",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileRename",
		"doc": "Compile a rename table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileRenameIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileRenameIndex",
		"doc": "Compile a rename index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropAllTables",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropAllTables",
		"doc": "Compile the SQL needed to drop all tables."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDropAllViews",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDropAllViews",
		"doc": "Compile the SQL needed to drop all views."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileGetAllTables",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileGetAllTables",
		"doc": "Compile the SQL needed to retrieve all table names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileGetAllViews",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileGetAllViews",
		"doc": "Compile the SQL needed to retrieve all view names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileEnableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileEnableForeignKeyConstraints",
		"doc": "Compile the command to enable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_compileDisableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::compileDisableForeignKeyConstraints",
		"doc": "Compile the command to disable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeChar",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeChar",
		"doc": "Create the column definition for a char type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeString",
		"doc": "Create the column definition for a string type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeText",
		"doc": "Create the column definition for a text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeMediumText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeMediumText",
		"doc": "Create the column definition for a medium text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeLongText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeLongText",
		"doc": "Create the column definition for a long text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeBigInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeBigInteger",
		"doc": "Create the column definition for a big integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeInteger",
		"doc": "Create the column definition for an integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeMediumInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeMediumInteger",
		"doc": "Create the column definition for a medium integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeTinyInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeTinyInteger",
		"doc": "Create the column definition for a tiny integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeSmallInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeSmallInteger",
		"doc": "Create the column definition for a small integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeFloat",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeFloat",
		"doc": "Create the column definition for a float type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeDouble",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeDouble",
		"doc": "Create the column definition for a double type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeDecimal",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeDecimal",
		"doc": "Create the column definition for a decimal type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeBoolean",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeBoolean",
		"doc": "Create the column definition for a boolean type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeEnum",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeEnum",
		"doc": "Create the column definition for an enumeration type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeSet",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeSet",
		"doc": "Create the column definition for a set enumeration type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeJson",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeJson",
		"doc": "Create the column definition for a json type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeJsonb",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeJsonb",
		"doc": "Create the column definition for a jsonb type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeDate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeDate",
		"doc": "Create the column definition for a date type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeDateTime",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeDateTime",
		"doc": "Create the column definition for a date-time type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeDateTimeTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeDateTimeTz",
		"doc": "Create the column definition for a date-time (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeTime",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeTime",
		"doc": "Create the column definition for a time type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeTimeTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeTimeTz",
		"doc": "Create the column definition for a time (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeTimestamp",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeTimestamp",
		"doc": "Create the column definition for a timestamp type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeTimestampTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeTimestampTz",
		"doc": "Create the column definition for a timestamp (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeYear",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeYear",
		"doc": "Create the column definition for a year type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeBinary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeBinary",
		"doc": "Create the column definition for a binary type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeUuid",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeUuid",
		"doc": "Create the column definition for a uuid type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeIpAddress",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeIpAddress",
		"doc": "Create the column definition for an IP address type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeMacAddress",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeMacAddress",
		"doc": "Create the column definition for a MAC address type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeGeometry",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeGeometry",
		"doc": "Create the column definition for a spatial Geometry type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typePoint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typePoint",
		"doc": "Create the column definition for a spatial Point type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeLineString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeLineString",
		"doc": "Create the column definition for a spatial LineString type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typePolygon",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typePolygon",
		"doc": "Create the column definition for a spatial Polygon type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeGeometryCollection",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeGeometryCollection",
		"doc": "Create the column definition for a spatial GeometryCollection type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeMultiPoint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeMultiPoint",
		"doc": "Create the column definition for a spatial MultiPoint type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeMultiLineString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeMultiLineString",
		"doc": "Create the column definition for a spatial MultiLineString type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeMultiPolygon",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeMultiPolygon",
		"doc": "Create the column definition for a spatial MultiPolygon type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_typeComputed",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::typeComputed",
		"doc": "Create the column definition for a generated, computed column type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyVirtualAs",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyVirtualAs",
		"doc": "Get the SQL for a generated virtual column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyStoredAs",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyStoredAs",
		"doc": "Get the SQL for a generated stored column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyUnsigned",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyUnsigned",
		"doc": "Get the SQL for an unsigned column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyCharset",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyCharset",
		"doc": "Get the SQL for a character set column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyCollate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyCollate",
		"doc": "Get the SQL for a collation column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyNullable",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyNullable",
		"doc": "Get the SQL for a nullable column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyDefault",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyDefault",
		"doc": "Get the SQL for a default column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyIncrement",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyIncrement",
		"doc": "Get the SQL for an auto-increment column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyFirst",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyFirst",
		"doc": "Get the SQL for a \"first\" column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyAfter",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyAfter",
		"doc": "Get the SQL for an \"after\" column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifyComment",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifyComment",
		"doc": "Get the SQL for a \"comment\" column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_modifySrid",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::modifySrid",
		"doc": "Get the SQL for a SRID column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/MySqlGrammar.html#method_wrapValue",
		"name": "Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar::wrapValue",
		"doc": "Wrap a single string in keyword identifiers."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema\\Grammars",
		"fromLink": "Illuminate/Database/Schema/Grammars.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileTableExists",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileTableExists",
		"doc": "Compile the query to determine if a table exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileColumnListing",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileColumnListing",
		"doc": "Compile the query to determine the list of columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileCreate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileCreate",
		"doc": "Compile a create table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileAdd",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileAdd",
		"doc": "Compile a column addition command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileAutoIncrementStartingValues",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileAutoIncrementStartingValues",
		"doc": "Compile the auto incrementing column starting values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compilePrimary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compilePrimary",
		"doc": "Compile a primary key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileUnique",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileUnique",
		"doc": "Compile a unique key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileIndex",
		"doc": "Compile a plain index key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileSpatialIndex",
		"doc": "Compile a spatial index key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileForeign",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileForeign",
		"doc": "Compile a foreign key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDrop",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDrop",
		"doc": "Compile a drop table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropIfExists",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropIfExists",
		"doc": "Compile a drop table (if exists) command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropAllTables",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropAllTables",
		"doc": "Compile the SQL needed to drop all tables."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropAllViews",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropAllViews",
		"doc": "Compile the SQL needed to drop all views."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropAllTypes",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropAllTypes",
		"doc": "Compile the SQL needed to drop all types."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileGetAllTables",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileGetAllTables",
		"doc": "Compile the SQL needed to retrieve all table names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileGetAllViews",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileGetAllViews",
		"doc": "Compile the SQL needed to retrieve all view names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileGetAllTypes",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileGetAllTypes",
		"doc": "Compile the SQL needed to retrieve all type names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropColumn",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropColumn",
		"doc": "Compile a drop column command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropPrimary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropPrimary",
		"doc": "Compile a drop primary key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropUnique",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropUnique",
		"doc": "Compile a drop unique key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropIndex",
		"doc": "Compile a drop index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropSpatialIndex",
		"doc": "Compile a drop spatial index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDropForeign",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDropForeign",
		"doc": "Compile a drop foreign key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileRename",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileRename",
		"doc": "Compile a rename table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileRenameIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileRenameIndex",
		"doc": "Compile a rename index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileEnableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileEnableForeignKeyConstraints",
		"doc": "Compile the command to enable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileDisableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileDisableForeignKeyConstraints",
		"doc": "Compile the command to disable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_compileComment",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::compileComment",
		"doc": "Compile a comment command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeChar",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeChar",
		"doc": "Create the column definition for a char type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeString",
		"doc": "Create the column definition for a string type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeText",
		"doc": "Create the column definition for a text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeMediumText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeMediumText",
		"doc": "Create the column definition for a medium text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeLongText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeLongText",
		"doc": "Create the column definition for a long text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeInteger",
		"doc": "Create the column definition for an integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeBigInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeBigInteger",
		"doc": "Create the column definition for a big integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeMediumInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeMediumInteger",
		"doc": "Create the column definition for a medium integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeTinyInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeTinyInteger",
		"doc": "Create the column definition for a tiny integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeSmallInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeSmallInteger",
		"doc": "Create the column definition for a small integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_generatableColumn",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::generatableColumn",
		"doc": "Create the column definition for a generatable column."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeFloat",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeFloat",
		"doc": "Create the column definition for a float type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeDouble",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeDouble",
		"doc": "Create the column definition for a double type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeReal",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeReal",
		"doc": "Create the column definition for a real type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeDecimal",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeDecimal",
		"doc": "Create the column definition for a decimal type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeBoolean",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeBoolean",
		"doc": "Create the column definition for a boolean type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeEnum",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeEnum",
		"doc": "Create the column definition for an enumeration type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeJson",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeJson",
		"doc": "Create the column definition for a json type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeJsonb",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeJsonb",
		"doc": "Create the column definition for a jsonb type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeDate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeDate",
		"doc": "Create the column definition for a date type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeDateTime",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeDateTime",
		"doc": "Create the column definition for a date-time type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeDateTimeTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeDateTimeTz",
		"doc": "Create the column definition for a date-time (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeTime",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeTime",
		"doc": "Create the column definition for a time type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeTimeTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeTimeTz",
		"doc": "Create the column definition for a time (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeTimestamp",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeTimestamp",
		"doc": "Create the column definition for a timestamp type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeTimestampTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeTimestampTz",
		"doc": "Create the column definition for a timestamp (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeYear",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeYear",
		"doc": "Create the column definition for a year type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeBinary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeBinary",
		"doc": "Create the column definition for a binary type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeUuid",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeUuid",
		"doc": "Create the column definition for a uuid type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeIpAddress",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeIpAddress",
		"doc": "Create the column definition for an IP address type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeMacAddress",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeMacAddress",
		"doc": "Create the column definition for a MAC address type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeGeometry",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeGeometry",
		"doc": "Create the column definition for a spatial Geometry type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typePoint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typePoint",
		"doc": "Create the column definition for a spatial Point type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeLineString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeLineString",
		"doc": "Create the column definition for a spatial LineString type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typePolygon",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typePolygon",
		"doc": "Create the column definition for a spatial Polygon type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeGeometryCollection",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeGeometryCollection",
		"doc": "Create the column definition for a spatial GeometryCollection type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeMultiPoint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeMultiPoint",
		"doc": "Create the column definition for a spatial MultiPoint type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeMultiLineString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeMultiLineString",
		"doc": "Create the column definition for a spatial MultiLineString type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeMultiPolygon",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeMultiPolygon",
		"doc": "Create the column definition for a spatial MultiPolygon type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_typeMultiPolygonZ",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::typeMultiPolygonZ",
		"doc": "Create the column definition for a spatial MultiPolygonZ type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_modifyCollate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::modifyCollate",
		"doc": "Get the SQL for a collation column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_modifyNullable",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::modifyNullable",
		"doc": "Get the SQL for a nullable column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_modifyDefault",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::modifyDefault",
		"doc": "Get the SQL for a default column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_modifyIncrement",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::modifyIncrement",
		"doc": "Get the SQL for an auto-increment column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_modifyVirtualAs",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::modifyVirtualAs",
		"doc": "Get the SQL for a generated virtual column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/PostgresGrammar.html#method_modifyStoredAs",
		"name": "Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar::modifyStoredAs",
		"doc": "Get the SQL for a generated stored column modifier."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema\\Grammars",
		"fromLink": "Illuminate/Database/Schema/Grammars.html",
		"link": "Illuminate/Database/Schema/Grammars/RenameColumn.html",
		"name": "Illuminate\\Database\\Schema\\Grammars\\RenameColumn",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\RenameColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/RenameColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/RenameColumn.html#method_compile",
		"name": "Illuminate\\Database\\Schema\\Grammars\\RenameColumn::compile",
		"doc": "Compile a rename column command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\RenameColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/RenameColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/RenameColumn.html#method_getRenamedDiff",
		"name": "Illuminate\\Database\\Schema\\Grammars\\RenameColumn::getRenamedDiff",
		"doc": "Get a new column instance with the new column name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\RenameColumn",
		"fromLink": "Illuminate/Database/Schema/Grammars/RenameColumn.html",
		"link": "Illuminate/Database/Schema/Grammars/RenameColumn.html#method_setRenamedColumns",
		"name": "Illuminate\\Database\\Schema\\Grammars\\RenameColumn::setRenamedColumns",
		"doc": "Set the renamed columns on the table diff."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema\\Grammars",
		"fromLink": "Illuminate/Database/Schema/Grammars.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileTableExists",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileTableExists",
		"doc": "Compile the query to determine if a table exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileColumnListing",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileColumnListing",
		"doc": "Compile the query to determine the list of columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileCreate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileCreate",
		"doc": "Compile a create table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_addForeignKeys",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::addForeignKeys",
		"doc": "Get the foreign key syntax for a table creation statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_getForeignKey",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::getForeignKey",
		"doc": "Get the SQL for the foreign key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_addPrimaryKeys",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::addPrimaryKeys",
		"doc": "Get the primary key syntax for a table creation statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileAdd",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileAdd",
		"doc": "Compile alter table commands for adding columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileUnique",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileUnique",
		"doc": "Compile a unique key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileIndex",
		"doc": "Compile a plain index key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileSpatialIndex",
		"doc": "Compile a spatial index key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileForeign",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileForeign",
		"doc": "Compile a foreign key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDrop",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDrop",
		"doc": "Compile a drop table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDropIfExists",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDropIfExists",
		"doc": "Compile a drop table (if exists) command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDropAllTables",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDropAllTables",
		"doc": "Compile the SQL needed to drop all tables."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDropAllViews",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDropAllViews",
		"doc": "Compile the SQL needed to drop all views."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileRebuild",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileRebuild",
		"doc": "Compile the SQL needed to rebuild the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDropColumn",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDropColumn",
		"doc": "Compile a drop column command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDropUnique",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDropUnique",
		"doc": "Compile a drop unique key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDropIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDropIndex",
		"doc": "Compile a drop index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDropSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDropSpatialIndex",
		"doc": "Compile a drop spatial index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileRename",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileRename",
		"doc": "Compile a rename table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileRenameIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileRenameIndex",
		"doc": "Compile a rename index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileEnableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileEnableForeignKeyConstraints",
		"doc": "Compile the command to enable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDisableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDisableForeignKeyConstraints",
		"doc": "Compile the command to disable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileEnableWriteableSchema",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileEnableWriteableSchema",
		"doc": "Compile the SQL needed to enable a writable schema."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_compileDisableWriteableSchema",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::compileDisableWriteableSchema",
		"doc": "Compile the SQL needed to disable a writable schema."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeChar",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeChar",
		"doc": "Create the column definition for a char type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeString",
		"doc": "Create the column definition for a string type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeText",
		"doc": "Create the column definition for a text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeMediumText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeMediumText",
		"doc": "Create the column definition for a medium text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeLongText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeLongText",
		"doc": "Create the column definition for a long text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeInteger",
		"doc": "Create the column definition for an integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeBigInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeBigInteger",
		"doc": "Create the column definition for a big integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeMediumInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeMediumInteger",
		"doc": "Create the column definition for a medium integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeTinyInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeTinyInteger",
		"doc": "Create the column definition for a tiny integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeSmallInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeSmallInteger",
		"doc": "Create the column definition for a small integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeFloat",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeFloat",
		"doc": "Create the column definition for a float type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeDouble",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeDouble",
		"doc": "Create the column definition for a double type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeDecimal",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeDecimal",
		"doc": "Create the column definition for a decimal type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeBoolean",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeBoolean",
		"doc": "Create the column definition for a boolean type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeEnum",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeEnum",
		"doc": "Create the column definition for an enumeration type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeJson",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeJson",
		"doc": "Create the column definition for a json type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeJsonb",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeJsonb",
		"doc": "Create the column definition for a jsonb type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeDate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeDate",
		"doc": "Create the column definition for a date type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeDateTime",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeDateTime",
		"doc": "Create the column definition for a date-time type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeDateTimeTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeDateTimeTz",
		"doc": "Create the column definition for a date-time (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeTime",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeTime",
		"doc": "Create the column definition for a time type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeTimeTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeTimeTz",
		"doc": "Create the column definition for a time (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeTimestamp",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeTimestamp",
		"doc": "Create the column definition for a timestamp type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeTimestampTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeTimestampTz",
		"doc": "Create the column definition for a timestamp (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeYear",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeYear",
		"doc": "Create the column definition for a year type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeBinary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeBinary",
		"doc": "Create the column definition for a binary type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeUuid",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeUuid",
		"doc": "Create the column definition for a uuid type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeIpAddress",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeIpAddress",
		"doc": "Create the column definition for an IP address type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeMacAddress",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeMacAddress",
		"doc": "Create the column definition for a MAC address type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeGeometry",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeGeometry",
		"doc": "Create the column definition for a spatial Geometry type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typePoint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typePoint",
		"doc": "Create the column definition for a spatial Point type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeLineString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeLineString",
		"doc": "Create the column definition for a spatial LineString type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typePolygon",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typePolygon",
		"doc": "Create the column definition for a spatial Polygon type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeGeometryCollection",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeGeometryCollection",
		"doc": "Create the column definition for a spatial GeometryCollection type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeMultiPoint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeMultiPoint",
		"doc": "Create the column definition for a spatial MultiPoint type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeMultiLineString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeMultiLineString",
		"doc": "Create the column definition for a spatial MultiLineString type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeMultiPolygon",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeMultiPolygon",
		"doc": "Create the column definition for a spatial MultiPolygon type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_typeComputed",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::typeComputed",
		"doc": "Create the column definition for a generated, computed column type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_modifyVirtualAs",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::modifyVirtualAs",
		"doc": "Get the SQL for a generated virtual column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_modifyStoredAs",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::modifyStoredAs",
		"doc": "Get the SQL for a generated stored column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_modifyNullable",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::modifyNullable",
		"doc": "Get the SQL for a nullable column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_modifyDefault",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::modifyDefault",
		"doc": "Get the SQL for a default column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SQLiteGrammar.html#method_modifyIncrement",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar::modifyIncrement",
		"doc": "Get the SQL for an auto-increment column modifier."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema\\Grammars",
		"fromLink": "Illuminate/Database/Schema/Grammars.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileTableExists",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileTableExists",
		"doc": "Compile the query to determine if a table exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileColumnListing",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileColumnListing",
		"doc": "Compile the query to determine the list of columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileCreate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileCreate",
		"doc": "Compile a create table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileAdd",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileAdd",
		"doc": "Compile a column addition table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compilePrimary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compilePrimary",
		"doc": "Compile a primary key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileUnique",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileUnique",
		"doc": "Compile a unique key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileIndex",
		"doc": "Compile a plain index key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileSpatialIndex",
		"doc": "Compile a spatial index key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDrop",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDrop",
		"doc": "Compile a drop table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropIfExists",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropIfExists",
		"doc": "Compile a drop table (if exists) command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropAllTables",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropAllTables",
		"doc": "Compile the SQL needed to drop all tables."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropColumn",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropColumn",
		"doc": "Compile a drop column command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropDefaultConstraint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropDefaultConstraint",
		"doc": "Compile a drop default constraint command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropPrimary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropPrimary",
		"doc": "Compile a drop primary key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropUnique",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropUnique",
		"doc": "Compile a drop unique key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropIndex",
		"doc": "Compile a drop index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropSpatialIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropSpatialIndex",
		"doc": "Compile a drop spatial index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropForeign",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropForeign",
		"doc": "Compile a drop foreign key command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileRename",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileRename",
		"doc": "Compile a rename table command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileRenameIndex",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileRenameIndex",
		"doc": "Compile a rename index command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileEnableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileEnableForeignKeyConstraints",
		"doc": "Compile the command to enable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDisableForeignKeyConstraints",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDisableForeignKeyConstraints",
		"doc": "Compile the command to disable foreign key constraints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropAllForeignKeys",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropAllForeignKeys",
		"doc": "Compile the command to drop all foreign keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_compileDropAllViews",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::compileDropAllViews",
		"doc": "Compile the command to drop all views."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeChar",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeChar",
		"doc": "Create the column definition for a char type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeString",
		"doc": "Create the column definition for a string type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeText",
		"doc": "Create the column definition for a text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeMediumText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeMediumText",
		"doc": "Create the column definition for a medium text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeLongText",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeLongText",
		"doc": "Create the column definition for a long text type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeInteger",
		"doc": "Create the column definition for an integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeBigInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeBigInteger",
		"doc": "Create the column definition for a big integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeMediumInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeMediumInteger",
		"doc": "Create the column definition for a medium integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeTinyInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeTinyInteger",
		"doc": "Create the column definition for a tiny integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeSmallInteger",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeSmallInteger",
		"doc": "Create the column definition for a small integer type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeFloat",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeFloat",
		"doc": "Create the column definition for a float type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeDouble",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeDouble",
		"doc": "Create the column definition for a double type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeDecimal",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeDecimal",
		"doc": "Create the column definition for a decimal type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeBoolean",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeBoolean",
		"doc": "Create the column definition for a boolean type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeEnum",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeEnum",
		"doc": "Create the column definition for an enumeration type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeJson",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeJson",
		"doc": "Create the column definition for a json type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeJsonb",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeJsonb",
		"doc": "Create the column definition for a jsonb type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeDate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeDate",
		"doc": "Create the column definition for a date type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeDateTime",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeDateTime",
		"doc": "Create the column definition for a date-time type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeDateTimeTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeDateTimeTz",
		"doc": "Create the column definition for a date-time (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeTime",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeTime",
		"doc": "Create the column definition for a time type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeTimeTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeTimeTz",
		"doc": "Create the column definition for a time (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeTimestamp",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeTimestamp",
		"doc": "Create the column definition for a timestamp type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeTimestampTz",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeTimestampTz",
		"doc": "Create the column definition for a timestamp (with time zone) type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeYear",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeYear",
		"doc": "Create the column definition for a year type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeBinary",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeBinary",
		"doc": "Create the column definition for a binary type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeUuid",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeUuid",
		"doc": "Create the column definition for a uuid type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeIpAddress",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeIpAddress",
		"doc": "Create the column definition for an IP address type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeMacAddress",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeMacAddress",
		"doc": "Create the column definition for a MAC address type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeGeometry",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeGeometry",
		"doc": "Create the column definition for a spatial Geometry type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typePoint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typePoint",
		"doc": "Create the column definition for a spatial Point type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeLineString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeLineString",
		"doc": "Create the column definition for a spatial LineString type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typePolygon",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typePolygon",
		"doc": "Create the column definition for a spatial Polygon type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeGeometryCollection",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeGeometryCollection",
		"doc": "Create the column definition for a spatial GeometryCollection type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeMultiPoint",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeMultiPoint",
		"doc": "Create the column definition for a spatial MultiPoint type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeMultiLineString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeMultiLineString",
		"doc": "Create the column definition for a spatial MultiLineString type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeMultiPolygon",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeMultiPolygon",
		"doc": "Create the column definition for a spatial MultiPolygon type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_typeComputed",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::typeComputed",
		"doc": "Create the column definition for a generated, computed column type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_modifyCollate",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::modifyCollate",
		"doc": "Get the SQL for a collation column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_modifyNullable",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::modifyNullable",
		"doc": "Get the SQL for a nullable column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_modifyDefault",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::modifyDefault",
		"doc": "Get the SQL for a default column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_modifyIncrement",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::modifyIncrement",
		"doc": "Get the SQL for an auto-increment column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_modifyPersisted",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::modifyPersisted",
		"doc": "Get the SQL for a generated stored column modifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_wrapTable",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::wrapTable",
		"doc": "Wrap a table in keyword identifiers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar",
		"fromLink": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html",
		"link": "Illuminate/Database/Schema/Grammars/SqlServerGrammar.html#method_quoteString",
		"name": "Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar::quoteString",
		"doc": "Quote the given string literal."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/MySqlBuilder.html",
		"name": "Illuminate\\Database\\Schema\\MySqlBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlBuilder",
		"fromLink": "Illuminate/Database/Schema/MySqlBuilder.html",
		"link": "Illuminate/Database/Schema/MySqlBuilder.html#method_hasTable",
		"name": "Illuminate\\Database\\Schema\\MySqlBuilder::hasTable",
		"doc": "Determine if the given table exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlBuilder",
		"fromLink": "Illuminate/Database/Schema/MySqlBuilder.html",
		"link": "Illuminate/Database/Schema/MySqlBuilder.html#method_getColumnListing",
		"name": "Illuminate\\Database\\Schema\\MySqlBuilder::getColumnListing",
		"doc": "Get the column listing for a given table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlBuilder",
		"fromLink": "Illuminate/Database/Schema/MySqlBuilder.html",
		"link": "Illuminate/Database/Schema/MySqlBuilder.html#method_dropAllTables",
		"name": "Illuminate\\Database\\Schema\\MySqlBuilder::dropAllTables",
		"doc": "Drop all tables from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlBuilder",
		"fromLink": "Illuminate/Database/Schema/MySqlBuilder.html",
		"link": "Illuminate/Database/Schema/MySqlBuilder.html#method_dropAllViews",
		"name": "Illuminate\\Database\\Schema\\MySqlBuilder::dropAllViews",
		"doc": "Drop all views from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlBuilder",
		"fromLink": "Illuminate/Database/Schema/MySqlBuilder.html",
		"link": "Illuminate/Database/Schema/MySqlBuilder.html#method_getAllTables",
		"name": "Illuminate\\Database\\Schema\\MySqlBuilder::getAllTables",
		"doc": "Get all of the table names for the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlBuilder",
		"fromLink": "Illuminate/Database/Schema/MySqlBuilder.html",
		"link": "Illuminate/Database/Schema/MySqlBuilder.html#method_getAllViews",
		"name": "Illuminate\\Database\\Schema\\MySqlBuilder::getAllViews",
		"doc": "Get all of the view names for the database."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"fromLink": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html#method_dump",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState::dump",
		"doc": "Dump the database's schema into a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"fromLink": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html#method_removeAutoIncrementingState",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState::removeAutoIncrementingState",
		"doc": "Remove the auto-incrementing state from the given schema dump."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"fromLink": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html#method_appendMigrationData",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState::appendMigrationData",
		"doc": "Append the migration data to the schema dump."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"fromLink": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html#method_load",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState::load",
		"doc": "Load the given schema file into the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"fromLink": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html#method_baseDumpCommand",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState::baseDumpCommand",
		"doc": "Get the base dump command arguments for MySQL as a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"fromLink": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html#method_connectionString",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState::connectionString",
		"doc": "Generate a basic connection string (--socket, --host, --port, --user, --password) for the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"fromLink": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html#method_baseVariables",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState::baseVariables",
		"doc": "Get the base variables for a dump / load command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\MySqlSchemaState",
		"fromLink": "Illuminate/Database/Schema/MySqlSchemaState.html",
		"link": "Illuminate/Database/Schema/MySqlSchemaState.html#method_executeDumpProcess",
		"name": "Illuminate\\Database\\Schema\\MySqlSchemaState::executeDumpProcess",
		"doc": "Execute the given dump process."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_hasTable",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::hasTable",
		"doc": "Determine if the given table exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_dropAllTables",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::dropAllTables",
		"doc": "Drop all tables from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_dropAllViews",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::dropAllViews",
		"doc": "Drop all views from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_dropAllTypes",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::dropAllTypes",
		"doc": "Drop all types from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_getAllTables",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::getAllTables",
		"doc": "Get all of the table names for the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_getAllViews",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::getAllViews",
		"doc": "Get all of the view names for the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_getAllTypes",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::getAllTypes",
		"doc": "Get all of the type names for the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_getColumnListing",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::getColumnListing",
		"doc": "Get the column listing for a given table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresBuilder",
		"fromLink": "Illuminate/Database/Schema/PostgresBuilder.html",
		"link": "Illuminate/Database/Schema/PostgresBuilder.html#method_parseSchemaAndTable",
		"name": "Illuminate\\Database\\Schema\\PostgresBuilder::parseSchemaAndTable",
		"doc": "Parse the table name and extract the schema and table."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/PostgresSchemaState.html",
		"name": "Illuminate\\Database\\Schema\\PostgresSchemaState",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresSchemaState",
		"fromLink": "Illuminate/Database/Schema/PostgresSchemaState.html",
		"link": "Illuminate/Database/Schema/PostgresSchemaState.html#method_dump",
		"name": "Illuminate\\Database\\Schema\\PostgresSchemaState::dump",
		"doc": "Dump the database's schema into a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresSchemaState",
		"fromLink": "Illuminate/Database/Schema/PostgresSchemaState.html",
		"link": "Illuminate/Database/Schema/PostgresSchemaState.html#method_load",
		"name": "Illuminate\\Database\\Schema\\PostgresSchemaState::load",
		"doc": "Load the given schema file into the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresSchemaState",
		"fromLink": "Illuminate/Database/Schema/PostgresSchemaState.html",
		"link": "Illuminate/Database/Schema/PostgresSchemaState.html#method_baseDumpCommand",
		"name": "Illuminate\\Database\\Schema\\PostgresSchemaState::baseDumpCommand",
		"doc": "Get the base dump command arguments for PostgreSQL as a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\PostgresSchemaState",
		"fromLink": "Illuminate/Database/Schema/PostgresSchemaState.html",
		"link": "Illuminate/Database/Schema/PostgresSchemaState.html#method_baseVariables",
		"name": "Illuminate\\Database\\Schema\\PostgresSchemaState::baseVariables",
		"doc": "Get the base variables for a dump / load command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/SQLiteBuilder.html",
		"name": "Illuminate\\Database\\Schema\\SQLiteBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SQLiteBuilder",
		"fromLink": "Illuminate/Database/Schema/SQLiteBuilder.html",
		"link": "Illuminate/Database/Schema/SQLiteBuilder.html#method_dropAllTables",
		"name": "Illuminate\\Database\\Schema\\SQLiteBuilder::dropAllTables",
		"doc": "Drop all tables from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SQLiteBuilder",
		"fromLink": "Illuminate/Database/Schema/SQLiteBuilder.html",
		"link": "Illuminate/Database/Schema/SQLiteBuilder.html#method_dropAllViews",
		"name": "Illuminate\\Database\\Schema\\SQLiteBuilder::dropAllViews",
		"doc": "Drop all views from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SQLiteBuilder",
		"fromLink": "Illuminate/Database/Schema/SQLiteBuilder.html",
		"link": "Illuminate/Database/Schema/SQLiteBuilder.html#method_refreshDatabaseFile",
		"name": "Illuminate\\Database\\Schema\\SQLiteBuilder::refreshDatabaseFile",
		"doc": "Empty the database file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/SchemaState.html",
		"name": "Illuminate\\Database\\Schema\\SchemaState",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SchemaState",
		"fromLink": "Illuminate/Database/Schema/SchemaState.html",
		"link": "Illuminate/Database/Schema/SchemaState.html#method___construct",
		"name": "Illuminate\\Database\\Schema\\SchemaState::__construct",
		"doc": "Create a new dumper instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SchemaState",
		"fromLink": "Illuminate/Database/Schema/SchemaState.html",
		"link": "Illuminate/Database/Schema/SchemaState.html#method_dump",
		"name": "Illuminate\\Database\\Schema\\SchemaState::dump",
		"doc": "Dump the database's schema into a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SchemaState",
		"fromLink": "Illuminate/Database/Schema/SchemaState.html",
		"link": "Illuminate/Database/Schema/SchemaState.html#method_load",
		"name": "Illuminate\\Database\\Schema\\SchemaState::load",
		"doc": "Load the given schema file into the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SchemaState",
		"fromLink": "Illuminate/Database/Schema/SchemaState.html",
		"link": "Illuminate/Database/Schema/SchemaState.html#method_makeProcess",
		"name": "Illuminate\\Database\\Schema\\SchemaState::makeProcess",
		"doc": "Create a new process instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SchemaState",
		"fromLink": "Illuminate/Database/Schema/SchemaState.html",
		"link": "Illuminate/Database/Schema/SchemaState.html#method_withMigrationTable",
		"name": "Illuminate\\Database\\Schema\\SchemaState::withMigrationTable",
		"doc": "Specify the name of the application's migration table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SchemaState",
		"fromLink": "Illuminate/Database/Schema/SchemaState.html",
		"link": "Illuminate/Database/Schema/SchemaState.html#method_handleOutputUsing",
		"name": "Illuminate\\Database\\Schema\\SchemaState::handleOutputUsing",
		"doc": "Specify the callback that should be used to handle process output."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/SqlServerBuilder.html",
		"name": "Illuminate\\Database\\Schema\\SqlServerBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SqlServerBuilder",
		"fromLink": "Illuminate/Database/Schema/SqlServerBuilder.html",
		"link": "Illuminate/Database/Schema/SqlServerBuilder.html#method_dropAllTables",
		"name": "Illuminate\\Database\\Schema\\SqlServerBuilder::dropAllTables",
		"doc": "Drop all tables from the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SqlServerBuilder",
		"fromLink": "Illuminate/Database/Schema/SqlServerBuilder.html",
		"link": "Illuminate/Database/Schema/SqlServerBuilder.html#method_dropAllViews",
		"name": "Illuminate\\Database\\Schema\\SqlServerBuilder::dropAllViews",
		"doc": "Drop all views from the database."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database\\Schema",
		"fromLink": "Illuminate/Database/Schema.html",
		"link": "Illuminate/Database/Schema/SqliteSchemaState.html",
		"name": "Illuminate\\Database\\Schema\\SqliteSchemaState",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SqliteSchemaState",
		"fromLink": "Illuminate/Database/Schema/SqliteSchemaState.html",
		"link": "Illuminate/Database/Schema/SqliteSchemaState.html#method_dump",
		"name": "Illuminate\\Database\\Schema\\SqliteSchemaState::dump",
		"doc": "Dump the database's schema into a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SqliteSchemaState",
		"fromLink": "Illuminate/Database/Schema/SqliteSchemaState.html",
		"link": "Illuminate/Database/Schema/SqliteSchemaState.html#method_appendMigrationData",
		"name": "Illuminate\\Database\\Schema\\SqliteSchemaState::appendMigrationData",
		"doc": "Append the migration data to the schema dump."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SqliteSchemaState",
		"fromLink": "Illuminate/Database/Schema/SqliteSchemaState.html",
		"link": "Illuminate/Database/Schema/SqliteSchemaState.html#method_load",
		"name": "Illuminate\\Database\\Schema\\SqliteSchemaState::load",
		"doc": "Load the given schema file into the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SqliteSchemaState",
		"fromLink": "Illuminate/Database/Schema/SqliteSchemaState.html",
		"link": "Illuminate/Database/Schema/SqliteSchemaState.html#method_baseCommand",
		"name": "Illuminate\\Database\\Schema\\SqliteSchemaState::baseCommand",
		"doc": "Get the base sqlite command arguments as a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Schema\\SqliteSchemaState",
		"fromLink": "Illuminate/Database/Schema/SqliteSchemaState.html",
		"link": "Illuminate/Database/Schema/SqliteSchemaState.html#method_baseVariables",
		"name": "Illuminate\\Database\\Schema\\SqliteSchemaState::baseVariables",
		"doc": "Get the base variables for a dump / load command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/Seeder.html",
		"name": "Illuminate\\Database\\Seeder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Seeder",
		"fromLink": "Illuminate/Database/Seeder.html",
		"link": "Illuminate/Database/Seeder.html#method_call",
		"name": "Illuminate\\Database\\Seeder::call",
		"doc": "Run the given seeder class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Seeder",
		"fromLink": "Illuminate/Database/Seeder.html",
		"link": "Illuminate/Database/Seeder.html#method_callWith",
		"name": "Illuminate\\Database\\Seeder::callWith",
		"doc": "Run the given seeder class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Seeder",
		"fromLink": "Illuminate/Database/Seeder.html",
		"link": "Illuminate/Database/Seeder.html#method_callSilent",
		"name": "Illuminate\\Database\\Seeder::callSilent",
		"doc": "Silently run the given seeder class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Seeder",
		"fromLink": "Illuminate/Database/Seeder.html",
		"link": "Illuminate/Database/Seeder.html#method_resolve",
		"name": "Illuminate\\Database\\Seeder::resolve",
		"doc": "Resolve an instance of the given seeder class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Seeder",
		"fromLink": "Illuminate/Database/Seeder.html",
		"link": "Illuminate/Database/Seeder.html#method_setContainer",
		"name": "Illuminate\\Database\\Seeder::setContainer",
		"doc": "Set the IoC container instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Seeder",
		"fromLink": "Illuminate/Database/Seeder.html",
		"link": "Illuminate/Database/Seeder.html#method_setCommand",
		"name": "Illuminate\\Database\\Seeder::setCommand",
		"doc": "Set the console command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\Seeder",
		"fromLink": "Illuminate/Database/Seeder.html",
		"link": "Illuminate/Database/Seeder.html#method___invoke",
		"name": "Illuminate\\Database\\Seeder::__invoke",
		"doc": "Run the database seeds."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Database",
		"fromLink": "Illuminate/Database.html",
		"link": "Illuminate/Database/SqlServerConnection.html",
		"name": "Illuminate\\Database\\SqlServerConnection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SqlServerConnection",
		"fromLink": "Illuminate/Database/SqlServerConnection.html",
		"link": "Illuminate/Database/SqlServerConnection.html#method_transaction",
		"name": "Illuminate\\Database\\SqlServerConnection::transaction",
		"doc": "Execute a Closure within a transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SqlServerConnection",
		"fromLink": "Illuminate/Database/SqlServerConnection.html",
		"link": "Illuminate/Database/SqlServerConnection.html#method_getDefaultQueryGrammar",
		"name": "Illuminate\\Database\\SqlServerConnection::getDefaultQueryGrammar",
		"doc": "Get the default query grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SqlServerConnection",
		"fromLink": "Illuminate/Database/SqlServerConnection.html",
		"link": "Illuminate/Database/SqlServerConnection.html#method_getSchemaBuilder",
		"name": "Illuminate\\Database\\SqlServerConnection::getSchemaBuilder",
		"doc": "Get a schema builder instance for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SqlServerConnection",
		"fromLink": "Illuminate/Database/SqlServerConnection.html",
		"link": "Illuminate/Database/SqlServerConnection.html#method_getDefaultSchemaGrammar",
		"name": "Illuminate\\Database\\SqlServerConnection::getDefaultSchemaGrammar",
		"doc": "Get the default schema grammar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SqlServerConnection",
		"fromLink": "Illuminate/Database/SqlServerConnection.html",
		"link": "Illuminate/Database/SqlServerConnection.html#method_getSchemaState",
		"name": "Illuminate\\Database\\SqlServerConnection::getSchemaState",
		"doc": "Get the schema state for the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SqlServerConnection",
		"fromLink": "Illuminate/Database/SqlServerConnection.html",
		"link": "Illuminate/Database/SqlServerConnection.html#method_getDefaultPostProcessor",
		"name": "Illuminate\\Database\\SqlServerConnection::getDefaultPostProcessor",
		"doc": "Get the default post processor instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Database\\SqlServerConnection",
		"fromLink": "Illuminate/Database/SqlServerConnection.html",
		"link": "Illuminate/Database/SqlServerConnection.html#method_getDoctrineDriver",
		"name": "Illuminate\\Database\\SqlServerConnection::getDoctrineDriver",
		"doc": "Get the Doctrine DBAL driver."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Encryption",
		"fromLink": "Illuminate/Encryption.html",
		"link": "Illuminate/Encryption/Encrypter.html",
		"name": "Illuminate\\Encryption\\Encrypter",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method___construct",
		"name": "Illuminate\\Encryption\\Encrypter::__construct",
		"doc": "Create a new encrypter instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_supported",
		"name": "Illuminate\\Encryption\\Encrypter::supported",
		"doc": "Determine if the given key and cipher combination is valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_generateKey",
		"name": "Illuminate\\Encryption\\Encrypter::generateKey",
		"doc": "Create a new encryption key for the given cipher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_encrypt",
		"name": "Illuminate\\Encryption\\Encrypter::encrypt",
		"doc": "Encrypt the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_encryptString",
		"name": "Illuminate\\Encryption\\Encrypter::encryptString",
		"doc": "Encrypt a string without serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_decrypt",
		"name": "Illuminate\\Encryption\\Encrypter::decrypt",
		"doc": "Decrypt the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_decryptString",
		"name": "Illuminate\\Encryption\\Encrypter::decryptString",
		"doc": "Decrypt the given string without unserialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_hash",
		"name": "Illuminate\\Encryption\\Encrypter::hash",
		"doc": "Create a MAC for the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_getJsonPayload",
		"name": "Illuminate\\Encryption\\Encrypter::getJsonPayload",
		"doc": "Get the JSON array from the given payload."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_validPayload",
		"name": "Illuminate\\Encryption\\Encrypter::validPayload",
		"doc": "Verify that the encryption payload is valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_validMac",
		"name": "Illuminate\\Encryption\\Encrypter::validMac",
		"doc": "Determine if the MAC for the given payload is valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\Encrypter",
		"fromLink": "Illuminate/Encryption/Encrypter.html",
		"link": "Illuminate/Encryption/Encrypter.html#method_getKey",
		"name": "Illuminate\\Encryption\\Encrypter::getKey",
		"doc": "Get the encryption key."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Encryption",
		"fromLink": "Illuminate/Encryption.html",
		"link": "Illuminate/Encryption/EncryptionServiceProvider.html",
		"name": "Illuminate\\Encryption\\EncryptionServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\EncryptionServiceProvider",
		"fromLink": "Illuminate/Encryption/EncryptionServiceProvider.html",
		"link": "Illuminate/Encryption/EncryptionServiceProvider.html#method_register",
		"name": "Illuminate\\Encryption\\EncryptionServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\EncryptionServiceProvider",
		"fromLink": "Illuminate/Encryption/EncryptionServiceProvider.html",
		"link": "Illuminate/Encryption/EncryptionServiceProvider.html#method_registerEncrypter",
		"name": "Illuminate\\Encryption\\EncryptionServiceProvider::registerEncrypter",
		"doc": "Register the encrypter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\EncryptionServiceProvider",
		"fromLink": "Illuminate/Encryption/EncryptionServiceProvider.html",
		"link": "Illuminate/Encryption/EncryptionServiceProvider.html#method_registerOpisSecurityKey",
		"name": "Illuminate\\Encryption\\EncryptionServiceProvider::registerOpisSecurityKey",
		"doc": "Configure Opis Closure signing for security."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\EncryptionServiceProvider",
		"fromLink": "Illuminate/Encryption/EncryptionServiceProvider.html",
		"link": "Illuminate/Encryption/EncryptionServiceProvider.html#method_parseKey",
		"name": "Illuminate\\Encryption\\EncryptionServiceProvider::parseKey",
		"doc": "Parse the encryption key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\EncryptionServiceProvider",
		"fromLink": "Illuminate/Encryption/EncryptionServiceProvider.html",
		"link": "Illuminate/Encryption/EncryptionServiceProvider.html#method_key",
		"name": "Illuminate\\Encryption\\EncryptionServiceProvider::key",
		"doc": "Extract the encryption key from the given configuration."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Encryption",
		"fromLink": "Illuminate/Encryption.html",
		"link": "Illuminate/Encryption/MissingAppKeyException.html",
		"name": "Illuminate\\Encryption\\MissingAppKeyException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Encryption\\MissingAppKeyException",
		"fromLink": "Illuminate/Encryption/MissingAppKeyException.html",
		"link": "Illuminate/Encryption/MissingAppKeyException.html#method___construct",
		"name": "Illuminate\\Encryption\\MissingAppKeyException::__construct",
		"doc": "Create a new exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Events",
		"fromLink": "Illuminate/Events.html",
		"link": "Illuminate/Events/CallQueuedListener.html",
		"name": "Illuminate\\Events\\CallQueuedListener",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\CallQueuedListener",
		"fromLink": "Illuminate/Events/CallQueuedListener.html",
		"link": "Illuminate/Events/CallQueuedListener.html#method___construct",
		"name": "Illuminate\\Events\\CallQueuedListener::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\CallQueuedListener",
		"fromLink": "Illuminate/Events/CallQueuedListener.html",
		"link": "Illuminate/Events/CallQueuedListener.html#method_handle",
		"name": "Illuminate\\Events\\CallQueuedListener::handle",
		"doc": "Handle the queued job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\CallQueuedListener",
		"fromLink": "Illuminate/Events/CallQueuedListener.html",
		"link": "Illuminate/Events/CallQueuedListener.html#method_setJobInstanceIfNecessary",
		"name": "Illuminate\\Events\\CallQueuedListener::setJobInstanceIfNecessary",
		"doc": "Set the job instance of the given class if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\CallQueuedListener",
		"fromLink": "Illuminate/Events/CallQueuedListener.html",
		"link": "Illuminate/Events/CallQueuedListener.html#method_failed",
		"name": "Illuminate\\Events\\CallQueuedListener::failed",
		"doc": "Call the failed method on the job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\CallQueuedListener",
		"fromLink": "Illuminate/Events/CallQueuedListener.html",
		"link": "Illuminate/Events/CallQueuedListener.html#method_prepareData",
		"name": "Illuminate\\Events\\CallQueuedListener::prepareData",
		"doc": "Unserialize the data if needed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\CallQueuedListener",
		"fromLink": "Illuminate/Events/CallQueuedListener.html",
		"link": "Illuminate/Events/CallQueuedListener.html#method_displayName",
		"name": "Illuminate\\Events\\CallQueuedListener::displayName",
		"doc": "Get the display name for the queued job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\CallQueuedListener",
		"fromLink": "Illuminate/Events/CallQueuedListener.html",
		"link": "Illuminate/Events/CallQueuedListener.html#method___clone",
		"name": "Illuminate\\Events\\CallQueuedListener::__clone",
		"doc": "Prepare the instance for cloning."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Events",
		"fromLink": "Illuminate/Events.html",
		"link": "Illuminate/Events/Dispatcher.html",
		"name": "Illuminate\\Events\\Dispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method___construct",
		"name": "Illuminate\\Events\\Dispatcher::__construct",
		"doc": "Create a new event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_listen",
		"name": "Illuminate\\Events\\Dispatcher::listen",
		"doc": "Register an event listener with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_setupWildcardListen",
		"name": "Illuminate\\Events\\Dispatcher::setupWildcardListen",
		"doc": "Setup a wildcard listener callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_hasListeners",
		"name": "Illuminate\\Events\\Dispatcher::hasListeners",
		"doc": "Determine if a given event has listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_hasWildcardListeners",
		"name": "Illuminate\\Events\\Dispatcher::hasWildcardListeners",
		"doc": "Determine if the given event has any wildcard listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_push",
		"name": "Illuminate\\Events\\Dispatcher::push",
		"doc": "Register an event and payload to be fired later."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_flush",
		"name": "Illuminate\\Events\\Dispatcher::flush",
		"doc": "Flush a set of pushed events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_subscribe",
		"name": "Illuminate\\Events\\Dispatcher::subscribe",
		"doc": "Register an event subscriber with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_resolveSubscriber",
		"name": "Illuminate\\Events\\Dispatcher::resolveSubscriber",
		"doc": "Resolve the subscriber instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_until",
		"name": "Illuminate\\Events\\Dispatcher::until",
		"doc": "Fire an event until the first non-null response is returned."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_dispatch",
		"name": "Illuminate\\Events\\Dispatcher::dispatch",
		"doc": "Fire an event and call the listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_parseEventAndPayload",
		"name": "Illuminate\\Events\\Dispatcher::parseEventAndPayload",
		"doc": "Parse the given event and payload and prepare them for dispatching."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_shouldBroadcast",
		"name": "Illuminate\\Events\\Dispatcher::shouldBroadcast",
		"doc": "Determine if the payload has a broadcastable event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_broadcastWhen",
		"name": "Illuminate\\Events\\Dispatcher::broadcastWhen",
		"doc": "Check if event should be broadcasted by condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_broadcastEvent",
		"name": "Illuminate\\Events\\Dispatcher::broadcastEvent",
		"doc": "Broadcast the given event class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_getListeners",
		"name": "Illuminate\\Events\\Dispatcher::getListeners",
		"doc": "Get all of the listeners for a given event name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_getWildcardListeners",
		"name": "Illuminate\\Events\\Dispatcher::getWildcardListeners",
		"doc": "Get the wildcard listeners for the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_addInterfaceListeners",
		"name": "Illuminate\\Events\\Dispatcher::addInterfaceListeners",
		"doc": "Add the listeners for the event's interfaces to the given array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_makeListener",
		"name": "Illuminate\\Events\\Dispatcher::makeListener",
		"doc": "Register an event listener with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_createClassListener",
		"name": "Illuminate\\Events\\Dispatcher::createClassListener",
		"doc": "Create a class based listener using the IoC container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_createClassCallable",
		"name": "Illuminate\\Events\\Dispatcher::createClassCallable",
		"doc": "Create the class based event callable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_parseClassCallable",
		"name": "Illuminate\\Events\\Dispatcher::parseClassCallable",
		"doc": "Parse the class listener into class and method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_handlerShouldBeQueued",
		"name": "Illuminate\\Events\\Dispatcher::handlerShouldBeQueued",
		"doc": "Determine if the event handler class should be queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_createQueuedHandlerCallable",
		"name": "Illuminate\\Events\\Dispatcher::createQueuedHandlerCallable",
		"doc": "Create a callable for putting an event handler on the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_handlerWantsToBeQueued",
		"name": "Illuminate\\Events\\Dispatcher::handlerWantsToBeQueued",
		"doc": "Determine if the event handler wants to be queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_queueHandler",
		"name": "Illuminate\\Events\\Dispatcher::queueHandler",
		"doc": "Queue the handler class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_createListenerAndJob",
		"name": "Illuminate\\Events\\Dispatcher::createListenerAndJob",
		"doc": "Create the listener and job for a queued listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_propagateListenerOptions",
		"name": "Illuminate\\Events\\Dispatcher::propagateListenerOptions",
		"doc": "Propagate listener options to the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_forget",
		"name": "Illuminate\\Events\\Dispatcher::forget",
		"doc": "Remove a set of listeners from the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_forgetPushed",
		"name": "Illuminate\\Events\\Dispatcher::forgetPushed",
		"doc": "Forget all of the pushed listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_resolveQueue",
		"name": "Illuminate\\Events\\Dispatcher::resolveQueue",
		"doc": "Get the queue implementation from the resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\Dispatcher",
		"fromLink": "Illuminate/Events/Dispatcher.html",
		"link": "Illuminate/Events/Dispatcher.html#method_setQueueResolver",
		"name": "Illuminate\\Events\\Dispatcher::setQueueResolver",
		"doc": "Set the queue resolver implementation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Events",
		"fromLink": "Illuminate/Events.html",
		"link": "Illuminate/Events/EventServiceProvider.html",
		"name": "Illuminate\\Events\\EventServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\EventServiceProvider",
		"fromLink": "Illuminate/Events/EventServiceProvider.html",
		"link": "Illuminate/Events/EventServiceProvider.html#method_register",
		"name": "Illuminate\\Events\\EventServiceProvider::register",
		"doc": "Register the service provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Events",
		"fromLink": "Illuminate/Events.html",
		"link": "Illuminate/Events/InvokeQueuedClosure.html",
		"name": "Illuminate\\Events\\InvokeQueuedClosure",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\InvokeQueuedClosure",
		"fromLink": "Illuminate/Events/InvokeQueuedClosure.html",
		"link": "Illuminate/Events/InvokeQueuedClosure.html#method_handle",
		"name": "Illuminate\\Events\\InvokeQueuedClosure::handle",
		"doc": "Handle the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\InvokeQueuedClosure",
		"fromLink": "Illuminate/Events/InvokeQueuedClosure.html",
		"link": "Illuminate/Events/InvokeQueuedClosure.html#method_failed",
		"name": "Illuminate\\Events\\InvokeQueuedClosure::failed",
		"doc": "Handle a job failure."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Events",
		"fromLink": "Illuminate/Events.html",
		"link": "Illuminate/Events/NullDispatcher.html",
		"name": "Illuminate\\Events\\NullDispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method___construct",
		"name": "Illuminate\\Events\\NullDispatcher::__construct",
		"doc": "Create a new event dispatcher instance that does not fire."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_dispatch",
		"name": "Illuminate\\Events\\NullDispatcher::dispatch",
		"doc": "Don't fire an event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_push",
		"name": "Illuminate\\Events\\NullDispatcher::push",
		"doc": "Don't register an event and payload to be fired later."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_until",
		"name": "Illuminate\\Events\\NullDispatcher::until",
		"doc": "Don't dispatch an event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_listen",
		"name": "Illuminate\\Events\\NullDispatcher::listen",
		"doc": "Register an event listener with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_hasListeners",
		"name": "Illuminate\\Events\\NullDispatcher::hasListeners",
		"doc": "Determine if a given event has listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_subscribe",
		"name": "Illuminate\\Events\\NullDispatcher::subscribe",
		"doc": "Register an event subscriber with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_flush",
		"name": "Illuminate\\Events\\NullDispatcher::flush",
		"doc": "Flush a set of pushed events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_forget",
		"name": "Illuminate\\Events\\NullDispatcher::forget",
		"doc": "Remove a set of listeners from the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method_forgetPushed",
		"name": "Illuminate\\Events\\NullDispatcher::forgetPushed",
		"doc": "Forget all of the queued listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\NullDispatcher",
		"fromLink": "Illuminate/Events/NullDispatcher.html",
		"link": "Illuminate/Events/NullDispatcher.html#method___call",
		"name": "Illuminate\\Events\\NullDispatcher::__call",
		"doc": "Dynamically pass method calls to the underlying dispatcher."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Events",
		"fromLink": "Illuminate/Events.html",
		"link": "Illuminate/Events/QueuedClosure.html",
		"name": "Illuminate\\Events\\QueuedClosure",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\QueuedClosure",
		"fromLink": "Illuminate/Events/QueuedClosure.html",
		"link": "Illuminate/Events/QueuedClosure.html#method___construct",
		"name": "Illuminate\\Events\\QueuedClosure::__construct",
		"doc": "Create a new queued closure event listener resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\QueuedClosure",
		"fromLink": "Illuminate/Events/QueuedClosure.html",
		"link": "Illuminate/Events/QueuedClosure.html#method_onConnection",
		"name": "Illuminate\\Events\\QueuedClosure::onConnection",
		"doc": "Set the desired connection for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\QueuedClosure",
		"fromLink": "Illuminate/Events/QueuedClosure.html",
		"link": "Illuminate/Events/QueuedClosure.html#method_onQueue",
		"name": "Illuminate\\Events\\QueuedClosure::onQueue",
		"doc": "Set the desired queue for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\QueuedClosure",
		"fromLink": "Illuminate/Events/QueuedClosure.html",
		"link": "Illuminate/Events/QueuedClosure.html#method_delay",
		"name": "Illuminate\\Events\\QueuedClosure::delay",
		"doc": "Set the desired delay for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\QueuedClosure",
		"fromLink": "Illuminate/Events/QueuedClosure.html",
		"link": "Illuminate/Events/QueuedClosure.html#method_catch",
		"name": "Illuminate\\Events\\QueuedClosure::catch",
		"doc": "Specify a callback that should be invoked if the queued listener job fails."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Events\\QueuedClosure",
		"fromLink": "Illuminate/Events/QueuedClosure.html",
		"link": "Illuminate/Events/QueuedClosure.html#method_resolve",
		"name": "Illuminate\\Events\\QueuedClosure::resolve",
		"doc": "Resolve the actual event listener callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Filesystem",
		"fromLink": "Illuminate/Filesystem.html",
		"link": "Illuminate/Filesystem/Cache.html",
		"name": "Illuminate\\Filesystem\\Cache",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Cache",
		"fromLink": "Illuminate/Filesystem/Cache.html",
		"link": "Illuminate/Filesystem/Cache.html#method___construct",
		"name": "Illuminate\\Filesystem\\Cache::__construct",
		"doc": "Create a new cache instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Cache",
		"fromLink": "Illuminate/Filesystem/Cache.html",
		"link": "Illuminate/Filesystem/Cache.html#method_load",
		"name": "Illuminate\\Filesystem\\Cache::load",
		"doc": "Load the cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Cache",
		"fromLink": "Illuminate/Filesystem/Cache.html",
		"link": "Illuminate/Filesystem/Cache.html#method_save",
		"name": "Illuminate\\Filesystem\\Cache::save",
		"doc": "Persist the cache."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Filesystem",
		"fromLink": "Illuminate/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html",
		"name": "Illuminate\\Filesystem\\Filesystem",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_exists",
		"name": "Illuminate\\Filesystem\\Filesystem::exists",
		"doc": "Determine if a file or directory exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_missing",
		"name": "Illuminate\\Filesystem\\Filesystem::missing",
		"doc": "Determine if a file or directory is missing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_get",
		"name": "Illuminate\\Filesystem\\Filesystem::get",
		"doc": "Get the contents of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_sharedGet",
		"name": "Illuminate\\Filesystem\\Filesystem::sharedGet",
		"doc": "Get contents of a file with shared access."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_getRequire",
		"name": "Illuminate\\Filesystem\\Filesystem::getRequire",
		"doc": "Get the returned value of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_requireOnce",
		"name": "Illuminate\\Filesystem\\Filesystem::requireOnce",
		"doc": "Require the given file once."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_lines",
		"name": "Illuminate\\Filesystem\\Filesystem::lines",
		"doc": "Get the contents of a file one line at a time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_hash",
		"name": "Illuminate\\Filesystem\\Filesystem::hash",
		"doc": "Get the MD5 hash of the file at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_put",
		"name": "Illuminate\\Filesystem\\Filesystem::put",
		"doc": "Write the contents of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_replace",
		"name": "Illuminate\\Filesystem\\Filesystem::replace",
		"doc": "Write the contents of a file, replacing it atomically if it already exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_prepend",
		"name": "Illuminate\\Filesystem\\Filesystem::prepend",
		"doc": "Prepend to a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_append",
		"name": "Illuminate\\Filesystem\\Filesystem::append",
		"doc": "Append to a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_chmod",
		"name": "Illuminate\\Filesystem\\Filesystem::chmod",
		"doc": "Get or set UNIX mode of a file or directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_delete",
		"name": "Illuminate\\Filesystem\\Filesystem::delete",
		"doc": "Delete the file at a given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_move",
		"name": "Illuminate\\Filesystem\\Filesystem::move",
		"doc": "Move a file to a new location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_copy",
		"name": "Illuminate\\Filesystem\\Filesystem::copy",
		"doc": "Copy a file to a new location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_link",
		"name": "Illuminate\\Filesystem\\Filesystem::link",
		"doc": "Create a symlink to the target file or directory. On Windows, a hard link is created if the target is a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_relativeLink",
		"name": "Illuminate\\Filesystem\\Filesystem::relativeLink",
		"doc": "Create a relative symlink to the target file or directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_name",
		"name": "Illuminate\\Filesystem\\Filesystem::name",
		"doc": "Extract the file name from a file path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_basename",
		"name": "Illuminate\\Filesystem\\Filesystem::basename",
		"doc": "Extract the trailing name component from a file path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_dirname",
		"name": "Illuminate\\Filesystem\\Filesystem::dirname",
		"doc": "Extract the parent directory from a file path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_extension",
		"name": "Illuminate\\Filesystem\\Filesystem::extension",
		"doc": "Extract the file extension from a file path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_guessExtension",
		"name": "Illuminate\\Filesystem\\Filesystem::guessExtension",
		"doc": "Guess the file extension from the mime-type of a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_type",
		"name": "Illuminate\\Filesystem\\Filesystem::type",
		"doc": "Get the file type of a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_mimeType",
		"name": "Illuminate\\Filesystem\\Filesystem::mimeType",
		"doc": "Get the mime-type of a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_size",
		"name": "Illuminate\\Filesystem\\Filesystem::size",
		"doc": "Get the file size of a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_lastModified",
		"name": "Illuminate\\Filesystem\\Filesystem::lastModified",
		"doc": "Get the file's last modification time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_isDirectory",
		"name": "Illuminate\\Filesystem\\Filesystem::isDirectory",
		"doc": "Determine if the given path is a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_isReadable",
		"name": "Illuminate\\Filesystem\\Filesystem::isReadable",
		"doc": "Determine if the given path is readable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_isWritable",
		"name": "Illuminate\\Filesystem\\Filesystem::isWritable",
		"doc": "Determine if the given path is writable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_isFile",
		"name": "Illuminate\\Filesystem\\Filesystem::isFile",
		"doc": "Determine if the given path is a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_glob",
		"name": "Illuminate\\Filesystem\\Filesystem::glob",
		"doc": "Find path names matching a given pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_files",
		"name": "Illuminate\\Filesystem\\Filesystem::files",
		"doc": "Get an array of all files in a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_allFiles",
		"name": "Illuminate\\Filesystem\\Filesystem::allFiles",
		"doc": "Get all of the files from the given directory (recursive)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_directories",
		"name": "Illuminate\\Filesystem\\Filesystem::directories",
		"doc": "Get all of the directories within a given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_ensureDirectoryExists",
		"name": "Illuminate\\Filesystem\\Filesystem::ensureDirectoryExists",
		"doc": "Ensure a directory exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_makeDirectory",
		"name": "Illuminate\\Filesystem\\Filesystem::makeDirectory",
		"doc": "Create a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_moveDirectory",
		"name": "Illuminate\\Filesystem\\Filesystem::moveDirectory",
		"doc": "Move a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_copyDirectory",
		"name": "Illuminate\\Filesystem\\Filesystem::copyDirectory",
		"doc": "Copy a directory from one location to another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_deleteDirectory",
		"name": "Illuminate\\Filesystem\\Filesystem::deleteDirectory",
		"doc": "Recursively delete a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_deleteDirectories",
		"name": "Illuminate\\Filesystem\\Filesystem::deleteDirectories",
		"doc": "Remove all of the directories within a given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\Filesystem",
		"fromLink": "Illuminate/Filesystem/Filesystem.html",
		"link": "Illuminate/Filesystem/Filesystem.html#method_cleanDirectory",
		"name": "Illuminate\\Filesystem\\Filesystem::cleanDirectory",
		"doc": "Empty the specified directory of all files and folders."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Filesystem",
		"fromLink": "Illuminate/Filesystem.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method___construct",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::__construct",
		"doc": "Create a new filesystem adapter instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_assertExists",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::assertExists",
		"doc": "Assert that the given file exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_assertMissing",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::assertMissing",
		"doc": "Assert that the given file does not exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_exists",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::exists",
		"doc": "Determine if a file exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_missing",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::missing",
		"doc": "Determine if a file or directory is missing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_path",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::path",
		"doc": "Get the full path for the file at the given \"short\" path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_get",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::get",
		"doc": "Get the contents of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_response",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::response",
		"doc": "Create a streamed response for a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_download",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::download",
		"doc": "Create a streamed download response for a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_fallbackName",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::fallbackName",
		"doc": "Convert the string to ASCII characters that are equivalent to the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_put",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::put",
		"doc": "Write the contents of a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_putFile",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::putFile",
		"doc": "Store the uploaded file on the disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_putFileAs",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::putFileAs",
		"doc": "Store the uploaded file on the disk with a given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_getVisibility",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::getVisibility",
		"doc": "Get the visibility for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_setVisibility",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::setVisibility",
		"doc": "Set the visibility for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_prepend",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::prepend",
		"doc": "Prepend to a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_append",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::append",
		"doc": "Append to a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_delete",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::delete",
		"doc": "Delete the file at a given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_copy",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::copy",
		"doc": "Copy a file to a new location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_move",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::move",
		"doc": "Move a file to a new location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_size",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::size",
		"doc": "Get the file size of a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_mimeType",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::mimeType",
		"doc": "Get the mime-type of a given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_lastModified",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::lastModified",
		"doc": "Get the file's last modification time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_url",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::url",
		"doc": "Get the URL for the file at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_readStream",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::readStream",
		"doc": "Get a resource to read the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_writeStream",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::writeStream",
		"doc": "Write a new file using a stream."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_getAwsUrl",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::getAwsUrl",
		"doc": "Get the URL for the file at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_getFtpUrl",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::getFtpUrl",
		"doc": "Get the URL for the file at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_getLocalUrl",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::getLocalUrl",
		"doc": "Get the URL for the file at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_temporaryUrl",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::temporaryUrl",
		"doc": "Get a temporary URL for the file at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_getAwsTemporaryUrl",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::getAwsTemporaryUrl",
		"doc": "Get a temporary URL for the file at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_concatPathToUrl",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::concatPathToUrl",
		"doc": "Concatenate a path to a URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_files",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::files",
		"doc": "Get an array of all files in a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_allFiles",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::allFiles",
		"doc": "Get all of the files from the given directory (recursive)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_directories",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::directories",
		"doc": "Get all of the directories within a given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_allDirectories",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::allDirectories",
		"doc": "Get all (recursive) of the directories within a given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_makeDirectory",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::makeDirectory",
		"doc": "Create a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_deleteDirectory",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::deleteDirectory",
		"doc": "Recursively delete a directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_flushCache",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::flushCache",
		"doc": "Flush the Flysystem cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_getDriver",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::getDriver",
		"doc": "Get the Flysystem driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_filterContentsByType",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::filterContentsByType",
		"doc": "Filter directory contents by type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method_parseVisibility",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::parseVisibility",
		"doc": "Parse the given visibility value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemAdapter",
		"fromLink": "Illuminate/Filesystem/FilesystemAdapter.html",
		"link": "Illuminate/Filesystem/FilesystemAdapter.html#method___call",
		"name": "Illuminate\\Filesystem\\FilesystemAdapter::__call",
		"doc": "Pass dynamic methods call onto Flysystem."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Filesystem",
		"fromLink": "Illuminate/Filesystem.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html",
		"name": "Illuminate\\Filesystem\\FilesystemManager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method___construct",
		"name": "Illuminate\\Filesystem\\FilesystemManager::__construct",
		"doc": "Create a new filesystem manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_drive",
		"name": "Illuminate\\Filesystem\\FilesystemManager::drive",
		"doc": "Get a filesystem instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_disk",
		"name": "Illuminate\\Filesystem\\FilesystemManager::disk",
		"doc": "Get a filesystem instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_cloud",
		"name": "Illuminate\\Filesystem\\FilesystemManager::cloud",
		"doc": "Get a default cloud filesystem instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_get",
		"name": "Illuminate\\Filesystem\\FilesystemManager::get",
		"doc": "Attempt to get the disk from the local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_resolve",
		"name": "Illuminate\\Filesystem\\FilesystemManager::resolve",
		"doc": "Resolve the given disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_callCustomCreator",
		"name": "Illuminate\\Filesystem\\FilesystemManager::callCustomCreator",
		"doc": "Call a custom driver creator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_createLocalDriver",
		"name": "Illuminate\\Filesystem\\FilesystemManager::createLocalDriver",
		"doc": "Create an instance of the local driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_createFtpDriver",
		"name": "Illuminate\\Filesystem\\FilesystemManager::createFtpDriver",
		"doc": "Create an instance of the ftp driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_createSftpDriver",
		"name": "Illuminate\\Filesystem\\FilesystemManager::createSftpDriver",
		"doc": "Create an instance of the sftp driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_createS3Driver",
		"name": "Illuminate\\Filesystem\\FilesystemManager::createS3Driver",
		"doc": "Create an instance of the Amazon S3 driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_formatS3Config",
		"name": "Illuminate\\Filesystem\\FilesystemManager::formatS3Config",
		"doc": "Format the given S3 configuration with the default options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_createFlysystem",
		"name": "Illuminate\\Filesystem\\FilesystemManager::createFlysystem",
		"doc": "Create a Flysystem instance with the given adapter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_createCacheStore",
		"name": "Illuminate\\Filesystem\\FilesystemManager::createCacheStore",
		"doc": "Create a cache store instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_adapt",
		"name": "Illuminate\\Filesystem\\FilesystemManager::adapt",
		"doc": "Adapt the filesystem implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_set",
		"name": "Illuminate\\Filesystem\\FilesystemManager::set",
		"doc": "Set the given disk instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_getConfig",
		"name": "Illuminate\\Filesystem\\FilesystemManager::getConfig",
		"doc": "Get the filesystem connection configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Filesystem\\FilesystemManager::getDefaultDriver",
		"doc": "Get the default driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_getDefaultCloudDriver",
		"name": "Illuminate\\Filesystem\\FilesystemManager::getDefaultCloudDriver",
		"doc": "Get the default cloud driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_forgetDisk",
		"name": "Illuminate\\Filesystem\\FilesystemManager::forgetDisk",
		"doc": "Unset the given disk instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_purge",
		"name": "Illuminate\\Filesystem\\FilesystemManager::purge",
		"doc": "Disconnect the given disk and remove from local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method_extend",
		"name": "Illuminate\\Filesystem\\FilesystemManager::extend",
		"doc": "Register a custom driver creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemManager",
		"fromLink": "Illuminate/Filesystem/FilesystemManager.html",
		"link": "Illuminate/Filesystem/FilesystemManager.html#method___call",
		"name": "Illuminate\\Filesystem\\FilesystemManager::__call",
		"doc": "Dynamically call the default driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Filesystem",
		"fromLink": "Illuminate/Filesystem.html",
		"link": "Illuminate/Filesystem/FilesystemServiceProvider.html",
		"name": "Illuminate\\Filesystem\\FilesystemServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemServiceProvider",
		"fromLink": "Illuminate/Filesystem/FilesystemServiceProvider.html",
		"link": "Illuminate/Filesystem/FilesystemServiceProvider.html#method_register",
		"name": "Illuminate\\Filesystem\\FilesystemServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemServiceProvider",
		"fromLink": "Illuminate/Filesystem/FilesystemServiceProvider.html",
		"link": "Illuminate/Filesystem/FilesystemServiceProvider.html#method_registerNativeFilesystem",
		"name": "Illuminate\\Filesystem\\FilesystemServiceProvider::registerNativeFilesystem",
		"doc": "Register the native filesystem implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemServiceProvider",
		"fromLink": "Illuminate/Filesystem/FilesystemServiceProvider.html",
		"link": "Illuminate/Filesystem/FilesystemServiceProvider.html#method_registerFlysystem",
		"name": "Illuminate\\Filesystem\\FilesystemServiceProvider::registerFlysystem",
		"doc": "Register the driver based filesystem."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemServiceProvider",
		"fromLink": "Illuminate/Filesystem/FilesystemServiceProvider.html",
		"link": "Illuminate/Filesystem/FilesystemServiceProvider.html#method_registerManager",
		"name": "Illuminate\\Filesystem\\FilesystemServiceProvider::registerManager",
		"doc": "Register the filesystem manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemServiceProvider",
		"fromLink": "Illuminate/Filesystem/FilesystemServiceProvider.html",
		"link": "Illuminate/Filesystem/FilesystemServiceProvider.html#method_getDefaultDriver",
		"name": "Illuminate\\Filesystem\\FilesystemServiceProvider::getDefaultDriver",
		"doc": "Get the default file driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\FilesystemServiceProvider",
		"fromLink": "Illuminate/Filesystem/FilesystemServiceProvider.html",
		"link": "Illuminate/Filesystem/FilesystemServiceProvider.html#method_getCloudDriver",
		"name": "Illuminate\\Filesystem\\FilesystemServiceProvider::getCloudDriver",
		"doc": "Get the default cloud based file driver."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Filesystem",
		"fromLink": "Illuminate/Filesystem.html",
		"link": "Illuminate/Filesystem/LockableFile.html",
		"name": "Illuminate\\Filesystem\\LockableFile",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method___construct",
		"name": "Illuminate\\Filesystem\\LockableFile::__construct",
		"doc": "Create a new File instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_ensureDirectoryExists",
		"name": "Illuminate\\Filesystem\\LockableFile::ensureDirectoryExists",
		"doc": "Create the file's directory if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_createResource",
		"name": "Illuminate\\Filesystem\\LockableFile::createResource",
		"doc": "Create the file resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_read",
		"name": "Illuminate\\Filesystem\\LockableFile::read",
		"doc": "Read the file contents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_size",
		"name": "Illuminate\\Filesystem\\LockableFile::size",
		"doc": "Get the file size."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_write",
		"name": "Illuminate\\Filesystem\\LockableFile::write",
		"doc": "Write to the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_truncate",
		"name": "Illuminate\\Filesystem\\LockableFile::truncate",
		"doc": "Truncate the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_getSharedLock",
		"name": "Illuminate\\Filesystem\\LockableFile::getSharedLock",
		"doc": "Get a shared lock on the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_getExclusiveLock",
		"name": "Illuminate\\Filesystem\\LockableFile::getExclusiveLock",
		"doc": "Get an exclusive lock on the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_releaseLock",
		"name": "Illuminate\\Filesystem\\LockableFile::releaseLock",
		"doc": "Release the lock on the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Filesystem\\LockableFile",
		"fromLink": "Illuminate/Filesystem/LockableFile.html",
		"link": "Illuminate/Filesystem/LockableFile.html#method_close",
		"name": "Illuminate\\Filesystem\\LockableFile::close",
		"doc": "Close the file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation",
		"fromLink": "Illuminate/Foundation.html",
		"link": "Illuminate/Foundation/AliasLoader.html",
		"name": "Illuminate\\Foundation\\AliasLoader",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_getInstance",
		"name": "Illuminate\\Foundation\\AliasLoader::getInstance",
		"doc": "Get or create the singleton alias loader instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_load",
		"name": "Illuminate\\Foundation\\AliasLoader::load",
		"doc": "Load a class alias if it is registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_loadFacade",
		"name": "Illuminate\\Foundation\\AliasLoader::loadFacade",
		"doc": "Load a real-time facade for the given alias."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_ensureFacadeExists",
		"name": "Illuminate\\Foundation\\AliasLoader::ensureFacadeExists",
		"doc": "Ensure that the given alias has an existing real-time facade class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_formatFacadeStub",
		"name": "Illuminate\\Foundation\\AliasLoader::formatFacadeStub",
		"doc": "Format the facade stub with the proper namespace and class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_alias",
		"name": "Illuminate\\Foundation\\AliasLoader::alias",
		"doc": "Add an alias to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_register",
		"name": "Illuminate\\Foundation\\AliasLoader::register",
		"doc": "Register the loader on the auto-loader stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_prependToLoaderStack",
		"name": "Illuminate\\Foundation\\AliasLoader::prependToLoaderStack",
		"doc": "Prepend the load method to the auto-loader stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_getAliases",
		"name": "Illuminate\\Foundation\\AliasLoader::getAliases",
		"doc": "Get the registered aliases."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_setAliases",
		"name": "Illuminate\\Foundation\\AliasLoader::setAliases",
		"doc": "Set the registered aliases."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_isRegistered",
		"name": "Illuminate\\Foundation\\AliasLoader::isRegistered",
		"doc": "Indicates if the loader has been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_setRegistered",
		"name": "Illuminate\\Foundation\\AliasLoader::setRegistered",
		"doc": "Set the \"registered\" state of the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_setFacadeNamespace",
		"name": "Illuminate\\Foundation\\AliasLoader::setFacadeNamespace",
		"doc": "Set the real-time facade namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\AliasLoader",
		"fromLink": "Illuminate/Foundation/AliasLoader.html",
		"link": "Illuminate/Foundation/AliasLoader.html#method_setInstance",
		"name": "Illuminate\\Foundation\\AliasLoader::setInstance",
		"doc": "Set the value of the singleton alias loader."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation",
		"fromLink": "Illuminate/Foundation.html",
		"link": "Illuminate/Foundation/Application.html",
		"name": "Illuminate\\Foundation\\Application",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method___construct",
		"name": "Illuminate\\Foundation\\Application::__construct",
		"doc": "Create a new Illuminate application instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_version",
		"name": "Illuminate\\Foundation\\Application::version",
		"doc": "Get the version number of the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_registerBaseBindings",
		"name": "Illuminate\\Foundation\\Application::registerBaseBindings",
		"doc": "Register the basic bindings into the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_registerBaseServiceProviders",
		"name": "Illuminate\\Foundation\\Application::registerBaseServiceProviders",
		"doc": "Register all of the base service providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_bootstrapWith",
		"name": "Illuminate\\Foundation\\Application::bootstrapWith",
		"doc": "Run the given array of bootstrap classes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_afterLoadingEnvironment",
		"name": "Illuminate\\Foundation\\Application::afterLoadingEnvironment",
		"doc": "Register a callback to run after loading the environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_beforeBootstrapping",
		"name": "Illuminate\\Foundation\\Application::beforeBootstrapping",
		"doc": "Register a callback to run before a bootstrapper."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_afterBootstrapping",
		"name": "Illuminate\\Foundation\\Application::afterBootstrapping",
		"doc": "Register a callback to run after a bootstrapper."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_hasBeenBootstrapped",
		"name": "Illuminate\\Foundation\\Application::hasBeenBootstrapped",
		"doc": "Determine if the application has been bootstrapped before."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_setBasePath",
		"name": "Illuminate\\Foundation\\Application::setBasePath",
		"doc": "Set the base path for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_bindPathsInContainer",
		"name": "Illuminate\\Foundation\\Application::bindPathsInContainer",
		"doc": "Bind all of the application paths in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_path",
		"name": "Illuminate\\Foundation\\Application::path",
		"doc": "Get the path to the application \"app\" directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_useAppPath",
		"name": "Illuminate\\Foundation\\Application::useAppPath",
		"doc": "Set the application directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_basePath",
		"name": "Illuminate\\Foundation\\Application::basePath",
		"doc": "Get the base path of the Laravel installation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_bootstrapPath",
		"name": "Illuminate\\Foundation\\Application::bootstrapPath",
		"doc": "Get the path to the bootstrap directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_configPath",
		"name": "Illuminate\\Foundation\\Application::configPath",
		"doc": "Get the path to the application configuration files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_databasePath",
		"name": "Illuminate\\Foundation\\Application::databasePath",
		"doc": "Get the path to the database directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_useDatabasePath",
		"name": "Illuminate\\Foundation\\Application::useDatabasePath",
		"doc": "Set the database directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_langPath",
		"name": "Illuminate\\Foundation\\Application::langPath",
		"doc": "Get the path to the language files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_publicPath",
		"name": "Illuminate\\Foundation\\Application::publicPath",
		"doc": "Get the path to the public / web directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_storagePath",
		"name": "Illuminate\\Foundation\\Application::storagePath",
		"doc": "Get the path to the storage directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_useStoragePath",
		"name": "Illuminate\\Foundation\\Application::useStoragePath",
		"doc": "Set the storage directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_resourcePath",
		"name": "Illuminate\\Foundation\\Application::resourcePath",
		"doc": "Get the path to the resources directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_environmentPath",
		"name": "Illuminate\\Foundation\\Application::environmentPath",
		"doc": "Get the path to the environment file directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_useEnvironmentPath",
		"name": "Illuminate\\Foundation\\Application::useEnvironmentPath",
		"doc": "Set the directory for the environment file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_loadEnvironmentFrom",
		"name": "Illuminate\\Foundation\\Application::loadEnvironmentFrom",
		"doc": "Set the environment file to be loaded during bootstrapping."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_environmentFile",
		"name": "Illuminate\\Foundation\\Application::environmentFile",
		"doc": "Get the environment file the application is using."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_environmentFilePath",
		"name": "Illuminate\\Foundation\\Application::environmentFilePath",
		"doc": "Get the fully qualified path to the environment file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_environment",
		"name": "Illuminate\\Foundation\\Application::environment",
		"doc": "Get or check the current application environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_isLocal",
		"name": "Illuminate\\Foundation\\Application::isLocal",
		"doc": "Determine if application is in local environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_isProduction",
		"name": "Illuminate\\Foundation\\Application::isProduction",
		"doc": "Determine if application is in production environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_detectEnvironment",
		"name": "Illuminate\\Foundation\\Application::detectEnvironment",
		"doc": "Detect the application's current environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_runningInConsole",
		"name": "Illuminate\\Foundation\\Application::runningInConsole",
		"doc": "Determine if the application is running in the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_runningUnitTests",
		"name": "Illuminate\\Foundation\\Application::runningUnitTests",
		"doc": "Determine if the application is running unit tests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_registerConfiguredProviders",
		"name": "Illuminate\\Foundation\\Application::registerConfiguredProviders",
		"doc": "Register all of the configured providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_register",
		"name": "Illuminate\\Foundation\\Application::register",
		"doc": "Register a service provider with the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getProvider",
		"name": "Illuminate\\Foundation\\Application::getProvider",
		"doc": "Get the registered service provider instance if it exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getProviders",
		"name": "Illuminate\\Foundation\\Application::getProviders",
		"doc": "Get the registered service provider instances if any exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_resolveProvider",
		"name": "Illuminate\\Foundation\\Application::resolveProvider",
		"doc": "Resolve a service provider instance from the class name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_markAsRegistered",
		"name": "Illuminate\\Foundation\\Application::markAsRegistered",
		"doc": "Mark the given provider as registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_loadDeferredProviders",
		"name": "Illuminate\\Foundation\\Application::loadDeferredProviders",
		"doc": "Load and boot all of the remaining deferred providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_loadDeferredProvider",
		"name": "Illuminate\\Foundation\\Application::loadDeferredProvider",
		"doc": "Load the provider for a deferred service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_registerDeferredProvider",
		"name": "Illuminate\\Foundation\\Application::registerDeferredProvider",
		"doc": "Register a deferred provider and service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_make",
		"name": "Illuminate\\Foundation\\Application::make",
		"doc": "Resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_resolve",
		"name": "Illuminate\\Foundation\\Application::resolve",
		"doc": "Resolve the given type from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_loadDeferredProviderIfNeeded",
		"name": "Illuminate\\Foundation\\Application::loadDeferredProviderIfNeeded",
		"doc": "Load the deferred provider if the given type is a deferred service and the instance has not been loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_bound",
		"name": "Illuminate\\Foundation\\Application::bound",
		"doc": "Determine if the given abstract type has been bound."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_isBooted",
		"name": "Illuminate\\Foundation\\Application::isBooted",
		"doc": "Determine if the application has booted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_boot",
		"name": "Illuminate\\Foundation\\Application::boot",
		"doc": "Boot the application's service providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_bootProvider",
		"name": "Illuminate\\Foundation\\Application::bootProvider",
		"doc": "Boot the given service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_booting",
		"name": "Illuminate\\Foundation\\Application::booting",
		"doc": "Register a new boot listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_booted",
		"name": "Illuminate\\Foundation\\Application::booted",
		"doc": "Register a new \"booted\" listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_fireAppCallbacks",
		"name": "Illuminate\\Foundation\\Application::fireAppCallbacks",
		"doc": "Call the booting callbacks for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_handle",
		"name": "Illuminate\\Foundation\\Application::handle",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_shouldSkipMiddleware",
		"name": "Illuminate\\Foundation\\Application::shouldSkipMiddleware",
		"doc": "Determine if middleware has been disabled for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getCachedServicesPath",
		"name": "Illuminate\\Foundation\\Application::getCachedServicesPath",
		"doc": "Get the path to the cached services.php file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getCachedPackagesPath",
		"name": "Illuminate\\Foundation\\Application::getCachedPackagesPath",
		"doc": "Get the path to the cached packages.php file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_configurationIsCached",
		"name": "Illuminate\\Foundation\\Application::configurationIsCached",
		"doc": "Determine if the application configuration is cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getCachedConfigPath",
		"name": "Illuminate\\Foundation\\Application::getCachedConfigPath",
		"doc": "Get the path to the configuration cache file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_routesAreCached",
		"name": "Illuminate\\Foundation\\Application::routesAreCached",
		"doc": "Determine if the application routes are cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getCachedRoutesPath",
		"name": "Illuminate\\Foundation\\Application::getCachedRoutesPath",
		"doc": "Get the path to the routes cache file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_eventsAreCached",
		"name": "Illuminate\\Foundation\\Application::eventsAreCached",
		"doc": "Determine if the application events are cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getCachedEventsPath",
		"name": "Illuminate\\Foundation\\Application::getCachedEventsPath",
		"doc": "Get the path to the events cache file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_normalizeCachePath",
		"name": "Illuminate\\Foundation\\Application::normalizeCachePath",
		"doc": "Normalize a relative or absolute path to a cache file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_addAbsoluteCachePathPrefix",
		"name": "Illuminate\\Foundation\\Application::addAbsoluteCachePathPrefix",
		"doc": "Add new prefix to list of absolute path prefixes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_isDownForMaintenance",
		"name": "Illuminate\\Foundation\\Application::isDownForMaintenance",
		"doc": "Determine if the application is currently down for maintenance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_abort",
		"name": "Illuminate\\Foundation\\Application::abort",
		"doc": "Throw an HttpException with the given data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_terminating",
		"name": "Illuminate\\Foundation\\Application::terminating",
		"doc": "Register a terminating callback with the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_terminate",
		"name": "Illuminate\\Foundation\\Application::terminate",
		"doc": "Terminate the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getLoadedProviders",
		"name": "Illuminate\\Foundation\\Application::getLoadedProviders",
		"doc": "Get the service providers that have been loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_providerIsLoaded",
		"name": "Illuminate\\Foundation\\Application::providerIsLoaded",
		"doc": "Determine if the given service provider is loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getDeferredServices",
		"name": "Illuminate\\Foundation\\Application::getDeferredServices",
		"doc": "Get the application's deferred services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_setDeferredServices",
		"name": "Illuminate\\Foundation\\Application::setDeferredServices",
		"doc": "Set the application's deferred services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_addDeferredServices",
		"name": "Illuminate\\Foundation\\Application::addDeferredServices",
		"doc": "Add an array of services to the application's deferred services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_isDeferredService",
		"name": "Illuminate\\Foundation\\Application::isDeferredService",
		"doc": "Determine if the given service is a deferred service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_provideFacades",
		"name": "Illuminate\\Foundation\\Application::provideFacades",
		"doc": "Configure the real-time facade namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getLocale",
		"name": "Illuminate\\Foundation\\Application::getLocale",
		"doc": "Get the current application locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_currentLocale",
		"name": "Illuminate\\Foundation\\Application::currentLocale",
		"doc": "Get the current application locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getFallbackLocale",
		"name": "Illuminate\\Foundation\\Application::getFallbackLocale",
		"doc": "Get the current application fallback locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_setLocale",
		"name": "Illuminate\\Foundation\\Application::setLocale",
		"doc": "Set the current application locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_setFallbackLocale",
		"name": "Illuminate\\Foundation\\Application::setFallbackLocale",
		"doc": "Set the current application fallback locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_isLocale",
		"name": "Illuminate\\Foundation\\Application::isLocale",
		"doc": "Determine if application locale is the given locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_registerCoreContainerAliases",
		"name": "Illuminate\\Foundation\\Application::registerCoreContainerAliases",
		"doc": "Register the core class aliases in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_flush",
		"name": "Illuminate\\Foundation\\Application::flush",
		"doc": "Flush the container of all bindings and resolved instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Application",
		"fromLink": "Illuminate/Foundation/Application.html",
		"link": "Illuminate/Foundation/Application.html#method_getNamespace",
		"name": "Illuminate\\Foundation\\Application::getNamespace",
		"doc": "Get the application namespace."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Auth\\Access",
		"fromLink": "Illuminate/Foundation/Auth/Access.html",
		"link": "Illuminate/Foundation/Auth/Access/Authorizable.html",
		"name": "Illuminate\\Foundation\\Auth\\Access\\Authorizable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\Authorizable",
		"fromLink": "Illuminate/Foundation/Auth/Access/Authorizable.html",
		"link": "Illuminate/Foundation/Auth/Access/Authorizable.html#method_can",
		"name": "Illuminate\\Foundation\\Auth\\Access\\Authorizable::can",
		"doc": "Determine if the entity has the given abilities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\Authorizable",
		"fromLink": "Illuminate/Foundation/Auth/Access/Authorizable.html",
		"link": "Illuminate/Foundation/Auth/Access/Authorizable.html#method_canAny",
		"name": "Illuminate\\Foundation\\Auth\\Access\\Authorizable::canAny",
		"doc": "Determine if the entity has any of the given abilities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\Authorizable",
		"fromLink": "Illuminate/Foundation/Auth/Access/Authorizable.html",
		"link": "Illuminate/Foundation/Auth/Access/Authorizable.html#method_cant",
		"name": "Illuminate\\Foundation\\Auth\\Access\\Authorizable::cant",
		"doc": "Determine if the entity does not have the given abilities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\Authorizable",
		"fromLink": "Illuminate/Foundation/Auth/Access/Authorizable.html",
		"link": "Illuminate/Foundation/Auth/Access/Authorizable.html#method_cannot",
		"name": "Illuminate\\Foundation\\Auth\\Access\\Authorizable::cannot",
		"doc": "Determine if the entity does not have the given abilities."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Auth\\Access",
		"fromLink": "Illuminate/Foundation/Auth/Access.html",
		"link": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html",
		"name": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
		"fromLink": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html",
		"link": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html#method_authorize",
		"name": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests::authorize",
		"doc": "Authorize a given action for the current user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
		"fromLink": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html",
		"link": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html#method_authorizeForUser",
		"name": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests::authorizeForUser",
		"doc": "Authorize a given action for a user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
		"fromLink": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html",
		"link": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html#method_parseAbilityAndArguments",
		"name": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests::parseAbilityAndArguments",
		"doc": "Guesses the ability's name if it wasn't provided."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
		"fromLink": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html",
		"link": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html#method_normalizeGuessedAbilityName",
		"name": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests::normalizeGuessedAbilityName",
		"doc": "Normalize the ability name that has been guessed from the method name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
		"fromLink": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html",
		"link": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html#method_authorizeResource",
		"name": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests::authorizeResource",
		"doc": "Authorize a resource action based on the incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
		"fromLink": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html",
		"link": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html#method_resourceAbilityMap",
		"name": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests::resourceAbilityMap",
		"doc": "Get the map of resource methods to ability names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
		"fromLink": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html",
		"link": "Illuminate/Foundation/Auth/Access/AuthorizesRequests.html#method_resourceMethodsWithoutModels",
		"name": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests::resourceMethodsWithoutModels",
		"doc": "Get the list of resource methods which do not have model parameters."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Auth",
		"fromLink": "Illuminate/Foundation/Auth.html",
		"link": "Illuminate/Foundation/Auth/EmailVerificationRequest.html",
		"name": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest",
		"fromLink": "Illuminate/Foundation/Auth/EmailVerificationRequest.html",
		"link": "Illuminate/Foundation/Auth/EmailVerificationRequest.html#method_authorize",
		"name": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest::authorize",
		"doc": "Determine if the user is authorized to make this request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest",
		"fromLink": "Illuminate/Foundation/Auth/EmailVerificationRequest.html",
		"link": "Illuminate/Foundation/Auth/EmailVerificationRequest.html#method_rules",
		"name": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest::rules",
		"doc": "Get the validation rules that apply to the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest",
		"fromLink": "Illuminate/Foundation/Auth/EmailVerificationRequest.html",
		"link": "Illuminate/Foundation/Auth/EmailVerificationRequest.html#method_fulfill",
		"name": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest::fulfill",
		"doc": "Fulfill the email verification request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest",
		"fromLink": "Illuminate/Foundation/Auth/EmailVerificationRequest.html",
		"link": "Illuminate/Foundation/Auth/EmailVerificationRequest.html#method_withValidator",
		"name": "Illuminate\\Foundation\\Auth\\EmailVerificationRequest::withValidator",
		"doc": "Configure the validator instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Auth",
		"fromLink": "Illuminate/Foundation/Auth.html",
		"link": "Illuminate/Foundation/Auth/User.html",
		"name": "Illuminate\\Foundation\\Auth\\User",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bootstrap",
		"fromLink": "Illuminate/Foundation/Bootstrap.html",
		"link": "Illuminate/Foundation/Bootstrap/BootProviders.html",
		"name": "Illuminate\\Foundation\\Bootstrap\\BootProviders",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\BootProviders",
		"fromLink": "Illuminate/Foundation/Bootstrap/BootProviders.html",
		"link": "Illuminate/Foundation/Bootstrap/BootProviders.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Bootstrap\\BootProviders::bootstrap",
		"doc": "Bootstrap the given application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bootstrap",
		"fromLink": "Illuminate/Foundation/Bootstrap.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::bootstrap",
		"doc": "Bootstrap the given application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_handleError",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::handleError",
		"doc": "Convert PHP errors to ErrorException instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_handleException",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::handleException",
		"doc": "Handle an uncaught exception from the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_renderForConsole",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::renderForConsole",
		"doc": "Render an exception to the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_renderHttpResponse",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::renderHttpResponse",
		"doc": "Render an exception as an HTTP response and send it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_handleShutdown",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::handleShutdown",
		"doc": "Handle the PHP shutdown event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_fatalErrorFromPhpError",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::fatalErrorFromPhpError",
		"doc": "Create a new fatal error instance from an error array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_isFatal",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::isFatal",
		"doc": "Determine if the error type is fatal."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions",
		"fromLink": "Illuminate/Foundation/Bootstrap/HandleExceptions.html",
		"link": "Illuminate/Foundation/Bootstrap/HandleExceptions.html#method_getExceptionHandler",
		"name": "Illuminate\\Foundation\\Bootstrap\\HandleExceptions::getExceptionHandler",
		"doc": "Get an instance of the exception handler."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bootstrap",
		"fromLink": "Illuminate/Foundation/Bootstrap.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::bootstrap",
		"doc": "Bootstrap the given application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html#method_loadConfigurationFiles",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::loadConfigurationFiles",
		"doc": "Load the configuration items from all of the files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html#method_getConfigurationFiles",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::getConfigurationFiles",
		"doc": "Get all of the configuration files for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadConfiguration.html#method_getNestedDirectory",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::getNestedDirectory",
		"doc": "Get the configuration file nesting path."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bootstrap",
		"fromLink": "Illuminate/Foundation/Bootstrap.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::bootstrap",
		"doc": "Bootstrap the given application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html#method_checkForSpecificEnvironmentFile",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::checkForSpecificEnvironmentFile",
		"doc": "Detect if a custom environment file matching the APP_ENV exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html#method_setEnvironmentFilePath",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::setEnvironmentFilePath",
		"doc": "Load a custom environment file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html#method_createDotenv",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::createDotenv",
		"doc": "Create a Dotenv instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables",
		"fromLink": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html",
		"link": "Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.html#method_writeErrorAndDie",
		"name": "Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::writeErrorAndDie",
		"doc": "Write the error information to the screen and exit."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bootstrap",
		"fromLink": "Illuminate/Foundation/Bootstrap.html",
		"link": "Illuminate/Foundation/Bootstrap/RegisterFacades.html",
		"name": "Illuminate\\Foundation\\Bootstrap\\RegisterFacades",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\RegisterFacades",
		"fromLink": "Illuminate/Foundation/Bootstrap/RegisterFacades.html",
		"link": "Illuminate/Foundation/Bootstrap/RegisterFacades.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Bootstrap\\RegisterFacades::bootstrap",
		"doc": "Bootstrap the given application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bootstrap",
		"fromLink": "Illuminate/Foundation/Bootstrap.html",
		"link": "Illuminate/Foundation/Bootstrap/RegisterProviders.html",
		"name": "Illuminate\\Foundation\\Bootstrap\\RegisterProviders",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\RegisterProviders",
		"fromLink": "Illuminate/Foundation/Bootstrap/RegisterProviders.html",
		"link": "Illuminate/Foundation/Bootstrap/RegisterProviders.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Bootstrap\\RegisterProviders::bootstrap",
		"doc": "Bootstrap the given application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bootstrap",
		"fromLink": "Illuminate/Foundation/Bootstrap.html",
		"link": "Illuminate/Foundation/Bootstrap/SetRequestForConsole.html",
		"name": "Illuminate\\Foundation\\Bootstrap\\SetRequestForConsole",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bootstrap\\SetRequestForConsole",
		"fromLink": "Illuminate/Foundation/Bootstrap/SetRequestForConsole.html",
		"link": "Illuminate/Foundation/Bootstrap/SetRequestForConsole.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Bootstrap\\SetRequestForConsole::bootstrap",
		"doc": "Bootstrap the given application."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Bus",
		"fromLink": "Illuminate/Foundation/Bus.html",
		"link": "Illuminate/Foundation/Bus/Dispatchable.html",
		"name": "Illuminate\\Foundation\\Bus\\Dispatchable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Bus/Dispatchable.html",
		"link": "Illuminate/Foundation/Bus/Dispatchable.html#method_dispatch",
		"name": "Illuminate\\Foundation\\Bus\\Dispatchable::dispatch",
		"doc": "Dispatch the job with the given arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Bus/Dispatchable.html",
		"link": "Illuminate/Foundation/Bus/Dispatchable.html#method_dispatchIf",
		"name": "Illuminate\\Foundation\\Bus\\Dispatchable::dispatchIf",
		"doc": "Dispatch the job with the given arguments if the given truth test passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Bus/Dispatchable.html",
		"link": "Illuminate/Foundation/Bus/Dispatchable.html#method_dispatchUnless",
		"name": "Illuminate\\Foundation\\Bus\\Dispatchable::dispatchUnless",
		"doc": "Dispatch the job with the given arguments unless the given truth test passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Bus/Dispatchable.html",
		"link": "Illuminate/Foundation/Bus/Dispatchable.html#method_dispatchSync",
		"name": "Illuminate\\Foundation\\Bus\\Dispatchable::dispatchSync",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Bus/Dispatchable.html",
		"link": "Illuminate/Foundation/Bus/Dispatchable.html#method_dispatchNow",
		"name": "Illuminate\\Foundation\\Bus\\Dispatchable::dispatchNow",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Bus/Dispatchable.html",
		"link": "Illuminate/Foundation/Bus/Dispatchable.html#method_dispatchAfterResponse",
		"name": "Illuminate\\Foundation\\Bus\\Dispatchable::dispatchAfterResponse",
		"doc": "Dispatch a command to its appropriate handler after the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Bus/Dispatchable.html",
		"link": "Illuminate/Foundation/Bus/Dispatchable.html#method_withChain",
		"name": "Illuminate\\Foundation\\Bus\\Dispatchable::withChain",
		"doc": "Set the jobs that should run if this job is successful."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Bus",
		"fromLink": "Illuminate/Foundation/Bus.html",
		"link": "Illuminate/Foundation/Bus/DispatchesJobs.html",
		"name": "Illuminate\\Foundation\\Bus\\DispatchesJobs",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\DispatchesJobs",
		"fromLink": "Illuminate/Foundation/Bus/DispatchesJobs.html",
		"link": "Illuminate/Foundation/Bus/DispatchesJobs.html#method_dispatch",
		"name": "Illuminate\\Foundation\\Bus\\DispatchesJobs::dispatch",
		"doc": "Dispatch a job to its appropriate handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\DispatchesJobs",
		"fromLink": "Illuminate/Foundation/Bus/DispatchesJobs.html",
		"link": "Illuminate/Foundation/Bus/DispatchesJobs.html#method_dispatchNow",
		"name": "Illuminate\\Foundation\\Bus\\DispatchesJobs::dispatchNow",
		"doc": "Dispatch a job to its appropriate handler in the current process."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bus",
		"fromLink": "Illuminate/Foundation/Bus.html",
		"link": "Illuminate/Foundation/Bus/PendingChain.html",
		"name": "Illuminate\\Foundation\\Bus\\PendingChain",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingChain",
		"fromLink": "Illuminate/Foundation/Bus/PendingChain.html",
		"link": "Illuminate/Foundation/Bus/PendingChain.html#method___construct",
		"name": "Illuminate\\Foundation\\Bus\\PendingChain::__construct",
		"doc": "Create a new PendingChain instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingChain",
		"fromLink": "Illuminate/Foundation/Bus/PendingChain.html",
		"link": "Illuminate/Foundation/Bus/PendingChain.html#method_onConnection",
		"name": "Illuminate\\Foundation\\Bus\\PendingChain::onConnection",
		"doc": "Set the desired connection for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingChain",
		"fromLink": "Illuminate/Foundation/Bus/PendingChain.html",
		"link": "Illuminate/Foundation/Bus/PendingChain.html#method_onQueue",
		"name": "Illuminate\\Foundation\\Bus\\PendingChain::onQueue",
		"doc": "Set the desired queue for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingChain",
		"fromLink": "Illuminate/Foundation/Bus/PendingChain.html",
		"link": "Illuminate/Foundation/Bus/PendingChain.html#method_delay",
		"name": "Illuminate\\Foundation\\Bus\\PendingChain::delay",
		"doc": "Set the desired delay for the chain."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingChain",
		"fromLink": "Illuminate/Foundation/Bus/PendingChain.html",
		"link": "Illuminate/Foundation/Bus/PendingChain.html#method_catch",
		"name": "Illuminate\\Foundation\\Bus\\PendingChain::catch",
		"doc": "Add a callback to be executed on job failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingChain",
		"fromLink": "Illuminate/Foundation/Bus/PendingChain.html",
		"link": "Illuminate/Foundation/Bus/PendingChain.html#method_catchCallbacks",
		"name": "Illuminate\\Foundation\\Bus\\PendingChain::catchCallbacks",
		"doc": "Get the \"catch\" callbacks that have been registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingChain",
		"fromLink": "Illuminate/Foundation/Bus/PendingChain.html",
		"link": "Illuminate/Foundation/Bus/PendingChain.html#method_dispatch",
		"name": "Illuminate\\Foundation\\Bus\\PendingChain::dispatch",
		"doc": "Dispatch the job with the given arguments."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bus",
		"fromLink": "Illuminate/Foundation/Bus.html",
		"link": "Illuminate/Foundation/Bus/PendingClosureDispatch.html",
		"name": "Illuminate\\Foundation\\Bus\\PendingClosureDispatch",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingClosureDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingClosureDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingClosureDispatch.html#method_catch",
		"name": "Illuminate\\Foundation\\Bus\\PendingClosureDispatch::catch",
		"doc": "Add a callback to be executed if the job fails."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Bus",
		"fromLink": "Illuminate/Foundation/Bus.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method___construct",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::__construct",
		"doc": "Create a new pending job dispatch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method_onConnection",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::onConnection",
		"doc": "Set the desired connection for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method_onQueue",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::onQueue",
		"doc": "Set the desired queue for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method_allOnConnection",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::allOnConnection",
		"doc": "Set the desired connection for the chain."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method_allOnQueue",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::allOnQueue",
		"doc": "Set the desired queue for the chain."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method_delay",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::delay",
		"doc": "Set the desired delay for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method_chain",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::chain",
		"doc": "Set the jobs that should run if this job is successful."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method_afterResponse",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::afterResponse",
		"doc": "Indicate that the job should be dispatched after the response is sent to the browser."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method_shouldDispatch",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::shouldDispatch",
		"doc": "Determine if the job should be dispatched."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method___call",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::__call",
		"doc": "Dynamically proxy methods to the underlying job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Bus\\PendingDispatch",
		"fromLink": "Illuminate/Foundation/Bus/PendingDispatch.html",
		"link": "Illuminate/Foundation/Bus/PendingDispatch.html#method___destruct",
		"name": "Illuminate\\Foundation\\Bus\\PendingDispatch::__destruct",
		"doc": "Handle the object's destruction."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation",
		"fromLink": "Illuminate/Foundation.html",
		"link": "Illuminate/Foundation/ComposerScripts.html",
		"name": "Illuminate\\Foundation\\ComposerScripts",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ComposerScripts",
		"fromLink": "Illuminate/Foundation/ComposerScripts.html",
		"link": "Illuminate/Foundation/ComposerScripts.html#method_postInstall",
		"name": "Illuminate\\Foundation\\ComposerScripts::postInstall",
		"doc": "Handle the post-install Composer event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ComposerScripts",
		"fromLink": "Illuminate/Foundation/ComposerScripts.html",
		"link": "Illuminate/Foundation/ComposerScripts.html#method_postUpdate",
		"name": "Illuminate\\Foundation\\ComposerScripts::postUpdate",
		"doc": "Handle the post-update Composer event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ComposerScripts",
		"fromLink": "Illuminate/Foundation/ComposerScripts.html",
		"link": "Illuminate/Foundation/ComposerScripts.html#method_postAutoloadDump",
		"name": "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
		"doc": "Handle the post-autoload-dump Composer event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ComposerScripts",
		"fromLink": "Illuminate/Foundation/ComposerScripts.html",
		"link": "Illuminate/Foundation/ComposerScripts.html#method_clearCompiled",
		"name": "Illuminate\\Foundation\\ComposerScripts::clearCompiled",
		"doc": "Clear the cached Laravel bootstrapping files."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/CastMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\CastMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\CastMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/CastMakeCommand.html",
		"link": "Illuminate/Foundation/Console/CastMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\CastMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\CastMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/CastMakeCommand.html",
		"link": "Illuminate/Foundation/Console/CastMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Foundation\\Console\\CastMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\CastMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/CastMakeCommand.html",
		"link": "Illuminate/Foundation/Console/CastMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\CastMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ChannelMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ChannelMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ChannelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ChannelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ChannelMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Foundation\\Console\\ChannelMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ChannelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ChannelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ChannelMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ChannelMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ChannelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ChannelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ChannelMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ChannelMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ClearCompiledCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ClearCompiledCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ClearCompiledCommand",
		"fromLink": "Illuminate/Foundation/Console/ClearCompiledCommand.html",
		"link": "Illuminate/Foundation/Console/ClearCompiledCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ClearCompiledCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ClosureCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ClosureCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ClosureCommand",
		"fromLink": "Illuminate/Foundation/Console/ClosureCommand.html",
		"link": "Illuminate/Foundation/Console/ClosureCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\ClosureCommand::__construct",
		"doc": "Create a new command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ClosureCommand",
		"fromLink": "Illuminate/Foundation/Console/ClosureCommand.html",
		"link": "Illuminate/Foundation/Console/ClosureCommand.html#method_execute",
		"name": "Illuminate\\Foundation\\Console\\ClosureCommand::execute",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ClosureCommand",
		"fromLink": "Illuminate/Foundation/Console/ClosureCommand.html",
		"link": "Illuminate/Foundation/Console/ClosureCommand.html#method_purpose",
		"name": "Illuminate\\Foundation\\Console\\ClosureCommand::purpose",
		"doc": "Set the description for the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ClosureCommand",
		"fromLink": "Illuminate/Foundation/Console/ClosureCommand.html",
		"link": "Illuminate/Foundation/Console/ClosureCommand.html#method_describe",
		"name": "Illuminate\\Foundation\\Console\\ClosureCommand::describe",
		"doc": "Set the description for the command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ComponentMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ComponentMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ComponentMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ComponentMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ComponentMakeCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ComponentMakeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ComponentMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ComponentMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ComponentMakeCommand.html#method_writeView",
		"name": "Illuminate\\Foundation\\Console\\ComponentMakeCommand::writeView",
		"doc": "Write the view for the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ComponentMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ComponentMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ComponentMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Foundation\\Console\\ComponentMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ComponentMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ComponentMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ComponentMakeCommand.html#method_getView",
		"name": "Illuminate\\Foundation\\Console\\ComponentMakeCommand::getView",
		"doc": "Get the view name relative to the components directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ComponentMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ComponentMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ComponentMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ComponentMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ComponentMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ComponentMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ComponentMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ComponentMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ComponentMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ComponentMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ComponentMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\ComponentMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ConfigCacheCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ConfigCacheCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConfigCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/ConfigCacheCommand.html",
		"link": "Illuminate/Foundation/Console/ConfigCacheCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\ConfigCacheCommand::__construct",
		"doc": "Create a new config cache command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConfigCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/ConfigCacheCommand.html",
		"link": "Illuminate/Foundation/Console/ConfigCacheCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ConfigCacheCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConfigCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/ConfigCacheCommand.html",
		"link": "Illuminate/Foundation/Console/ConfigCacheCommand.html#method_getFreshConfiguration",
		"name": "Illuminate\\Foundation\\Console\\ConfigCacheCommand::getFreshConfiguration",
		"doc": "Boot a fresh copy of the application configuration."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ConfigClearCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ConfigClearCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConfigClearCommand",
		"fromLink": "Illuminate/Foundation/Console/ConfigClearCommand.html",
		"link": "Illuminate/Foundation/Console/ConfigClearCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\ConfigClearCommand::__construct",
		"doc": "Create a new config clear command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConfigClearCommand",
		"fromLink": "Illuminate/Foundation/Console/ConfigClearCommand.html",
		"link": "Illuminate/Foundation/Console/ConfigClearCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ConfigClearCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ConsoleMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ConsoleMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ConsoleMakeCommand.html#method_replaceClass",
		"name": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand::replaceClass",
		"doc": "Replace the class name for the given stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ConsoleMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ConsoleMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ConsoleMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ConsoleMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ConsoleMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ConsoleMakeCommand.html#method_getArguments",
		"name": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand::getArguments",
		"doc": "Get the console command arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ConsoleMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ConsoleMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\ConsoleMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/DownCommand.html",
		"name": "Illuminate\\Foundation\\Console\\DownCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\DownCommand",
		"fromLink": "Illuminate/Foundation/Console/DownCommand.html",
		"link": "Illuminate/Foundation/Console/DownCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\DownCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\DownCommand",
		"fromLink": "Illuminate/Foundation/Console/DownCommand.html",
		"link": "Illuminate/Foundation/Console/DownCommand.html#method_getDownFilePayload",
		"name": "Illuminate\\Foundation\\Console\\DownCommand::getDownFilePayload",
		"doc": "Get the payload to be placed in the \"down\" file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\DownCommand",
		"fromLink": "Illuminate/Foundation/Console/DownCommand.html",
		"link": "Illuminate/Foundation/Console/DownCommand.html#method_redirectPath",
		"name": "Illuminate\\Foundation\\Console\\DownCommand::redirectPath",
		"doc": "Get the path that users should be redirected to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\DownCommand",
		"fromLink": "Illuminate/Foundation/Console/DownCommand.html",
		"link": "Illuminate/Foundation/Console/DownCommand.html#method_prerenderView",
		"name": "Illuminate\\Foundation\\Console\\DownCommand::prerenderView",
		"doc": "Prerender the specified view so that it can be rendered even before loading Composer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\DownCommand",
		"fromLink": "Illuminate/Foundation/Console/DownCommand.html",
		"link": "Illuminate/Foundation/Console/DownCommand.html#method_getRetryTime",
		"name": "Illuminate\\Foundation\\Console\\DownCommand::getRetryTime",
		"doc": "Get the number of seconds the client should wait before retrying their request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/EnvironmentCommand.html",
		"name": "Illuminate\\Foundation\\Console\\EnvironmentCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EnvironmentCommand",
		"fromLink": "Illuminate/Foundation/Console/EnvironmentCommand.html",
		"link": "Illuminate/Foundation/Console/EnvironmentCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\EnvironmentCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/EventCacheCommand.html",
		"name": "Illuminate\\Foundation\\Console\\EventCacheCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/EventCacheCommand.html",
		"link": "Illuminate/Foundation/Console/EventCacheCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\EventCacheCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/EventCacheCommand.html",
		"link": "Illuminate/Foundation/Console/EventCacheCommand.html#method_getEvents",
		"name": "Illuminate\\Foundation\\Console\\EventCacheCommand::getEvents",
		"doc": "Get all of the events and listeners configured for the application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/EventClearCommand.html",
		"name": "Illuminate\\Foundation\\Console\\EventClearCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventClearCommand",
		"fromLink": "Illuminate/Foundation/Console/EventClearCommand.html",
		"link": "Illuminate/Foundation/Console/EventClearCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\EventClearCommand::__construct",
		"doc": "Create a new config clear command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventClearCommand",
		"fromLink": "Illuminate/Foundation/Console/EventClearCommand.html",
		"link": "Illuminate/Foundation/Console/EventClearCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\EventClearCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/EventGenerateCommand.html",
		"name": "Illuminate\\Foundation\\Console\\EventGenerateCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventGenerateCommand",
		"fromLink": "Illuminate/Foundation/Console/EventGenerateCommand.html",
		"link": "Illuminate/Foundation/Console/EventGenerateCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\EventGenerateCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventGenerateCommand",
		"fromLink": "Illuminate/Foundation/Console/EventGenerateCommand.html",
		"link": "Illuminate/Foundation/Console/EventGenerateCommand.html#method_makeEventAndListeners",
		"name": "Illuminate\\Foundation\\Console\\EventGenerateCommand::makeEventAndListeners",
		"doc": "Make the event and listeners for the given event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventGenerateCommand",
		"fromLink": "Illuminate/Foundation/Console/EventGenerateCommand.html",
		"link": "Illuminate/Foundation/Console/EventGenerateCommand.html#method_makeListeners",
		"name": "Illuminate\\Foundation\\Console\\EventGenerateCommand::makeListeners",
		"doc": "Make the listeners for the given event."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/EventListCommand.html",
		"name": "Illuminate\\Foundation\\Console\\EventListCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventListCommand",
		"fromLink": "Illuminate/Foundation/Console/EventListCommand.html",
		"link": "Illuminate/Foundation/Console/EventListCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\EventListCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventListCommand",
		"fromLink": "Illuminate/Foundation/Console/EventListCommand.html",
		"link": "Illuminate/Foundation/Console/EventListCommand.html#method_getEvents",
		"name": "Illuminate\\Foundation\\Console\\EventListCommand::getEvents",
		"doc": "Get all of the events and listeners configured for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventListCommand",
		"fromLink": "Illuminate/Foundation/Console/EventListCommand.html",
		"link": "Illuminate/Foundation/Console/EventListCommand.html#method_filterEvents",
		"name": "Illuminate\\Foundation\\Console\\EventListCommand::filterEvents",
		"doc": "Filter the given events using the provided event name filter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventListCommand",
		"fromLink": "Illuminate/Foundation/Console/EventListCommand.html",
		"link": "Illuminate/Foundation/Console/EventListCommand.html#method_filteringByEvent",
		"name": "Illuminate\\Foundation\\Console\\EventListCommand::filteringByEvent",
		"doc": "Determine whether the user is filtering by an event name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/EventMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\EventMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/EventMakeCommand.html",
		"link": "Illuminate/Foundation/Console/EventMakeCommand.html#method_alreadyExists",
		"name": "Illuminate\\Foundation\\Console\\EventMakeCommand::alreadyExists",
		"doc": "Determine if the class already exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/EventMakeCommand.html",
		"link": "Illuminate/Foundation/Console/EventMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\EventMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\EventMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/EventMakeCommand.html",
		"link": "Illuminate/Foundation/Console/EventMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\EventMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ExceptionMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ExceptionMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ExceptionMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ExceptionMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ExceptionMakeCommand.html#method_alreadyExists",
		"name": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand::alreadyExists",
		"doc": "Determine if the class already exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ExceptionMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ExceptionMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ExceptionMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ExceptionMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\ExceptionMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/JobMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\JobMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\JobMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/JobMakeCommand.html",
		"link": "Illuminate/Foundation/Console/JobMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\JobMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\JobMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/JobMakeCommand.html",
		"link": "Illuminate/Foundation/Console/JobMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Foundation\\Console\\JobMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\JobMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/JobMakeCommand.html",
		"link": "Illuminate/Foundation/Console/JobMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\JobMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\JobMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/JobMakeCommand.html",
		"link": "Illuminate/Foundation/Console/JobMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\JobMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/Kernel.html",
		"name": "Illuminate\\Foundation\\Console\\Kernel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\Kernel::__construct",
		"doc": "Create a new console kernel instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_defineConsoleSchedule",
		"name": "Illuminate\\Foundation\\Console\\Kernel::defineConsoleSchedule",
		"doc": "Define the application's command schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_scheduleCache",
		"name": "Illuminate\\Foundation\\Console\\Kernel::scheduleCache",
		"doc": "Get the name of the cache store that should manage scheduling mutexes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\Kernel::handle",
		"doc": "Run the console application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_terminate",
		"name": "Illuminate\\Foundation\\Console\\Kernel::terminate",
		"doc": "Terminate the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_schedule",
		"name": "Illuminate\\Foundation\\Console\\Kernel::schedule",
		"doc": "Define the application's command schedule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_scheduleTimezone",
		"name": "Illuminate\\Foundation\\Console\\Kernel::scheduleTimezone",
		"doc": "Get the timezone that should be used by default for scheduled events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_commands",
		"name": "Illuminate\\Foundation\\Console\\Kernel::commands",
		"doc": "Register the Closure based commands for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_command",
		"name": "Illuminate\\Foundation\\Console\\Kernel::command",
		"doc": "Register a Closure based command with the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_load",
		"name": "Illuminate\\Foundation\\Console\\Kernel::load",
		"doc": "Register all of the commands in the given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_registerCommand",
		"name": "Illuminate\\Foundation\\Console\\Kernel::registerCommand",
		"doc": "Register the given command with the console application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_call",
		"name": "Illuminate\\Foundation\\Console\\Kernel::call",
		"doc": "Run an Artisan console command by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_queue",
		"name": "Illuminate\\Foundation\\Console\\Kernel::queue",
		"doc": "Queue the given console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_all",
		"name": "Illuminate\\Foundation\\Console\\Kernel::all",
		"doc": "Get all of the commands registered with the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_output",
		"name": "Illuminate\\Foundation\\Console\\Kernel::output",
		"doc": "Get the output for the last run command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Console\\Kernel::bootstrap",
		"doc": "Bootstrap the application for artisan commands."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_getArtisan",
		"name": "Illuminate\\Foundation\\Console\\Kernel::getArtisan",
		"doc": "Get the Artisan application instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_setArtisan",
		"name": "Illuminate\\Foundation\\Console\\Kernel::setArtisan",
		"doc": "Set the Artisan application instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_bootstrappers",
		"name": "Illuminate\\Foundation\\Console\\Kernel::bootstrappers",
		"doc": "Get the bootstrap classes for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_reportException",
		"name": "Illuminate\\Foundation\\Console\\Kernel::reportException",
		"doc": "Report the exception to the exception handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\Kernel",
		"fromLink": "Illuminate/Foundation/Console/Kernel.html",
		"link": "Illuminate/Foundation/Console/Kernel.html#method_renderException",
		"name": "Illuminate\\Foundation\\Console\\Kernel::renderException",
		"doc": "Render the given exception."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/KeyGenerateCommand.html",
		"name": "Illuminate\\Foundation\\Console\\KeyGenerateCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\KeyGenerateCommand",
		"fromLink": "Illuminate/Foundation/Console/KeyGenerateCommand.html",
		"link": "Illuminate/Foundation/Console/KeyGenerateCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\KeyGenerateCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\KeyGenerateCommand",
		"fromLink": "Illuminate/Foundation/Console/KeyGenerateCommand.html",
		"link": "Illuminate/Foundation/Console/KeyGenerateCommand.html#method_generateRandomKey",
		"name": "Illuminate\\Foundation\\Console\\KeyGenerateCommand::generateRandomKey",
		"doc": "Generate a random key for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\KeyGenerateCommand",
		"fromLink": "Illuminate/Foundation/Console/KeyGenerateCommand.html",
		"link": "Illuminate/Foundation/Console/KeyGenerateCommand.html#method_setKeyInEnvironmentFile",
		"name": "Illuminate\\Foundation\\Console\\KeyGenerateCommand::setKeyInEnvironmentFile",
		"doc": "Set the application key in the environment file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\KeyGenerateCommand",
		"fromLink": "Illuminate/Foundation/Console/KeyGenerateCommand.html",
		"link": "Illuminate/Foundation/Console/KeyGenerateCommand.html#method_writeNewEnvironmentFileWith",
		"name": "Illuminate\\Foundation\\Console\\KeyGenerateCommand::writeNewEnvironmentFileWith",
		"doc": "Write a new environment file with the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\KeyGenerateCommand",
		"fromLink": "Illuminate/Foundation/Console/KeyGenerateCommand.html",
		"link": "Illuminate/Foundation/Console/KeyGenerateCommand.html#method_keyReplacementPattern",
		"name": "Illuminate\\Foundation\\Console\\KeyGenerateCommand::keyReplacementPattern",
		"doc": "Get a regex pattern that will match env APP_KEY with any random key."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ListenerMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ListenerMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ListenerMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ListenerMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ListenerMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Foundation\\Console\\ListenerMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ListenerMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ListenerMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ListenerMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ListenerMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ListenerMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ListenerMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ListenerMakeCommand.html#method_alreadyExists",
		"name": "Illuminate\\Foundation\\Console\\ListenerMakeCommand::alreadyExists",
		"doc": "Determine if the class already exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ListenerMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ListenerMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ListenerMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ListenerMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ListenerMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ListenerMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ListenerMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\ListenerMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/MailMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\MailMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\MailMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/MailMakeCommand.html",
		"link": "Illuminate/Foundation/Console/MailMakeCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\MailMakeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\MailMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/MailMakeCommand.html",
		"link": "Illuminate/Foundation/Console/MailMakeCommand.html#method_writeMarkdownTemplate",
		"name": "Illuminate\\Foundation\\Console\\MailMakeCommand::writeMarkdownTemplate",
		"doc": "Write the Markdown template for the mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\MailMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/MailMakeCommand.html",
		"link": "Illuminate/Foundation/Console/MailMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Foundation\\Console\\MailMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\MailMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/MailMakeCommand.html",
		"link": "Illuminate/Foundation/Console/MailMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\MailMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\MailMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/MailMakeCommand.html",
		"link": "Illuminate/Foundation/Console/MailMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\MailMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\MailMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/MailMakeCommand.html",
		"link": "Illuminate/Foundation/Console/MailMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\MailMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_createFactory",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::createFactory",
		"doc": "Create a model factory for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_createMigration",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::createMigration",
		"doc": "Create a migration file for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_createSeeder",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::createSeeder",
		"doc": "Create a seeder file for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_createController",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::createController",
		"doc": "Create a controller for the model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ModelMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ModelMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ModelMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\ModelMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/NotificationMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\NotificationMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\NotificationMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/NotificationMakeCommand.html",
		"link": "Illuminate/Foundation/Console/NotificationMakeCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\NotificationMakeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\NotificationMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/NotificationMakeCommand.html",
		"link": "Illuminate/Foundation/Console/NotificationMakeCommand.html#method_writeMarkdownTemplate",
		"name": "Illuminate\\Foundation\\Console\\NotificationMakeCommand::writeMarkdownTemplate",
		"doc": "Write the Markdown template for the mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\NotificationMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/NotificationMakeCommand.html",
		"link": "Illuminate/Foundation/Console/NotificationMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Foundation\\Console\\NotificationMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\NotificationMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/NotificationMakeCommand.html",
		"link": "Illuminate/Foundation/Console/NotificationMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\NotificationMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\NotificationMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/NotificationMakeCommand.html",
		"link": "Illuminate/Foundation/Console/NotificationMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\NotificationMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\NotificationMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/NotificationMakeCommand.html",
		"link": "Illuminate/Foundation/Console/NotificationMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\NotificationMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ObserverMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ObserverMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ObserverMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ObserverMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ObserverMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Foundation\\Console\\ObserverMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ObserverMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ObserverMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ObserverMakeCommand.html#method_replaceModel",
		"name": "Illuminate\\Foundation\\Console\\ObserverMakeCommand::replaceModel",
		"doc": "Replace the model for the given stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ObserverMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ObserverMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ObserverMakeCommand.html#method_parseModel",
		"name": "Illuminate\\Foundation\\Console\\ObserverMakeCommand::parseModel",
		"doc": "Get the fully-qualified model class name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ObserverMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ObserverMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ObserverMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ObserverMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ObserverMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ObserverMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ObserverMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Foundation\\Console\\ObserverMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ObserverMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ObserverMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ObserverMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ObserverMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ObserverMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ObserverMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ObserverMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\ObserverMakeCommand::getOptions",
		"doc": "Get the console command arguments."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/OptimizeClearCommand.html",
		"name": "Illuminate\\Foundation\\Console\\OptimizeClearCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\OptimizeClearCommand",
		"fromLink": "Illuminate/Foundation/Console/OptimizeClearCommand.html",
		"link": "Illuminate/Foundation/Console/OptimizeClearCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\OptimizeClearCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/OptimizeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\OptimizeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\OptimizeCommand",
		"fromLink": "Illuminate/Foundation/Console/OptimizeCommand.html",
		"link": "Illuminate/Foundation/Console/OptimizeCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\OptimizeCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/PackageDiscoverCommand.html",
		"name": "Illuminate\\Foundation\\Console\\PackageDiscoverCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PackageDiscoverCommand",
		"fromLink": "Illuminate/Foundation/Console/PackageDiscoverCommand.html",
		"link": "Illuminate/Foundation/Console/PackageDiscoverCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\PackageDiscoverCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html#method_replaceUserNamespace",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand::replaceUserNamespace",
		"doc": "Replace the User model namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html#method_userProviderModel",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand::userProviderModel",
		"doc": "Get the model for the guard's user provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html#method_replaceModel",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand::replaceModel",
		"doc": "Replace the model for the given stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\PolicyMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/PolicyMakeCommand.html",
		"link": "Illuminate/Foundation/Console/PolicyMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\PolicyMakeCommand::getOptions",
		"doc": "Get the console command arguments."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ProviderMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ProviderMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ProviderMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ProviderMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ProviderMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ProviderMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ProviderMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ProviderMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ProviderMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ProviderMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/QueuedCommand.html",
		"name": "Illuminate\\Foundation\\Console\\QueuedCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\QueuedCommand",
		"fromLink": "Illuminate/Foundation/Console/QueuedCommand.html",
		"link": "Illuminate/Foundation/Console/QueuedCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\QueuedCommand::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\QueuedCommand",
		"fromLink": "Illuminate/Foundation/Console/QueuedCommand.html",
		"link": "Illuminate/Foundation/Console/QueuedCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\QueuedCommand::handle",
		"doc": "Handle the job."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/RequestMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\RequestMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RequestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/RequestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/RequestMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\RequestMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RequestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/RequestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/RequestMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Foundation\\Console\\RequestMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RequestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/RequestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/RequestMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\RequestMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ResourceMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ResourceMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ResourceMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ResourceMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ResourceMakeCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ResourceMakeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ResourceMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ResourceMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ResourceMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\ResourceMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ResourceMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ResourceMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ResourceMakeCommand.html#method_collection",
		"name": "Illuminate\\Foundation\\Console\\ResourceMakeCommand::collection",
		"doc": "Determine if the command is generating a resource collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ResourceMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ResourceMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ResourceMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Foundation\\Console\\ResourceMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ResourceMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ResourceMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ResourceMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\ResourceMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ResourceMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/ResourceMakeCommand.html",
		"link": "Illuminate/Foundation/Console/ResourceMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\ResourceMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/RouteCacheCommand.html",
		"name": "Illuminate\\Foundation\\Console\\RouteCacheCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteCacheCommand.html",
		"link": "Illuminate/Foundation/Console/RouteCacheCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\RouteCacheCommand::__construct",
		"doc": "Create a new route command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteCacheCommand.html",
		"link": "Illuminate/Foundation/Console/RouteCacheCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\RouteCacheCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteCacheCommand.html",
		"link": "Illuminate/Foundation/Console/RouteCacheCommand.html#method_getFreshApplicationRoutes",
		"name": "Illuminate\\Foundation\\Console\\RouteCacheCommand::getFreshApplicationRoutes",
		"doc": "Boot a fresh copy of the application and get the routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteCacheCommand.html",
		"link": "Illuminate/Foundation/Console/RouteCacheCommand.html#method_getFreshApplication",
		"name": "Illuminate\\Foundation\\Console\\RouteCacheCommand::getFreshApplication",
		"doc": "Get a fresh application instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteCacheCommand.html",
		"link": "Illuminate/Foundation/Console/RouteCacheCommand.html#method_buildRouteCacheFile",
		"name": "Illuminate\\Foundation\\Console\\RouteCacheCommand::buildRouteCacheFile",
		"doc": "Build the route cache file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/RouteClearCommand.html",
		"name": "Illuminate\\Foundation\\Console\\RouteClearCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteClearCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteClearCommand.html",
		"link": "Illuminate/Foundation/Console/RouteClearCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\RouteClearCommand::__construct",
		"doc": "Create a new route clear command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteClearCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteClearCommand.html",
		"link": "Illuminate/Foundation/Console/RouteClearCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\RouteClearCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::__construct",
		"doc": "Create a new route command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_getRoutes",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::getRoutes",
		"doc": "Compile the routes into a displayable format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_getRouteInformation",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::getRouteInformation",
		"doc": "Get the route information for a given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_sortRoutes",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::sortRoutes",
		"doc": "Sort the routes by a given element."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_pluckColumns",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::pluckColumns",
		"doc": "Remove unnecessary columns from the routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_displayRoutes",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::displayRoutes",
		"doc": "Display the route information on the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_getMiddleware",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::getMiddleware",
		"doc": "Get before filters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_filterRoute",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::filterRoute",
		"doc": "Filter the route by URI and / or name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_getHeaders",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::getHeaders",
		"doc": "Get the table headers for the visible columns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_getColumns",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::getColumns",
		"doc": "Get the column names to show (lowercase table headers)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_parseColumns",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::parseColumns",
		"doc": "Parse the column list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RouteListCommand",
		"fromLink": "Illuminate/Foundation/Console/RouteListCommand.html",
		"link": "Illuminate/Foundation/Console/RouteListCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\RouteListCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/RuleMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\RuleMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RuleMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/RuleMakeCommand.html",
		"link": "Illuminate/Foundation/Console/RuleMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\RuleMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\RuleMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/RuleMakeCommand.html",
		"link": "Illuminate/Foundation/Console/RuleMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\RuleMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ServeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ServeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ServeCommand",
		"fromLink": "Illuminate/Foundation/Console/ServeCommand.html",
		"link": "Illuminate/Foundation/Console/ServeCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ServeCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ServeCommand",
		"fromLink": "Illuminate/Foundation/Console/ServeCommand.html",
		"link": "Illuminate/Foundation/Console/ServeCommand.html#method_startProcess",
		"name": "Illuminate\\Foundation\\Console\\ServeCommand::startProcess",
		"doc": "Start a new server process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ServeCommand",
		"fromLink": "Illuminate/Foundation/Console/ServeCommand.html",
		"link": "Illuminate/Foundation/Console/ServeCommand.html#method_serverCommand",
		"name": "Illuminate\\Foundation\\Console\\ServeCommand::serverCommand",
		"doc": "Get the full server command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ServeCommand",
		"fromLink": "Illuminate/Foundation/Console/ServeCommand.html",
		"link": "Illuminate/Foundation/Console/ServeCommand.html#method_host",
		"name": "Illuminate\\Foundation\\Console\\ServeCommand::host",
		"doc": "Get the host for the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ServeCommand",
		"fromLink": "Illuminate/Foundation/Console/ServeCommand.html",
		"link": "Illuminate/Foundation/Console/ServeCommand.html#method_port",
		"name": "Illuminate\\Foundation\\Console\\ServeCommand::port",
		"doc": "Get the port for the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ServeCommand",
		"fromLink": "Illuminate/Foundation/Console/ServeCommand.html",
		"link": "Illuminate/Foundation/Console/ServeCommand.html#method_canTryAnotherPort",
		"name": "Illuminate\\Foundation\\Console\\ServeCommand::canTryAnotherPort",
		"doc": "Check if command has reached its max amount of port tries."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ServeCommand",
		"fromLink": "Illuminate/Foundation/Console/ServeCommand.html",
		"link": "Illuminate/Foundation/Console/ServeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\ServeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/StorageLinkCommand.html",
		"name": "Illuminate\\Foundation\\Console\\StorageLinkCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\StorageLinkCommand",
		"fromLink": "Illuminate/Foundation/Console/StorageLinkCommand.html",
		"link": "Illuminate/Foundation/Console/StorageLinkCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\StorageLinkCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\StorageLinkCommand",
		"fromLink": "Illuminate/Foundation/Console/StorageLinkCommand.html",
		"link": "Illuminate/Foundation/Console/StorageLinkCommand.html#method_links",
		"name": "Illuminate\\Foundation\\Console\\StorageLinkCommand::links",
		"doc": "Get the symbolic links that are configured for the application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/StubPublishCommand.html",
		"name": "Illuminate\\Foundation\\Console\\StubPublishCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\StubPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/StubPublishCommand.html",
		"link": "Illuminate/Foundation/Console/StubPublishCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\StubPublishCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/TestMakeCommand.html",
		"name": "Illuminate\\Foundation\\Console\\TestMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\TestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/TestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/TestMakeCommand.html#method_getStub",
		"name": "Illuminate\\Foundation\\Console\\TestMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\TestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/TestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/TestMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Foundation\\Console\\TestMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\TestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/TestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/TestMakeCommand.html#method_getPath",
		"name": "Illuminate\\Foundation\\Console\\TestMakeCommand::getPath",
		"doc": "Get the destination class path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\TestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/TestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/TestMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Foundation\\Console\\TestMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\TestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/TestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/TestMakeCommand.html#method_rootNamespace",
		"name": "Illuminate\\Foundation\\Console\\TestMakeCommand::rootNamespace",
		"doc": "Get the root namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\TestMakeCommand",
		"fromLink": "Illuminate/Foundation/Console/TestMakeCommand.html",
		"link": "Illuminate/Foundation/Console/TestMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Foundation\\Console\\TestMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/UpCommand.html",
		"name": "Illuminate\\Foundation\\Console\\UpCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\UpCommand",
		"fromLink": "Illuminate/Foundation/Console/UpCommand.html",
		"link": "Illuminate/Foundation/Console/UpCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\UpCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::__construct",
		"doc": "Create a new command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_determineWhatShouldBePublished",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::determineWhatShouldBePublished",
		"doc": "Determine the provider or tag(s) to publish."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_promptForProviderOrTag",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::promptForProviderOrTag",
		"doc": "Prompt for which provider or tag to publish."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_publishableChoices",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::publishableChoices",
		"doc": "The choices available via the prompt."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_parseChoice",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::parseChoice",
		"doc": "Parse the answer that was given via the prompt."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_publishTag",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::publishTag",
		"doc": "Publishes the assets for a tag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_pathsToPublish",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::pathsToPublish",
		"doc": "Get all of the paths to publish."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_publishItem",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::publishItem",
		"doc": "Publish the given item from and to the given location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_publishFile",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::publishFile",
		"doc": "Publish the file to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_publishDirectory",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::publishDirectory",
		"doc": "Publish the directory to the given directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_moveManagedFiles",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::moveManagedFiles",
		"doc": "Move all the files in the given MountManager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_createParentDirectory",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::createParentDirectory",
		"doc": "Create the directory to house the published files if needed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\VendorPublishCommand",
		"fromLink": "Illuminate/Foundation/Console/VendorPublishCommand.html",
		"link": "Illuminate/Foundation/Console/VendorPublishCommand.html#method_status",
		"name": "Illuminate\\Foundation\\Console\\VendorPublishCommand::status",
		"doc": "Write a status message to the console."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ViewCacheCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ViewCacheCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ViewCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/ViewCacheCommand.html",
		"link": "Illuminate/Foundation/Console/ViewCacheCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ViewCacheCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ViewCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/ViewCacheCommand.html",
		"link": "Illuminate/Foundation/Console/ViewCacheCommand.html#method_compileViews",
		"name": "Illuminate\\Foundation\\Console\\ViewCacheCommand::compileViews",
		"doc": "Compile the given view files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ViewCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/ViewCacheCommand.html",
		"link": "Illuminate/Foundation/Console/ViewCacheCommand.html#method_bladeFilesIn",
		"name": "Illuminate\\Foundation\\Console\\ViewCacheCommand::bladeFilesIn",
		"doc": "Get the Blade files in the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ViewCacheCommand",
		"fromLink": "Illuminate/Foundation/Console/ViewCacheCommand.html",
		"link": "Illuminate/Foundation/Console/ViewCacheCommand.html#method_paths",
		"name": "Illuminate\\Foundation\\Console\\ViewCacheCommand::paths",
		"doc": "Get all of the possible view paths."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Console",
		"fromLink": "Illuminate/Foundation/Console.html",
		"link": "Illuminate/Foundation/Console/ViewClearCommand.html",
		"name": "Illuminate\\Foundation\\Console\\ViewClearCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ViewClearCommand",
		"fromLink": "Illuminate/Foundation/Console/ViewClearCommand.html",
		"link": "Illuminate/Foundation/Console/ViewClearCommand.html#method___construct",
		"name": "Illuminate\\Foundation\\Console\\ViewClearCommand::__construct",
		"doc": "Create a new config clear command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Console\\ViewClearCommand",
		"fromLink": "Illuminate/Foundation/Console/ViewClearCommand.html",
		"link": "Illuminate/Foundation/Console/ViewClearCommand.html#method_handle",
		"name": "Illuminate\\Foundation\\Console\\ViewClearCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation",
		"fromLink": "Illuminate/Foundation.html",
		"link": "Illuminate/Foundation/EnvironmentDetector.html",
		"name": "Illuminate\\Foundation\\EnvironmentDetector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\EnvironmentDetector",
		"fromLink": "Illuminate/Foundation/EnvironmentDetector.html",
		"link": "Illuminate/Foundation/EnvironmentDetector.html#method_detect",
		"name": "Illuminate\\Foundation\\EnvironmentDetector::detect",
		"doc": "Detect the application's current environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\EnvironmentDetector",
		"fromLink": "Illuminate/Foundation/EnvironmentDetector.html",
		"link": "Illuminate/Foundation/EnvironmentDetector.html#method_detectWebEnvironment",
		"name": "Illuminate\\Foundation\\EnvironmentDetector::detectWebEnvironment",
		"doc": "Set the application environment for a web request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\EnvironmentDetector",
		"fromLink": "Illuminate/Foundation/EnvironmentDetector.html",
		"link": "Illuminate/Foundation/EnvironmentDetector.html#method_detectConsoleEnvironment",
		"name": "Illuminate\\Foundation\\EnvironmentDetector::detectConsoleEnvironment",
		"doc": "Set the application environment from command-line arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\EnvironmentDetector",
		"fromLink": "Illuminate/Foundation/EnvironmentDetector.html",
		"link": "Illuminate/Foundation/EnvironmentDetector.html#method_getEnvironmentArgument",
		"name": "Illuminate\\Foundation\\EnvironmentDetector::getEnvironmentArgument",
		"doc": "Get the environment argument from the console."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Events",
		"fromLink": "Illuminate/Foundation/Events.html",
		"link": "Illuminate/Foundation/Events/DiscoverEvents.html",
		"name": "Illuminate\\Foundation\\Events\\DiscoverEvents",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Events\\DiscoverEvents",
		"fromLink": "Illuminate/Foundation/Events/DiscoverEvents.html",
		"link": "Illuminate/Foundation/Events/DiscoverEvents.html#method_within",
		"name": "Illuminate\\Foundation\\Events\\DiscoverEvents::within",
		"doc": "Get all of the events and listeners by searching the given listener directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Events\\DiscoverEvents",
		"fromLink": "Illuminate/Foundation/Events/DiscoverEvents.html",
		"link": "Illuminate/Foundation/Events/DiscoverEvents.html#method_getListenerEvents",
		"name": "Illuminate\\Foundation\\Events\\DiscoverEvents::getListenerEvents",
		"doc": "Get all of the listeners and their corresponding events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Events\\DiscoverEvents",
		"fromLink": "Illuminate/Foundation/Events/DiscoverEvents.html",
		"link": "Illuminate/Foundation/Events/DiscoverEvents.html#method_classFromFile",
		"name": "Illuminate\\Foundation\\Events\\DiscoverEvents::classFromFile",
		"doc": "Extract the class name from the given file path."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Events",
		"fromLink": "Illuminate/Foundation/Events.html",
		"link": "Illuminate/Foundation/Events/Dispatchable.html",
		"name": "Illuminate\\Foundation\\Events\\Dispatchable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Events\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Events/Dispatchable.html",
		"link": "Illuminate/Foundation/Events/Dispatchable.html#method_dispatch",
		"name": "Illuminate\\Foundation\\Events\\Dispatchable::dispatch",
		"doc": "Dispatch the event with the given arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Events\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Events/Dispatchable.html",
		"link": "Illuminate/Foundation/Events/Dispatchable.html#method_dispatchIf",
		"name": "Illuminate\\Foundation\\Events\\Dispatchable::dispatchIf",
		"doc": "Dispatch the event with the given arguments if the given truth test passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Events\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Events/Dispatchable.html",
		"link": "Illuminate/Foundation/Events/Dispatchable.html#method_dispatchUnless",
		"name": "Illuminate\\Foundation\\Events\\Dispatchable::dispatchUnless",
		"doc": "Dispatch the event with the given arguments unless the given truth test passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Events\\Dispatchable",
		"fromLink": "Illuminate/Foundation/Events/Dispatchable.html",
		"link": "Illuminate/Foundation/Events/Dispatchable.html#method_broadcast",
		"name": "Illuminate\\Foundation\\Events\\Dispatchable::broadcast",
		"doc": "Broadcast the event with the given arguments."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Events",
		"fromLink": "Illuminate/Foundation/Events.html",
		"link": "Illuminate/Foundation/Events/LocaleUpdated.html",
		"name": "Illuminate\\Foundation\\Events\\LocaleUpdated",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Events\\LocaleUpdated",
		"fromLink": "Illuminate/Foundation/Events/LocaleUpdated.html",
		"link": "Illuminate/Foundation/Events/LocaleUpdated.html#method___construct",
		"name": "Illuminate\\Foundation\\Events\\LocaleUpdated::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Exceptions",
		"fromLink": "Illuminate/Foundation/Exceptions.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method___construct",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::__construct",
		"doc": "Create a new exception handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_register",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::register",
		"doc": "Register the exception handling callbacks for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_reportable",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::reportable",
		"doc": "Register a reportable callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_renderable",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::renderable",
		"doc": "Register a renderable callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_map",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::map",
		"doc": "Register a new exception mapping."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_ignore",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::ignore",
		"doc": "Indicate that the given exception type should not be reported."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_report",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::report",
		"doc": "Report or log an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_shouldReport",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::shouldReport",
		"doc": "Determine if the exception should be reported."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_shouldntReport",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::shouldntReport",
		"doc": "Determine if the exception is in the \"do not report\" list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_exceptionContext",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::exceptionContext",
		"doc": "Get the default exception context variables for logging."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_context",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::context",
		"doc": "Get the default context variables for logging."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_render",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::render",
		"doc": "Render an exception into an HTTP response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_mapException",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::mapException",
		"doc": "Map the exception using a registered mapper if possible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_prepareException",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::prepareException",
		"doc": "Prepare exception for rendering."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_unauthenticated",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::unauthenticated",
		"doc": "Convert an authentication exception into a response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_convertValidationExceptionToResponse",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::convertValidationExceptionToResponse",
		"doc": "Create a response object from the given validation exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_invalid",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::invalid",
		"doc": "Convert a validation exception into a response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_invalidJson",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::invalidJson",
		"doc": "Convert a validation exception into a JSON response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_prepareResponse",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::prepareResponse",
		"doc": "Prepare a response for the given exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_convertExceptionToResponse",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::convertExceptionToResponse",
		"doc": "Create a Symfony response for the given exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_renderExceptionContent",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::renderExceptionContent",
		"doc": "Get the response content for the given exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_renderExceptionWithWhoops",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::renderExceptionWithWhoops",
		"doc": "Render an exception to a string using \"Whoops\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_whoopsHandler",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::whoopsHandler",
		"doc": "Get the Whoops handler for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_renderExceptionWithSymfony",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::renderExceptionWithSymfony",
		"doc": "Render an exception to a string using Symfony."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_renderHttpException",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::renderHttpException",
		"doc": "Render the given HttpException."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_registerErrorViewPaths",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::registerErrorViewPaths",
		"doc": "Register the error template hint paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_getHttpExceptionView",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::getHttpExceptionView",
		"doc": "Get the view used to render HTTP exceptions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_toIlluminateResponse",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::toIlluminateResponse",
		"doc": "Map the given exception into an Illuminate response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_prepareJsonResponse",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::prepareJsonResponse",
		"doc": "Prepare a JSON response for the given exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_convertExceptionToArray",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::convertExceptionToArray",
		"doc": "Convert the given exception to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_renderForConsole",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::renderForConsole",
		"doc": "Render an exception to the console."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\Handler",
		"fromLink": "Illuminate/Foundation/Exceptions/Handler.html",
		"link": "Illuminate/Foundation/Exceptions/Handler.html#method_isHttpException",
		"name": "Illuminate\\Foundation\\Exceptions\\Handler::isHttpException",
		"doc": "Determine if the given exception is an HTTP exception."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Exceptions",
		"fromLink": "Illuminate/Foundation/Exceptions.html",
		"link": "Illuminate/Foundation/Exceptions/RegisterErrorViewPaths.html",
		"name": "Illuminate\\Foundation\\Exceptions\\RegisterErrorViewPaths",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\RegisterErrorViewPaths",
		"fromLink": "Illuminate/Foundation/Exceptions/RegisterErrorViewPaths.html",
		"link": "Illuminate/Foundation/Exceptions/RegisterErrorViewPaths.html#method___invoke",
		"name": "Illuminate\\Foundation\\Exceptions\\RegisterErrorViewPaths::__invoke",
		"doc": "Register the error view paths."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Exceptions",
		"fromLink": "Illuminate/Foundation/Exceptions.html",
		"link": "Illuminate/Foundation/Exceptions/ReportableHandler.html",
		"name": "Illuminate\\Foundation\\Exceptions\\ReportableHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\ReportableHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/ReportableHandler.html",
		"link": "Illuminate/Foundation/Exceptions/ReportableHandler.html#method___construct",
		"name": "Illuminate\\Foundation\\Exceptions\\ReportableHandler::__construct",
		"doc": "Create a new reportable handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\ReportableHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/ReportableHandler.html",
		"link": "Illuminate/Foundation/Exceptions/ReportableHandler.html#method___invoke",
		"name": "Illuminate\\Foundation\\Exceptions\\ReportableHandler::__invoke",
		"doc": "Invoke the handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\ReportableHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/ReportableHandler.html",
		"link": "Illuminate/Foundation/Exceptions/ReportableHandler.html#method_handles",
		"name": "Illuminate\\Foundation\\Exceptions\\ReportableHandler::handles",
		"doc": "Determine if the callback handles the given exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\ReportableHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/ReportableHandler.html",
		"link": "Illuminate/Foundation/Exceptions/ReportableHandler.html#method_stop",
		"name": "Illuminate\\Foundation\\Exceptions\\ReportableHandler::stop",
		"doc": "Indicate that report handling should stop after invoking this callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Exceptions",
		"fromLink": "Illuminate/Foundation/Exceptions.html",
		"link": "Illuminate/Foundation/Exceptions/WhoopsHandler.html",
		"name": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/WhoopsHandler.html",
		"link": "Illuminate/Foundation/Exceptions/WhoopsHandler.html#method_forDebug",
		"name": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler::forDebug",
		"doc": "Create a new Whoops handler for debug mode."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/WhoopsHandler.html",
		"link": "Illuminate/Foundation/Exceptions/WhoopsHandler.html#method_registerApplicationPaths",
		"name": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler::registerApplicationPaths",
		"doc": "Register the application paths with the handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/WhoopsHandler.html",
		"link": "Illuminate/Foundation/Exceptions/WhoopsHandler.html#method_directoriesExceptVendor",
		"name": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler::directoriesExceptVendor",
		"doc": "Get the application paths except for the \"vendor\" directory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/WhoopsHandler.html",
		"link": "Illuminate/Foundation/Exceptions/WhoopsHandler.html#method_registerBlacklist",
		"name": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler::registerBlacklist",
		"doc": "Register the blacklist with the handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler",
		"fromLink": "Illuminate/Foundation/Exceptions/WhoopsHandler.html",
		"link": "Illuminate/Foundation/Exceptions/WhoopsHandler.html#method_registerEditor",
		"name": "Illuminate\\Foundation\\Exceptions\\WhoopsHandler::registerEditor",
		"doc": "Register the editor with the handler."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Events",
		"fromLink": "Illuminate/Foundation/Http/Events.html",
		"link": "Illuminate/Foundation/Http/Events/RequestHandled.html",
		"name": "Illuminate\\Foundation\\Http\\Events\\RequestHandled",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Events\\RequestHandled",
		"fromLink": "Illuminate/Foundation/Http/Events/RequestHandled.html",
		"link": "Illuminate/Foundation/Http/Events/RequestHandled.html#method___construct",
		"name": "Illuminate\\Foundation\\Http\\Events\\RequestHandled::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Exceptions",
		"fromLink": "Illuminate/Foundation/Http/Exceptions.html",
		"link": "Illuminate/Foundation/Http/Exceptions/MaintenanceModeException.html",
		"name": "Illuminate\\Foundation\\Http\\Exceptions\\MaintenanceModeException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Exceptions\\MaintenanceModeException",
		"fromLink": "Illuminate/Foundation/Http/Exceptions/MaintenanceModeException.html",
		"link": "Illuminate/Foundation/Http/Exceptions/MaintenanceModeException.html#method___construct",
		"name": "Illuminate\\Foundation\\Http\\Exceptions\\MaintenanceModeException::__construct",
		"doc": "Create a new exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http",
		"fromLink": "Illuminate/Foundation/Http.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html",
		"name": "Illuminate\\Foundation\\Http\\FormRequest",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_getValidatorInstance",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::getValidatorInstance",
		"doc": "Get the validator instance for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_createDefaultValidator",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::createDefaultValidator",
		"doc": "Create the default validator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_validationData",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::validationData",
		"doc": "Get data to be validated from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_failedValidation",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::failedValidation",
		"doc": "Handle a failed validation attempt."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_getRedirectUrl",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::getRedirectUrl",
		"doc": "Get the URL to redirect to on a validation error."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_passesAuthorization",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::passesAuthorization",
		"doc": "Determine if the request passes the authorization check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_failedAuthorization",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::failedAuthorization",
		"doc": "Handle a failed authorization attempt."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_validated",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::validated",
		"doc": "Get the validated data from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_messages",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::messages",
		"doc": "Get custom messages for validator errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_attributes",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::attributes",
		"doc": "Get custom attributes for validator errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_setValidator",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::setValidator",
		"doc": "Set the Validator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_setRedirector",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::setRedirector",
		"doc": "Set the Redirector instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\FormRequest",
		"fromLink": "Illuminate/Foundation/Http/FormRequest.html",
		"link": "Illuminate/Foundation/Http/FormRequest.html#method_setContainer",
		"name": "Illuminate\\Foundation\\Http\\FormRequest::setContainer",
		"doc": "Set the container implementation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http",
		"fromLink": "Illuminate/Foundation/Http.html",
		"link": "Illuminate/Foundation/Http/Kernel.html",
		"name": "Illuminate\\Foundation\\Http\\Kernel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method___construct",
		"name": "Illuminate\\Foundation\\Http\\Kernel::__construct",
		"doc": "Create a new HTTP kernel instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_handle",
		"name": "Illuminate\\Foundation\\Http\\Kernel::handle",
		"doc": "Handle an incoming HTTP request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_sendRequestThroughRouter",
		"name": "Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter",
		"doc": "Send the given request through the middleware / router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_bootstrap",
		"name": "Illuminate\\Foundation\\Http\\Kernel::bootstrap",
		"doc": "Bootstrap the application for HTTP requests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_dispatchToRouter",
		"name": "Illuminate\\Foundation\\Http\\Kernel::dispatchToRouter",
		"doc": "Get the route dispatcher callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_terminate",
		"name": "Illuminate\\Foundation\\Http\\Kernel::terminate",
		"doc": "Call the terminate method on any terminable middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_terminateMiddleware",
		"name": "Illuminate\\Foundation\\Http\\Kernel::terminateMiddleware",
		"doc": "Call the terminate method on any terminable middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_gatherRouteMiddleware",
		"name": "Illuminate\\Foundation\\Http\\Kernel::gatherRouteMiddleware",
		"doc": "Gather the route middleware for the given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_parseMiddleware",
		"name": "Illuminate\\Foundation\\Http\\Kernel::parseMiddleware",
		"doc": "Parse a middleware string to get the name and parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_hasMiddleware",
		"name": "Illuminate\\Foundation\\Http\\Kernel::hasMiddleware",
		"doc": "Determine if the kernel has a given middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_prependMiddleware",
		"name": "Illuminate\\Foundation\\Http\\Kernel::prependMiddleware",
		"doc": "Add a new middleware to beginning of the stack if it does not already exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_pushMiddleware",
		"name": "Illuminate\\Foundation\\Http\\Kernel::pushMiddleware",
		"doc": "Add a new middleware to end of the stack if it does not already exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_prependMiddlewareToGroup",
		"name": "Illuminate\\Foundation\\Http\\Kernel::prependMiddlewareToGroup",
		"doc": "Prepend the given middleware to the given middleware group."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_appendMiddlewareToGroup",
		"name": "Illuminate\\Foundation\\Http\\Kernel::appendMiddlewareToGroup",
		"doc": "Append the given middleware to the given middleware group."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_prependToMiddlewarePriority",
		"name": "Illuminate\\Foundation\\Http\\Kernel::prependToMiddlewarePriority",
		"doc": "Prepend the given middleware to the middleware priority list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_appendToMiddlewarePriority",
		"name": "Illuminate\\Foundation\\Http\\Kernel::appendToMiddlewarePriority",
		"doc": "Append the given middleware to the middleware priority list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_syncMiddlewareToRouter",
		"name": "Illuminate\\Foundation\\Http\\Kernel::syncMiddlewareToRouter",
		"doc": "Sync the current state of the middleware to the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_bootstrappers",
		"name": "Illuminate\\Foundation\\Http\\Kernel::bootstrappers",
		"doc": "Get the bootstrap classes for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_reportException",
		"name": "Illuminate\\Foundation\\Http\\Kernel::reportException",
		"doc": "Report the exception to the exception handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_renderException",
		"name": "Illuminate\\Foundation\\Http\\Kernel::renderException",
		"doc": "Render the exception to a response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_getMiddlewareGroups",
		"name": "Illuminate\\Foundation\\Http\\Kernel::getMiddlewareGroups",
		"doc": "Get the application's route middleware groups."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_getRouteMiddleware",
		"name": "Illuminate\\Foundation\\Http\\Kernel::getRouteMiddleware",
		"doc": "Get the application's route middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Kernel",
		"fromLink": "Illuminate/Foundation/Http/Kernel.html",
		"link": "Illuminate/Foundation/Http/Kernel.html#method_getApplication",
		"name": "Illuminate\\Foundation\\Http\\Kernel::getApplication",
		"doc": "Get the Laravel application instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http",
		"fromLink": "Illuminate/Foundation/Http.html",
		"link": "Illuminate/Foundation/Http/MaintenanceModeBypassCookie.html",
		"name": "Illuminate\\Foundation\\Http\\MaintenanceModeBypassCookie",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\MaintenanceModeBypassCookie",
		"fromLink": "Illuminate/Foundation/Http/MaintenanceModeBypassCookie.html",
		"link": "Illuminate/Foundation/Http/MaintenanceModeBypassCookie.html#method_create",
		"name": "Illuminate\\Foundation\\Http\\MaintenanceModeBypassCookie::create",
		"doc": "Create a new maintenance mode bypass cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\MaintenanceModeBypassCookie",
		"fromLink": "Illuminate/Foundation/Http/MaintenanceModeBypassCookie.html",
		"link": "Illuminate/Foundation/Http/MaintenanceModeBypassCookie.html#method_isValid",
		"name": "Illuminate\\Foundation\\Http\\MaintenanceModeBypassCookie::isValid",
		"doc": "Determine if the given maintenance mode bypass cookie is valid."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware",
		"fromLink": "Illuminate/Foundation/Http/Middleware.html",
		"link": "Illuminate/Foundation/Http/Middleware/CheckForMaintenanceMode.html",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware",
		"fromLink": "Illuminate/Foundation/Http/Middleware.html",
		"link": "Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.html",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull",
		"fromLink": "Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.html",
		"link": "Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.html#method_transform",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::transform",
		"doc": "Transform the given value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware",
		"fromLink": "Illuminate/Foundation/Http/Middleware.html",
		"link": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
		"fromLink": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html",
		"link": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html#method___construct",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
		"fromLink": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html",
		"link": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html#method_handle",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
		"fromLink": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html",
		"link": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html#method_hasValidBypassCookie",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::hasValidBypassCookie",
		"doc": "Determine if the incoming request has a maintenance mode bypass cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
		"fromLink": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html",
		"link": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html#method_inExceptArray",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::inExceptArray",
		"doc": "Determine if the request has a URI that should be accessible in maintenance mode."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
		"fromLink": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html",
		"link": "Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.html#method_bypassResponse",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::bypassResponse",
		"doc": "Redirect the user back to the root of the application with a maintenance mode bypass cookie."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware",
		"fromLink": "Illuminate/Foundation/Http/Middleware.html",
		"link": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
		"fromLink": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html",
		"link": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html#method_handle",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
		"fromLink": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html",
		"link": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html#method_clean",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::clean",
		"doc": "Clean the request's data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
		"fromLink": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html",
		"link": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html#method_cleanParameterBag",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::cleanParameterBag",
		"doc": "Clean the data in the parameter bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
		"fromLink": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html",
		"link": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html#method_cleanArray",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::cleanArray",
		"doc": "Clean the data in the given array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
		"fromLink": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html",
		"link": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html#method_cleanValue",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::cleanValue",
		"doc": "Clean the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
		"fromLink": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html",
		"link": "Illuminate/Foundation/Http/Middleware/TransformsRequest.html#method_transform",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::transform",
		"doc": "Transform the given value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware",
		"fromLink": "Illuminate/Foundation/Http/Middleware.html",
		"link": "Illuminate/Foundation/Http/Middleware/TrimStrings.html",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TrimStrings",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\TrimStrings",
		"fromLink": "Illuminate/Foundation/Http/Middleware/TrimStrings.html",
		"link": "Illuminate/Foundation/Http/Middleware/TrimStrings.html#method_transform",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\TrimStrings::transform",
		"doc": "Transform the given value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware",
		"fromLink": "Illuminate/Foundation/Http/Middleware.html",
		"link": "Illuminate/Foundation/Http/Middleware/ValidatePostSize.html",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize",
		"fromLink": "Illuminate/Foundation/Http/Middleware/ValidatePostSize.html",
		"link": "Illuminate/Foundation/Http/Middleware/ValidatePostSize.html#method_handle",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize",
		"fromLink": "Illuminate/Foundation/Http/Middleware/ValidatePostSize.html",
		"link": "Illuminate/Foundation/Http/Middleware/ValidatePostSize.html#method_getPostMaxSize",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::getPostMaxSize",
		"doc": "Determine the server 'post_max_size' as bytes."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware",
		"fromLink": "Illuminate/Foundation/Http/Middleware.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method___construct",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_handle",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_isReading",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::isReading",
		"doc": "Determine if the HTTP request uses a ‘read’ verb."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_runningUnitTests",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::runningUnitTests",
		"doc": "Determine if the application is running unit tests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_inExceptArray",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::inExceptArray",
		"doc": "Determine if the request has a URI that should pass through CSRF verification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_tokensMatch",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::tokensMatch",
		"doc": "Determine if the session and input CSRF tokens match."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_getTokenFromRequest",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::getTokenFromRequest",
		"doc": "Get the CSRF token from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_shouldAddXsrfTokenCookie",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::shouldAddXsrfTokenCookie",
		"doc": "Determine if the cookie should be added to the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_addCookieToResponse",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::addCookieToResponse",
		"doc": "Add the CSRF token to the response cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
		"fromLink": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html",
		"link": "Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.html#method_serialized",
		"name": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::serialized",
		"doc": "Determine if the cookie contents should be serialized."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation",
		"fromLink": "Illuminate/Foundation.html",
		"link": "Illuminate/Foundation/Inspiring.html",
		"name": "Illuminate\\Foundation\\Inspiring",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Inspiring",
		"fromLink": "Illuminate/Foundation/Inspiring.html",
		"link": "Illuminate/Foundation/Inspiring.html#method_quote",
		"name": "Illuminate\\Foundation\\Inspiring::quote",
		"doc": "Get an inspiring quote."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation",
		"fromLink": "Illuminate/Foundation.html",
		"link": "Illuminate/Foundation/Mix.html",
		"name": "Illuminate\\Foundation\\Mix",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Mix",
		"fromLink": "Illuminate/Foundation/Mix.html",
		"link": "Illuminate/Foundation/Mix.html#method___invoke",
		"name": "Illuminate\\Foundation\\Mix::__invoke",
		"doc": "Get the path to a versioned Mix file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation",
		"fromLink": "Illuminate/Foundation.html",
		"link": "Illuminate/Foundation/PackageManifest.html",
		"name": "Illuminate\\Foundation\\PackageManifest",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method___construct",
		"name": "Illuminate\\Foundation\\PackageManifest::__construct",
		"doc": "Create a new package manifest instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method_providers",
		"name": "Illuminate\\Foundation\\PackageManifest::providers",
		"doc": "Get all of the service provider class names for all packages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method_aliases",
		"name": "Illuminate\\Foundation\\PackageManifest::aliases",
		"doc": "Get all of the aliases for all packages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method_config",
		"name": "Illuminate\\Foundation\\PackageManifest::config",
		"doc": "Get all of the values for all packages for the given configuration name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method_getManifest",
		"name": "Illuminate\\Foundation\\PackageManifest::getManifest",
		"doc": "Get the current package manifest."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method_build",
		"name": "Illuminate\\Foundation\\PackageManifest::build",
		"doc": "Build the manifest and write it to disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method_format",
		"name": "Illuminate\\Foundation\\PackageManifest::format",
		"doc": "Format the given package name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method_packagesToIgnore",
		"name": "Illuminate\\Foundation\\PackageManifest::packagesToIgnore",
		"doc": "Get all of the package names that should be ignored."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\PackageManifest",
		"fromLink": "Illuminate/Foundation/PackageManifest.html",
		"link": "Illuminate/Foundation/PackageManifest.html#method_write",
		"name": "Illuminate\\Foundation\\PackageManifest::write",
		"doc": "Write the given manifest array to disk."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation",
		"fromLink": "Illuminate/Foundation.html",
		"link": "Illuminate/Foundation/ProviderRepository.html",
		"name": "Illuminate\\Foundation\\ProviderRepository",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method___construct",
		"name": "Illuminate\\Foundation\\ProviderRepository::__construct",
		"doc": "Create a new service repository instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method_load",
		"name": "Illuminate\\Foundation\\ProviderRepository::load",
		"doc": "Register the application service providers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method_loadManifest",
		"name": "Illuminate\\Foundation\\ProviderRepository::loadManifest",
		"doc": "Load the service provider manifest JSON file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method_shouldRecompile",
		"name": "Illuminate\\Foundation\\ProviderRepository::shouldRecompile",
		"doc": "Determine if the manifest should be compiled."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method_registerLoadEvents",
		"name": "Illuminate\\Foundation\\ProviderRepository::registerLoadEvents",
		"doc": "Register the load events for the given provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method_compileManifest",
		"name": "Illuminate\\Foundation\\ProviderRepository::compileManifest",
		"doc": "Compile the application service manifest file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method_freshManifest",
		"name": "Illuminate\\Foundation\\ProviderRepository::freshManifest",
		"doc": "Create a fresh service manifest data structure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method_writeManifest",
		"name": "Illuminate\\Foundation\\ProviderRepository::writeManifest",
		"doc": "Write the service manifest file to disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\ProviderRepository",
		"fromLink": "Illuminate/Foundation/ProviderRepository.html",
		"link": "Illuminate/Foundation/ProviderRepository.html#method_createProvider",
		"name": "Illuminate\\Foundation\\ProviderRepository::createProvider",
		"doc": "Create a new provider instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Providers",
		"fromLink": "Illuminate/Foundation/Providers.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_register",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerCommands",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerCommands",
		"doc": "Register the given commands."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerCacheClearCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerCacheClearCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerCacheForgetCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerCacheForgetCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerCacheTableCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerCacheTableCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerCastMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerCastMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerChannelMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerChannelMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerClearCompiledCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerClearCompiledCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerClearResetsCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerClearResetsCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerComponentMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerComponentMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerConfigCacheCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerConfigCacheCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerConfigClearCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerConfigClearCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerConsoleMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerConsoleMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerControllerMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerControllerMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerDbCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerDbCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerDbWipeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerDbWipeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerEventGenerateCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerEventGenerateCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerEventMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerEventMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerExceptionMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerExceptionMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerFactoryMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerFactoryMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerDownCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerDownCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerEnvironmentCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerEnvironmentCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerEventCacheCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerEventCacheCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerEventClearCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerEventClearCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerEventListCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerEventListCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerJobMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerJobMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerKeyGenerateCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerKeyGenerateCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerListenerMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerListenerMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerMailMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerMailMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerMiddlewareMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerMiddlewareMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerModelMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerModelMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerNotificationMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerNotificationMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerNotificationTableCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerNotificationTableCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerOptimizeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerOptimizeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerObserverMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerObserverMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerOptimizeClearCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerOptimizeClearCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerPackageDiscoverCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerPackageDiscoverCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerPolicyMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerPolicyMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerProviderMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerProviderMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueFailedCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueFailedCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueForgetCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueForgetCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueFlushCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueFlushCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueListenCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueListenCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueRestartCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueRestartCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueRetryCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueRetryCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueRetryBatchCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueRetryBatchCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueWorkCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueWorkCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueClearCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueClearCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueFailedTableCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueFailedTableCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueTableCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueTableCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerQueueBatchesTableCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerQueueBatchesTableCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerRequestMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerRequestMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerResourceMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerResourceMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerRuleMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerRuleMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerSeederMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerSeederMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerSessionTableCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerSessionTableCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerStorageLinkCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerStorageLinkCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerRouteCacheCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerRouteCacheCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerRouteClearCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerRouteClearCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerRouteListCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerRouteListCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerSchemaDumpCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerSchemaDumpCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerSeedCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerSeedCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerScheduleFinishCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerScheduleFinishCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerScheduleRunCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerScheduleRunCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerScheduleWorkCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerScheduleWorkCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerServeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerServeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerStubPublishCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerStubPublishCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerTestMakeCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerTestMakeCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerUpCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerUpCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerVendorPublishCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerVendorPublishCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerViewCacheCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerViewCacheCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_registerViewClearCommand",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::registerViewClearCommand",
		"doc": "Register the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ArtisanServiceProvider.html#method_provides",
		"name": "Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Providers",
		"fromLink": "Illuminate/Foundation/Providers.html",
		"link": "Illuminate/Foundation/Providers/ComposerServiceProvider.html",
		"name": "Illuminate\\Foundation\\Providers\\ComposerServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ComposerServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ComposerServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ComposerServiceProvider.html#method_register",
		"name": "Illuminate\\Foundation\\Providers\\ComposerServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\ComposerServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/ComposerServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/ComposerServiceProvider.html#method_provides",
		"name": "Illuminate\\Foundation\\Providers\\ComposerServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Providers",
		"fromLink": "Illuminate/Foundation/Providers.html",
		"link": "Illuminate/Foundation/Providers/ConsoleSupportServiceProvider.html",
		"name": "Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Providers",
		"fromLink": "Illuminate/Foundation/Providers.html",
		"link": "Illuminate/Foundation/Providers/FormRequestServiceProvider.html",
		"name": "Illuminate\\Foundation\\Providers\\FormRequestServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\FormRequestServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/FormRequestServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/FormRequestServiceProvider.html#method_register",
		"name": "Illuminate\\Foundation\\Providers\\FormRequestServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\FormRequestServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/FormRequestServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/FormRequestServiceProvider.html#method_boot",
		"name": "Illuminate\\Foundation\\Providers\\FormRequestServiceProvider::boot",
		"doc": "Bootstrap the application services."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Providers",
		"fromLink": "Illuminate/Foundation/Providers.html",
		"link": "Illuminate/Foundation/Providers/FoundationServiceProvider.html",
		"name": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/FoundationServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/FoundationServiceProvider.html#method_boot",
		"name": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider::boot",
		"doc": "Boot the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/FoundationServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/FoundationServiceProvider.html#method_register",
		"name": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/FoundationServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/FoundationServiceProvider.html#method_registerRequestValidation",
		"name": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider::registerRequestValidation",
		"doc": "Register the \"validate\" macro on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider",
		"fromLink": "Illuminate/Foundation/Providers/FoundationServiceProvider.html",
		"link": "Illuminate/Foundation/Providers/FoundationServiceProvider.html#method_registerRequestSignatureValidation",
		"name": "Illuminate\\Foundation\\Providers\\FoundationServiceProvider::registerRequestSignatureValidation",
		"doc": "Register the \"hasValidSignature\" macro on the request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Support\\Providers",
		"fromLink": "Illuminate/Foundation/Support/Providers.html",
		"link": "Illuminate/Foundation/Support/Providers/AuthServiceProvider.html",
		"name": "Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/AuthServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/AuthServiceProvider.html#method_registerPolicies",
		"name": "Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider::registerPolicies",
		"doc": "Register the application's policies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/AuthServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/AuthServiceProvider.html#method_policies",
		"name": "Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider::policies",
		"doc": "Get the policies defined on the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Support\\Providers",
		"fromLink": "Illuminate/Foundation/Support/Providers.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html#method_register",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider::register",
		"doc": "Register the application's event listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html#method_boot",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider::boot",
		"doc": "Boot any application services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html#method_listens",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider::listens",
		"doc": "Get the events and handlers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html#method_getEvents",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider::getEvents",
		"doc": "Get the discovered events and listeners for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html#method_discoveredEvents",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider::discoveredEvents",
		"doc": "Get the discovered events for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html#method_shouldDiscoverEvents",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider::shouldDiscoverEvents",
		"doc": "Determine if events and listeners should be automatically discovered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html#method_discoverEvents",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider::discoverEvents",
		"doc": "Discover the events and listeners for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/EventServiceProvider.html#method_discoverEventsWithin",
		"name": "Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider::discoverEventsWithin",
		"doc": "Get the listener directories that should be used to discover events."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Support\\Providers",
		"fromLink": "Illuminate/Foundation/Support/Providers.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html#method_register",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider::register",
		"doc": "Register any application services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html#method_boot",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider::boot",
		"doc": "Bootstrap any application services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html#method_routes",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider::routes",
		"doc": "Register the callback that will be used to load the application's routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html#method_setRootControllerNamespace",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider::setRootControllerNamespace",
		"doc": "Set the root controller namespace for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html#method_routesAreCached",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider::routesAreCached",
		"doc": "Determine if the application routes are cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html#method_loadCachedRoutes",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider::loadCachedRoutes",
		"doc": "Load the cached routes for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html#method_loadRoutes",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider::loadRoutes",
		"doc": "Load the application routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider",
		"fromLink": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html",
		"link": "Illuminate/Foundation/Support/Providers/RouteServiceProvider.html#method___call",
		"name": "Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider::__call",
		"doc": "Pass dynamic methods onto the router instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_actingAs",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::actingAs",
		"doc": "Set the currently logged in user for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_be",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::be",
		"doc": "Set the currently logged in user for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_assertAuthenticated",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::assertAuthenticated",
		"doc": "Assert that the user is authenticated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_assertGuest",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::assertGuest",
		"doc": "Assert that the user is not authenticated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_isAuthenticated",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::isAuthenticated",
		"doc": "Return true if the user is authenticated, false otherwise."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_assertAuthenticatedAs",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::assertAuthenticatedAs",
		"doc": "Assert that the user is authenticated as the given user."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_assertCredentials",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::assertCredentials",
		"doc": "Assert that the given credentials are valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_assertInvalidCredentials",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::assertInvalidCredentials",
		"doc": "Assert that the given credentials are invalid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.html#method_hasCredentials",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithAuthentication::hasCredentials",
		"doc": "Return true if the credentials are valid, false otherwise."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithConsole.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithConsole",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithConsole",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithConsole.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithConsole.html#method_artisan",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithConsole::artisan",
		"doc": "Call artisan command and return code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithConsole",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithConsole.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithConsole.html#method_withoutMockingConsoleOutput",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithConsole::withoutMockingConsoleOutput",
		"doc": "Disable mocking the console output."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html#method_swap",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer::swap",
		"doc": "Register an instance of an object in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html#method_instance",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer::instance",
		"doc": "Register an instance of an object in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html#method_mock",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer::mock",
		"doc": "Mock an instance of an object in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html#method_partialMock",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer::partialMock",
		"doc": "Mock a partial instance of an object in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html#method_spy",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer::spy",
		"doc": "Spy an instance of an object in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html#method_withoutMix",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer::withoutMix",
		"doc": "Register an empty handler for Laravel Mix in the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.html#method_withMix",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithContainer::withMix",
		"doc": "Register an empty handler for Laravel Mix in the container."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_assertDatabaseHas",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::assertDatabaseHas",
		"doc": "Assert that a given where condition exists in the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_assertDatabaseMissing",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::assertDatabaseMissing",
		"doc": "Assert that a given where condition does not exist in the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_assertDatabaseCount",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::assertDatabaseCount",
		"doc": "Assert the count of table entries."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_assertDeleted",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::assertDeleted",
		"doc": "Assert the given record has been deleted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_assertSoftDeleted",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::assertSoftDeleted",
		"doc": "Assert the given record has been \"soft deleted\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_isSoftDeletableModel",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::isSoftDeletableModel",
		"doc": "Determine if the argument is a soft deletable model."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_castAsJson",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::castAsJson",
		"doc": "Cast a JSON string to a database compatible type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_getConnection",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::getConnection",
		"doc": "Get the database connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.html#method_seed",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithDatabase::seed",
		"doc": "Seed a given database connection."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method_withExceptionHandling",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::withExceptionHandling",
		"doc": "Restore exception handling."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method_handleExceptions",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::handleExceptions",
		"doc": "Only handle the given exceptions via the exception handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method_handleValidationExceptions",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::handleValidationExceptions",
		"doc": "Only handle validation exceptions via the exception handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method_withoutExceptionHandling",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::withoutExceptionHandling",
		"doc": "Disable exception handling for the test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method___construct",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::__construct",
		"doc": "Create a new class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method_report",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::report",
		"doc": "Report or log an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method_shouldReport",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::shouldReport",
		"doc": "Determine if the exception should be reported."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method_render",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::render",
		"doc": "Render an exception into an HTTP response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.html#method_renderForConsole",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithExceptionHandling::renderForConsole",
		"doc": "Render an exception to the console."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html#method_setUpRedis",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis::setUpRedis",
		"doc": "Setup redis connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html#method_tearDownRedis",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis::tearDownRedis",
		"doc": "Teardown redis connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html#method_redisDriverProvider",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis::redisDriverProvider",
		"doc": "Get redis driver provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithRedis.html#method_ifRedisAvailable",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithRedis::ifRedisAvailable",
		"doc": "Run test if redis is available."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html#method_withSession",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession::withSession",
		"doc": "Set the session to the given array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html#method_session",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession::session",
		"doc": "Set the session to the given array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html#method_startSession",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession::startSession",
		"doc": "Start the session for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithSession.html#method_flushSession",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithSession::flushSession",
		"doc": "Flush all of the current session data."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithTime.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithTime",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithTime",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithTime.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithTime.html#method_travel",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithTime::travel",
		"doc": "Begin travelling to another time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithTime",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithTime.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithTime.html#method_travelTo",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithTime::travelTo",
		"doc": "Travel to another time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithTime",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithTime.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithTime.html#method_travelBack",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithTime::travelBack",
		"doc": "Travel back to the current time."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html#method_view",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews::view",
		"doc": "Create a new TestView from the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html#method_blade",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews::blade",
		"doc": "Render the contents of the given Blade template string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html#method_component",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews::component",
		"doc": "Render the given view component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html",
		"link": "Illuminate/Foundation/Testing/Concerns/InteractsWithViews.html#method_withViewErrors",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\InteractsWithViews::withViewErrors",
		"doc": "Populate the shared view error bag with the given errors."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html#method_withHeaders",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests::withHeaders",
		"doc": "Define additional headers to be sent with the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html#method_withHeader",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests::withHeader",
		"doc": "Add a header to be sent with the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html#method_withToken",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests::withToken",
		"doc": "Add an authorization token for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html#method_flushHeaders",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests::flushHeaders",
		"doc": "Flush all the configured headers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html#method_withServerVariables",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests::withServerVariables",
		"doc": "Define a set of server variables to be sent with the requests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html#method_withoutMiddleware",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests::withoutMiddleware",
		"doc": "Disable middleware for the test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.html#method_handle",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MakesHttpRequests::handle",
		"doc": null
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns",
		"fromLink": "Illuminate/Foundation/Testing/Concerns.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_expectsEvents",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::expectsEvents",
		"doc": "Specify a list of events that should be fired for the given operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_doesntExpectEvents",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::doesntExpectEvents",
		"doc": "Specify a list of events that should not be fired for the given operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_withoutEvents",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::withoutEvents",
		"doc": "Mock the event dispatcher so all events are silenced and collected."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_getFiredEvents",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::getFiredEvents",
		"doc": "Filter the given events against the fired events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_expectsJobs",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::expectsJobs",
		"doc": "Specify a list of jobs that should be dispatched for the given operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_doesntExpectJobs",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::doesntExpectJobs",
		"doc": "Specify a list of jobs that should not be dispatched for the given operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_withoutJobs",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::withoutJobs",
		"doc": "Mock the job dispatcher so all jobs are silenced and collected."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_getDispatchedJobs",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::getDispatchedJobs",
		"doc": "Filter the given jobs against the dispatched jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_getDispatched",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::getDispatched",
		"doc": "Filter the given classes against an array of dispatched classes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_wasDispatched",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::wasDispatched",
		"doc": "Check if the given class exists in an array of dispatched classes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_withoutNotifications",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::withoutNotifications",
		"doc": "Mock the notification dispatcher so all notifications are silenced."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices",
		"fromLink": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html",
		"link": "Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.html#method_expectsNotification",
		"name": "Illuminate\\Foundation\\Testing\\Concerns\\MocksApplicationServices::expectsNotification",
		"doc": "Specify a notification that is expected to be dispatched."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/DatabaseMigrations.html",
		"name": "Illuminate\\Foundation\\Testing\\DatabaseMigrations",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\DatabaseMigrations",
		"fromLink": "Illuminate/Foundation/Testing/DatabaseMigrations.html",
		"link": "Illuminate/Foundation/Testing/DatabaseMigrations.html#method_runDatabaseMigrations",
		"name": "Illuminate\\Foundation\\Testing\\DatabaseMigrations::runDatabaseMigrations",
		"doc": "Define hooks to migrate the database before and after each test."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/DatabaseTransactions.html",
		"name": "Illuminate\\Foundation\\Testing\\DatabaseTransactions",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\DatabaseTransactions",
		"fromLink": "Illuminate/Foundation/Testing/DatabaseTransactions.html",
		"link": "Illuminate/Foundation/Testing/DatabaseTransactions.html#method_beginDatabaseTransaction",
		"name": "Illuminate\\Foundation\\Testing\\DatabaseTransactions::beginDatabaseTransaction",
		"doc": "Handle database transactions on the specified connections."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\DatabaseTransactions",
		"fromLink": "Illuminate/Foundation/Testing/DatabaseTransactions.html",
		"link": "Illuminate/Foundation/Testing/DatabaseTransactions.html#method_connectionsToTransact",
		"name": "Illuminate\\Foundation\\Testing\\DatabaseTransactions::connectionsToTransact",
		"doc": "The database connections that should have transactions."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_refreshDatabase",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::refreshDatabase",
		"doc": "Define hooks to migrate the database before and after each test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_usingInMemoryDatabase",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::usingInMemoryDatabase",
		"doc": "Determine if an in-memory database is being used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_refreshInMemoryDatabase",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::refreshInMemoryDatabase",
		"doc": "Refresh the in-memory database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_migrateUsing",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::migrateUsing",
		"doc": "The parameters that should be used when running \"migrate\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_refreshTestDatabase",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::refreshTestDatabase",
		"doc": "Refresh a conventional test database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_migrateFreshUsing",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::migrateFreshUsing",
		"doc": "The parameters that should be used when running \"migrate:fresh\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_beginDatabaseTransaction",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::beginDatabaseTransaction",
		"doc": "Begin a database transaction on the testing database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_connectionsToTransact",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::connectionsToTransact",
		"doc": "The database connections that should have transactions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_shouldDropViews",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::shouldDropViews",
		"doc": "Determine if views should be dropped when refreshing the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_shouldDropTypes",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::shouldDropTypes",
		"doc": "Determine if types should be dropped when refreshing the database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\RefreshDatabase",
		"fromLink": "Illuminate/Foundation/Testing/RefreshDatabase.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabase.html#method_shouldSeed",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabase::shouldSeed",
		"doc": "Determine if the seed task should be run when refreshing the database."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/RefreshDatabaseState.html",
		"name": "Illuminate\\Foundation\\Testing\\RefreshDatabaseState",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html",
		"name": "Illuminate\\Foundation\\Testing\\TestCase",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\TestCase",
		"fromLink": "Illuminate/Foundation/Testing/TestCase.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html#method_createApplication",
		"name": "Illuminate\\Foundation\\Testing\\TestCase::createApplication",
		"doc": "Creates the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\TestCase",
		"fromLink": "Illuminate/Foundation/Testing/TestCase.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html#method_setUp",
		"name": "Illuminate\\Foundation\\Testing\\TestCase::setUp",
		"doc": "Setup the test environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\TestCase",
		"fromLink": "Illuminate/Foundation/Testing/TestCase.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html#method_refreshApplication",
		"name": "Illuminate\\Foundation\\Testing\\TestCase::refreshApplication",
		"doc": "Refresh the application instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\TestCase",
		"fromLink": "Illuminate/Foundation/Testing/TestCase.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html#method_setUpTraits",
		"name": "Illuminate\\Foundation\\Testing\\TestCase::setUpTraits",
		"doc": "Boot the testing helper traits."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\TestCase",
		"fromLink": "Illuminate/Foundation/Testing/TestCase.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html#method_tearDown",
		"name": "Illuminate\\Foundation\\Testing\\TestCase::tearDown",
		"doc": "Clean up the testing environment before the next test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\TestCase",
		"fromLink": "Illuminate/Foundation/Testing/TestCase.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html#method_afterApplicationCreated",
		"name": "Illuminate\\Foundation\\Testing\\TestCase::afterApplicationCreated",
		"doc": "Register a callback to be run after the application is created."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\TestCase",
		"fromLink": "Illuminate/Foundation/Testing/TestCase.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html#method_beforeApplicationDestroyed",
		"name": "Illuminate\\Foundation\\Testing\\TestCase::beforeApplicationDestroyed",
		"doc": "Register a callback to be run before the application is destroyed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\TestCase",
		"fromLink": "Illuminate/Foundation/Testing/TestCase.html",
		"link": "Illuminate/Foundation/Testing/TestCase.html#method_callBeforeApplicationDestroyedCallbacks",
		"name": "Illuminate\\Foundation\\Testing\\TestCase::callBeforeApplicationDestroyedCallbacks",
		"doc": "Execute the application's pre-destruction callbacks."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/WithFaker.html",
		"name": "Illuminate\\Foundation\\Testing\\WithFaker",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\WithFaker",
		"fromLink": "Illuminate/Foundation/Testing/WithFaker.html",
		"link": "Illuminate/Foundation/Testing/WithFaker.html#method_setUpFaker",
		"name": "Illuminate\\Foundation\\Testing\\WithFaker::setUpFaker",
		"doc": "Setup up the Faker instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\WithFaker",
		"fromLink": "Illuminate/Foundation/Testing/WithFaker.html",
		"link": "Illuminate/Foundation/Testing/WithFaker.html#method_faker",
		"name": "Illuminate\\Foundation\\Testing\\WithFaker::faker",
		"doc": "Get the default Faker instance for a given locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\WithFaker",
		"fromLink": "Illuminate/Foundation/Testing/WithFaker.html",
		"link": "Illuminate/Foundation/Testing/WithFaker.html#method_makeFaker",
		"name": "Illuminate\\Foundation\\Testing\\WithFaker::makeFaker",
		"doc": "Create a Faker instance for the given locale."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/WithoutEvents.html",
		"name": "Illuminate\\Foundation\\Testing\\WithoutEvents",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\WithoutEvents",
		"fromLink": "Illuminate/Foundation/Testing/WithoutEvents.html",
		"link": "Illuminate/Foundation/Testing/WithoutEvents.html#method_disableEventsForAllTests",
		"name": "Illuminate\\Foundation\\Testing\\WithoutEvents::disableEventsForAllTests",
		"doc": "Prevent all event handles from being executed."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/WithoutMiddleware.html",
		"name": "Illuminate\\Foundation\\Testing\\WithoutMiddleware",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\WithoutMiddleware",
		"fromLink": "Illuminate/Foundation/Testing/WithoutMiddleware.html",
		"link": "Illuminate/Foundation/Testing/WithoutMiddleware.html#method_disableMiddlewareForAllTests",
		"name": "Illuminate\\Foundation\\Testing\\WithoutMiddleware::disableMiddlewareForAllTests",
		"doc": "Prevent all middleware from being executed for this test class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Foundation\\Testing",
		"fromLink": "Illuminate/Foundation/Testing.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method___construct",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::__construct",
		"doc": "Create a new wormhole instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_milliseconds",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::milliseconds",
		"doc": "Travel forward the given number of milliseconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_seconds",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::seconds",
		"doc": "Travel forward the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_minutes",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::minutes",
		"doc": "Travel forward the given number of minutes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_hours",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::hours",
		"doc": "Travel forward the given number of hours."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_days",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::days",
		"doc": "Travel forward the given number of days."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_weeks",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::weeks",
		"doc": "Travel forward the given number of weeks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_years",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::years",
		"doc": "Travel forward the given number of years."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_back",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::back",
		"doc": "Travel back to the current time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Testing\\Wormhole",
		"fromLink": "Illuminate/Foundation/Testing/Wormhole.html",
		"link": "Illuminate/Foundation/Testing/Wormhole.html#method_handleCallback",
		"name": "Illuminate\\Foundation\\Testing\\Wormhole::handleCallback",
		"doc": "Handle the given optional execution callback."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Foundation\\Validation",
		"fromLink": "Illuminate/Foundation/Validation.html",
		"link": "Illuminate/Foundation/Validation/ValidatesRequests.html",
		"name": "Illuminate\\Foundation\\Validation\\ValidatesRequests",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Validation\\ValidatesRequests",
		"fromLink": "Illuminate/Foundation/Validation/ValidatesRequests.html",
		"link": "Illuminate/Foundation/Validation/ValidatesRequests.html#method_validateWith",
		"name": "Illuminate\\Foundation\\Validation\\ValidatesRequests::validateWith",
		"doc": "Run the validation routine against the given validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Validation\\ValidatesRequests",
		"fromLink": "Illuminate/Foundation/Validation/ValidatesRequests.html",
		"link": "Illuminate/Foundation/Validation/ValidatesRequests.html#method_validate",
		"name": "Illuminate\\Foundation\\Validation\\ValidatesRequests::validate",
		"doc": "Validate the given request with the given rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Validation\\ValidatesRequests",
		"fromLink": "Illuminate/Foundation/Validation/ValidatesRequests.html",
		"link": "Illuminate/Foundation/Validation/ValidatesRequests.html#method_validateWithBag",
		"name": "Illuminate\\Foundation\\Validation\\ValidatesRequests::validateWithBag",
		"doc": "Validate the given request with the given rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Foundation\\Validation\\ValidatesRequests",
		"fromLink": "Illuminate/Foundation/Validation/ValidatesRequests.html",
		"link": "Illuminate/Foundation/Validation/ValidatesRequests.html#method_getValidationFactory",
		"name": "Illuminate\\Foundation\\Validation\\ValidatesRequests::getValidationFactory",
		"doc": "Get a validation factory instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Hashing",
		"fromLink": "Illuminate/Hashing.html",
		"link": "Illuminate/Hashing/AbstractHasher.html",
		"name": "Illuminate\\Hashing\\AbstractHasher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\AbstractHasher",
		"fromLink": "Illuminate/Hashing/AbstractHasher.html",
		"link": "Illuminate/Hashing/AbstractHasher.html#method_info",
		"name": "Illuminate\\Hashing\\AbstractHasher::info",
		"doc": "Get information about the given hashed value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\AbstractHasher",
		"fromLink": "Illuminate/Hashing/AbstractHasher.html",
		"link": "Illuminate/Hashing/AbstractHasher.html#method_check",
		"name": "Illuminate\\Hashing\\AbstractHasher::check",
		"doc": "Check the given plain value against a hash."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Hashing",
		"fromLink": "Illuminate/Hashing.html",
		"link": "Illuminate/Hashing/Argon2IdHasher.html",
		"name": "Illuminate\\Hashing\\Argon2IdHasher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\Argon2IdHasher",
		"fromLink": "Illuminate/Hashing/Argon2IdHasher.html",
		"link": "Illuminate/Hashing/Argon2IdHasher.html#method_check",
		"name": "Illuminate\\Hashing\\Argon2IdHasher::check",
		"doc": "Check the given plain value against a hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\Argon2IdHasher",
		"fromLink": "Illuminate/Hashing/Argon2IdHasher.html",
		"link": "Illuminate/Hashing/Argon2IdHasher.html#method_algorithm",
		"name": "Illuminate\\Hashing\\Argon2IdHasher::algorithm",
		"doc": "Get the algorithm that should be used for hashing."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Hashing",
		"fromLink": "Illuminate/Hashing.html",
		"link": "Illuminate/Hashing/ArgonHasher.html",
		"name": "Illuminate\\Hashing\\ArgonHasher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method___construct",
		"name": "Illuminate\\Hashing\\ArgonHasher::__construct",
		"doc": "Create a new hasher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_make",
		"name": "Illuminate\\Hashing\\ArgonHasher::make",
		"doc": "Hash the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_algorithm",
		"name": "Illuminate\\Hashing\\ArgonHasher::algorithm",
		"doc": "Get the algorithm that should be used for hashing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_check",
		"name": "Illuminate\\Hashing\\ArgonHasher::check",
		"doc": "Check the given plain value against a hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_needsRehash",
		"name": "Illuminate\\Hashing\\ArgonHasher::needsRehash",
		"doc": "Check if the given hash has been hashed using the given options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_setMemory",
		"name": "Illuminate\\Hashing\\ArgonHasher::setMemory",
		"doc": "Set the default password memory factor."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_setTime",
		"name": "Illuminate\\Hashing\\ArgonHasher::setTime",
		"doc": "Set the default password timing factor."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_setThreads",
		"name": "Illuminate\\Hashing\\ArgonHasher::setThreads",
		"doc": "Set the default password threads factor."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_memory",
		"name": "Illuminate\\Hashing\\ArgonHasher::memory",
		"doc": "Extract the memory cost value from the options array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_time",
		"name": "Illuminate\\Hashing\\ArgonHasher::time",
		"doc": "Extract the time cost value from the options array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\ArgonHasher",
		"fromLink": "Illuminate/Hashing/ArgonHasher.html",
		"link": "Illuminate/Hashing/ArgonHasher.html#method_threads",
		"name": "Illuminate\\Hashing\\ArgonHasher::threads",
		"doc": "Extract the threads value from the options array."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Hashing",
		"fromLink": "Illuminate/Hashing.html",
		"link": "Illuminate/Hashing/BcryptHasher.html",
		"name": "Illuminate\\Hashing\\BcryptHasher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\BcryptHasher",
		"fromLink": "Illuminate/Hashing/BcryptHasher.html",
		"link": "Illuminate/Hashing/BcryptHasher.html#method___construct",
		"name": "Illuminate\\Hashing\\BcryptHasher::__construct",
		"doc": "Create a new hasher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\BcryptHasher",
		"fromLink": "Illuminate/Hashing/BcryptHasher.html",
		"link": "Illuminate/Hashing/BcryptHasher.html#method_make",
		"name": "Illuminate\\Hashing\\BcryptHasher::make",
		"doc": "Hash the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\BcryptHasher",
		"fromLink": "Illuminate/Hashing/BcryptHasher.html",
		"link": "Illuminate/Hashing/BcryptHasher.html#method_check",
		"name": "Illuminate\\Hashing\\BcryptHasher::check",
		"doc": "Check the given plain value against a hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\BcryptHasher",
		"fromLink": "Illuminate/Hashing/BcryptHasher.html",
		"link": "Illuminate/Hashing/BcryptHasher.html#method_needsRehash",
		"name": "Illuminate\\Hashing\\BcryptHasher::needsRehash",
		"doc": "Check if the given hash has been hashed using the given options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\BcryptHasher",
		"fromLink": "Illuminate/Hashing/BcryptHasher.html",
		"link": "Illuminate/Hashing/BcryptHasher.html#method_setRounds",
		"name": "Illuminate\\Hashing\\BcryptHasher::setRounds",
		"doc": "Set the default password work factor."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\BcryptHasher",
		"fromLink": "Illuminate/Hashing/BcryptHasher.html",
		"link": "Illuminate/Hashing/BcryptHasher.html#method_cost",
		"name": "Illuminate\\Hashing\\BcryptHasher::cost",
		"doc": "Extract the cost value from the options array."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Hashing",
		"fromLink": "Illuminate/Hashing.html",
		"link": "Illuminate/Hashing/HashManager.html",
		"name": "Illuminate\\Hashing\\HashManager",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashManager",
		"fromLink": "Illuminate/Hashing/HashManager.html",
		"link": "Illuminate/Hashing/HashManager.html#method_createBcryptDriver",
		"name": "Illuminate\\Hashing\\HashManager::createBcryptDriver",
		"doc": "Create an instance of the Bcrypt hash Driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashManager",
		"fromLink": "Illuminate/Hashing/HashManager.html",
		"link": "Illuminate/Hashing/HashManager.html#method_createArgonDriver",
		"name": "Illuminate\\Hashing\\HashManager::createArgonDriver",
		"doc": "Create an instance of the Argon2i hash Driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashManager",
		"fromLink": "Illuminate/Hashing/HashManager.html",
		"link": "Illuminate/Hashing/HashManager.html#method_createArgon2idDriver",
		"name": "Illuminate\\Hashing\\HashManager::createArgon2idDriver",
		"doc": "Create an instance of the Argon2id hash Driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashManager",
		"fromLink": "Illuminate/Hashing/HashManager.html",
		"link": "Illuminate/Hashing/HashManager.html#method_info",
		"name": "Illuminate\\Hashing\\HashManager::info",
		"doc": "Get information about the given hashed value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashManager",
		"fromLink": "Illuminate/Hashing/HashManager.html",
		"link": "Illuminate/Hashing/HashManager.html#method_make",
		"name": "Illuminate\\Hashing\\HashManager::make",
		"doc": "Hash the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashManager",
		"fromLink": "Illuminate/Hashing/HashManager.html",
		"link": "Illuminate/Hashing/HashManager.html#method_check",
		"name": "Illuminate\\Hashing\\HashManager::check",
		"doc": "Check the given plain value against a hash."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashManager",
		"fromLink": "Illuminate/Hashing/HashManager.html",
		"link": "Illuminate/Hashing/HashManager.html#method_needsRehash",
		"name": "Illuminate\\Hashing\\HashManager::needsRehash",
		"doc": "Check if the given hash has been hashed using the given options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashManager",
		"fromLink": "Illuminate/Hashing/HashManager.html",
		"link": "Illuminate/Hashing/HashManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Hashing\\HashManager::getDefaultDriver",
		"doc": "Get the default driver name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Hashing",
		"fromLink": "Illuminate/Hashing.html",
		"link": "Illuminate/Hashing/HashServiceProvider.html",
		"name": "Illuminate\\Hashing\\HashServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashServiceProvider",
		"fromLink": "Illuminate/Hashing/HashServiceProvider.html",
		"link": "Illuminate/Hashing/HashServiceProvider.html#method_register",
		"name": "Illuminate\\Hashing\\HashServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Hashing\\HashServiceProvider",
		"fromLink": "Illuminate/Hashing/HashServiceProvider.html",
		"link": "Illuminate/Hashing/HashServiceProvider.html#method_provides",
		"name": "Illuminate\\Hashing\\HashServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Client",
		"fromLink": "Illuminate/Http/Client.html",
		"link": "Illuminate/Http/Client/ConnectionException.html",
		"name": "Illuminate\\Http\\Client\\ConnectionException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Client",
		"fromLink": "Illuminate/Http/Client.html",
		"link": "Illuminate/Http/Client/Factory.html",
		"name": "Illuminate\\Http\\Client\\Factory",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method___construct",
		"name": "Illuminate\\Http\\Client\\Factory::__construct",
		"doc": "Create a new factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_response",
		"name": "Illuminate\\Http\\Client\\Factory::response",
		"doc": "Create a new response instance for use during stubbing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_sequence",
		"name": "Illuminate\\Http\\Client\\Factory::sequence",
		"doc": "Get an invokable object that returns a sequence of responses in order for use during stubbing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_fake",
		"name": "Illuminate\\Http\\Client\\Factory::fake",
		"doc": "Register a stub callable that will intercept requests and be able to return stub responses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_fakeSequence",
		"name": "Illuminate\\Http\\Client\\Factory::fakeSequence",
		"doc": "Register a response sequence for the given URL pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_stubUrl",
		"name": "Illuminate\\Http\\Client\\Factory::stubUrl",
		"doc": "Stub the given URL using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_record",
		"name": "Illuminate\\Http\\Client\\Factory::record",
		"doc": "Begin recording request / response pairs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_recordRequestResponsePair",
		"name": "Illuminate\\Http\\Client\\Factory::recordRequestResponsePair",
		"doc": "Record a request response pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_assertSent",
		"name": "Illuminate\\Http\\Client\\Factory::assertSent",
		"doc": "Assert that a request / response pair was recorded matching a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_assertNotSent",
		"name": "Illuminate\\Http\\Client\\Factory::assertNotSent",
		"doc": "Assert that a request / response pair was not recorded matching a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_assertNothingSent",
		"name": "Illuminate\\Http\\Client\\Factory::assertNothingSent",
		"doc": "Assert that no request / response pair was recorded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_assertSentCount",
		"name": "Illuminate\\Http\\Client\\Factory::assertSentCount",
		"doc": "Assert how many requests have been recorded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_assertSequencesAreEmpty",
		"name": "Illuminate\\Http\\Client\\Factory::assertSequencesAreEmpty",
		"doc": "Assert that every created response sequence is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_recorded",
		"name": "Illuminate\\Http\\Client\\Factory::recorded",
		"doc": "Get a collection of the request / response pairs matching the given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_newPendingRequest",
		"name": "Illuminate\\Http\\Client\\Factory::newPendingRequest",
		"doc": "Create a new pending request instance for this factory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method___call",
		"name": "Illuminate\\Http\\Client\\Factory::__call",
		"doc": "Execute a method against a new pending request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_accept",
		"name": "Illuminate\\Http\\Client\\Factory::accept",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_acceptJson",
		"name": "Illuminate\\Http\\Client\\Factory::acceptJson",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_asForm",
		"name": "Illuminate\\Http\\Client\\Factory::asForm",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_asJson",
		"name": "Illuminate\\Http\\Client\\Factory::asJson",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_asMultipart",
		"name": "Illuminate\\Http\\Client\\Factory::asMultipart",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_attach",
		"name": "Illuminate\\Http\\Client\\Factory::attach",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_baseUrl",
		"name": "Illuminate\\Http\\Client\\Factory::baseUrl",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_beforeSending",
		"name": "Illuminate\\Http\\Client\\Factory::beforeSending",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_bodyFormat",
		"name": "Illuminate\\Http\\Client\\Factory::bodyFormat",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_contentType",
		"name": "Illuminate\\Http\\Client\\Factory::contentType",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_retry",
		"name": "Illuminate\\Http\\Client\\Factory::retry",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_stub",
		"name": "Illuminate\\Http\\Client\\Factory::stub",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_timeout",
		"name": "Illuminate\\Http\\Client\\Factory::timeout",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withBasicAuth",
		"name": "Illuminate\\Http\\Client\\Factory::withBasicAuth",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withBody",
		"name": "Illuminate\\Http\\Client\\Factory::withBody",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withCookies",
		"name": "Illuminate\\Http\\Client\\Factory::withCookies",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withDigestAuth",
		"name": "Illuminate\\Http\\Client\\Factory::withDigestAuth",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withHeaders",
		"name": "Illuminate\\Http\\Client\\Factory::withHeaders",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withOptions",
		"name": "Illuminate\\Http\\Client\\Factory::withOptions",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withToken",
		"name": "Illuminate\\Http\\Client\\Factory::withToken",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withoutRedirecting",
		"name": "Illuminate\\Http\\Client\\Factory::withoutRedirecting",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_withoutVerifying",
		"name": "Illuminate\\Http\\Client\\Factory::withoutVerifying",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_delete",
		"name": "Illuminate\\Http\\Client\\Factory::delete",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_get",
		"name": "Illuminate\\Http\\Client\\Factory::get",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_head",
		"name": "Illuminate\\Http\\Client\\Factory::head",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_patch",
		"name": "Illuminate\\Http\\Client\\Factory::patch",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_post",
		"name": "Illuminate\\Http\\Client\\Factory::post",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_put",
		"name": "Illuminate\\Http\\Client\\Factory::put",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Factory",
		"fromLink": "Illuminate/Http/Client/Factory.html",
		"link": "Illuminate/Http/Client/Factory.html#method_send",
		"name": "Illuminate\\Http\\Client\\Factory::send",
		"doc": ""
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Client",
		"fromLink": "Illuminate/Http/Client.html",
		"link": "Illuminate/Http/Client/HttpClientException.html",
		"name": "Illuminate\\Http\\Client\\HttpClientException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Client",
		"fromLink": "Illuminate/Http/Client.html",
		"link": "Illuminate/Http/Client/PendingRequest.html",
		"name": "Illuminate\\Http\\Client\\PendingRequest",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method___construct",
		"name": "Illuminate\\Http\\Client\\PendingRequest::__construct",
		"doc": "Create a new HTTP Client instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_baseUrl",
		"name": "Illuminate\\Http\\Client\\PendingRequest::baseUrl",
		"doc": "Set the base URL for the pending request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withBody",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withBody",
		"doc": "Attach a raw body to the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_asJson",
		"name": "Illuminate\\Http\\Client\\PendingRequest::asJson",
		"doc": "Indicate the request contains JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_asForm",
		"name": "Illuminate\\Http\\Client\\PendingRequest::asForm",
		"doc": "Indicate the request contains form parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_attach",
		"name": "Illuminate\\Http\\Client\\PendingRequest::attach",
		"doc": "Attach a file to the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_asMultipart",
		"name": "Illuminate\\Http\\Client\\PendingRequest::asMultipart",
		"doc": "Indicate the request is a multi-part form request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_bodyFormat",
		"name": "Illuminate\\Http\\Client\\PendingRequest::bodyFormat",
		"doc": "Specify the body format of the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_contentType",
		"name": "Illuminate\\Http\\Client\\PendingRequest::contentType",
		"doc": "Specify the request's content type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_acceptJson",
		"name": "Illuminate\\Http\\Client\\PendingRequest::acceptJson",
		"doc": "Indicate that JSON should be returned by the server."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_accept",
		"name": "Illuminate\\Http\\Client\\PendingRequest::accept",
		"doc": "Indicate the type of content that should be returned by the server."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withHeaders",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withHeaders",
		"doc": "Add the given headers to the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withBasicAuth",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withBasicAuth",
		"doc": "Specify the basic authentication username and password for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withDigestAuth",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withDigestAuth",
		"doc": "Specify the digest authentication username and password for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withToken",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withToken",
		"doc": "Specify an authorization token for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withUserAgent",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withUserAgent",
		"doc": "Specify the user agent for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withCookies",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withCookies",
		"doc": "Specify the cookies that should be included with the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withoutRedirecting",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withoutRedirecting",
		"doc": "Indicate that redirects should not be followed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withoutVerifying",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withoutVerifying",
		"doc": "Indicate that TLS certificates should not be verified."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_sink",
		"name": "Illuminate\\Http\\Client\\PendingRequest::sink",
		"doc": "Specify the path where the body of the response should be stored."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_timeout",
		"name": "Illuminate\\Http\\Client\\PendingRequest::timeout",
		"doc": "Specify the timeout (in seconds) for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_retry",
		"name": "Illuminate\\Http\\Client\\PendingRequest::retry",
		"doc": "Specify the number of times the request should be attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withOptions",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withOptions",
		"doc": "Merge new options into the client."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_withMiddleware",
		"name": "Illuminate\\Http\\Client\\PendingRequest::withMiddleware",
		"doc": "Add new middleware the client handler stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_beforeSending",
		"name": "Illuminate\\Http\\Client\\PendingRequest::beforeSending",
		"doc": "Add a new \"before sending\" callback to the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_get",
		"name": "Illuminate\\Http\\Client\\PendingRequest::get",
		"doc": "Issue a GET request to the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_head",
		"name": "Illuminate\\Http\\Client\\PendingRequest::head",
		"doc": "Issue a HEAD request to the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_post",
		"name": "Illuminate\\Http\\Client\\PendingRequest::post",
		"doc": "Issue a POST request to the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_patch",
		"name": "Illuminate\\Http\\Client\\PendingRequest::patch",
		"doc": "Issue a PATCH request to the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_put",
		"name": "Illuminate\\Http\\Client\\PendingRequest::put",
		"doc": "Issue a PUT request to the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_delete",
		"name": "Illuminate\\Http\\Client\\PendingRequest::delete",
		"doc": "Issue a DELETE request to the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_send",
		"name": "Illuminate\\Http\\Client\\PendingRequest::send",
		"doc": "Send the request to the given URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_parseMultipartBodyFormat",
		"name": "Illuminate\\Http\\Client\\PendingRequest::parseMultipartBodyFormat",
		"doc": "Parse multi-part form data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_parseRequestData",
		"name": "Illuminate\\Http\\Client\\PendingRequest::parseRequestData",
		"doc": "Get the request data as an array so that we can attach it to the request for convenient assertions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_buildClient",
		"name": "Illuminate\\Http\\Client\\PendingRequest::buildClient",
		"doc": "Build the Guzzle client."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_buildHandlerStack",
		"name": "Illuminate\\Http\\Client\\PendingRequest::buildHandlerStack",
		"doc": "Build the before sending handler stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_buildBeforeSendingHandler",
		"name": "Illuminate\\Http\\Client\\PendingRequest::buildBeforeSendingHandler",
		"doc": "Build the before sending handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_buildRecorderHandler",
		"name": "Illuminate\\Http\\Client\\PendingRequest::buildRecorderHandler",
		"doc": "Build the recorder handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_buildStubHandler",
		"name": "Illuminate\\Http\\Client\\PendingRequest::buildStubHandler",
		"doc": "Build the stub handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_sinkStubHandler",
		"name": "Illuminate\\Http\\Client\\PendingRequest::sinkStubHandler",
		"doc": "Get the sink stub handler callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_runBeforeSendingCallbacks",
		"name": "Illuminate\\Http\\Client\\PendingRequest::runBeforeSendingCallbacks",
		"doc": "Execute the \"before sending\" callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_mergeOptions",
		"name": "Illuminate\\Http\\Client\\PendingRequest::mergeOptions",
		"doc": "Merge the given options with the current request options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\PendingRequest",
		"fromLink": "Illuminate/Http/Client/PendingRequest.html",
		"link": "Illuminate/Http/Client/PendingRequest.html#method_stub",
		"name": "Illuminate\\Http\\Client\\PendingRequest::stub",
		"doc": "Register a stub callable that will intercept requests and be able to return stub responses."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Client",
		"fromLink": "Illuminate/Http/Client.html",
		"link": "Illuminate/Http/Client/Request.html",
		"name": "Illuminate\\Http\\Client\\Request",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method___construct",
		"name": "Illuminate\\Http\\Client\\Request::__construct",
		"doc": "Create a new request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_method",
		"name": "Illuminate\\Http\\Client\\Request::method",
		"doc": "Get the request method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_url",
		"name": "Illuminate\\Http\\Client\\Request::url",
		"doc": "Get the URL of the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_hasHeader",
		"name": "Illuminate\\Http\\Client\\Request::hasHeader",
		"doc": "Determine if the request has a given header."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_hasHeaders",
		"name": "Illuminate\\Http\\Client\\Request::hasHeaders",
		"doc": "Determine if the request has the given headers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_header",
		"name": "Illuminate\\Http\\Client\\Request::header",
		"doc": "Get the values for the header with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_headers",
		"name": "Illuminate\\Http\\Client\\Request::headers",
		"doc": "Get the request headers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_body",
		"name": "Illuminate\\Http\\Client\\Request::body",
		"doc": "Get the body of the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_hasFile",
		"name": "Illuminate\\Http\\Client\\Request::hasFile",
		"doc": "Determine if the request contains the given file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_data",
		"name": "Illuminate\\Http\\Client\\Request::data",
		"doc": "Get the request's data (form parameters or JSON)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_parameters",
		"name": "Illuminate\\Http\\Client\\Request::parameters",
		"doc": "Get the request's form parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_json",
		"name": "Illuminate\\Http\\Client\\Request::json",
		"doc": "Get the JSON decoded body of the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_isForm",
		"name": "Illuminate\\Http\\Client\\Request::isForm",
		"doc": "Determine if the request is simple form data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_isJson",
		"name": "Illuminate\\Http\\Client\\Request::isJson",
		"doc": "Determine if the request is JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_isMultipart",
		"name": "Illuminate\\Http\\Client\\Request::isMultipart",
		"doc": "Determine if the request is multipart."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_withData",
		"name": "Illuminate\\Http\\Client\\Request::withData",
		"doc": "Set the decoded data on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_toPsrRequest",
		"name": "Illuminate\\Http\\Client\\Request::toPsrRequest",
		"doc": "Get the underlying PSR compliant request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_offsetExists",
		"name": "Illuminate\\Http\\Client\\Request::offsetExists",
		"doc": "Determine if the given offset exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_offsetGet",
		"name": "Illuminate\\Http\\Client\\Request::offsetGet",
		"doc": "Get the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_offsetSet",
		"name": "Illuminate\\Http\\Client\\Request::offsetSet",
		"doc": "Set the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Request",
		"fromLink": "Illuminate/Http/Client/Request.html",
		"link": "Illuminate/Http/Client/Request.html#method_offsetUnset",
		"name": "Illuminate\\Http\\Client\\Request::offsetUnset",
		"doc": "Unset the value at the given offset."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Client",
		"fromLink": "Illuminate/Http/Client.html",
		"link": "Illuminate/Http/Client/RequestException.html",
		"name": "Illuminate\\Http\\Client\\RequestException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\RequestException",
		"fromLink": "Illuminate/Http/Client/RequestException.html",
		"link": "Illuminate/Http/Client/RequestException.html#method___construct",
		"name": "Illuminate\\Http\\Client\\RequestException::__construct",
		"doc": "Create a new exception instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\RequestException",
		"fromLink": "Illuminate/Http/Client/RequestException.html",
		"link": "Illuminate/Http/Client/RequestException.html#method_prepareMessage",
		"name": "Illuminate\\Http\\Client\\RequestException::prepareMessage",
		"doc": "Prepare the exception message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Client",
		"fromLink": "Illuminate/Http/Client.html",
		"link": "Illuminate/Http/Client/Response.html",
		"name": "Illuminate\\Http\\Client\\Response",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method___construct",
		"name": "Illuminate\\Http\\Client\\Response::__construct",
		"doc": "Create a new response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_body",
		"name": "Illuminate\\Http\\Client\\Response::body",
		"doc": "Get the body of the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_json",
		"name": "Illuminate\\Http\\Client\\Response::json",
		"doc": "Get the JSON decoded body of the response as an array or scalar value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_object",
		"name": "Illuminate\\Http\\Client\\Response::object",
		"doc": "Get the JSON decoded body of the response as an object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_header",
		"name": "Illuminate\\Http\\Client\\Response::header",
		"doc": "Get a header from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_headers",
		"name": "Illuminate\\Http\\Client\\Response::headers",
		"doc": "Get the headers from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_status",
		"name": "Illuminate\\Http\\Client\\Response::status",
		"doc": "Get the status code of the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_effectiveUri",
		"name": "Illuminate\\Http\\Client\\Response::effectiveUri",
		"doc": "Get the effective URI of the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_successful",
		"name": "Illuminate\\Http\\Client\\Response::successful",
		"doc": "Determine if the request was successful."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_ok",
		"name": "Illuminate\\Http\\Client\\Response::ok",
		"doc": "Determine if the response code was \"OK\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_redirect",
		"name": "Illuminate\\Http\\Client\\Response::redirect",
		"doc": "Determine if the response was a redirect."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_failed",
		"name": "Illuminate\\Http\\Client\\Response::failed",
		"doc": "Determine if the response indicates a client or server error occurred."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_clientError",
		"name": "Illuminate\\Http\\Client\\Response::clientError",
		"doc": "Determine if the response indicates a client error occurred."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_serverError",
		"name": "Illuminate\\Http\\Client\\Response::serverError",
		"doc": "Determine if the response indicates a server error occurred."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_onError",
		"name": "Illuminate\\Http\\Client\\Response::onError",
		"doc": "Execute the given callback if there was a server or client error."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_cookies",
		"name": "Illuminate\\Http\\Client\\Response::cookies",
		"doc": "Get the response cookies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_toPsrResponse",
		"name": "Illuminate\\Http\\Client\\Response::toPsrResponse",
		"doc": "Get the underlying PSR response for the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_throw",
		"name": "Illuminate\\Http\\Client\\Response::throw",
		"doc": "Throw an exception if a server or client error occurred."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_offsetExists",
		"name": "Illuminate\\Http\\Client\\Response::offsetExists",
		"doc": "Determine if the given offset exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_offsetGet",
		"name": "Illuminate\\Http\\Client\\Response::offsetGet",
		"doc": "Get the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_offsetSet",
		"name": "Illuminate\\Http\\Client\\Response::offsetSet",
		"doc": "Set the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method_offsetUnset",
		"name": "Illuminate\\Http\\Client\\Response::offsetUnset",
		"doc": "Unset the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method___toString",
		"name": "Illuminate\\Http\\Client\\Response::__toString",
		"doc": "Get the body of the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\Response",
		"fromLink": "Illuminate/Http/Client/Response.html",
		"link": "Illuminate/Http/Client/Response.html#method___call",
		"name": "Illuminate\\Http\\Client\\Response::__call",
		"doc": "Dynamically proxy other methods to the underlying response."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Client",
		"fromLink": "Illuminate/Http/Client.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html",
		"name": "Illuminate\\Http\\Client\\ResponseSequence",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method___construct",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::__construct",
		"doc": "Create a new response sequence."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method_push",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::push",
		"doc": "Push a response to the sequence."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method_pushStatus",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::pushStatus",
		"doc": "Push a response with the given status code to the sequence."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method_pushFile",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::pushFile",
		"doc": "Push response with the contents of a file as the body to the sequence."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method_pushResponse",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::pushResponse",
		"doc": "Push a response to the sequence."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method_whenEmpty",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::whenEmpty",
		"doc": "Make the sequence return a default response when it is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method_dontFailWhenEmpty",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::dontFailWhenEmpty",
		"doc": "Make the sequence return a default response when it is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method_isEmpty",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::isEmpty",
		"doc": "Indicate that this sequence has depleted all of its responses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Client\\ResponseSequence",
		"fromLink": "Illuminate/Http/Client/ResponseSequence.html",
		"link": "Illuminate/Http/Client/ResponseSequence.html#method___invoke",
		"name": "Illuminate\\Http\\Client\\ResponseSequence::__invoke",
		"doc": "Get the next response in the sequence."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Http\\Concerns",
		"fromLink": "Illuminate/Http/Concerns.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_matchesType",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::matchesType",
		"doc": "Determine if the given content types match."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_isJson",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::isJson",
		"doc": "Determine if the request is sending JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_expectsJson",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::expectsJson",
		"doc": "Determine if the current request probably expects a JSON response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_wantsJson",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::wantsJson",
		"doc": "Determine if the current request is asking for JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_accepts",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::accepts",
		"doc": "Determines whether the current requests accepts a given content type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_prefers",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::prefers",
		"doc": "Return the most suitable content type from the given array based on content negotiation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_acceptsAnyContentType",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::acceptsAnyContentType",
		"doc": "Determine if the current request accepts any content type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_acceptsJson",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::acceptsJson",
		"doc": "Determines whether a request accepts JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_acceptsHtml",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::acceptsHtml",
		"doc": "Determines whether a request accepts HTML."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithContentTypes.html",
		"link": "Illuminate/Http/Concerns/InteractsWithContentTypes.html#method_format",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithContentTypes::format",
		"doc": "Get the data format expected in the response."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Http\\Concerns",
		"fromLink": "Illuminate/Http/Concerns.html",
		"link": "Illuminate/Http/Concerns/InteractsWithFlashData.html",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithFlashData",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithFlashData",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithFlashData.html",
		"link": "Illuminate/Http/Concerns/InteractsWithFlashData.html#method_old",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithFlashData::old",
		"doc": "Retrieve an old input item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithFlashData",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithFlashData.html",
		"link": "Illuminate/Http/Concerns/InteractsWithFlashData.html#method_flash",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithFlashData::flash",
		"doc": "Flash the input for the current request to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithFlashData",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithFlashData.html",
		"link": "Illuminate/Http/Concerns/InteractsWithFlashData.html#method_flashOnly",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithFlashData::flashOnly",
		"doc": "Flash only some of the input to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithFlashData",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithFlashData.html",
		"link": "Illuminate/Http/Concerns/InteractsWithFlashData.html#method_flashExcept",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithFlashData::flashExcept",
		"doc": "Flash only some of the input to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithFlashData",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithFlashData.html",
		"link": "Illuminate/Http/Concerns/InteractsWithFlashData.html#method_flush",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithFlashData::flush",
		"doc": "Flush all of the old input from the session."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Http\\Concerns",
		"fromLink": "Illuminate/Http/Concerns.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_server",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::server",
		"doc": "Retrieve a server variable from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_hasHeader",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::hasHeader",
		"doc": "Determine if a header is set on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_header",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::header",
		"doc": "Retrieve a header from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_bearerToken",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::bearerToken",
		"doc": "Get the bearer token from the request headers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_exists",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::exists",
		"doc": "Determine if the request contains a given input item key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_has",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::has",
		"doc": "Determine if the request contains a given input item key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_hasAny",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::hasAny",
		"doc": "Determine if the request contains any of the given inputs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_whenHas",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::whenHas",
		"doc": "Apply the callback if the request contains the given input item key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_filled",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::filled",
		"doc": "Determine if the request contains a non-empty value for an input item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_isNotFilled",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::isNotFilled",
		"doc": "Determine if the request contains an empty value for an input item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_anyFilled",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::anyFilled",
		"doc": "Determine if the request contains a non-empty value for any of the given inputs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_whenFilled",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::whenFilled",
		"doc": "Apply the callback if the request contains a non-empty value for the given input item key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_missing",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::missing",
		"doc": "Determine if the request is missing a given input item key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_isEmptyString",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::isEmptyString",
		"doc": "Determine if the given input key is an empty string for \"has\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_keys",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::keys",
		"doc": "Get the keys for all of the input and files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_all",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::all",
		"doc": "Get all of the input and files for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_input",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::input",
		"doc": "Retrieve an input item from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_boolean",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::boolean",
		"doc": "Retrieve input as a boolean value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_only",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::only",
		"doc": "Get a subset containing the provided keys with values from the input data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_except",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::except",
		"doc": "Get all of the input except for a specified array of items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_query",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::query",
		"doc": "Retrieve a query string item from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_post",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::post",
		"doc": "Retrieve a request payload item from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_hasCookie",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::hasCookie",
		"doc": "Determine if a cookie is set on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_cookie",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::cookie",
		"doc": "Retrieve a cookie from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_allFiles",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::allFiles",
		"doc": "Get an array of all of the files on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_convertUploadedFiles",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::convertUploadedFiles",
		"doc": "Convert the given array of Symfony UploadedFiles to custom Laravel UploadedFiles."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_hasFile",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::hasFile",
		"doc": "Determine if the uploaded data contains a file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_isValidFile",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::isValidFile",
		"doc": "Check that the given file is a valid file instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_file",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::file",
		"doc": "Retrieve a file from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_retrieveItem",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::retrieveItem",
		"doc": "Retrieve a parameter item from a given source."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_dd",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::dd",
		"doc": "Dump the request items and end the script."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Concerns\\InteractsWithInput",
		"fromLink": "Illuminate/Http/Concerns/InteractsWithInput.html",
		"link": "Illuminate/Http/Concerns/InteractsWithInput.html#method_dump",
		"name": "Illuminate\\Http\\Concerns\\InteractsWithInput::dump",
		"doc": "Dump the items."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Exceptions",
		"fromLink": "Illuminate/Http/Exceptions.html",
		"link": "Illuminate/Http/Exceptions/HttpResponseException.html",
		"name": "Illuminate\\Http\\Exceptions\\HttpResponseException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Exceptions\\HttpResponseException",
		"fromLink": "Illuminate/Http/Exceptions/HttpResponseException.html",
		"link": "Illuminate/Http/Exceptions/HttpResponseException.html#method___construct",
		"name": "Illuminate\\Http\\Exceptions\\HttpResponseException::__construct",
		"doc": "Create a new HTTP response exception instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Exceptions\\HttpResponseException",
		"fromLink": "Illuminate/Http/Exceptions/HttpResponseException.html",
		"link": "Illuminate/Http/Exceptions/HttpResponseException.html#method_getResponse",
		"name": "Illuminate\\Http\\Exceptions\\HttpResponseException::getResponse",
		"doc": "Get the underlying response instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Exceptions",
		"fromLink": "Illuminate/Http/Exceptions.html",
		"link": "Illuminate/Http/Exceptions/PostTooLargeException.html",
		"name": "Illuminate\\Http\\Exceptions\\PostTooLargeException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Exceptions\\PostTooLargeException",
		"fromLink": "Illuminate/Http/Exceptions/PostTooLargeException.html",
		"link": "Illuminate/Http/Exceptions/PostTooLargeException.html#method___construct",
		"name": "Illuminate\\Http\\Exceptions\\PostTooLargeException::__construct",
		"doc": "Create a new \"post too large\" exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Exceptions",
		"fromLink": "Illuminate/Http/Exceptions.html",
		"link": "Illuminate/Http/Exceptions/ThrottleRequestsException.html",
		"name": "Illuminate\\Http\\Exceptions\\ThrottleRequestsException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Exceptions\\ThrottleRequestsException",
		"fromLink": "Illuminate/Http/Exceptions/ThrottleRequestsException.html",
		"link": "Illuminate/Http/Exceptions/ThrottleRequestsException.html#method___construct",
		"name": "Illuminate\\Http\\Exceptions\\ThrottleRequestsException::__construct",
		"doc": "Create a new throttle requests exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http",
		"fromLink": "Illuminate/Http.html",
		"link": "Illuminate/Http/File.html",
		"name": "Illuminate\\Http\\File",
		"doc": null
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Http",
		"fromLink": "Illuminate/Http.html",
		"link": "Illuminate/Http/FileHelpers.html",
		"name": "Illuminate\\Http\\FileHelpers",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\FileHelpers",
		"fromLink": "Illuminate/Http/FileHelpers.html",
		"link": "Illuminate/Http/FileHelpers.html#method_path",
		"name": "Illuminate\\Http\\FileHelpers::path",
		"doc": "Get the fully qualified path to the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\FileHelpers",
		"fromLink": "Illuminate/Http/FileHelpers.html",
		"link": "Illuminate/Http/FileHelpers.html#method_extension",
		"name": "Illuminate\\Http\\FileHelpers::extension",
		"doc": "Get the file's extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\FileHelpers",
		"fromLink": "Illuminate/Http/FileHelpers.html",
		"link": "Illuminate/Http/FileHelpers.html#method_hashName",
		"name": "Illuminate\\Http\\FileHelpers::hashName",
		"doc": "Get a filename for the file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http",
		"fromLink": "Illuminate/Http.html",
		"link": "Illuminate/Http/JsonResponse.html",
		"name": "Illuminate\\Http\\JsonResponse",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\JsonResponse",
		"fromLink": "Illuminate/Http/JsonResponse.html",
		"link": "Illuminate/Http/JsonResponse.html#method___construct",
		"name": "Illuminate\\Http\\JsonResponse::__construct",
		"doc": "Constructor."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\JsonResponse",
		"fromLink": "Illuminate/Http/JsonResponse.html",
		"link": "Illuminate/Http/JsonResponse.html#method_withCallback",
		"name": "Illuminate\\Http\\JsonResponse::withCallback",
		"doc": "Sets the JSONP callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\JsonResponse",
		"fromLink": "Illuminate/Http/JsonResponse.html",
		"link": "Illuminate/Http/JsonResponse.html#method_getData",
		"name": "Illuminate\\Http\\JsonResponse::getData",
		"doc": "Get the json_decoded data from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\JsonResponse",
		"fromLink": "Illuminate/Http/JsonResponse.html",
		"link": "Illuminate/Http/JsonResponse.html#method_setData",
		"name": "Illuminate\\Http\\JsonResponse::setData",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\JsonResponse",
		"fromLink": "Illuminate/Http/JsonResponse.html",
		"link": "Illuminate/Http/JsonResponse.html#method_hasValidJson",
		"name": "Illuminate\\Http\\JsonResponse::hasValidJson",
		"doc": "Determine if an error occurred during JSON encoding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\JsonResponse",
		"fromLink": "Illuminate/Http/JsonResponse.html",
		"link": "Illuminate/Http/JsonResponse.html#method_setEncodingOptions",
		"name": "Illuminate\\Http\\JsonResponse::setEncodingOptions",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\JsonResponse",
		"fromLink": "Illuminate/Http/JsonResponse.html",
		"link": "Illuminate/Http/JsonResponse.html#method_hasEncodingOption",
		"name": "Illuminate\\Http\\JsonResponse::hasEncodingOption",
		"doc": "Determine if a JSON encoding option is set."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Middleware",
		"fromLink": "Illuminate/Http/Middleware.html",
		"link": "Illuminate/Http/Middleware/CheckResponseForModifications.html",
		"name": "Illuminate\\Http\\Middleware\\CheckResponseForModifications",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\CheckResponseForModifications",
		"fromLink": "Illuminate/Http/Middleware/CheckResponseForModifications.html",
		"link": "Illuminate/Http/Middleware/CheckResponseForModifications.html#method_handle",
		"name": "Illuminate\\Http\\Middleware\\CheckResponseForModifications::handle",
		"doc": "Handle an incoming request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Middleware",
		"fromLink": "Illuminate/Http/Middleware.html",
		"link": "Illuminate/Http/Middleware/FrameGuard.html",
		"name": "Illuminate\\Http\\Middleware\\FrameGuard",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\FrameGuard",
		"fromLink": "Illuminate/Http/Middleware/FrameGuard.html",
		"link": "Illuminate/Http/Middleware/FrameGuard.html#method_handle",
		"name": "Illuminate\\Http\\Middleware\\FrameGuard::handle",
		"doc": "Handle the given request and get the response."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Middleware",
		"fromLink": "Illuminate/Http/Middleware.html",
		"link": "Illuminate/Http/Middleware/SetCacheHeaders.html",
		"name": "Illuminate\\Http\\Middleware\\SetCacheHeaders",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\SetCacheHeaders",
		"fromLink": "Illuminate/Http/Middleware/SetCacheHeaders.html",
		"link": "Illuminate/Http/Middleware/SetCacheHeaders.html#method_handle",
		"name": "Illuminate\\Http\\Middleware\\SetCacheHeaders::handle",
		"doc": "Add cache related HTTP headers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\SetCacheHeaders",
		"fromLink": "Illuminate/Http/Middleware/SetCacheHeaders.html",
		"link": "Illuminate/Http/Middleware/SetCacheHeaders.html#method_parseOptions",
		"name": "Illuminate\\Http\\Middleware\\SetCacheHeaders::parseOptions",
		"doc": "Parse the given header options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Middleware",
		"fromLink": "Illuminate/Http/Middleware.html",
		"link": "Illuminate/Http/Middleware/TrustHosts.html",
		"name": "Illuminate\\Http\\Middleware\\TrustHosts",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\TrustHosts",
		"fromLink": "Illuminate/Http/Middleware/TrustHosts.html",
		"link": "Illuminate/Http/Middleware/TrustHosts.html#method___construct",
		"name": "Illuminate\\Http\\Middleware\\TrustHosts::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\TrustHosts",
		"fromLink": "Illuminate/Http/Middleware/TrustHosts.html",
		"link": "Illuminate/Http/Middleware/TrustHosts.html#method_hosts",
		"name": "Illuminate\\Http\\Middleware\\TrustHosts::hosts",
		"doc": "Get the host patterns that should be trusted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\TrustHosts",
		"fromLink": "Illuminate/Http/Middleware/TrustHosts.html",
		"link": "Illuminate/Http/Middleware/TrustHosts.html#method_handle",
		"name": "Illuminate\\Http\\Middleware\\TrustHosts::handle",
		"doc": "Handle the incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\TrustHosts",
		"fromLink": "Illuminate/Http/Middleware/TrustHosts.html",
		"link": "Illuminate/Http/Middleware/TrustHosts.html#method_shouldSpecifyTrustedHosts",
		"name": "Illuminate\\Http\\Middleware\\TrustHosts::shouldSpecifyTrustedHosts",
		"doc": "Determine if the application should specify trusted hosts."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Middleware\\TrustHosts",
		"fromLink": "Illuminate/Http/Middleware/TrustHosts.html",
		"link": "Illuminate/Http/Middleware/TrustHosts.html#method_allSubdomainsOfApplicationUrl",
		"name": "Illuminate\\Http\\Middleware\\TrustHosts::allSubdomainsOfApplicationUrl",
		"doc": "Get a regular expression matching the application URL and all of its subdomains."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http",
		"fromLink": "Illuminate/Http.html",
		"link": "Illuminate/Http/RedirectResponse.html",
		"name": "Illuminate\\Http\\RedirectResponse",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_with",
		"name": "Illuminate\\Http\\RedirectResponse::with",
		"doc": "Flash a piece of data to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_withCookies",
		"name": "Illuminate\\Http\\RedirectResponse::withCookies",
		"doc": "Add multiple cookies to the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_withInput",
		"name": "Illuminate\\Http\\RedirectResponse::withInput",
		"doc": "Flash an array of input to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_removeFilesFromInput",
		"name": "Illuminate\\Http\\RedirectResponse::removeFilesFromInput",
		"doc": "Remove all uploaded files form the given input array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_onlyInput",
		"name": "Illuminate\\Http\\RedirectResponse::onlyInput",
		"doc": "Flash an array of input to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_exceptInput",
		"name": "Illuminate\\Http\\RedirectResponse::exceptInput",
		"doc": "Flash an array of input to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_withErrors",
		"name": "Illuminate\\Http\\RedirectResponse::withErrors",
		"doc": "Flash a container of errors to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_parseErrors",
		"name": "Illuminate\\Http\\RedirectResponse::parseErrors",
		"doc": "Parse the given errors into an appropriate value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_withFragment",
		"name": "Illuminate\\Http\\RedirectResponse::withFragment",
		"doc": "Add a fragment identifier to the URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_withoutFragment",
		"name": "Illuminate\\Http\\RedirectResponse::withoutFragment",
		"doc": "Remove any fragment identifier from the response URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_getOriginalContent",
		"name": "Illuminate\\Http\\RedirectResponse::getOriginalContent",
		"doc": "Get the original response content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_getRequest",
		"name": "Illuminate\\Http\\RedirectResponse::getRequest",
		"doc": "Get the request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_setRequest",
		"name": "Illuminate\\Http\\RedirectResponse::setRequest",
		"doc": "Set the request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_getSession",
		"name": "Illuminate\\Http\\RedirectResponse::getSession",
		"doc": "Get the session store instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method_setSession",
		"name": "Illuminate\\Http\\RedirectResponse::setSession",
		"doc": "Set the session store instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\RedirectResponse",
		"fromLink": "Illuminate/Http/RedirectResponse.html",
		"link": "Illuminate/Http/RedirectResponse.html#method___call",
		"name": "Illuminate\\Http\\RedirectResponse::__call",
		"doc": "Dynamically bind flash data in the session."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http",
		"fromLink": "Illuminate/Http.html",
		"link": "Illuminate/Http/Request.html",
		"name": "Illuminate\\Http\\Request",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_capture",
		"name": "Illuminate\\Http\\Request::capture",
		"doc": "Create a new Illuminate HTTP request from server variables."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_instance",
		"name": "Illuminate\\Http\\Request::instance",
		"doc": "Return the Request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_method",
		"name": "Illuminate\\Http\\Request::method",
		"doc": "Get the request method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_root",
		"name": "Illuminate\\Http\\Request::root",
		"doc": "Get the root URL for the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_url",
		"name": "Illuminate\\Http\\Request::url",
		"doc": "Get the URL (no query string) for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_fullUrl",
		"name": "Illuminate\\Http\\Request::fullUrl",
		"doc": "Get the full URL for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_fullUrlWithQuery",
		"name": "Illuminate\\Http\\Request::fullUrlWithQuery",
		"doc": "Get the full URL for the request with the added query string parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_path",
		"name": "Illuminate\\Http\\Request::path",
		"doc": "Get the current path info for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_decodedPath",
		"name": "Illuminate\\Http\\Request::decodedPath",
		"doc": "Get the current decoded path info for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_segment",
		"name": "Illuminate\\Http\\Request::segment",
		"doc": "Get a segment from the URI (1 based index)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_segments",
		"name": "Illuminate\\Http\\Request::segments",
		"doc": "Get all of the segments for the request path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_is",
		"name": "Illuminate\\Http\\Request::is",
		"doc": "Determine if the current request URI matches a pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_routeIs",
		"name": "Illuminate\\Http\\Request::routeIs",
		"doc": "Determine if the route name matches a given pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_fullUrlIs",
		"name": "Illuminate\\Http\\Request::fullUrlIs",
		"doc": "Determine if the current request URL and query string matches a pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_ajax",
		"name": "Illuminate\\Http\\Request::ajax",
		"doc": "Determine if the request is the result of an AJAX call."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_pjax",
		"name": "Illuminate\\Http\\Request::pjax",
		"doc": "Determine if the request is the result of an PJAX call."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_prefetch",
		"name": "Illuminate\\Http\\Request::prefetch",
		"doc": "Determine if the request is the result of an prefetch call."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_secure",
		"name": "Illuminate\\Http\\Request::secure",
		"doc": "Determine if the request is over HTTPS."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_ip",
		"name": "Illuminate\\Http\\Request::ip",
		"doc": "Get the client IP address."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_ips",
		"name": "Illuminate\\Http\\Request::ips",
		"doc": "Get the client IP addresses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_userAgent",
		"name": "Illuminate\\Http\\Request::userAgent",
		"doc": "Get the client user agent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_merge",
		"name": "Illuminate\\Http\\Request::merge",
		"doc": "Merge new input into the current request's input array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_replace",
		"name": "Illuminate\\Http\\Request::replace",
		"doc": "Replace the input for the current request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_get",
		"name": "Illuminate\\Http\\Request::get",
		"doc": "This method belongs to Symfony HttpFoundation and is not usually needed when using Laravel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_json",
		"name": "Illuminate\\Http\\Request::json",
		"doc": "Get the JSON payload for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_getInputSource",
		"name": "Illuminate\\Http\\Request::getInputSource",
		"doc": "Get the input source for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_createFrom",
		"name": "Illuminate\\Http\\Request::createFrom",
		"doc": "Create a new request instance from the given Laravel request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_createFromBase",
		"name": "Illuminate\\Http\\Request::createFromBase",
		"doc": "Create an Illuminate request from a Symfony instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_duplicate",
		"name": "Illuminate\\Http\\Request::duplicate",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_filterFiles",
		"name": "Illuminate\\Http\\Request::filterFiles",
		"doc": "Filter the given array of files, removing any empty values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_session",
		"name": "Illuminate\\Http\\Request::session",
		"doc": "Get the session associated with the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_getSession",
		"name": "Illuminate\\Http\\Request::getSession",
		"doc": "Get the session associated with the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_setLaravelSession",
		"name": "Illuminate\\Http\\Request::setLaravelSession",
		"doc": "Set the session instance on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_user",
		"name": "Illuminate\\Http\\Request::user",
		"doc": "Get the user making the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_route",
		"name": "Illuminate\\Http\\Request::route",
		"doc": "Get the route handling the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_fingerprint",
		"name": "Illuminate\\Http\\Request::fingerprint",
		"doc": "Get a unique fingerprint for the request / route / IP address."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_setJson",
		"name": "Illuminate\\Http\\Request::setJson",
		"doc": "Set the JSON payload for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_getUserResolver",
		"name": "Illuminate\\Http\\Request::getUserResolver",
		"doc": "Get the user resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_setUserResolver",
		"name": "Illuminate\\Http\\Request::setUserResolver",
		"doc": "Set the user resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_getRouteResolver",
		"name": "Illuminate\\Http\\Request::getRouteResolver",
		"doc": "Get the route resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_setRouteResolver",
		"name": "Illuminate\\Http\\Request::setRouteResolver",
		"doc": "Set the route resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_toArray",
		"name": "Illuminate\\Http\\Request::toArray",
		"doc": "Get all of the input and files for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_offsetExists",
		"name": "Illuminate\\Http\\Request::offsetExists",
		"doc": "Determine if the given offset exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_offsetGet",
		"name": "Illuminate\\Http\\Request::offsetGet",
		"doc": "Get the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_offsetSet",
		"name": "Illuminate\\Http\\Request::offsetSet",
		"doc": "Set the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_offsetUnset",
		"name": "Illuminate\\Http\\Request::offsetUnset",
		"doc": "Remove the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method___isset",
		"name": "Illuminate\\Http\\Request::__isset",
		"doc": "Check if an input element is set on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method___get",
		"name": "Illuminate\\Http\\Request::__get",
		"doc": "Get an input element from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_validate",
		"name": "Illuminate\\Http\\Request::validate",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_validateWithBag",
		"name": "Illuminate\\Http\\Request::validateWithBag",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Request",
		"fromLink": "Illuminate/Http/Request.html",
		"link": "Illuminate/Http/Request.html#method_hasValidSignature",
		"name": "Illuminate\\Http\\Request::hasValidSignature",
		"doc": ""
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Http\\Resources",
		"fromLink": "Illuminate/Http/Resources.html",
		"link": "Illuminate/Http/Resources/CollectsResources.html",
		"name": "Illuminate\\Http\\Resources\\CollectsResources",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\CollectsResources",
		"fromLink": "Illuminate/Http/Resources/CollectsResources.html",
		"link": "Illuminate/Http/Resources/CollectsResources.html#method_collectResource",
		"name": "Illuminate\\Http\\Resources\\CollectsResources::collectResource",
		"doc": "Map the given collection resource into its individual resources."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\CollectsResources",
		"fromLink": "Illuminate/Http/Resources/CollectsResources.html",
		"link": "Illuminate/Http/Resources/CollectsResources.html#method_collects",
		"name": "Illuminate\\Http\\Resources\\CollectsResources::collects",
		"doc": "Get the resource that this resource collects."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\CollectsResources",
		"fromLink": "Illuminate/Http/Resources/CollectsResources.html",
		"link": "Illuminate/Http/Resources/CollectsResources.html#method_getIterator",
		"name": "Illuminate\\Http\\Resources\\CollectsResources::getIterator",
		"doc": "Get an iterator for the resource collection."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Http\\Resources",
		"fromLink": "Illuminate/Http/Resources.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_filter",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::filter",
		"doc": "Filter the given data, removing any optional values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_mergeData",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::mergeData",
		"doc": "Merge the given data in at the given index."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_removeMissingValues",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::removeMissingValues",
		"doc": "Remove the missing values from the filtered data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_when",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::when",
		"doc": "Retrieve a value based on a given condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_merge",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::merge",
		"doc": "Merge a value into the array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_mergeWhen",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::mergeWhen",
		"doc": "Merge a value based on a given condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_attributes",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::attributes",
		"doc": "Merge the given attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_whenAppended",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::whenAppended",
		"doc": "Retrieve an accessor when it has been appended."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_whenLoaded",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::whenLoaded",
		"doc": "Retrieve a relationship if it has been loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_whenPivotLoaded",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::whenPivotLoaded",
		"doc": "Execute a callback if the given pivot table has been loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_whenPivotLoadedAs",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::whenPivotLoadedAs",
		"doc": "Execute a callback if the given pivot table with a custom accessor has been loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes",
		"fromLink": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html",
		"link": "Illuminate/Http/Resources/ConditionallyLoadsAttributes.html#method_transform",
		"name": "Illuminate\\Http\\Resources\\ConditionallyLoadsAttributes::transform",
		"doc": "Transform the given value if it is present."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Http\\Resources",
		"fromLink": "Illuminate/Http/Resources.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method_getRouteKey",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::getRouteKey",
		"doc": "Get the value of the resource's route key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method_getRouteKeyName",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::getRouteKeyName",
		"doc": "Get the route key for the resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method_resolveRouteBinding",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::resolveRouteBinding",
		"doc": "Retrieve the model for a bound value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method_resolveChildRouteBinding",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::resolveChildRouteBinding",
		"doc": "Retrieve the model for a bound value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method_offsetExists",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::offsetExists",
		"doc": "Determine if the given attribute exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method_offsetGet",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::offsetGet",
		"doc": "Get the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method_offsetSet",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::offsetSet",
		"doc": "Set the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method_offsetUnset",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::offsetUnset",
		"doc": "Unset the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method___isset",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::__isset",
		"doc": "Determine if an attribute exists on the resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method___unset",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::__unset",
		"doc": "Unset an attribute on the resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method___get",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::__get",
		"doc": "Dynamically get properties from the underlying resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\DelegatesToResource",
		"fromLink": "Illuminate/Http/Resources/DelegatesToResource.html",
		"link": "Illuminate/Http/Resources/DelegatesToResource.html#method___call",
		"name": "Illuminate\\Http\\Resources\\DelegatesToResource::__call",
		"doc": "Dynamically pass method calls to the underlying resource."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Resources\\Json",
		"fromLink": "Illuminate/Http/Resources/Json.html",
		"link": "Illuminate/Http/Resources/Json/AnonymousResourceCollection.html",
		"name": "Illuminate\\Http\\Resources\\Json\\AnonymousResourceCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\AnonymousResourceCollection",
		"fromLink": "Illuminate/Http/Resources/Json/AnonymousResourceCollection.html",
		"link": "Illuminate/Http/Resources/Json/AnonymousResourceCollection.html#method___construct",
		"name": "Illuminate\\Http\\Resources\\Json\\AnonymousResourceCollection::__construct",
		"doc": "Create a new anonymous resource collection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Resources\\Json",
		"fromLink": "Illuminate/Http/Resources/Json.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method___construct",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::__construct",
		"doc": "Create a new resource instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_make",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::make",
		"doc": "Create a new resource instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_collection",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::collection",
		"doc": "Create new anonymous resource collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_resolve",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::resolve",
		"doc": "Resolve the resource to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_toArray",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::toArray",
		"doc": "Transform the resource into an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_toJson",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::toJson",
		"doc": "Convert the model instance to JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_with",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::with",
		"doc": "Get any additional data that should be returned with the resource array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_additional",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::additional",
		"doc": "Add additional meta data to the resource response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_withResponse",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::withResponse",
		"doc": "Customize the response for a request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_wrap",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::wrap",
		"doc": "Set the string that should wrap the outer-most resource array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_withoutWrapping",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::withoutWrapping",
		"doc": "Disable wrapping of the outer-most resource array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_response",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::response",
		"doc": "Transform the resource into an HTTP response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_toResponse",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::toResponse",
		"doc": "Create an HTTP response that represents the object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\JsonResource",
		"fromLink": "Illuminate/Http/Resources/Json/JsonResource.html",
		"link": "Illuminate/Http/Resources/Json/JsonResource.html#method_jsonSerialize",
		"name": "Illuminate\\Http\\Resources\\Json\\JsonResource::jsonSerialize",
		"doc": "Prepare the resource for JSON serialization."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Resources\\Json",
		"fromLink": "Illuminate/Http/Resources/Json.html",
		"link": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html",
		"name": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html#method_toResponse",
		"name": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse::toResponse",
		"doc": "Create an HTTP response that represents the object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html#method_paginationInformation",
		"name": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse::paginationInformation",
		"doc": "Add the pagination information to the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html#method_paginationLinks",
		"name": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse::paginationLinks",
		"doc": "Get the pagination links for the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/PaginatedResourceResponse.html#method_meta",
		"name": "Illuminate\\Http\\Resources\\Json\\PaginatedResourceResponse::meta",
		"doc": "Gather the meta data for the response."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Resources\\Json",
		"fromLink": "Illuminate/Http/Resources/Json.html",
		"link": "Illuminate/Http/Resources/Json/ResourceCollection.html",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceCollection",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceCollection.html",
		"link": "Illuminate/Http/Resources/Json/ResourceCollection.html#method___construct",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceCollection::__construct",
		"doc": "Create a new resource instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceCollection",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceCollection.html",
		"link": "Illuminate/Http/Resources/Json/ResourceCollection.html#method_preserveQuery",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceCollection::preserveQuery",
		"doc": "Indicate that all current query parameters should be appended to pagination links."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceCollection",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceCollection.html",
		"link": "Illuminate/Http/Resources/Json/ResourceCollection.html#method_withQuery",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceCollection::withQuery",
		"doc": "Specify the query string parameters that should be present on pagination links."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceCollection",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceCollection.html",
		"link": "Illuminate/Http/Resources/Json/ResourceCollection.html#method_count",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceCollection::count",
		"doc": "Return the count of items in the resource collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceCollection",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceCollection.html",
		"link": "Illuminate/Http/Resources/Json/ResourceCollection.html#method_toArray",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceCollection::toArray",
		"doc": "Transform the resource into a JSON array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceCollection",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceCollection.html",
		"link": "Illuminate/Http/Resources/Json/ResourceCollection.html#method_toResponse",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceCollection::toResponse",
		"doc": "Create an HTTP response that represents the object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceCollection",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceCollection.html",
		"link": "Illuminate/Http/Resources/Json/ResourceCollection.html#method_preparePaginatedResponse",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceCollection::preparePaginatedResponse",
		"doc": "Create a paginate-aware HTTP response."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Resources\\Json",
		"fromLink": "Illuminate/Http/Resources/Json.html",
		"link": "Illuminate/Http/Resources/Json/ResourceResponse.html",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceResponse",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/ResourceResponse.html#method___construct",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceResponse::__construct",
		"doc": "Create a new resource response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/ResourceResponse.html#method_toResponse",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceResponse::toResponse",
		"doc": "Create an HTTP response that represents the object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/ResourceResponse.html#method_wrap",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceResponse::wrap",
		"doc": "Wrap the given data if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/ResourceResponse.html#method_haveDefaultWrapperAndDataIsUnwrapped",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceResponse::haveDefaultWrapperAndDataIsUnwrapped",
		"doc": "Determine if we have a default wrapper and the given data is unwrapped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/ResourceResponse.html#method_haveAdditionalInformationAndDataIsUnwrapped",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceResponse::haveAdditionalInformationAndDataIsUnwrapped",
		"doc": "Determine if \"with\" data has been added and our data is unwrapped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/ResourceResponse.html#method_wrapper",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceResponse::wrapper",
		"doc": "Get the default data wrapper for the resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\Json\\ResourceResponse",
		"fromLink": "Illuminate/Http/Resources/Json/ResourceResponse.html",
		"link": "Illuminate/Http/Resources/Json/ResourceResponse.html#method_calculateStatus",
		"name": "Illuminate\\Http\\Resources\\Json\\ResourceResponse::calculateStatus",
		"doc": "Calculate the appropriate status code for the response."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Resources",
		"fromLink": "Illuminate/Http/Resources.html",
		"link": "Illuminate/Http/Resources/MergeValue.html",
		"name": "Illuminate\\Http\\Resources\\MergeValue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\MergeValue",
		"fromLink": "Illuminate/Http/Resources/MergeValue.html",
		"link": "Illuminate/Http/Resources/MergeValue.html#method___construct",
		"name": "Illuminate\\Http\\Resources\\MergeValue::__construct",
		"doc": "Create new merge value instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Resources",
		"fromLink": "Illuminate/Http/Resources.html",
		"link": "Illuminate/Http/Resources/MissingValue.html",
		"name": "Illuminate\\Http\\Resources\\MissingValue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\MissingValue",
		"fromLink": "Illuminate/Http/Resources/MissingValue.html",
		"link": "Illuminate/Http/Resources/MissingValue.html#method_isMissing",
		"name": "Illuminate\\Http\\Resources\\MissingValue::isMissing",
		"doc": "Determine if the object should be considered \"missing\"."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Resources",
		"fromLink": "Illuminate/Http/Resources.html",
		"link": "Illuminate/Http/Resources/PotentiallyMissing.html",
		"name": "Illuminate\\Http\\Resources\\PotentiallyMissing",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Resources\\PotentiallyMissing",
		"fromLink": "Illuminate/Http/Resources/PotentiallyMissing.html",
		"link": "Illuminate/Http/Resources/PotentiallyMissing.html#method_isMissing",
		"name": "Illuminate\\Http\\Resources\\PotentiallyMissing::isMissing",
		"doc": "Determine if the object should be considered \"missing\"."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http",
		"fromLink": "Illuminate/Http.html",
		"link": "Illuminate/Http/Response.html",
		"name": "Illuminate\\Http\\Response",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Response",
		"fromLink": "Illuminate/Http/Response.html",
		"link": "Illuminate/Http/Response.html#method___construct",
		"name": "Illuminate\\Http\\Response::__construct",
		"doc": "Create a new HTTP response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Response",
		"fromLink": "Illuminate/Http/Response.html",
		"link": "Illuminate/Http/Response.html#method_setContent",
		"name": "Illuminate\\Http\\Response::setContent",
		"doc": "Set the content on the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Response",
		"fromLink": "Illuminate/Http/Response.html",
		"link": "Illuminate/Http/Response.html#method_shouldBeJson",
		"name": "Illuminate\\Http\\Response::shouldBeJson",
		"doc": "Determine if the given content should be turned into JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Response",
		"fromLink": "Illuminate/Http/Response.html",
		"link": "Illuminate/Http/Response.html#method_morphToJson",
		"name": "Illuminate\\Http\\Response::morphToJson",
		"doc": "Morph the given content into JSON."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Http",
		"fromLink": "Illuminate/Http.html",
		"link": "Illuminate/Http/ResponseTrait.html",
		"name": "Illuminate\\Http\\ResponseTrait",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_status",
		"name": "Illuminate\\Http\\ResponseTrait::status",
		"doc": "Get the status code for the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_content",
		"name": "Illuminate\\Http\\ResponseTrait::content",
		"doc": "Get the content of the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_getOriginalContent",
		"name": "Illuminate\\Http\\ResponseTrait::getOriginalContent",
		"doc": "Get the original response content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_header",
		"name": "Illuminate\\Http\\ResponseTrait::header",
		"doc": "Set a header on the Response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_withHeaders",
		"name": "Illuminate\\Http\\ResponseTrait::withHeaders",
		"doc": "Add an array of headers to the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_cookie",
		"name": "Illuminate\\Http\\ResponseTrait::cookie",
		"doc": "Add a cookie to the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_withCookie",
		"name": "Illuminate\\Http\\ResponseTrait::withCookie",
		"doc": "Add a cookie to the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_withoutCookie",
		"name": "Illuminate\\Http\\ResponseTrait::withoutCookie",
		"doc": "Expire a cookie when sending the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_getCallback",
		"name": "Illuminate\\Http\\ResponseTrait::getCallback",
		"doc": "Get the callback of the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_withException",
		"name": "Illuminate\\Http\\ResponseTrait::withException",
		"doc": "Set the exception to attach to the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\ResponseTrait",
		"fromLink": "Illuminate/Http/ResponseTrait.html",
		"link": "Illuminate/Http/ResponseTrait.html#method_throwResponse",
		"name": "Illuminate\\Http\\ResponseTrait::throwResponse",
		"doc": "Throws the response in a HttpResponseException instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Testing",
		"fromLink": "Illuminate/Http/Testing.html",
		"link": "Illuminate/Http/Testing/File.html",
		"name": "Illuminate\\Http\\Testing\\File",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method___construct",
		"name": "Illuminate\\Http\\Testing\\File::__construct",
		"doc": "Create a new file instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method_create",
		"name": "Illuminate\\Http\\Testing\\File::create",
		"doc": "Create a new fake file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method_createWithContent",
		"name": "Illuminate\\Http\\Testing\\File::createWithContent",
		"doc": "Create a new fake file with content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method_image",
		"name": "Illuminate\\Http\\Testing\\File::image",
		"doc": "Create a new fake image."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method_size",
		"name": "Illuminate\\Http\\Testing\\File::size",
		"doc": "Set the \"size\" of the file in kilobytes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method_getSize",
		"name": "Illuminate\\Http\\Testing\\File::getSize",
		"doc": "Get the size of the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method_mimeType",
		"name": "Illuminate\\Http\\Testing\\File::mimeType",
		"doc": "Set the \"MIME type\" for the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method_getMimeType",
		"name": "Illuminate\\Http\\Testing\\File::getMimeType",
		"doc": "Get the MIME type of the file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\File",
		"fromLink": "Illuminate/Http/Testing/File.html",
		"link": "Illuminate/Http/Testing/File.html#method_tempFilePath",
		"name": "Illuminate\\Http\\Testing\\File::tempFilePath",
		"doc": "Get the path to the temporary file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Testing",
		"fromLink": "Illuminate/Http/Testing.html",
		"link": "Illuminate/Http/Testing/FileFactory.html",
		"name": "Illuminate\\Http\\Testing\\FileFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\FileFactory",
		"fromLink": "Illuminate/Http/Testing/FileFactory.html",
		"link": "Illuminate/Http/Testing/FileFactory.html#method_create",
		"name": "Illuminate\\Http\\Testing\\FileFactory::create",
		"doc": "Create a new fake file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\FileFactory",
		"fromLink": "Illuminate/Http/Testing/FileFactory.html",
		"link": "Illuminate/Http/Testing/FileFactory.html#method_createWithContent",
		"name": "Illuminate\\Http\\Testing\\FileFactory::createWithContent",
		"doc": "Create a new fake file with content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\FileFactory",
		"fromLink": "Illuminate/Http/Testing/FileFactory.html",
		"link": "Illuminate/Http/Testing/FileFactory.html#method_image",
		"name": "Illuminate\\Http\\Testing\\FileFactory::image",
		"doc": "Create a new fake image."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\FileFactory",
		"fromLink": "Illuminate/Http/Testing/FileFactory.html",
		"link": "Illuminate/Http/Testing/FileFactory.html#method_generateImage",
		"name": "Illuminate\\Http\\Testing\\FileFactory::generateImage",
		"doc": "Generate a dummy image of the given width and height."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http\\Testing",
		"fromLink": "Illuminate/Http/Testing.html",
		"link": "Illuminate/Http/Testing/MimeType.html",
		"name": "Illuminate\\Http\\Testing\\MimeType",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\MimeType",
		"fromLink": "Illuminate/Http/Testing/MimeType.html",
		"link": "Illuminate/Http/Testing/MimeType.html#method_getMimeTypes",
		"name": "Illuminate\\Http\\Testing\\MimeType::getMimeTypes",
		"doc": "Get the mime types instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\MimeType",
		"fromLink": "Illuminate/Http/Testing/MimeType.html",
		"link": "Illuminate/Http/Testing/MimeType.html#method_from",
		"name": "Illuminate\\Http\\Testing\\MimeType::from",
		"doc": "Get the MIME type for a file based on the file's extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\MimeType",
		"fromLink": "Illuminate/Http/Testing/MimeType.html",
		"link": "Illuminate/Http/Testing/MimeType.html#method_get",
		"name": "Illuminate\\Http\\Testing\\MimeType::get",
		"doc": "Get the MIME type for a given extension or return all mimes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\Testing\\MimeType",
		"fromLink": "Illuminate/Http/Testing/MimeType.html",
		"link": "Illuminate/Http/Testing/MimeType.html#method_search",
		"name": "Illuminate\\Http\\Testing\\MimeType::search",
		"doc": "Search for the extension of a given MIME type."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Http",
		"fromLink": "Illuminate/Http.html",
		"link": "Illuminate/Http/UploadedFile.html",
		"name": "Illuminate\\Http\\UploadedFile",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_fake",
		"name": "Illuminate\\Http\\UploadedFile::fake",
		"doc": "Begin creating a new file fake."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_store",
		"name": "Illuminate\\Http\\UploadedFile::store",
		"doc": "Store the uploaded file on a filesystem disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_storePublicly",
		"name": "Illuminate\\Http\\UploadedFile::storePublicly",
		"doc": "Store the uploaded file on a filesystem disk with public visibility."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_storePubliclyAs",
		"name": "Illuminate\\Http\\UploadedFile::storePubliclyAs",
		"doc": "Store the uploaded file on a filesystem disk with public visibility."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_storeAs",
		"name": "Illuminate\\Http\\UploadedFile::storeAs",
		"doc": "Store the uploaded file on a filesystem disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_get",
		"name": "Illuminate\\Http\\UploadedFile::get",
		"doc": "Get the contents of the uploaded file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_clientExtension",
		"name": "Illuminate\\Http\\UploadedFile::clientExtension",
		"doc": "Get the file's extension supplied by the client."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_createFromBase",
		"name": "Illuminate\\Http\\UploadedFile::createFromBase",
		"doc": "Create a new file instance from a base instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Http\\UploadedFile",
		"fromLink": "Illuminate/Http/UploadedFile.html",
		"link": "Illuminate/Http/UploadedFile.html#method_parseOptions",
		"name": "Illuminate\\Http\\UploadedFile::parseOptions",
		"doc": "Parse and format the given options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Log\\Events",
		"fromLink": "Illuminate/Log/Events.html",
		"link": "Illuminate/Log/Events/MessageLogged.html",
		"name": "Illuminate\\Log\\Events\\MessageLogged",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Events\\MessageLogged",
		"fromLink": "Illuminate/Log/Events/MessageLogged.html",
		"link": "Illuminate/Log/Events/MessageLogged.html#method___construct",
		"name": "Illuminate\\Log\\Events\\MessageLogged::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Log",
		"fromLink": "Illuminate/Log.html",
		"link": "Illuminate/Log/LogManager.html",
		"name": "Illuminate\\Log\\LogManager",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method___construct",
		"name": "Illuminate\\Log\\LogManager::__construct",
		"doc": "Create a new Log manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_stack",
		"name": "Illuminate\\Log\\LogManager::stack",
		"doc": "Create a new, on-demand aggregate logger instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_channel",
		"name": "Illuminate\\Log\\LogManager::channel",
		"doc": "Get a log channel instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_driver",
		"name": "Illuminate\\Log\\LogManager::driver",
		"doc": "Get a log driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_getChannels",
		"name": "Illuminate\\Log\\LogManager::getChannels",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_get",
		"name": "Illuminate\\Log\\LogManager::get",
		"doc": "Attempt to get the log from the local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_tap",
		"name": "Illuminate\\Log\\LogManager::tap",
		"doc": "Apply the configured taps for the logger."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_parseTap",
		"name": "Illuminate\\Log\\LogManager::parseTap",
		"doc": "Parse the given tap class string into a class name and arguments string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createEmergencyLogger",
		"name": "Illuminate\\Log\\LogManager::createEmergencyLogger",
		"doc": "Create an emergency log handler to avoid white screens of death."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_resolve",
		"name": "Illuminate\\Log\\LogManager::resolve",
		"doc": "Resolve the given log instance by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_callCustomCreator",
		"name": "Illuminate\\Log\\LogManager::callCustomCreator",
		"doc": "Call a custom driver creator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createCustomDriver",
		"name": "Illuminate\\Log\\LogManager::createCustomDriver",
		"doc": "Create a custom log driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createStackDriver",
		"name": "Illuminate\\Log\\LogManager::createStackDriver",
		"doc": "Create an aggregate log driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createSingleDriver",
		"name": "Illuminate\\Log\\LogManager::createSingleDriver",
		"doc": "Create an instance of the single file log driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createDailyDriver",
		"name": "Illuminate\\Log\\LogManager::createDailyDriver",
		"doc": "Create an instance of the daily file log driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createSlackDriver",
		"name": "Illuminate\\Log\\LogManager::createSlackDriver",
		"doc": "Create an instance of the Slack log driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createSyslogDriver",
		"name": "Illuminate\\Log\\LogManager::createSyslogDriver",
		"doc": "Create an instance of the syslog log driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createErrorlogDriver",
		"name": "Illuminate\\Log\\LogManager::createErrorlogDriver",
		"doc": "Create an instance of the \"error log\" log driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_createMonologDriver",
		"name": "Illuminate\\Log\\LogManager::createMonologDriver",
		"doc": "Create an instance of any handler available in Monolog."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_prepareHandlers",
		"name": "Illuminate\\Log\\LogManager::prepareHandlers",
		"doc": "Prepare the handlers for usage by Monolog."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_prepareHandler",
		"name": "Illuminate\\Log\\LogManager::prepareHandler",
		"doc": "Prepare the handler for usage by Monolog."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_formatter",
		"name": "Illuminate\\Log\\LogManager::formatter",
		"doc": "Get a Monolog formatter instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_getFallbackChannelName",
		"name": "Illuminate\\Log\\LogManager::getFallbackChannelName",
		"doc": "Get fallback log channel name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_configurationFor",
		"name": "Illuminate\\Log\\LogManager::configurationFor",
		"doc": "Get the log connection configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Log\\LogManager::getDefaultDriver",
		"doc": "Get the default log driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_setDefaultDriver",
		"name": "Illuminate\\Log\\LogManager::setDefaultDriver",
		"doc": "Set the default log driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_extend",
		"name": "Illuminate\\Log\\LogManager::extend",
		"doc": "Register a custom driver creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_forgetChannel",
		"name": "Illuminate\\Log\\LogManager::forgetChannel",
		"doc": "Unset the given channel instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_emergency",
		"name": "Illuminate\\Log\\LogManager::emergency",
		"doc": "System is unusable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_alert",
		"name": "Illuminate\\Log\\LogManager::alert",
		"doc": "Action must be taken immediately."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_critical",
		"name": "Illuminate\\Log\\LogManager::critical",
		"doc": "Critical conditions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_error",
		"name": "Illuminate\\Log\\LogManager::error",
		"doc": "Runtime errors that do not require immediate action but should typically\nbe logged and monitored."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_warning",
		"name": "Illuminate\\Log\\LogManager::warning",
		"doc": "Exceptional occurrences that are not errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_notice",
		"name": "Illuminate\\Log\\LogManager::notice",
		"doc": "Normal but significant events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_info",
		"name": "Illuminate\\Log\\LogManager::info",
		"doc": "Interesting events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_debug",
		"name": "Illuminate\\Log\\LogManager::debug",
		"doc": "Detailed debug information."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method_log",
		"name": "Illuminate\\Log\\LogManager::log",
		"doc": "Logs with an arbitrary level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogManager",
		"fromLink": "Illuminate/Log/LogManager.html",
		"link": "Illuminate/Log/LogManager.html#method___call",
		"name": "Illuminate\\Log\\LogManager::__call",
		"doc": "Dynamically call the default driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Log",
		"fromLink": "Illuminate/Log.html",
		"link": "Illuminate/Log/LogServiceProvider.html",
		"name": "Illuminate\\Log\\LogServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\LogServiceProvider",
		"fromLink": "Illuminate/Log/LogServiceProvider.html",
		"link": "Illuminate/Log/LogServiceProvider.html#method_register",
		"name": "Illuminate\\Log\\LogServiceProvider::register",
		"doc": "Register the service provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Log",
		"fromLink": "Illuminate/Log.html",
		"link": "Illuminate/Log/Logger.html",
		"name": "Illuminate\\Log\\Logger",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method___construct",
		"name": "Illuminate\\Log\\Logger::__construct",
		"doc": "Create a new log writer instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_emergency",
		"name": "Illuminate\\Log\\Logger::emergency",
		"doc": "Log an emergency message to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_alert",
		"name": "Illuminate\\Log\\Logger::alert",
		"doc": "Log an alert message to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_critical",
		"name": "Illuminate\\Log\\Logger::critical",
		"doc": "Log a critical message to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_error",
		"name": "Illuminate\\Log\\Logger::error",
		"doc": "Log an error message to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_warning",
		"name": "Illuminate\\Log\\Logger::warning",
		"doc": "Log a warning message to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_notice",
		"name": "Illuminate\\Log\\Logger::notice",
		"doc": "Log a notice to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_info",
		"name": "Illuminate\\Log\\Logger::info",
		"doc": "Log an informational message to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_debug",
		"name": "Illuminate\\Log\\Logger::debug",
		"doc": "Log a debug message to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_log",
		"name": "Illuminate\\Log\\Logger::log",
		"doc": "Log a message to the logs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_write",
		"name": "Illuminate\\Log\\Logger::write",
		"doc": "Dynamically pass log calls into the writer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_writeLog",
		"name": "Illuminate\\Log\\Logger::writeLog",
		"doc": "Write a message to the log."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_listen",
		"name": "Illuminate\\Log\\Logger::listen",
		"doc": "Register a new callback handler for when a log event is triggered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_fireLogEvent",
		"name": "Illuminate\\Log\\Logger::fireLogEvent",
		"doc": "Fires a log event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_formatMessage",
		"name": "Illuminate\\Log\\Logger::formatMessage",
		"doc": "Format the parameters for the logger."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_getLogger",
		"name": "Illuminate\\Log\\Logger::getLogger",
		"doc": "Get the underlying logger implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_getEventDispatcher",
		"name": "Illuminate\\Log\\Logger::getEventDispatcher",
		"doc": "Get the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method_setEventDispatcher",
		"name": "Illuminate\\Log\\Logger::setEventDispatcher",
		"doc": "Set the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\Logger",
		"fromLink": "Illuminate/Log/Logger.html",
		"link": "Illuminate/Log/Logger.html#method___call",
		"name": "Illuminate\\Log\\Logger::__call",
		"doc": "Dynamically proxy method calls to the underlying logger."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Log",
		"fromLink": "Illuminate/Log.html",
		"link": "Illuminate/Log/ParsesLogConfiguration.html",
		"name": "Illuminate\\Log\\ParsesLogConfiguration",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\ParsesLogConfiguration",
		"fromLink": "Illuminate/Log/ParsesLogConfiguration.html",
		"link": "Illuminate/Log/ParsesLogConfiguration.html#method_getFallbackChannelName",
		"name": "Illuminate\\Log\\ParsesLogConfiguration::getFallbackChannelName",
		"doc": "Get fallback log channel name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\ParsesLogConfiguration",
		"fromLink": "Illuminate/Log/ParsesLogConfiguration.html",
		"link": "Illuminate/Log/ParsesLogConfiguration.html#method_level",
		"name": "Illuminate\\Log\\ParsesLogConfiguration::level",
		"doc": "Parse the string level into a Monolog constant."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Log\\ParsesLogConfiguration",
		"fromLink": "Illuminate/Log/ParsesLogConfiguration.html",
		"link": "Illuminate/Log/ParsesLogConfiguration.html#method_parseChannel",
		"name": "Illuminate\\Log\\ParsesLogConfiguration::parseChannel",
		"doc": "Extract the log channel from the given configuration."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail\\Events",
		"fromLink": "Illuminate/Mail/Events.html",
		"link": "Illuminate/Mail/Events/MessageSending.html",
		"name": "Illuminate\\Mail\\Events\\MessageSending",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Events\\MessageSending",
		"fromLink": "Illuminate/Mail/Events/MessageSending.html",
		"link": "Illuminate/Mail/Events/MessageSending.html#method___construct",
		"name": "Illuminate\\Mail\\Events\\MessageSending::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail\\Events",
		"fromLink": "Illuminate/Mail/Events.html",
		"link": "Illuminate/Mail/Events/MessageSent.html",
		"name": "Illuminate\\Mail\\Events\\MessageSent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Events\\MessageSent",
		"fromLink": "Illuminate/Mail/Events/MessageSent.html",
		"link": "Illuminate/Mail/Events/MessageSent.html#method___construct",
		"name": "Illuminate\\Mail\\Events\\MessageSent::__construct",
		"doc": "Create a new event instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Events\\MessageSent",
		"fromLink": "Illuminate/Mail/Events/MessageSent.html",
		"link": "Illuminate/Mail/Events/MessageSent.html#method___serialize",
		"name": "Illuminate\\Mail\\Events\\MessageSent::__serialize",
		"doc": "Get the serializable representation of the object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Events\\MessageSent",
		"fromLink": "Illuminate/Mail/Events/MessageSent.html",
		"link": "Illuminate/Mail/Events/MessageSent.html#method___unserialize",
		"name": "Illuminate\\Mail\\Events\\MessageSent::__unserialize",
		"doc": "Marshal the object from its serialized data."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail",
		"fromLink": "Illuminate/Mail.html",
		"link": "Illuminate/Mail/MailManager.html",
		"name": "Illuminate\\Mail\\MailManager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method___construct",
		"name": "Illuminate\\Mail\\MailManager::__construct",
		"doc": "Create a new Mail manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_mailer",
		"name": "Illuminate\\Mail\\MailManager::mailer",
		"doc": "Get a mailer instance by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_driver",
		"name": "Illuminate\\Mail\\MailManager::driver",
		"doc": "Get a mailer driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_get",
		"name": "Illuminate\\Mail\\MailManager::get",
		"doc": "Attempt to get the mailer from the local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_resolve",
		"name": "Illuminate\\Mail\\MailManager::resolve",
		"doc": "Resolve the given mailer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createSwiftMailer",
		"name": "Illuminate\\Mail\\MailManager::createSwiftMailer",
		"doc": "Create the SwiftMailer instance for the given configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createTransport",
		"name": "Illuminate\\Mail\\MailManager::createTransport",
		"doc": "Create a new transport instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createSmtpTransport",
		"name": "Illuminate\\Mail\\MailManager::createSmtpTransport",
		"doc": "Create an instance of the SMTP Swift Transport driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_configureSmtpTransport",
		"name": "Illuminate\\Mail\\MailManager::configureSmtpTransport",
		"doc": "Configure the additional SMTP driver options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createSendmailTransport",
		"name": "Illuminate\\Mail\\MailManager::createSendmailTransport",
		"doc": "Create an instance of the Sendmail Swift Transport driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createSesTransport",
		"name": "Illuminate\\Mail\\MailManager::createSesTransport",
		"doc": "Create an instance of the Amazon SES Swift Transport driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_addSesCredentials",
		"name": "Illuminate\\Mail\\MailManager::addSesCredentials",
		"doc": "Add the SES credentials to the configuration array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createMailTransport",
		"name": "Illuminate\\Mail\\MailManager::createMailTransport",
		"doc": "Create an instance of the Mail Swift Transport driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createMailgunTransport",
		"name": "Illuminate\\Mail\\MailManager::createMailgunTransport",
		"doc": "Create an instance of the Mailgun Swift Transport driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createPostmarkTransport",
		"name": "Illuminate\\Mail\\MailManager::createPostmarkTransport",
		"doc": "Create an instance of the Postmark Swift Transport driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createLogTransport",
		"name": "Illuminate\\Mail\\MailManager::createLogTransport",
		"doc": "Create an instance of the Log Swift Transport driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_createArrayTransport",
		"name": "Illuminate\\Mail\\MailManager::createArrayTransport",
		"doc": "Create an instance of the Array Swift Transport Driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_guzzle",
		"name": "Illuminate\\Mail\\MailManager::guzzle",
		"doc": "Get a fresh Guzzle HTTP client instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_setGlobalAddress",
		"name": "Illuminate\\Mail\\MailManager::setGlobalAddress",
		"doc": "Set a global address on the mailer by type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_getConfig",
		"name": "Illuminate\\Mail\\MailManager::getConfig",
		"doc": "Get the mail connection configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Mail\\MailManager::getDefaultDriver",
		"doc": "Get the default mail driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_setDefaultDriver",
		"name": "Illuminate\\Mail\\MailManager::setDefaultDriver",
		"doc": "Set the default mail driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_purge",
		"name": "Illuminate\\Mail\\MailManager::purge",
		"doc": "Disconnect the given mailer and remove from local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method_extend",
		"name": "Illuminate\\Mail\\MailManager::extend",
		"doc": "Register a custom transport creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailManager",
		"fromLink": "Illuminate/Mail/MailManager.html",
		"link": "Illuminate/Mail/MailManager.html#method___call",
		"name": "Illuminate\\Mail\\MailManager::__call",
		"doc": "Dynamically call the default driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail",
		"fromLink": "Illuminate/Mail.html",
		"link": "Illuminate/Mail/MailServiceProvider.html",
		"name": "Illuminate\\Mail\\MailServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailServiceProvider",
		"fromLink": "Illuminate/Mail/MailServiceProvider.html",
		"link": "Illuminate/Mail/MailServiceProvider.html#method_register",
		"name": "Illuminate\\Mail\\MailServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailServiceProvider",
		"fromLink": "Illuminate/Mail/MailServiceProvider.html",
		"link": "Illuminate/Mail/MailServiceProvider.html#method_registerIlluminateMailer",
		"name": "Illuminate\\Mail\\MailServiceProvider::registerIlluminateMailer",
		"doc": "Register the Illuminate mailer instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailServiceProvider",
		"fromLink": "Illuminate/Mail/MailServiceProvider.html",
		"link": "Illuminate/Mail/MailServiceProvider.html#method_registerMarkdownRenderer",
		"name": "Illuminate\\Mail\\MailServiceProvider::registerMarkdownRenderer",
		"doc": "Register the Markdown renderer instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\MailServiceProvider",
		"fromLink": "Illuminate/Mail/MailServiceProvider.html",
		"link": "Illuminate/Mail/MailServiceProvider.html#method_provides",
		"name": "Illuminate\\Mail\\MailServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail",
		"fromLink": "Illuminate/Mail.html",
		"link": "Illuminate/Mail/Mailable.html",
		"name": "Illuminate\\Mail\\Mailable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_send",
		"name": "Illuminate\\Mail\\Mailable::send",
		"doc": "Send the message using the given mailer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_queue",
		"name": "Illuminate\\Mail\\Mailable::queue",
		"doc": "Queue the message for sending."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_later",
		"name": "Illuminate\\Mail\\Mailable::later",
		"doc": "Deliver the queued message after the given delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_newQueuedJob",
		"name": "Illuminate\\Mail\\Mailable::newQueuedJob",
		"doc": "Make the queued mailable job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_render",
		"name": "Illuminate\\Mail\\Mailable::render",
		"doc": "Render the mailable into a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildView",
		"name": "Illuminate\\Mail\\Mailable::buildView",
		"doc": "Build the view for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildMarkdownView",
		"name": "Illuminate\\Mail\\Mailable::buildMarkdownView",
		"doc": "Build the Markdown view for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildViewData",
		"name": "Illuminate\\Mail\\Mailable::buildViewData",
		"doc": "Build the view data for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildMarkdownText",
		"name": "Illuminate\\Mail\\Mailable::buildMarkdownText",
		"doc": "Build the text view for a Markdown message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildFrom",
		"name": "Illuminate\\Mail\\Mailable::buildFrom",
		"doc": "Add the sender to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildRecipients",
		"name": "Illuminate\\Mail\\Mailable::buildRecipients",
		"doc": "Add all of the recipients to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildSubject",
		"name": "Illuminate\\Mail\\Mailable::buildSubject",
		"doc": "Set the subject for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildAttachments",
		"name": "Illuminate\\Mail\\Mailable::buildAttachments",
		"doc": "Add all of the attachments to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildDiskAttachments",
		"name": "Illuminate\\Mail\\Mailable::buildDiskAttachments",
		"doc": "Add all of the disk attachments to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_runCallbacks",
		"name": "Illuminate\\Mail\\Mailable::runCallbacks",
		"doc": "Run the callbacks for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_locale",
		"name": "Illuminate\\Mail\\Mailable::locale",
		"doc": "Set the locale of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_priority",
		"name": "Illuminate\\Mail\\Mailable::priority",
		"doc": "Set the priority of this message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_from",
		"name": "Illuminate\\Mail\\Mailable::from",
		"doc": "Set the sender of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_hasFrom",
		"name": "Illuminate\\Mail\\Mailable::hasFrom",
		"doc": "Determine if the given recipient is set on the mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_to",
		"name": "Illuminate\\Mail\\Mailable::to",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_hasTo",
		"name": "Illuminate\\Mail\\Mailable::hasTo",
		"doc": "Determine if the given recipient is set on the mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_cc",
		"name": "Illuminate\\Mail\\Mailable::cc",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_hasCc",
		"name": "Illuminate\\Mail\\Mailable::hasCc",
		"doc": "Determine if the given recipient is set on the mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_bcc",
		"name": "Illuminate\\Mail\\Mailable::bcc",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_hasBcc",
		"name": "Illuminate\\Mail\\Mailable::hasBcc",
		"doc": "Determine if the given recipient is set on the mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_replyTo",
		"name": "Illuminate\\Mail\\Mailable::replyTo",
		"doc": "Set the \"reply to\" address of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_hasReplyTo",
		"name": "Illuminate\\Mail\\Mailable::hasReplyTo",
		"doc": "Determine if the given replyTo is set on the mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_setAddress",
		"name": "Illuminate\\Mail\\Mailable::setAddress",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_addressesToArray",
		"name": "Illuminate\\Mail\\Mailable::addressesToArray",
		"doc": "Convert the given recipient arguments to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_normalizeRecipient",
		"name": "Illuminate\\Mail\\Mailable::normalizeRecipient",
		"doc": "Convert the given recipient into an object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_hasRecipient",
		"name": "Illuminate\\Mail\\Mailable::hasRecipient",
		"doc": "Determine if the given recipient is set on the mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_subject",
		"name": "Illuminate\\Mail\\Mailable::subject",
		"doc": "Set the subject of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_markdown",
		"name": "Illuminate\\Mail\\Mailable::markdown",
		"doc": "Set the Markdown template for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_view",
		"name": "Illuminate\\Mail\\Mailable::view",
		"doc": "Set the view and view data for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_html",
		"name": "Illuminate\\Mail\\Mailable::html",
		"doc": "Set the rendered HTML content for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_text",
		"name": "Illuminate\\Mail\\Mailable::text",
		"doc": "Set the plain text view for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_with",
		"name": "Illuminate\\Mail\\Mailable::with",
		"doc": "Set the view data for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_attach",
		"name": "Illuminate\\Mail\\Mailable::attach",
		"doc": "Attach a file to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_attachFromStorage",
		"name": "Illuminate\\Mail\\Mailable::attachFromStorage",
		"doc": "Attach a file to the message from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_attachFromStorageDisk",
		"name": "Illuminate\\Mail\\Mailable::attachFromStorageDisk",
		"doc": "Attach a file to the message from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_attachData",
		"name": "Illuminate\\Mail\\Mailable::attachData",
		"doc": "Attach in-memory data as an attachment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_mailer",
		"name": "Illuminate\\Mail\\Mailable::mailer",
		"doc": "Set the name of the mailer that should send the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_withSwiftMessage",
		"name": "Illuminate\\Mail\\Mailable::withSwiftMessage",
		"doc": "Register a callback to be called with the Swift message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_buildViewDataUsing",
		"name": "Illuminate\\Mail\\Mailable::buildViewDataUsing",
		"doc": "Register a callback to be called while building the view data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method_when",
		"name": "Illuminate\\Mail\\Mailable::when",
		"doc": "Apply the callback's message changes if the given \"value\" is true."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailable",
		"fromLink": "Illuminate/Mail/Mailable.html",
		"link": "Illuminate/Mail/Mailable.html#method___call",
		"name": "Illuminate\\Mail\\Mailable::__call",
		"doc": "Dynamically bind parameters to the message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail",
		"fromLink": "Illuminate/Mail.html",
		"link": "Illuminate/Mail/Mailer.html",
		"name": "Illuminate\\Mail\\Mailer",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method___construct",
		"name": "Illuminate\\Mail\\Mailer::__construct",
		"doc": "Create a new Mailer instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_alwaysFrom",
		"name": "Illuminate\\Mail\\Mailer::alwaysFrom",
		"doc": "Set the global from address and name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_alwaysReplyTo",
		"name": "Illuminate\\Mail\\Mailer::alwaysReplyTo",
		"doc": "Set the global reply-to address and name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_alwaysReturnPath",
		"name": "Illuminate\\Mail\\Mailer::alwaysReturnPath",
		"doc": "Set the global return path address."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_alwaysTo",
		"name": "Illuminate\\Mail\\Mailer::alwaysTo",
		"doc": "Set the global to address and name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_to",
		"name": "Illuminate\\Mail\\Mailer::to",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_cc",
		"name": "Illuminate\\Mail\\Mailer::cc",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_bcc",
		"name": "Illuminate\\Mail\\Mailer::bcc",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_html",
		"name": "Illuminate\\Mail\\Mailer::html",
		"doc": "Send a new message with only an HTML part."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_raw",
		"name": "Illuminate\\Mail\\Mailer::raw",
		"doc": "Send a new message with only a raw text part."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_plain",
		"name": "Illuminate\\Mail\\Mailer::plain",
		"doc": "Send a new message with only a plain part."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_render",
		"name": "Illuminate\\Mail\\Mailer::render",
		"doc": "Render the given message as a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_send",
		"name": "Illuminate\\Mail\\Mailer::send",
		"doc": "Send a new message using a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_sendMailable",
		"name": "Illuminate\\Mail\\Mailer::sendMailable",
		"doc": "Send the given mailable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_parseView",
		"name": "Illuminate\\Mail\\Mailer::parseView",
		"doc": "Parse the given view name or array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_addContent",
		"name": "Illuminate\\Mail\\Mailer::addContent",
		"doc": "Add the content to a given message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_renderView",
		"name": "Illuminate\\Mail\\Mailer::renderView",
		"doc": "Render the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_setGlobalToAndRemoveCcAndBcc",
		"name": "Illuminate\\Mail\\Mailer::setGlobalToAndRemoveCcAndBcc",
		"doc": "Set the global \"to\" address on the given message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_queue",
		"name": "Illuminate\\Mail\\Mailer::queue",
		"doc": "Queue a new e-mail message for sending."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_onQueue",
		"name": "Illuminate\\Mail\\Mailer::onQueue",
		"doc": "Queue a new e-mail message for sending on the given queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_queueOn",
		"name": "Illuminate\\Mail\\Mailer::queueOn",
		"doc": "Queue a new e-mail message for sending on the given queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_later",
		"name": "Illuminate\\Mail\\Mailer::later",
		"doc": "Queue a new e-mail message for sending after (n) seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_laterOn",
		"name": "Illuminate\\Mail\\Mailer::laterOn",
		"doc": "Queue a new e-mail message for sending after (n) seconds on the given queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_createMessage",
		"name": "Illuminate\\Mail\\Mailer::createMessage",
		"doc": "Create a new message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_sendSwiftMessage",
		"name": "Illuminate\\Mail\\Mailer::sendSwiftMessage",
		"doc": "Send a Swift Message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_shouldSendMessage",
		"name": "Illuminate\\Mail\\Mailer::shouldSendMessage",
		"doc": "Determines if the message can be sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_dispatchSentEvent",
		"name": "Illuminate\\Mail\\Mailer::dispatchSentEvent",
		"doc": "Dispatch the message sent event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_forceReconnection",
		"name": "Illuminate\\Mail\\Mailer::forceReconnection",
		"doc": "Force the transport to re-connect."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_failures",
		"name": "Illuminate\\Mail\\Mailer::failures",
		"doc": "Get the array of failed recipients."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_getSwiftMailer",
		"name": "Illuminate\\Mail\\Mailer::getSwiftMailer",
		"doc": "Get the Swift Mailer instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_getViewFactory",
		"name": "Illuminate\\Mail\\Mailer::getViewFactory",
		"doc": "Get the view factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_setSwiftMailer",
		"name": "Illuminate\\Mail\\Mailer::setSwiftMailer",
		"doc": "Set the Swift Mailer instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Mailer",
		"fromLink": "Illuminate/Mail/Mailer.html",
		"link": "Illuminate/Mail/Mailer.html#method_setQueue",
		"name": "Illuminate\\Mail\\Mailer::setQueue",
		"doc": "Set the queue manager instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail",
		"fromLink": "Illuminate/Mail.html",
		"link": "Illuminate/Mail/Markdown.html",
		"name": "Illuminate\\Mail\\Markdown",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method___construct",
		"name": "Illuminate\\Mail\\Markdown::__construct",
		"doc": "Create a new Markdown renderer instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_render",
		"name": "Illuminate\\Mail\\Markdown::render",
		"doc": "Render the Markdown template into HTML."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_renderText",
		"name": "Illuminate\\Mail\\Markdown::renderText",
		"doc": "Render the Markdown template into text."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_parse",
		"name": "Illuminate\\Mail\\Markdown::parse",
		"doc": "Parse the given Markdown text into HTML."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_htmlComponentPaths",
		"name": "Illuminate\\Mail\\Markdown::htmlComponentPaths",
		"doc": "Get the HTML component paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_textComponentPaths",
		"name": "Illuminate\\Mail\\Markdown::textComponentPaths",
		"doc": "Get the text component paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_componentPaths",
		"name": "Illuminate\\Mail\\Markdown::componentPaths",
		"doc": "Get the component paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_loadComponentsFrom",
		"name": "Illuminate\\Mail\\Markdown::loadComponentsFrom",
		"doc": "Register new mail component paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_theme",
		"name": "Illuminate\\Mail\\Markdown::theme",
		"doc": "Set the default theme to be used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Markdown",
		"fromLink": "Illuminate/Mail/Markdown.html",
		"link": "Illuminate/Mail/Markdown.html#method_getTheme",
		"name": "Illuminate\\Mail\\Markdown::getTheme",
		"doc": "Get the theme currently being used by the renderer."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail",
		"fromLink": "Illuminate/Mail.html",
		"link": "Illuminate/Mail/Message.html",
		"name": "Illuminate\\Mail\\Message",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method___construct",
		"name": "Illuminate\\Mail\\Message::__construct",
		"doc": "Create a new message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_from",
		"name": "Illuminate\\Mail\\Message::from",
		"doc": "Add a \"from\" address to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_sender",
		"name": "Illuminate\\Mail\\Message::sender",
		"doc": "Set the \"sender\" of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_returnPath",
		"name": "Illuminate\\Mail\\Message::returnPath",
		"doc": "Set the \"return path\" of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_to",
		"name": "Illuminate\\Mail\\Message::to",
		"doc": "Add a recipient to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_cc",
		"name": "Illuminate\\Mail\\Message::cc",
		"doc": "Add a carbon copy to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_bcc",
		"name": "Illuminate\\Mail\\Message::bcc",
		"doc": "Add a blind carbon copy to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_replyTo",
		"name": "Illuminate\\Mail\\Message::replyTo",
		"doc": "Add a reply to address to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_addAddresses",
		"name": "Illuminate\\Mail\\Message::addAddresses",
		"doc": "Add a recipient to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_subject",
		"name": "Illuminate\\Mail\\Message::subject",
		"doc": "Set the subject of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_priority",
		"name": "Illuminate\\Mail\\Message::priority",
		"doc": "Set the message priority level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_attach",
		"name": "Illuminate\\Mail\\Message::attach",
		"doc": "Attach a file to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_createAttachmentFromPath",
		"name": "Illuminate\\Mail\\Message::createAttachmentFromPath",
		"doc": "Create a Swift Attachment instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_attachData",
		"name": "Illuminate\\Mail\\Message::attachData",
		"doc": "Attach in-memory data as an attachment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_createAttachmentFromData",
		"name": "Illuminate\\Mail\\Message::createAttachmentFromData",
		"doc": "Create a Swift Attachment instance from data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_embed",
		"name": "Illuminate\\Mail\\Message::embed",
		"doc": "Embed a file in the message and get the CID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_embedData",
		"name": "Illuminate\\Mail\\Message::embedData",
		"doc": "Embed in-memory data in the message and get the CID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_prepAttachment",
		"name": "Illuminate\\Mail\\Message::prepAttachment",
		"doc": "Prepare and attach the given attachment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method_getSwiftMessage",
		"name": "Illuminate\\Mail\\Message::getSwiftMessage",
		"doc": "Get the underlying Swift Message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Message",
		"fromLink": "Illuminate/Mail/Message.html",
		"link": "Illuminate/Mail/Message.html#method___call",
		"name": "Illuminate\\Mail\\Message::__call",
		"doc": "Dynamically pass missing methods to the Swift instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail",
		"fromLink": "Illuminate/Mail.html",
		"link": "Illuminate/Mail/PendingMail.html",
		"name": "Illuminate\\Mail\\PendingMail",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method___construct",
		"name": "Illuminate\\Mail\\PendingMail::__construct",
		"doc": "Create a new mailable mailer instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method_locale",
		"name": "Illuminate\\Mail\\PendingMail::locale",
		"doc": "Set the locale of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method_to",
		"name": "Illuminate\\Mail\\PendingMail::to",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method_cc",
		"name": "Illuminate\\Mail\\PendingMail::cc",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method_bcc",
		"name": "Illuminate\\Mail\\PendingMail::bcc",
		"doc": "Set the recipients of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method_send",
		"name": "Illuminate\\Mail\\PendingMail::send",
		"doc": "Send a new mailable message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method_queue",
		"name": "Illuminate\\Mail\\PendingMail::queue",
		"doc": "Push the given mailable onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method_later",
		"name": "Illuminate\\Mail\\PendingMail::later",
		"doc": "Deliver the queued message after the given delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\PendingMail",
		"fromLink": "Illuminate/Mail/PendingMail.html",
		"link": "Illuminate/Mail/PendingMail.html#method_fill",
		"name": "Illuminate\\Mail\\PendingMail::fill",
		"doc": "Populate the mailable with the addresses."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail",
		"fromLink": "Illuminate/Mail.html",
		"link": "Illuminate/Mail/SendQueuedMailable.html",
		"name": "Illuminate\\Mail\\SendQueuedMailable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\SendQueuedMailable",
		"fromLink": "Illuminate/Mail/SendQueuedMailable.html",
		"link": "Illuminate/Mail/SendQueuedMailable.html#method___construct",
		"name": "Illuminate\\Mail\\SendQueuedMailable::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\SendQueuedMailable",
		"fromLink": "Illuminate/Mail/SendQueuedMailable.html",
		"link": "Illuminate/Mail/SendQueuedMailable.html#method_handle",
		"name": "Illuminate\\Mail\\SendQueuedMailable::handle",
		"doc": "Handle the queued job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\SendQueuedMailable",
		"fromLink": "Illuminate/Mail/SendQueuedMailable.html",
		"link": "Illuminate/Mail/SendQueuedMailable.html#method_displayName",
		"name": "Illuminate\\Mail\\SendQueuedMailable::displayName",
		"doc": "Get the display name for the queued job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\SendQueuedMailable",
		"fromLink": "Illuminate/Mail/SendQueuedMailable.html",
		"link": "Illuminate/Mail/SendQueuedMailable.html#method_failed",
		"name": "Illuminate\\Mail\\SendQueuedMailable::failed",
		"doc": "Call the failed method on the mailable instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\SendQueuedMailable",
		"fromLink": "Illuminate/Mail/SendQueuedMailable.html",
		"link": "Illuminate/Mail/SendQueuedMailable.html#method_backoff",
		"name": "Illuminate\\Mail\\SendQueuedMailable::backoff",
		"doc": "Get number of seconds before a released mailable will be available."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\SendQueuedMailable",
		"fromLink": "Illuminate/Mail/SendQueuedMailable.html",
		"link": "Illuminate/Mail/SendQueuedMailable.html#method___clone",
		"name": "Illuminate\\Mail\\SendQueuedMailable::__clone",
		"doc": "Prepare the instance for cloning."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail\\Transport",
		"fromLink": "Illuminate/Mail/Transport.html",
		"link": "Illuminate/Mail/Transport/ArrayTransport.html",
		"name": "Illuminate\\Mail\\Transport\\ArrayTransport",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\ArrayTransport",
		"fromLink": "Illuminate/Mail/Transport/ArrayTransport.html",
		"link": "Illuminate/Mail/Transport/ArrayTransport.html#method___construct",
		"name": "Illuminate\\Mail\\Transport\\ArrayTransport::__construct",
		"doc": "Create a new array transport instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\ArrayTransport",
		"fromLink": "Illuminate/Mail/Transport/ArrayTransport.html",
		"link": "Illuminate/Mail/Transport/ArrayTransport.html#method_send",
		"name": "Illuminate\\Mail\\Transport\\ArrayTransport::send",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\ArrayTransport",
		"fromLink": "Illuminate/Mail/Transport/ArrayTransport.html",
		"link": "Illuminate/Mail/Transport/ArrayTransport.html#method_messages",
		"name": "Illuminate\\Mail\\Transport\\ArrayTransport::messages",
		"doc": "Retrieve the collection of messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\ArrayTransport",
		"fromLink": "Illuminate/Mail/Transport/ArrayTransport.html",
		"link": "Illuminate/Mail/Transport/ArrayTransport.html#method_flush",
		"name": "Illuminate\\Mail\\Transport\\ArrayTransport::flush",
		"doc": "Clear all of the messages from the local collection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail\\Transport",
		"fromLink": "Illuminate/Mail/Transport.html",
		"link": "Illuminate/Mail/Transport/LogTransport.html",
		"name": "Illuminate\\Mail\\Transport\\LogTransport",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\LogTransport",
		"fromLink": "Illuminate/Mail/Transport/LogTransport.html",
		"link": "Illuminate/Mail/Transport/LogTransport.html#method___construct",
		"name": "Illuminate\\Mail\\Transport\\LogTransport::__construct",
		"doc": "Create a new log transport instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\LogTransport",
		"fromLink": "Illuminate/Mail/Transport/LogTransport.html",
		"link": "Illuminate/Mail/Transport/LogTransport.html#method_send",
		"name": "Illuminate\\Mail\\Transport\\LogTransport::send",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\LogTransport",
		"fromLink": "Illuminate/Mail/Transport/LogTransport.html",
		"link": "Illuminate/Mail/Transport/LogTransport.html#method_getMimeEntityString",
		"name": "Illuminate\\Mail\\Transport\\LogTransport::getMimeEntityString",
		"doc": "Get a loggable string out of a Swiftmailer entity."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\LogTransport",
		"fromLink": "Illuminate/Mail/Transport/LogTransport.html",
		"link": "Illuminate/Mail/Transport/LogTransport.html#method_logger",
		"name": "Illuminate\\Mail\\Transport\\LogTransport::logger",
		"doc": "Get the logger for the LogTransport instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail\\Transport",
		"fromLink": "Illuminate/Mail/Transport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method___construct",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::__construct",
		"doc": "Create a new Mailgun transport instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_send",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::send",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_payload",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::payload",
		"doc": "Get the HTTP payload for sending the Mailgun message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_getTo",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::getTo",
		"doc": "Get the \"to\" payload field for the API request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_allContacts",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::allContacts",
		"doc": "Get all of the contacts for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_getMessageId",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::getMessageId",
		"doc": "Get the message ID from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_getKey",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::getKey",
		"doc": "Get the API key being used by the transport."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_setKey",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::setKey",
		"doc": "Set the API key being used by the transport."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_getDomain",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::getDomain",
		"doc": "Get the domain being used by the transport."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_setDomain",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::setDomain",
		"doc": "Set the domain being used by the transport."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_getEndpoint",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::getEndpoint",
		"doc": "Get the API endpoint being used by the transport."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\MailgunTransport",
		"fromLink": "Illuminate/Mail/Transport/MailgunTransport.html",
		"link": "Illuminate/Mail/Transport/MailgunTransport.html#method_setEndpoint",
		"name": "Illuminate\\Mail\\Transport\\MailgunTransport::setEndpoint",
		"doc": "Set the API endpoint being used by the transport."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail\\Transport",
		"fromLink": "Illuminate/Mail/Transport.html",
		"link": "Illuminate/Mail/Transport/SesTransport.html",
		"name": "Illuminate\\Mail\\Transport\\SesTransport",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\SesTransport",
		"fromLink": "Illuminate/Mail/Transport/SesTransport.html",
		"link": "Illuminate/Mail/Transport/SesTransport.html#method___construct",
		"name": "Illuminate\\Mail\\Transport\\SesTransport::__construct",
		"doc": "Create a new SES transport instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\SesTransport",
		"fromLink": "Illuminate/Mail/Transport/SesTransport.html",
		"link": "Illuminate/Mail/Transport/SesTransport.html#method_send",
		"name": "Illuminate\\Mail\\Transport\\SesTransport::send",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\SesTransport",
		"fromLink": "Illuminate/Mail/Transport/SesTransport.html",
		"link": "Illuminate/Mail/Transport/SesTransport.html#method_ses",
		"name": "Illuminate\\Mail\\Transport\\SesTransport::ses",
		"doc": "Get the Amazon SES client for the SesTransport instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\SesTransport",
		"fromLink": "Illuminate/Mail/Transport/SesTransport.html",
		"link": "Illuminate/Mail/Transport/SesTransport.html#method_getOptions",
		"name": "Illuminate\\Mail\\Transport\\SesTransport::getOptions",
		"doc": "Get the transmission options being used by the transport."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\SesTransport",
		"fromLink": "Illuminate/Mail/Transport/SesTransport.html",
		"link": "Illuminate/Mail/Transport/SesTransport.html#method_setOptions",
		"name": "Illuminate\\Mail\\Transport\\SesTransport::setOptions",
		"doc": "Set the transmission options being used by the transport."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Mail\\Transport",
		"fromLink": "Illuminate/Mail/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html",
		"name": "Illuminate\\Mail\\Transport\\Transport",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\Transport",
		"fromLink": "Illuminate/Mail/Transport/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html#method_isStarted",
		"name": "Illuminate\\Mail\\Transport\\Transport::isStarted",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\Transport",
		"fromLink": "Illuminate/Mail/Transport/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html#method_start",
		"name": "Illuminate\\Mail\\Transport\\Transport::start",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\Transport",
		"fromLink": "Illuminate/Mail/Transport/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html#method_stop",
		"name": "Illuminate\\Mail\\Transport\\Transport::stop",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\Transport",
		"fromLink": "Illuminate/Mail/Transport/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html#method_ping",
		"name": "Illuminate\\Mail\\Transport\\Transport::ping",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\Transport",
		"fromLink": "Illuminate/Mail/Transport/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html#method_registerPlugin",
		"name": "Illuminate\\Mail\\Transport\\Transport::registerPlugin",
		"doc": "Register a plug-in with the transport."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\Transport",
		"fromLink": "Illuminate/Mail/Transport/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html#method_beforeSendPerformed",
		"name": "Illuminate\\Mail\\Transport\\Transport::beforeSendPerformed",
		"doc": "Iterate through registered plugins and execute plugins' methods."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\Transport",
		"fromLink": "Illuminate/Mail/Transport/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html#method_sendPerformed",
		"name": "Illuminate\\Mail\\Transport\\Transport::sendPerformed",
		"doc": "Iterate through registered plugins and execute plugins' methods."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Mail\\Transport\\Transport",
		"fromLink": "Illuminate/Mail/Transport/Transport.html",
		"link": "Illuminate/Mail/Transport/Transport.html#method_numberOfRecipients",
		"name": "Illuminate\\Mail\\Transport\\Transport::numberOfRecipients",
		"doc": "Get the number of recipients."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/Action.html",
		"name": "Illuminate\\Notifications\\Action",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Action",
		"fromLink": "Illuminate/Notifications/Action.html",
		"link": "Illuminate/Notifications/Action.html#method___construct",
		"name": "Illuminate\\Notifications\\Action::__construct",
		"doc": "Create a new action instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/AnonymousNotifiable.html",
		"name": "Illuminate\\Notifications\\AnonymousNotifiable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\AnonymousNotifiable",
		"fromLink": "Illuminate/Notifications/AnonymousNotifiable.html",
		"link": "Illuminate/Notifications/AnonymousNotifiable.html#method_route",
		"name": "Illuminate\\Notifications\\AnonymousNotifiable::route",
		"doc": "Add routing information to the target."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\AnonymousNotifiable",
		"fromLink": "Illuminate/Notifications/AnonymousNotifiable.html",
		"link": "Illuminate/Notifications/AnonymousNotifiable.html#method_notify",
		"name": "Illuminate\\Notifications\\AnonymousNotifiable::notify",
		"doc": "Send the given notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\AnonymousNotifiable",
		"fromLink": "Illuminate/Notifications/AnonymousNotifiable.html",
		"link": "Illuminate/Notifications/AnonymousNotifiable.html#method_notifyNow",
		"name": "Illuminate\\Notifications\\AnonymousNotifiable::notifyNow",
		"doc": "Send the given notification immediately."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\AnonymousNotifiable",
		"fromLink": "Illuminate/Notifications/AnonymousNotifiable.html",
		"link": "Illuminate/Notifications/AnonymousNotifiable.html#method_routeNotificationFor",
		"name": "Illuminate\\Notifications\\AnonymousNotifiable::routeNotificationFor",
		"doc": "Get the notification routing information for the given driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\AnonymousNotifiable",
		"fromLink": "Illuminate/Notifications/AnonymousNotifiable.html",
		"link": "Illuminate/Notifications/AnonymousNotifiable.html#method_getKey",
		"name": "Illuminate\\Notifications\\AnonymousNotifiable::getKey",
		"doc": "Get the value of the notifiable's primary key."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/ChannelManager.html",
		"name": "Illuminate\\Notifications\\ChannelManager",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_send",
		"name": "Illuminate\\Notifications\\ChannelManager::send",
		"doc": "Send the given notification to the given notifiable entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_sendNow",
		"name": "Illuminate\\Notifications\\ChannelManager::sendNow",
		"doc": "Send the given notification immediately."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_channel",
		"name": "Illuminate\\Notifications\\ChannelManager::channel",
		"doc": "Get a channel instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_createDatabaseDriver",
		"name": "Illuminate\\Notifications\\ChannelManager::createDatabaseDriver",
		"doc": "Create an instance of the database driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_createBroadcastDriver",
		"name": "Illuminate\\Notifications\\ChannelManager::createBroadcastDriver",
		"doc": "Create an instance of the broadcast driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_createMailDriver",
		"name": "Illuminate\\Notifications\\ChannelManager::createMailDriver",
		"doc": "Create an instance of the mail driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_createDriver",
		"name": "Illuminate\\Notifications\\ChannelManager::createDriver",
		"doc": "Create a new driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Notifications\\ChannelManager::getDefaultDriver",
		"doc": "Get the default channel driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_deliversVia",
		"name": "Illuminate\\Notifications\\ChannelManager::deliversVia",
		"doc": "Get the default channel driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_deliverVia",
		"name": "Illuminate\\Notifications\\ChannelManager::deliverVia",
		"doc": "Set the default channel driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\ChannelManager",
		"fromLink": "Illuminate/Notifications/ChannelManager.html",
		"link": "Illuminate/Notifications/ChannelManager.html#method_locale",
		"name": "Illuminate\\Notifications\\ChannelManager::locale",
		"doc": "Set the locale of notifications."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Channels",
		"fromLink": "Illuminate/Notifications/Channels.html",
		"link": "Illuminate/Notifications/Channels/BroadcastChannel.html",
		"name": "Illuminate\\Notifications\\Channels\\BroadcastChannel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\BroadcastChannel",
		"fromLink": "Illuminate/Notifications/Channels/BroadcastChannel.html",
		"link": "Illuminate/Notifications/Channels/BroadcastChannel.html#method___construct",
		"name": "Illuminate\\Notifications\\Channels\\BroadcastChannel::__construct",
		"doc": "Create a new database channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\BroadcastChannel",
		"fromLink": "Illuminate/Notifications/Channels/BroadcastChannel.html",
		"link": "Illuminate/Notifications/Channels/BroadcastChannel.html#method_send",
		"name": "Illuminate\\Notifications\\Channels\\BroadcastChannel::send",
		"doc": "Send the given notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\BroadcastChannel",
		"fromLink": "Illuminate/Notifications/Channels/BroadcastChannel.html",
		"link": "Illuminate/Notifications/Channels/BroadcastChannel.html#method_getData",
		"name": "Illuminate\\Notifications\\Channels\\BroadcastChannel::getData",
		"doc": "Get the data for the notification."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Channels",
		"fromLink": "Illuminate/Notifications/Channels.html",
		"link": "Illuminate/Notifications/Channels/DatabaseChannel.html",
		"name": "Illuminate\\Notifications\\Channels\\DatabaseChannel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\DatabaseChannel",
		"fromLink": "Illuminate/Notifications/Channels/DatabaseChannel.html",
		"link": "Illuminate/Notifications/Channels/DatabaseChannel.html#method_send",
		"name": "Illuminate\\Notifications\\Channels\\DatabaseChannel::send",
		"doc": "Send the given notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\DatabaseChannel",
		"fromLink": "Illuminate/Notifications/Channels/DatabaseChannel.html",
		"link": "Illuminate/Notifications/Channels/DatabaseChannel.html#method_getData",
		"name": "Illuminate\\Notifications\\Channels\\DatabaseChannel::getData",
		"doc": "Get the data for the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\DatabaseChannel",
		"fromLink": "Illuminate/Notifications/Channels/DatabaseChannel.html",
		"link": "Illuminate/Notifications/Channels/DatabaseChannel.html#method_buildPayload",
		"name": "Illuminate\\Notifications\\Channels\\DatabaseChannel::buildPayload",
		"doc": "Build an array payload for the DatabaseNotification Model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Channels",
		"fromLink": "Illuminate/Notifications/Channels.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method___construct",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::__construct",
		"doc": "Create a new mail channel instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_send",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::send",
		"doc": "Send the given notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_messageBuilder",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::messageBuilder",
		"doc": "Get the mailer Closure for the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_buildView",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::buildView",
		"doc": "Build the notification's view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_additionalMessageData",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::additionalMessageData",
		"doc": "Get additional meta-data to pass along with the view data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_buildMessage",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::buildMessage",
		"doc": "Build the mail message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_addressMessage",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::addressMessage",
		"doc": "Address the mail message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_addSender",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::addSender",
		"doc": "Add the \"from\" and \"reply to\" addresses to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_getRecipients",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::getRecipients",
		"doc": "Get the recipients of the given message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_addAttachments",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::addAttachments",
		"doc": "Add the attachments to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Channels\\MailChannel",
		"fromLink": "Illuminate/Notifications/Channels/MailChannel.html",
		"link": "Illuminate/Notifications/Channels/MailChannel.html#method_runCallbacks",
		"name": "Illuminate\\Notifications\\Channels\\MailChannel::runCallbacks",
		"doc": "Run the callbacks for the message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Console",
		"fromLink": "Illuminate/Notifications/Console.html",
		"link": "Illuminate/Notifications/Console/NotificationTableCommand.html",
		"name": "Illuminate\\Notifications\\Console\\NotificationTableCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Console\\NotificationTableCommand",
		"fromLink": "Illuminate/Notifications/Console/NotificationTableCommand.html",
		"link": "Illuminate/Notifications/Console/NotificationTableCommand.html#method___construct",
		"name": "Illuminate\\Notifications\\Console\\NotificationTableCommand::__construct",
		"doc": "Create a new notifications table command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Console\\NotificationTableCommand",
		"fromLink": "Illuminate/Notifications/Console/NotificationTableCommand.html",
		"link": "Illuminate/Notifications/Console/NotificationTableCommand.html#method_handle",
		"name": "Illuminate\\Notifications\\Console\\NotificationTableCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Console\\NotificationTableCommand",
		"fromLink": "Illuminate/Notifications/Console/NotificationTableCommand.html",
		"link": "Illuminate/Notifications/Console/NotificationTableCommand.html#method_createBaseMigration",
		"name": "Illuminate\\Notifications\\Console\\NotificationTableCommand::createBaseMigration",
		"doc": "Create a base migration file for the notifications."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html",
		"name": "Illuminate\\Notifications\\DatabaseNotification",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotification",
		"fromLink": "Illuminate/Notifications/DatabaseNotification.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html#method_notifiable",
		"name": "Illuminate\\Notifications\\DatabaseNotification::notifiable",
		"doc": "Get the notifiable entity that the notification belongs to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotification",
		"fromLink": "Illuminate/Notifications/DatabaseNotification.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html#method_markAsRead",
		"name": "Illuminate\\Notifications\\DatabaseNotification::markAsRead",
		"doc": "Mark the notification as read."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotification",
		"fromLink": "Illuminate/Notifications/DatabaseNotification.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html#method_markAsUnread",
		"name": "Illuminate\\Notifications\\DatabaseNotification::markAsUnread",
		"doc": "Mark the notification as unread."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotification",
		"fromLink": "Illuminate/Notifications/DatabaseNotification.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html#method_read",
		"name": "Illuminate\\Notifications\\DatabaseNotification::read",
		"doc": "Determine if a notification has been read."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotification",
		"fromLink": "Illuminate/Notifications/DatabaseNotification.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html#method_unread",
		"name": "Illuminate\\Notifications\\DatabaseNotification::unread",
		"doc": "Determine if a notification has not been read."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotification",
		"fromLink": "Illuminate/Notifications/DatabaseNotification.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html#method_scopeRead",
		"name": "Illuminate\\Notifications\\DatabaseNotification::scopeRead",
		"doc": "Scope a query to only include read notifications."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotification",
		"fromLink": "Illuminate/Notifications/DatabaseNotification.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html#method_scopeUnread",
		"name": "Illuminate\\Notifications\\DatabaseNotification::scopeUnread",
		"doc": "Scope a query to only include unread notifications."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotification",
		"fromLink": "Illuminate/Notifications/DatabaseNotification.html",
		"link": "Illuminate/Notifications/DatabaseNotification.html#method_newCollection",
		"name": "Illuminate\\Notifications\\DatabaseNotification::newCollection",
		"doc": "Create a new database notification collection instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/DatabaseNotificationCollection.html",
		"name": "Illuminate\\Notifications\\DatabaseNotificationCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotificationCollection",
		"fromLink": "Illuminate/Notifications/DatabaseNotificationCollection.html",
		"link": "Illuminate/Notifications/DatabaseNotificationCollection.html#method_markAsRead",
		"name": "Illuminate\\Notifications\\DatabaseNotificationCollection::markAsRead",
		"doc": "Mark all notifications as read."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\DatabaseNotificationCollection",
		"fromLink": "Illuminate/Notifications/DatabaseNotificationCollection.html",
		"link": "Illuminate/Notifications/DatabaseNotificationCollection.html#method_markAsUnread",
		"name": "Illuminate\\Notifications\\DatabaseNotificationCollection::markAsUnread",
		"doc": "Mark all notifications as unread."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Events",
		"fromLink": "Illuminate/Notifications/Events.html",
		"link": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html",
		"name": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",
		"fromLink": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html",
		"link": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html#method___construct",
		"name": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated::__construct",
		"doc": "Create a new event instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",
		"fromLink": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html",
		"link": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html#method_broadcastOn",
		"name": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated::broadcastOn",
		"doc": "Get the channels the event should broadcast on."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",
		"fromLink": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html",
		"link": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html#method_channelName",
		"name": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated::channelName",
		"doc": "Get the broadcast channel name for the event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",
		"fromLink": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html",
		"link": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html#method_broadcastWith",
		"name": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated::broadcastWith",
		"doc": "Get the data that should be sent with the broadcasted event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",
		"fromLink": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html",
		"link": "Illuminate/Notifications/Events/BroadcastNotificationCreated.html#method_broadcastType",
		"name": "Illuminate\\Notifications\\Events\\BroadcastNotificationCreated::broadcastType",
		"doc": "Get the type of the notification being broadcast."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Events",
		"fromLink": "Illuminate/Notifications/Events.html",
		"link": "Illuminate/Notifications/Events/NotificationFailed.html",
		"name": "Illuminate\\Notifications\\Events\\NotificationFailed",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Events\\NotificationFailed",
		"fromLink": "Illuminate/Notifications/Events/NotificationFailed.html",
		"link": "Illuminate/Notifications/Events/NotificationFailed.html#method___construct",
		"name": "Illuminate\\Notifications\\Events\\NotificationFailed::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Events",
		"fromLink": "Illuminate/Notifications/Events.html",
		"link": "Illuminate/Notifications/Events/NotificationSending.html",
		"name": "Illuminate\\Notifications\\Events\\NotificationSending",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Events\\NotificationSending",
		"fromLink": "Illuminate/Notifications/Events/NotificationSending.html",
		"link": "Illuminate/Notifications/Events/NotificationSending.html#method___construct",
		"name": "Illuminate\\Notifications\\Events\\NotificationSending::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Events",
		"fromLink": "Illuminate/Notifications/Events.html",
		"link": "Illuminate/Notifications/Events/NotificationSent.html",
		"name": "Illuminate\\Notifications\\Events\\NotificationSent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Events\\NotificationSent",
		"fromLink": "Illuminate/Notifications/Events/NotificationSent.html",
		"link": "Illuminate/Notifications/Events/NotificationSent.html#method___construct",
		"name": "Illuminate\\Notifications\\Events\\NotificationSent::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/HasDatabaseNotifications.html",
		"name": "Illuminate\\Notifications\\HasDatabaseNotifications",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\HasDatabaseNotifications",
		"fromLink": "Illuminate/Notifications/HasDatabaseNotifications.html",
		"link": "Illuminate/Notifications/HasDatabaseNotifications.html#method_notifications",
		"name": "Illuminate\\Notifications\\HasDatabaseNotifications::notifications",
		"doc": "Get the entity's notifications."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\HasDatabaseNotifications",
		"fromLink": "Illuminate/Notifications/HasDatabaseNotifications.html",
		"link": "Illuminate/Notifications/HasDatabaseNotifications.html#method_readNotifications",
		"name": "Illuminate\\Notifications\\HasDatabaseNotifications::readNotifications",
		"doc": "Get the entity's read notifications."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\HasDatabaseNotifications",
		"fromLink": "Illuminate/Notifications/HasDatabaseNotifications.html",
		"link": "Illuminate/Notifications/HasDatabaseNotifications.html#method_unreadNotifications",
		"name": "Illuminate\\Notifications\\HasDatabaseNotifications::unreadNotifications",
		"doc": "Get the entity's unread notifications."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Messages",
		"fromLink": "Illuminate/Notifications/Messages.html",
		"link": "Illuminate/Notifications/Messages/BroadcastMessage.html",
		"name": "Illuminate\\Notifications\\Messages\\BroadcastMessage",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\BroadcastMessage",
		"fromLink": "Illuminate/Notifications/Messages/BroadcastMessage.html",
		"link": "Illuminate/Notifications/Messages/BroadcastMessage.html#method___construct",
		"name": "Illuminate\\Notifications\\Messages\\BroadcastMessage::__construct",
		"doc": "Create a new message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\BroadcastMessage",
		"fromLink": "Illuminate/Notifications/Messages/BroadcastMessage.html",
		"link": "Illuminate/Notifications/Messages/BroadcastMessage.html#method_data",
		"name": "Illuminate\\Notifications\\Messages\\BroadcastMessage::data",
		"doc": "Set the message data."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Messages",
		"fromLink": "Illuminate/Notifications/Messages.html",
		"link": "Illuminate/Notifications/Messages/DatabaseMessage.html",
		"name": "Illuminate\\Notifications\\Messages\\DatabaseMessage",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\DatabaseMessage",
		"fromLink": "Illuminate/Notifications/Messages/DatabaseMessage.html",
		"link": "Illuminate/Notifications/Messages/DatabaseMessage.html#method___construct",
		"name": "Illuminate\\Notifications\\Messages\\DatabaseMessage::__construct",
		"doc": "Create a new database message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Messages",
		"fromLink": "Illuminate/Notifications/Messages.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_view",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::view",
		"doc": "Set the view for the mail message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_markdown",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::markdown",
		"doc": "Set the Markdown template for the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_template",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::template",
		"doc": "Set the default markdown template."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_theme",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::theme",
		"doc": "Set the theme to use with the Markdown template."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_from",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::from",
		"doc": "Set the from address for the mail message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_replyTo",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::replyTo",
		"doc": "Set the \"reply to\" address of the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_cc",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::cc",
		"doc": "Set the cc address for the mail message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_bcc",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::bcc",
		"doc": "Set the bcc address for the mail message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_attach",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::attach",
		"doc": "Attach a file to the message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_attachData",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::attachData",
		"doc": "Attach in-memory data as an attachment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_priority",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::priority",
		"doc": "Set the priority of this message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_data",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::data",
		"doc": "Get the data array for the mail message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_parseAddresses",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::parseAddresses",
		"doc": "Parse the multi-address array into the necessary format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_arrayOfAddresses",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::arrayOfAddresses",
		"doc": "Determine if the given \"address\" is actually an array of addresses."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_render",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::render",
		"doc": "Render the mail notification message into an HTML string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_withSwiftMessage",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::withSwiftMessage",
		"doc": "Register a callback to be called with the Swift message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_when",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::when",
		"doc": "Apply the callback's message changes if the given \"value\" is true."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\MailMessage",
		"fromLink": "Illuminate/Notifications/Messages/MailMessage.html",
		"link": "Illuminate/Notifications/Messages/MailMessage.html#method_unless",
		"name": "Illuminate\\Notifications\\Messages\\MailMessage::unless",
		"doc": "Apply the callback's message changes if the given \"value\" is false."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications\\Messages",
		"fromLink": "Illuminate/Notifications/Messages.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_success",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::success",
		"doc": "Indicate that the notification gives information about a successful operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_error",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::error",
		"doc": "Indicate that the notification gives information about an error."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_level",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::level",
		"doc": "Set the \"level\" of the notification (success, error, etc.)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_subject",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::subject",
		"doc": "Set the subject of the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_greeting",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::greeting",
		"doc": "Set the greeting of the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_salutation",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::salutation",
		"doc": "Set the salutation of the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_line",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::line",
		"doc": "Add a line of text to the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_with",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::with",
		"doc": "Add a line of text to the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_formatLine",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::formatLine",
		"doc": "Format the given line of text."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_action",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::action",
		"doc": "Configure the \"call to action\" button."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_mailer",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::mailer",
		"doc": "Set the name of the mailer that should send the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Messages\\SimpleMessage",
		"fromLink": "Illuminate/Notifications/Messages/SimpleMessage.html",
		"link": "Illuminate/Notifications/Messages/SimpleMessage.html#method_toArray",
		"name": "Illuminate\\Notifications\\Messages\\SimpleMessage::toArray",
		"doc": "Get an array representation of the message."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/Notifiable.html",
		"name": "Illuminate\\Notifications\\Notifiable",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/Notification.html",
		"name": "Illuminate\\Notifications\\Notification",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Notification",
		"fromLink": "Illuminate/Notifications/Notification.html",
		"link": "Illuminate/Notifications/Notification.html#method_broadcastOn",
		"name": "Illuminate\\Notifications\\Notification::broadcastOn",
		"doc": "Get the channels the event should broadcast on."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\Notification",
		"fromLink": "Illuminate/Notifications/Notification.html",
		"link": "Illuminate/Notifications/Notification.html#method_locale",
		"name": "Illuminate\\Notifications\\Notification::locale",
		"doc": "Set the locale to send this notification in."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/NotificationSender.html",
		"name": "Illuminate\\Notifications\\NotificationSender",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationSender",
		"fromLink": "Illuminate/Notifications/NotificationSender.html",
		"link": "Illuminate/Notifications/NotificationSender.html#method___construct",
		"name": "Illuminate\\Notifications\\NotificationSender::__construct",
		"doc": "Create a new notification sender instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationSender",
		"fromLink": "Illuminate/Notifications/NotificationSender.html",
		"link": "Illuminate/Notifications/NotificationSender.html#method_send",
		"name": "Illuminate\\Notifications\\NotificationSender::send",
		"doc": "Send the given notification to the given notifiable entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationSender",
		"fromLink": "Illuminate/Notifications/NotificationSender.html",
		"link": "Illuminate/Notifications/NotificationSender.html#method_sendNow",
		"name": "Illuminate\\Notifications\\NotificationSender::sendNow",
		"doc": "Send the given notification immediately."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationSender",
		"fromLink": "Illuminate/Notifications/NotificationSender.html",
		"link": "Illuminate/Notifications/NotificationSender.html#method_preferredLocale",
		"name": "Illuminate\\Notifications\\NotificationSender::preferredLocale",
		"doc": "Get the notifiable's preferred locale for the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationSender",
		"fromLink": "Illuminate/Notifications/NotificationSender.html",
		"link": "Illuminate/Notifications/NotificationSender.html#method_sendToNotifiable",
		"name": "Illuminate\\Notifications\\NotificationSender::sendToNotifiable",
		"doc": "Send the given notification to the given notifiable via a channel."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationSender",
		"fromLink": "Illuminate/Notifications/NotificationSender.html",
		"link": "Illuminate/Notifications/NotificationSender.html#method_shouldSendNotification",
		"name": "Illuminate\\Notifications\\NotificationSender::shouldSendNotification",
		"doc": "Determines if the notification can be sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationSender",
		"fromLink": "Illuminate/Notifications/NotificationSender.html",
		"link": "Illuminate/Notifications/NotificationSender.html#method_queueNotification",
		"name": "Illuminate\\Notifications\\NotificationSender::queueNotification",
		"doc": "Queue the given notification instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationSender",
		"fromLink": "Illuminate/Notifications/NotificationSender.html",
		"link": "Illuminate/Notifications/NotificationSender.html#method_formatNotifiables",
		"name": "Illuminate\\Notifications\\NotificationSender::formatNotifiables",
		"doc": "Format the notifiables into a Collection / array if necessary."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/NotificationServiceProvider.html",
		"name": "Illuminate\\Notifications\\NotificationServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationServiceProvider",
		"fromLink": "Illuminate/Notifications/NotificationServiceProvider.html",
		"link": "Illuminate/Notifications/NotificationServiceProvider.html#method_boot",
		"name": "Illuminate\\Notifications\\NotificationServiceProvider::boot",
		"doc": "Boot the application services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\NotificationServiceProvider",
		"fromLink": "Illuminate/Notifications/NotificationServiceProvider.html",
		"link": "Illuminate/Notifications/NotificationServiceProvider.html#method_register",
		"name": "Illuminate\\Notifications\\NotificationServiceProvider::register",
		"doc": "Register the service provider."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/RoutesNotifications.html",
		"name": "Illuminate\\Notifications\\RoutesNotifications",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\RoutesNotifications",
		"fromLink": "Illuminate/Notifications/RoutesNotifications.html",
		"link": "Illuminate/Notifications/RoutesNotifications.html#method_notify",
		"name": "Illuminate\\Notifications\\RoutesNotifications::notify",
		"doc": "Send the given notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\RoutesNotifications",
		"fromLink": "Illuminate/Notifications/RoutesNotifications.html",
		"link": "Illuminate/Notifications/RoutesNotifications.html#method_notifyNow",
		"name": "Illuminate\\Notifications\\RoutesNotifications::notifyNow",
		"doc": "Send the given notification immediately."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\RoutesNotifications",
		"fromLink": "Illuminate/Notifications/RoutesNotifications.html",
		"link": "Illuminate/Notifications/RoutesNotifications.html#method_routeNotificationFor",
		"name": "Illuminate\\Notifications\\RoutesNotifications::routeNotificationFor",
		"doc": "Get the notification routing information for the given driver."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Notifications",
		"fromLink": "Illuminate/Notifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\SendQueuedNotifications",
		"fromLink": "Illuminate/Notifications/SendQueuedNotifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html#method___construct",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\SendQueuedNotifications",
		"fromLink": "Illuminate/Notifications/SendQueuedNotifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html#method_wrapNotifiables",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications::wrapNotifiables",
		"doc": "Wrap the notifiable(s) in a collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\SendQueuedNotifications",
		"fromLink": "Illuminate/Notifications/SendQueuedNotifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html#method_handle",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications::handle",
		"doc": "Send the notifications."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\SendQueuedNotifications",
		"fromLink": "Illuminate/Notifications/SendQueuedNotifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html#method_displayName",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications::displayName",
		"doc": "Get the display name for the queued job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\SendQueuedNotifications",
		"fromLink": "Illuminate/Notifications/SendQueuedNotifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html#method_failed",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications::failed",
		"doc": "Call the failed method on the notification instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\SendQueuedNotifications",
		"fromLink": "Illuminate/Notifications/SendQueuedNotifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html#method_backoff",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications::backoff",
		"doc": "Get number of seconds before a released notification will be available."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\SendQueuedNotifications",
		"fromLink": "Illuminate/Notifications/SendQueuedNotifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html#method_retryUntil",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications::retryUntil",
		"doc": "Get the expiration for the notification."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Notifications\\SendQueuedNotifications",
		"fromLink": "Illuminate/Notifications/SendQueuedNotifications.html",
		"link": "Illuminate/Notifications/SendQueuedNotifications.html#method___clone",
		"name": "Illuminate\\Notifications\\SendQueuedNotifications::__clone",
		"doc": "Prepare the instance for cloning."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Pagination",
		"fromLink": "Illuminate/Pagination.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html",
		"name": "Illuminate\\Pagination\\AbstractPaginator",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_isValidPageNumber",
		"name": "Illuminate\\Pagination\\AbstractPaginator::isValidPageNumber",
		"doc": "Determine if the given value is a valid page number."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_previousPageUrl",
		"name": "Illuminate\\Pagination\\AbstractPaginator::previousPageUrl",
		"doc": "Get the URL for the previous page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_getUrlRange",
		"name": "Illuminate\\Pagination\\AbstractPaginator::getUrlRange",
		"doc": "Create a range of pagination URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_url",
		"name": "Illuminate\\Pagination\\AbstractPaginator::url",
		"doc": "Get the URL for a given page number."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_fragment",
		"name": "Illuminate\\Pagination\\AbstractPaginator::fragment",
		"doc": "Get / set the URL fragment to be appended to URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_appends",
		"name": "Illuminate\\Pagination\\AbstractPaginator::appends",
		"doc": "Add a set of query string values to the paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_appendArray",
		"name": "Illuminate\\Pagination\\AbstractPaginator::appendArray",
		"doc": "Add an array of query string values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_withQueryString",
		"name": "Illuminate\\Pagination\\AbstractPaginator::withQueryString",
		"doc": "Add all current query string values to the paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_addQuery",
		"name": "Illuminate\\Pagination\\AbstractPaginator::addQuery",
		"doc": "Add a query string value to the paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_buildFragment",
		"name": "Illuminate\\Pagination\\AbstractPaginator::buildFragment",
		"doc": "Build the full fragment portion of a URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_loadMorph",
		"name": "Illuminate\\Pagination\\AbstractPaginator::loadMorph",
		"doc": "Load a set of relationships onto the mixed relationship collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_loadMorphCount",
		"name": "Illuminate\\Pagination\\AbstractPaginator::loadMorphCount",
		"doc": "Load a set of relationship counts onto the mixed relationship collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_items",
		"name": "Illuminate\\Pagination\\AbstractPaginator::items",
		"doc": "Get the slice of items being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_firstItem",
		"name": "Illuminate\\Pagination\\AbstractPaginator::firstItem",
		"doc": "Get the number of the first item in the slice."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_lastItem",
		"name": "Illuminate\\Pagination\\AbstractPaginator::lastItem",
		"doc": "Get the number of the last item in the slice."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_through",
		"name": "Illuminate\\Pagination\\AbstractPaginator::through",
		"doc": "Transform each item in the slice of items using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_perPage",
		"name": "Illuminate\\Pagination\\AbstractPaginator::perPage",
		"doc": "Get the number of items shown per page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_hasPages",
		"name": "Illuminate\\Pagination\\AbstractPaginator::hasPages",
		"doc": "Determine if there are enough items to split into multiple pages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_onFirstPage",
		"name": "Illuminate\\Pagination\\AbstractPaginator::onFirstPage",
		"doc": "Determine if the paginator is on the first page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_currentPage",
		"name": "Illuminate\\Pagination\\AbstractPaginator::currentPage",
		"doc": "Get the current page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_getPageName",
		"name": "Illuminate\\Pagination\\AbstractPaginator::getPageName",
		"doc": "Get the query string variable used to store the page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_setPageName",
		"name": "Illuminate\\Pagination\\AbstractPaginator::setPageName",
		"doc": "Set the query string variable used to store the page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_withPath",
		"name": "Illuminate\\Pagination\\AbstractPaginator::withPath",
		"doc": "Set the base path to assign to all URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_setPath",
		"name": "Illuminate\\Pagination\\AbstractPaginator::setPath",
		"doc": "Set the base path to assign to all URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_onEachSide",
		"name": "Illuminate\\Pagination\\AbstractPaginator::onEachSide",
		"doc": "Set the number of links to display on each side of current page link."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_path",
		"name": "Illuminate\\Pagination\\AbstractPaginator::path",
		"doc": "Get the base path for paginator generated URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_resolveCurrentPath",
		"name": "Illuminate\\Pagination\\AbstractPaginator::resolveCurrentPath",
		"doc": "Resolve the current request path or return the default value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_currentPathResolver",
		"name": "Illuminate\\Pagination\\AbstractPaginator::currentPathResolver",
		"doc": "Set the current request path resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_resolveCurrentPage",
		"name": "Illuminate\\Pagination\\AbstractPaginator::resolveCurrentPage",
		"doc": "Resolve the current page or return the default value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_currentPageResolver",
		"name": "Illuminate\\Pagination\\AbstractPaginator::currentPageResolver",
		"doc": "Set the current page resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_queryStringResolver",
		"name": "Illuminate\\Pagination\\AbstractPaginator::queryStringResolver",
		"doc": "Set with query string resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_viewFactory",
		"name": "Illuminate\\Pagination\\AbstractPaginator::viewFactory",
		"doc": "Get an instance of the view factory from the resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_viewFactoryResolver",
		"name": "Illuminate\\Pagination\\AbstractPaginator::viewFactoryResolver",
		"doc": "Set the view factory resolver callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_defaultView",
		"name": "Illuminate\\Pagination\\AbstractPaginator::defaultView",
		"doc": "Set the default pagination view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_defaultSimpleView",
		"name": "Illuminate\\Pagination\\AbstractPaginator::defaultSimpleView",
		"doc": "Set the default \"simple\" pagination view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_useTailwind",
		"name": "Illuminate\\Pagination\\AbstractPaginator::useTailwind",
		"doc": "Indicate that Tailwind styling should be used for generated links."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_useBootstrap",
		"name": "Illuminate\\Pagination\\AbstractPaginator::useBootstrap",
		"doc": "Indicate that Bootstrap 4 styling should be used for generated links."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_useBootstrapThree",
		"name": "Illuminate\\Pagination\\AbstractPaginator::useBootstrapThree",
		"doc": "Indicate that Bootstrap 3 styling should be used for generated links."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_getIterator",
		"name": "Illuminate\\Pagination\\AbstractPaginator::getIterator",
		"doc": "Get an iterator for the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_isEmpty",
		"name": "Illuminate\\Pagination\\AbstractPaginator::isEmpty",
		"doc": "Determine if the list of items is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_isNotEmpty",
		"name": "Illuminate\\Pagination\\AbstractPaginator::isNotEmpty",
		"doc": "Determine if the list of items is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_count",
		"name": "Illuminate\\Pagination\\AbstractPaginator::count",
		"doc": "Get the number of items for the current page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_getCollection",
		"name": "Illuminate\\Pagination\\AbstractPaginator::getCollection",
		"doc": "Get the paginator's underlying collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_setCollection",
		"name": "Illuminate\\Pagination\\AbstractPaginator::setCollection",
		"doc": "Set the paginator's underlying collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_getOptions",
		"name": "Illuminate\\Pagination\\AbstractPaginator::getOptions",
		"doc": "Get the paginator options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_offsetExists",
		"name": "Illuminate\\Pagination\\AbstractPaginator::offsetExists",
		"doc": "Determine if the given item exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_offsetGet",
		"name": "Illuminate\\Pagination\\AbstractPaginator::offsetGet",
		"doc": "Get the item at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_offsetSet",
		"name": "Illuminate\\Pagination\\AbstractPaginator::offsetSet",
		"doc": "Set the item at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_offsetUnset",
		"name": "Illuminate\\Pagination\\AbstractPaginator::offsetUnset",
		"doc": "Unset the item at the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method_toHtml",
		"name": "Illuminate\\Pagination\\AbstractPaginator::toHtml",
		"doc": "Render the contents of the paginator to HTML."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method___call",
		"name": "Illuminate\\Pagination\\AbstractPaginator::__call",
		"doc": "Make dynamic calls into the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\AbstractPaginator",
		"fromLink": "Illuminate/Pagination/AbstractPaginator.html",
		"link": "Illuminate/Pagination/AbstractPaginator.html#method___toString",
		"name": "Illuminate\\Pagination\\AbstractPaginator::__toString",
		"doc": "Render the contents of the paginator when casting to string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Pagination",
		"fromLink": "Illuminate/Pagination.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method___construct",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::__construct",
		"doc": "Create a new paginator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_setCurrentPage",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::setCurrentPage",
		"doc": "Get the current page for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_links",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::links",
		"doc": "Render the paginator using the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_render",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::render",
		"doc": "Render the paginator using the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_linkCollection",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::linkCollection",
		"doc": "Get the paginator links as a collection (for JSON responses)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_elements",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::elements",
		"doc": "Get the array of elements to pass to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_total",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::total",
		"doc": "Get the total number of items being paginated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_hasMorePages",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::hasMorePages",
		"doc": "Determine if there are more items in the data source."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_nextPageUrl",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::nextPageUrl",
		"doc": "Get the URL for the next page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_lastPage",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::lastPage",
		"doc": "Get the last page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_toArray",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::toArray",
		"doc": "Get the instance as an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_jsonSerialize",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::jsonSerialize",
		"doc": "Convert the object into something JSON serializable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\LengthAwarePaginator",
		"fromLink": "Illuminate/Pagination/LengthAwarePaginator.html",
		"link": "Illuminate/Pagination/LengthAwarePaginator.html#method_toJson",
		"name": "Illuminate\\Pagination\\LengthAwarePaginator::toJson",
		"doc": "Convert the object to its JSON representation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Pagination",
		"fromLink": "Illuminate/Pagination.html",
		"link": "Illuminate/Pagination/PaginationServiceProvider.html",
		"name": "Illuminate\\Pagination\\PaginationServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\PaginationServiceProvider",
		"fromLink": "Illuminate/Pagination/PaginationServiceProvider.html",
		"link": "Illuminate/Pagination/PaginationServiceProvider.html#method_boot",
		"name": "Illuminate\\Pagination\\PaginationServiceProvider::boot",
		"doc": "Bootstrap any application services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\PaginationServiceProvider",
		"fromLink": "Illuminate/Pagination/PaginationServiceProvider.html",
		"link": "Illuminate/Pagination/PaginationServiceProvider.html#method_register",
		"name": "Illuminate\\Pagination\\PaginationServiceProvider::register",
		"doc": "Register the service provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Pagination",
		"fromLink": "Illuminate/Pagination.html",
		"link": "Illuminate/Pagination/Paginator.html",
		"name": "Illuminate\\Pagination\\Paginator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method___construct",
		"name": "Illuminate\\Pagination\\Paginator::__construct",
		"doc": "Create a new paginator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_setCurrentPage",
		"name": "Illuminate\\Pagination\\Paginator::setCurrentPage",
		"doc": "Get the current page for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_setItems",
		"name": "Illuminate\\Pagination\\Paginator::setItems",
		"doc": "Set the items for the paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_nextPageUrl",
		"name": "Illuminate\\Pagination\\Paginator::nextPageUrl",
		"doc": "Get the URL for the next page."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_links",
		"name": "Illuminate\\Pagination\\Paginator::links",
		"doc": "Render the paginator using the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_render",
		"name": "Illuminate\\Pagination\\Paginator::render",
		"doc": "Render the paginator using the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_hasMorePagesWhen",
		"name": "Illuminate\\Pagination\\Paginator::hasMorePagesWhen",
		"doc": "Manually indicate that the paginator does have more pages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_hasMorePages",
		"name": "Illuminate\\Pagination\\Paginator::hasMorePages",
		"doc": "Determine if there are more items in the data source."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_toArray",
		"name": "Illuminate\\Pagination\\Paginator::toArray",
		"doc": "Get the instance as an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_jsonSerialize",
		"name": "Illuminate\\Pagination\\Paginator::jsonSerialize",
		"doc": "Convert the object into something JSON serializable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\Paginator",
		"fromLink": "Illuminate/Pagination/Paginator.html",
		"link": "Illuminate/Pagination/Paginator.html#method_toJson",
		"name": "Illuminate\\Pagination\\Paginator::toJson",
		"doc": "Convert the object to its JSON representation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Pagination",
		"fromLink": "Illuminate/Pagination.html",
		"link": "Illuminate/Pagination/UrlWindow.html",
		"name": "Illuminate\\Pagination\\UrlWindow",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method___construct",
		"name": "Illuminate\\Pagination\\UrlWindow::__construct",
		"doc": "Create a new URL window instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_make",
		"name": "Illuminate\\Pagination\\UrlWindow::make",
		"doc": "Create a new URL window instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_get",
		"name": "Illuminate\\Pagination\\UrlWindow::get",
		"doc": "Get the window of URLs to be shown."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_getSmallSlider",
		"name": "Illuminate\\Pagination\\UrlWindow::getSmallSlider",
		"doc": "Get the slider of URLs there are not enough pages to slide."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_getUrlSlider",
		"name": "Illuminate\\Pagination\\UrlWindow::getUrlSlider",
		"doc": "Create a URL slider links."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_getSliderTooCloseToBeginning",
		"name": "Illuminate\\Pagination\\UrlWindow::getSliderTooCloseToBeginning",
		"doc": "Get the slider of URLs when too close to beginning of window."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_getSliderTooCloseToEnding",
		"name": "Illuminate\\Pagination\\UrlWindow::getSliderTooCloseToEnding",
		"doc": "Get the slider of URLs when too close to ending of window."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_getFullSlider",
		"name": "Illuminate\\Pagination\\UrlWindow::getFullSlider",
		"doc": "Get the slider of URLs when a full slider can be made."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_getAdjacentUrlRange",
		"name": "Illuminate\\Pagination\\UrlWindow::getAdjacentUrlRange",
		"doc": "Get the page range for the current page window."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_getStart",
		"name": "Illuminate\\Pagination\\UrlWindow::getStart",
		"doc": "Get the starting URLs of a pagination slider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_getFinish",
		"name": "Illuminate\\Pagination\\UrlWindow::getFinish",
		"doc": "Get the ending URLs of a pagination slider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_hasPages",
		"name": "Illuminate\\Pagination\\UrlWindow::hasPages",
		"doc": "Determine if the underlying paginator being presented has pages to show."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_currentPage",
		"name": "Illuminate\\Pagination\\UrlWindow::currentPage",
		"doc": "Get the current page from the paginator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pagination\\UrlWindow",
		"fromLink": "Illuminate/Pagination/UrlWindow.html",
		"link": "Illuminate/Pagination/UrlWindow.html#method_lastPage",
		"name": "Illuminate\\Pagination\\UrlWindow::lastPage",
		"doc": "Get the last page from the paginator."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Pipeline",
		"fromLink": "Illuminate/Pipeline.html",
		"link": "Illuminate/Pipeline/Hub.html",
		"name": "Illuminate\\Pipeline\\Hub",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Hub",
		"fromLink": "Illuminate/Pipeline/Hub.html",
		"link": "Illuminate/Pipeline/Hub.html#method___construct",
		"name": "Illuminate\\Pipeline\\Hub::__construct",
		"doc": "Create a new Hub instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Hub",
		"fromLink": "Illuminate/Pipeline/Hub.html",
		"link": "Illuminate/Pipeline/Hub.html#method_defaults",
		"name": "Illuminate\\Pipeline\\Hub::defaults",
		"doc": "Define the default named pipeline."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Hub",
		"fromLink": "Illuminate/Pipeline/Hub.html",
		"link": "Illuminate/Pipeline/Hub.html#method_pipeline",
		"name": "Illuminate\\Pipeline\\Hub::pipeline",
		"doc": "Define a new named pipeline."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Hub",
		"fromLink": "Illuminate/Pipeline/Hub.html",
		"link": "Illuminate/Pipeline/Hub.html#method_pipe",
		"name": "Illuminate\\Pipeline\\Hub::pipe",
		"doc": "Send an object through one of the available pipelines."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Pipeline",
		"fromLink": "Illuminate/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html",
		"name": "Illuminate\\Pipeline\\Pipeline",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method___construct",
		"name": "Illuminate\\Pipeline\\Pipeline::__construct",
		"doc": "Create a new class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_send",
		"name": "Illuminate\\Pipeline\\Pipeline::send",
		"doc": "Set the object being sent through the pipeline."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_through",
		"name": "Illuminate\\Pipeline\\Pipeline::through",
		"doc": "Set the array of pipes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_via",
		"name": "Illuminate\\Pipeline\\Pipeline::via",
		"doc": "Set the method to call on the pipes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_then",
		"name": "Illuminate\\Pipeline\\Pipeline::then",
		"doc": "Run the pipeline with a final destination callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_thenReturn",
		"name": "Illuminate\\Pipeline\\Pipeline::thenReturn",
		"doc": "Run the pipeline and return the result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_prepareDestination",
		"name": "Illuminate\\Pipeline\\Pipeline::prepareDestination",
		"doc": "Get the final piece of the Closure onion."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_carry",
		"name": "Illuminate\\Pipeline\\Pipeline::carry",
		"doc": "Get a Closure that represents a slice of the application onion."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_parsePipeString",
		"name": "Illuminate\\Pipeline\\Pipeline::parsePipeString",
		"doc": "Parse full pipe string to get name and parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_pipes",
		"name": "Illuminate\\Pipeline\\Pipeline::pipes",
		"doc": "Get the array of configured pipes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_getContainer",
		"name": "Illuminate\\Pipeline\\Pipeline::getContainer",
		"doc": "Get the container instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_setContainer",
		"name": "Illuminate\\Pipeline\\Pipeline::setContainer",
		"doc": "Set the container instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_handleCarry",
		"name": "Illuminate\\Pipeline\\Pipeline::handleCarry",
		"doc": "Handle the value returned from each pipe before passing it to the next."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\Pipeline",
		"fromLink": "Illuminate/Pipeline/Pipeline.html",
		"link": "Illuminate/Pipeline/Pipeline.html#method_handleException",
		"name": "Illuminate\\Pipeline\\Pipeline::handleException",
		"doc": "Handle the given exception."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Pipeline",
		"fromLink": "Illuminate/Pipeline.html",
		"link": "Illuminate/Pipeline/PipelineServiceProvider.html",
		"name": "Illuminate\\Pipeline\\PipelineServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\PipelineServiceProvider",
		"fromLink": "Illuminate/Pipeline/PipelineServiceProvider.html",
		"link": "Illuminate/Pipeline/PipelineServiceProvider.html#method_register",
		"name": "Illuminate\\Pipeline\\PipelineServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Pipeline\\PipelineServiceProvider",
		"fromLink": "Illuminate/Pipeline/PipelineServiceProvider.html",
		"link": "Illuminate/Pipeline/PipelineServiceProvider.html#method_provides",
		"name": "Illuminate\\Pipeline\\PipelineServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html",
		"name": "Illuminate\\Queue\\BeanstalkdQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method___construct",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::__construct",
		"doc": "Create a new Beanstalkd queue instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method_size",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method_push",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method_pushRaw",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method_later",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method_pop",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::pop",
		"doc": "Pop the next job off of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method_deleteMessage",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::deleteMessage",
		"doc": "Delete a message from the Beanstalk queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method_getQueue",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::getQueue",
		"doc": "Get the queue or return the default."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\BeanstalkdQueue",
		"fromLink": "Illuminate/Queue/BeanstalkdQueue.html",
		"link": "Illuminate/Queue/BeanstalkdQueue.html#method_getPheanstalk",
		"name": "Illuminate\\Queue\\BeanstalkdQueue::getPheanstalk",
		"doc": "Get the underlying Pheanstalk instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/CallQueuedClosure.html",
		"name": "Illuminate\\Queue\\CallQueuedClosure",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedClosure",
		"fromLink": "Illuminate/Queue/CallQueuedClosure.html",
		"link": "Illuminate/Queue/CallQueuedClosure.html#method___construct",
		"name": "Illuminate\\Queue\\CallQueuedClosure::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedClosure",
		"fromLink": "Illuminate/Queue/CallQueuedClosure.html",
		"link": "Illuminate/Queue/CallQueuedClosure.html#method_create",
		"name": "Illuminate\\Queue\\CallQueuedClosure::create",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedClosure",
		"fromLink": "Illuminate/Queue/CallQueuedClosure.html",
		"link": "Illuminate/Queue/CallQueuedClosure.html#method_handle",
		"name": "Illuminate\\Queue\\CallQueuedClosure::handle",
		"doc": "Execute the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedClosure",
		"fromLink": "Illuminate/Queue/CallQueuedClosure.html",
		"link": "Illuminate/Queue/CallQueuedClosure.html#method_onFailure",
		"name": "Illuminate\\Queue\\CallQueuedClosure::onFailure",
		"doc": "Add a callback to be executed if the job fails."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedClosure",
		"fromLink": "Illuminate/Queue/CallQueuedClosure.html",
		"link": "Illuminate/Queue/CallQueuedClosure.html#method_failed",
		"name": "Illuminate\\Queue\\CallQueuedClosure::failed",
		"doc": "Handle a job failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedClosure",
		"fromLink": "Illuminate/Queue/CallQueuedClosure.html",
		"link": "Illuminate/Queue/CallQueuedClosure.html#method_displayName",
		"name": "Illuminate\\Queue\\CallQueuedClosure::displayName",
		"doc": "Get the display name for the queued job."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html",
		"name": "Illuminate\\Queue\\CallQueuedHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method___construct",
		"name": "Illuminate\\Queue\\CallQueuedHandler::__construct",
		"doc": "Create a new handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_call",
		"name": "Illuminate\\Queue\\CallQueuedHandler::call",
		"doc": "Handle the queued job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_dispatchThroughMiddleware",
		"name": "Illuminate\\Queue\\CallQueuedHandler::dispatchThroughMiddleware",
		"doc": "Dispatch the given job / command through its specified middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_resolveHandler",
		"name": "Illuminate\\Queue\\CallQueuedHandler::resolveHandler",
		"doc": "Resolve the handler for the given command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_setJobInstanceIfNecessary",
		"name": "Illuminate\\Queue\\CallQueuedHandler::setJobInstanceIfNecessary",
		"doc": "Set the job instance of the given class if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_ensureNextJobInChainIsDispatched",
		"name": "Illuminate\\Queue\\CallQueuedHandler::ensureNextJobInChainIsDispatched",
		"doc": "Ensure the next job in the chain is dispatched if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_ensureSuccessfulBatchJobIsRecorded",
		"name": "Illuminate\\Queue\\CallQueuedHandler::ensureSuccessfulBatchJobIsRecorded",
		"doc": "Ensure the batch is notified of the successful job completion."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_ensureUniqueJobLockIsReleased",
		"name": "Illuminate\\Queue\\CallQueuedHandler::ensureUniqueJobLockIsReleased",
		"doc": "Ensure the lock for a unique job is released."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_handleModelNotFound",
		"name": "Illuminate\\Queue\\CallQueuedHandler::handleModelNotFound",
		"doc": "Handle a model not found exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_failed",
		"name": "Illuminate\\Queue\\CallQueuedHandler::failed",
		"doc": "Call the failed method on the job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_ensureFailedBatchJobIsRecorded",
		"name": "Illuminate\\Queue\\CallQueuedHandler::ensureFailedBatchJobIsRecorded",
		"doc": "Ensure the batch is notified of the failed job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\CallQueuedHandler",
		"fromLink": "Illuminate/Queue/CallQueuedHandler.html",
		"link": "Illuminate/Queue/CallQueuedHandler.html#method_ensureChainCatchCallbacksAreInvoked",
		"name": "Illuminate\\Queue\\CallQueuedHandler::ensureChainCatchCallbacksAreInvoked",
		"doc": "Ensure the chained job catch callbacks are invoked."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Capsule",
		"fromLink": "Illuminate/Queue/Capsule.html",
		"link": "Illuminate/Queue/Capsule/Manager.html",
		"name": "Illuminate\\Queue\\Capsule\\Manager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method___construct",
		"name": "Illuminate\\Queue\\Capsule\\Manager::__construct",
		"doc": "Create a new queue capsule manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_setupDefaultConfiguration",
		"name": "Illuminate\\Queue\\Capsule\\Manager::setupDefaultConfiguration",
		"doc": "Setup the default queue configuration options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_setupManager",
		"name": "Illuminate\\Queue\\Capsule\\Manager::setupManager",
		"doc": "Build the queue manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_registerConnectors",
		"name": "Illuminate\\Queue\\Capsule\\Manager::registerConnectors",
		"doc": "Register the default connectors that the component ships with."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_connection",
		"name": "Illuminate\\Queue\\Capsule\\Manager::connection",
		"doc": "Get a connection instance from the global manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_push",
		"name": "Illuminate\\Queue\\Capsule\\Manager::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_bulk",
		"name": "Illuminate\\Queue\\Capsule\\Manager::bulk",
		"doc": "Push a new an array of jobs onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_later",
		"name": "Illuminate\\Queue\\Capsule\\Manager::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_getConnection",
		"name": "Illuminate\\Queue\\Capsule\\Manager::getConnection",
		"doc": "Get a registered connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_addConnection",
		"name": "Illuminate\\Queue\\Capsule\\Manager::addConnection",
		"doc": "Register a connection with the manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method_getQueueManager",
		"name": "Illuminate\\Queue\\Capsule\\Manager::getQueueManager",
		"doc": "Get the queue manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method___call",
		"name": "Illuminate\\Queue\\Capsule\\Manager::__call",
		"doc": "Pass dynamic instance methods to the manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Capsule\\Manager",
		"fromLink": "Illuminate/Queue/Capsule/Manager.html",
		"link": "Illuminate/Queue/Capsule/Manager.html#method___callStatic",
		"name": "Illuminate\\Queue\\Capsule\\Manager::__callStatic",
		"doc": "Dynamically pass methods to the default connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Connectors",
		"fromLink": "Illuminate/Queue/Connectors.html",
		"link": "Illuminate/Queue/Connectors/BeanstalkdConnector.html",
		"name": "Illuminate\\Queue\\Connectors\\BeanstalkdConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\BeanstalkdConnector",
		"fromLink": "Illuminate/Queue/Connectors/BeanstalkdConnector.html",
		"link": "Illuminate/Queue/Connectors/BeanstalkdConnector.html#method_connect",
		"name": "Illuminate\\Queue\\Connectors\\BeanstalkdConnector::connect",
		"doc": "Establish a queue connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\BeanstalkdConnector",
		"fromLink": "Illuminate/Queue/Connectors/BeanstalkdConnector.html",
		"link": "Illuminate/Queue/Connectors/BeanstalkdConnector.html#method_pheanstalk",
		"name": "Illuminate\\Queue\\Connectors\\BeanstalkdConnector::pheanstalk",
		"doc": "Create a Pheanstalk instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Connectors",
		"fromLink": "Illuminate/Queue/Connectors.html",
		"link": "Illuminate/Queue/Connectors/ConnectorInterface.html",
		"name": "Illuminate\\Queue\\Connectors\\ConnectorInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\ConnectorInterface",
		"fromLink": "Illuminate/Queue/Connectors/ConnectorInterface.html",
		"link": "Illuminate/Queue/Connectors/ConnectorInterface.html#method_connect",
		"name": "Illuminate\\Queue\\Connectors\\ConnectorInterface::connect",
		"doc": "Establish a queue connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Connectors",
		"fromLink": "Illuminate/Queue/Connectors.html",
		"link": "Illuminate/Queue/Connectors/DatabaseConnector.html",
		"name": "Illuminate\\Queue\\Connectors\\DatabaseConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\DatabaseConnector",
		"fromLink": "Illuminate/Queue/Connectors/DatabaseConnector.html",
		"link": "Illuminate/Queue/Connectors/DatabaseConnector.html#method___construct",
		"name": "Illuminate\\Queue\\Connectors\\DatabaseConnector::__construct",
		"doc": "Create a new connector instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\DatabaseConnector",
		"fromLink": "Illuminate/Queue/Connectors/DatabaseConnector.html",
		"link": "Illuminate/Queue/Connectors/DatabaseConnector.html#method_connect",
		"name": "Illuminate\\Queue\\Connectors\\DatabaseConnector::connect",
		"doc": "Establish a queue connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Connectors",
		"fromLink": "Illuminate/Queue/Connectors.html",
		"link": "Illuminate/Queue/Connectors/NullConnector.html",
		"name": "Illuminate\\Queue\\Connectors\\NullConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\NullConnector",
		"fromLink": "Illuminate/Queue/Connectors/NullConnector.html",
		"link": "Illuminate/Queue/Connectors/NullConnector.html#method_connect",
		"name": "Illuminate\\Queue\\Connectors\\NullConnector::connect",
		"doc": "Establish a queue connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Connectors",
		"fromLink": "Illuminate/Queue/Connectors.html",
		"link": "Illuminate/Queue/Connectors/RedisConnector.html",
		"name": "Illuminate\\Queue\\Connectors\\RedisConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\RedisConnector",
		"fromLink": "Illuminate/Queue/Connectors/RedisConnector.html",
		"link": "Illuminate/Queue/Connectors/RedisConnector.html#method___construct",
		"name": "Illuminate\\Queue\\Connectors\\RedisConnector::__construct",
		"doc": "Create a new Redis queue connector instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\RedisConnector",
		"fromLink": "Illuminate/Queue/Connectors/RedisConnector.html",
		"link": "Illuminate/Queue/Connectors/RedisConnector.html#method_connect",
		"name": "Illuminate\\Queue\\Connectors\\RedisConnector::connect",
		"doc": "Establish a queue connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Connectors",
		"fromLink": "Illuminate/Queue/Connectors.html",
		"link": "Illuminate/Queue/Connectors/SqsConnector.html",
		"name": "Illuminate\\Queue\\Connectors\\SqsConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\SqsConnector",
		"fromLink": "Illuminate/Queue/Connectors/SqsConnector.html",
		"link": "Illuminate/Queue/Connectors/SqsConnector.html#method_connect",
		"name": "Illuminate\\Queue\\Connectors\\SqsConnector::connect",
		"doc": "Establish a queue connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\SqsConnector",
		"fromLink": "Illuminate/Queue/Connectors/SqsConnector.html",
		"link": "Illuminate/Queue/Connectors/SqsConnector.html#method_getDefaultConfiguration",
		"name": "Illuminate\\Queue\\Connectors\\SqsConnector::getDefaultConfiguration",
		"doc": "Get the default configuration for SQS."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Connectors",
		"fromLink": "Illuminate/Queue/Connectors.html",
		"link": "Illuminate/Queue/Connectors/SyncConnector.html",
		"name": "Illuminate\\Queue\\Connectors\\SyncConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Connectors\\SyncConnector",
		"fromLink": "Illuminate/Queue/Connectors/SyncConnector.html",
		"link": "Illuminate/Queue/Connectors/SyncConnector.html#method_connect",
		"name": "Illuminate\\Queue\\Connectors\\SyncConnector::connect",
		"doc": "Establish a queue connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/BatchesTableCommand.html",
		"name": "Illuminate\\Queue\\Console\\BatchesTableCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\BatchesTableCommand",
		"fromLink": "Illuminate/Queue/Console/BatchesTableCommand.html",
		"link": "Illuminate/Queue/Console/BatchesTableCommand.html#method___construct",
		"name": "Illuminate\\Queue\\Console\\BatchesTableCommand::__construct",
		"doc": "Create a new failed queue jobs table command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\BatchesTableCommand",
		"fromLink": "Illuminate/Queue/Console/BatchesTableCommand.html",
		"link": "Illuminate/Queue/Console/BatchesTableCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\BatchesTableCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\BatchesTableCommand",
		"fromLink": "Illuminate/Queue/Console/BatchesTableCommand.html",
		"link": "Illuminate/Queue/Console/BatchesTableCommand.html#method_createBaseMigration",
		"name": "Illuminate\\Queue\\Console\\BatchesTableCommand::createBaseMigration",
		"doc": "Create a base migration file for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\BatchesTableCommand",
		"fromLink": "Illuminate/Queue/Console/BatchesTableCommand.html",
		"link": "Illuminate/Queue/Console/BatchesTableCommand.html#method_replaceMigration",
		"name": "Illuminate\\Queue\\Console\\BatchesTableCommand::replaceMigration",
		"doc": "Replace the generated migration with the failed job table stub."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/ClearCommand.html",
		"name": "Illuminate\\Queue\\Console\\ClearCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ClearCommand",
		"fromLink": "Illuminate/Queue/Console/ClearCommand.html",
		"link": "Illuminate/Queue/Console/ClearCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\ClearCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ClearCommand",
		"fromLink": "Illuminate/Queue/Console/ClearCommand.html",
		"link": "Illuminate/Queue/Console/ClearCommand.html#method_getQueue",
		"name": "Illuminate\\Queue\\Console\\ClearCommand::getQueue",
		"doc": "Get the queue name to clear."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ClearCommand",
		"fromLink": "Illuminate/Queue/Console/ClearCommand.html",
		"link": "Illuminate/Queue/Console/ClearCommand.html#method_getArguments",
		"name": "Illuminate\\Queue\\Console\\ClearCommand::getArguments",
		"doc": "Get the console command arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ClearCommand",
		"fromLink": "Illuminate/Queue/Console/ClearCommand.html",
		"link": "Illuminate/Queue/Console/ClearCommand.html#method_getOptions",
		"name": "Illuminate\\Queue\\Console\\ClearCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/FailedTableCommand.html",
		"name": "Illuminate\\Queue\\Console\\FailedTableCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\FailedTableCommand",
		"fromLink": "Illuminate/Queue/Console/FailedTableCommand.html",
		"link": "Illuminate/Queue/Console/FailedTableCommand.html#method___construct",
		"name": "Illuminate\\Queue\\Console\\FailedTableCommand::__construct",
		"doc": "Create a new failed queue jobs table command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\FailedTableCommand",
		"fromLink": "Illuminate/Queue/Console/FailedTableCommand.html",
		"link": "Illuminate/Queue/Console/FailedTableCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\FailedTableCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\FailedTableCommand",
		"fromLink": "Illuminate/Queue/Console/FailedTableCommand.html",
		"link": "Illuminate/Queue/Console/FailedTableCommand.html#method_createBaseMigration",
		"name": "Illuminate\\Queue\\Console\\FailedTableCommand::createBaseMigration",
		"doc": "Create a base migration file for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\FailedTableCommand",
		"fromLink": "Illuminate/Queue/Console/FailedTableCommand.html",
		"link": "Illuminate/Queue/Console/FailedTableCommand.html#method_replaceMigration",
		"name": "Illuminate\\Queue\\Console\\FailedTableCommand::replaceMigration",
		"doc": "Replace the generated migration with the failed job table stub."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/FlushFailedCommand.html",
		"name": "Illuminate\\Queue\\Console\\FlushFailedCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\FlushFailedCommand",
		"fromLink": "Illuminate/Queue/Console/FlushFailedCommand.html",
		"link": "Illuminate/Queue/Console/FlushFailedCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\FlushFailedCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/ForgetFailedCommand.html",
		"name": "Illuminate\\Queue\\Console\\ForgetFailedCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ForgetFailedCommand",
		"fromLink": "Illuminate/Queue/Console/ForgetFailedCommand.html",
		"link": "Illuminate/Queue/Console/ForgetFailedCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\ForgetFailedCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/ListFailedCommand.html",
		"name": "Illuminate\\Queue\\Console\\ListFailedCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListFailedCommand",
		"fromLink": "Illuminate/Queue/Console/ListFailedCommand.html",
		"link": "Illuminate/Queue/Console/ListFailedCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\ListFailedCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListFailedCommand",
		"fromLink": "Illuminate/Queue/Console/ListFailedCommand.html",
		"link": "Illuminate/Queue/Console/ListFailedCommand.html#method_getFailedJobs",
		"name": "Illuminate\\Queue\\Console\\ListFailedCommand::getFailedJobs",
		"doc": "Compile the failed jobs into a displayable format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListFailedCommand",
		"fromLink": "Illuminate/Queue/Console/ListFailedCommand.html",
		"link": "Illuminate/Queue/Console/ListFailedCommand.html#method_parseFailedJob",
		"name": "Illuminate\\Queue\\Console\\ListFailedCommand::parseFailedJob",
		"doc": "Parse the failed job row."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListFailedCommand",
		"fromLink": "Illuminate/Queue/Console/ListFailedCommand.html",
		"link": "Illuminate/Queue/Console/ListFailedCommand.html#method_matchJobName",
		"name": "Illuminate\\Queue\\Console\\ListFailedCommand::matchJobName",
		"doc": "Match the job name from the payload."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListFailedCommand",
		"fromLink": "Illuminate/Queue/Console/ListFailedCommand.html",
		"link": "Illuminate/Queue/Console/ListFailedCommand.html#method_displayFailedJobs",
		"name": "Illuminate\\Queue\\Console\\ListFailedCommand::displayFailedJobs",
		"doc": "Display the failed jobs in the console."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/ListenCommand.html",
		"name": "Illuminate\\Queue\\Console\\ListenCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListenCommand",
		"fromLink": "Illuminate/Queue/Console/ListenCommand.html",
		"link": "Illuminate/Queue/Console/ListenCommand.html#method___construct",
		"name": "Illuminate\\Queue\\Console\\ListenCommand::__construct",
		"doc": "Create a new queue listen command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListenCommand",
		"fromLink": "Illuminate/Queue/Console/ListenCommand.html",
		"link": "Illuminate/Queue/Console/ListenCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\ListenCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListenCommand",
		"fromLink": "Illuminate/Queue/Console/ListenCommand.html",
		"link": "Illuminate/Queue/Console/ListenCommand.html#method_getQueue",
		"name": "Illuminate\\Queue\\Console\\ListenCommand::getQueue",
		"doc": "Get the name of the queue connection to listen on."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListenCommand",
		"fromLink": "Illuminate/Queue/Console/ListenCommand.html",
		"link": "Illuminate/Queue/Console/ListenCommand.html#method_gatherOptions",
		"name": "Illuminate\\Queue\\Console\\ListenCommand::gatherOptions",
		"doc": "Get the listener options for the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\ListenCommand",
		"fromLink": "Illuminate/Queue/Console/ListenCommand.html",
		"link": "Illuminate/Queue/Console/ListenCommand.html#method_setOutputHandler",
		"name": "Illuminate\\Queue\\Console\\ListenCommand::setOutputHandler",
		"doc": "Set the options on the queue listener."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/RestartCommand.html",
		"name": "Illuminate\\Queue\\Console\\RestartCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\RestartCommand",
		"fromLink": "Illuminate/Queue/Console/RestartCommand.html",
		"link": "Illuminate/Queue/Console/RestartCommand.html#method___construct",
		"name": "Illuminate\\Queue\\Console\\RestartCommand::__construct",
		"doc": "Create a new queue restart command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\RestartCommand",
		"fromLink": "Illuminate/Queue/Console/RestartCommand.html",
		"link": "Illuminate/Queue/Console/RestartCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\RestartCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/RetryBatchCommand.html",
		"name": "Illuminate\\Queue\\Console\\RetryBatchCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\RetryBatchCommand",
		"fromLink": "Illuminate/Queue/Console/RetryBatchCommand.html",
		"link": "Illuminate/Queue/Console/RetryBatchCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\RetryBatchCommand::handle",
		"doc": "Execute the console command."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/RetryCommand.html",
		"name": "Illuminate\\Queue\\Console\\RetryCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\RetryCommand",
		"fromLink": "Illuminate/Queue/Console/RetryCommand.html",
		"link": "Illuminate/Queue/Console/RetryCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\RetryCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\RetryCommand",
		"fromLink": "Illuminate/Queue/Console/RetryCommand.html",
		"link": "Illuminate/Queue/Console/RetryCommand.html#method_getJobIds",
		"name": "Illuminate\\Queue\\Console\\RetryCommand::getJobIds",
		"doc": "Get the job IDs to be retried."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\RetryCommand",
		"fromLink": "Illuminate/Queue/Console/RetryCommand.html",
		"link": "Illuminate/Queue/Console/RetryCommand.html#method_getJobIdsByRanges",
		"name": "Illuminate\\Queue\\Console\\RetryCommand::getJobIdsByRanges",
		"doc": "Get the job IDs ranges, if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\RetryCommand",
		"fromLink": "Illuminate/Queue/Console/RetryCommand.html",
		"link": "Illuminate/Queue/Console/RetryCommand.html#method_retryJob",
		"name": "Illuminate\\Queue\\Console\\RetryCommand::retryJob",
		"doc": "Retry the queue job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\RetryCommand",
		"fromLink": "Illuminate/Queue/Console/RetryCommand.html",
		"link": "Illuminate/Queue/Console/RetryCommand.html#method_resetAttempts",
		"name": "Illuminate\\Queue\\Console\\RetryCommand::resetAttempts",
		"doc": "Reset the payload attempts."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/TableCommand.html",
		"name": "Illuminate\\Queue\\Console\\TableCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\TableCommand",
		"fromLink": "Illuminate/Queue/Console/TableCommand.html",
		"link": "Illuminate/Queue/Console/TableCommand.html#method___construct",
		"name": "Illuminate\\Queue\\Console\\TableCommand::__construct",
		"doc": "Create a new queue job table command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\TableCommand",
		"fromLink": "Illuminate/Queue/Console/TableCommand.html",
		"link": "Illuminate/Queue/Console/TableCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\TableCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\TableCommand",
		"fromLink": "Illuminate/Queue/Console/TableCommand.html",
		"link": "Illuminate/Queue/Console/TableCommand.html#method_createBaseMigration",
		"name": "Illuminate\\Queue\\Console\\TableCommand::createBaseMigration",
		"doc": "Create a base migration file for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\TableCommand",
		"fromLink": "Illuminate/Queue/Console/TableCommand.html",
		"link": "Illuminate/Queue/Console/TableCommand.html#method_replaceMigration",
		"name": "Illuminate\\Queue\\Console\\TableCommand::replaceMigration",
		"doc": "Replace the generated migration with the job table stub."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Console",
		"fromLink": "Illuminate/Queue/Console.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html",
		"name": "Illuminate\\Queue\\Console\\WorkCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method___construct",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::__construct",
		"doc": "Create a new queue work command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_handle",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_runWorker",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::runWorker",
		"doc": "Run the worker instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_gatherWorkerOptions",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::gatherWorkerOptions",
		"doc": "Gather all of the queue worker options as a single object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_listenForEvents",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::listenForEvents",
		"doc": "Listen for the queue events in order to update the console output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_writeOutput",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::writeOutput",
		"doc": "Write the status output for the queue worker."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_writeStatus",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::writeStatus",
		"doc": "Format the status output for the queue worker."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_logFailedJob",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::logFailedJob",
		"doc": "Store a failed job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_getQueue",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::getQueue",
		"doc": "Get the queue name for the worker."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Console\\WorkCommand",
		"fromLink": "Illuminate/Queue/Console/WorkCommand.html",
		"link": "Illuminate/Queue/Console/WorkCommand.html#method_downForMaintenance",
		"name": "Illuminate\\Queue\\Console\\WorkCommand::downForMaintenance",
		"doc": "Determine if the worker should run in maintenance mode."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html",
		"name": "Illuminate\\Queue\\DatabaseQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method___construct",
		"name": "Illuminate\\Queue\\DatabaseQueue::__construct",
		"doc": "Create a new database queue instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_size",
		"name": "Illuminate\\Queue\\DatabaseQueue::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_push",
		"name": "Illuminate\\Queue\\DatabaseQueue::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_pushRaw",
		"name": "Illuminate\\Queue\\DatabaseQueue::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_later",
		"name": "Illuminate\\Queue\\DatabaseQueue::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_bulk",
		"name": "Illuminate\\Queue\\DatabaseQueue::bulk",
		"doc": "Push an array of jobs onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_release",
		"name": "Illuminate\\Queue\\DatabaseQueue::release",
		"doc": "Release a reserved job back onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_pushToDatabase",
		"name": "Illuminate\\Queue\\DatabaseQueue::pushToDatabase",
		"doc": "Push a raw payload to the database with a given delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_buildDatabaseRecord",
		"name": "Illuminate\\Queue\\DatabaseQueue::buildDatabaseRecord",
		"doc": "Create an array to insert for the given job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_pop",
		"name": "Illuminate\\Queue\\DatabaseQueue::pop",
		"doc": "Pop the next job off of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_getNextAvailableJob",
		"name": "Illuminate\\Queue\\DatabaseQueue::getNextAvailableJob",
		"doc": "Get the next available job for the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_getLockForPopping",
		"name": "Illuminate\\Queue\\DatabaseQueue::getLockForPopping",
		"doc": "Get the lock required for popping the next job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_isAvailable",
		"name": "Illuminate\\Queue\\DatabaseQueue::isAvailable",
		"doc": "Modify the query to check for available jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_isReservedButExpired",
		"name": "Illuminate\\Queue\\DatabaseQueue::isReservedButExpired",
		"doc": "Modify the query to check for jobs that are reserved but have expired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_marshalJob",
		"name": "Illuminate\\Queue\\DatabaseQueue::marshalJob",
		"doc": "Marshal the reserved job into a DatabaseJob instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_markJobAsReserved",
		"name": "Illuminate\\Queue\\DatabaseQueue::markJobAsReserved",
		"doc": "Mark the given job ID as reserved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_deleteReserved",
		"name": "Illuminate\\Queue\\DatabaseQueue::deleteReserved",
		"doc": "Delete a reserved job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_deleteAndRelease",
		"name": "Illuminate\\Queue\\DatabaseQueue::deleteAndRelease",
		"doc": "Delete a reserved job from the reserved queue and release it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_clear",
		"name": "Illuminate\\Queue\\DatabaseQueue::clear",
		"doc": "Delete all of the jobs from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_getQueue",
		"name": "Illuminate\\Queue\\DatabaseQueue::getQueue",
		"doc": "Get the queue or return the default."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\DatabaseQueue",
		"fromLink": "Illuminate/Queue/DatabaseQueue.html",
		"link": "Illuminate/Queue/DatabaseQueue.html#method_getDatabase",
		"name": "Illuminate\\Queue\\DatabaseQueue::getDatabase",
		"doc": "Get the underlying database instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Events",
		"fromLink": "Illuminate/Queue/Events.html",
		"link": "Illuminate/Queue/Events/JobExceptionOccurred.html",
		"name": "Illuminate\\Queue\\Events\\JobExceptionOccurred",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Events\\JobExceptionOccurred",
		"fromLink": "Illuminate/Queue/Events/JobExceptionOccurred.html",
		"link": "Illuminate/Queue/Events/JobExceptionOccurred.html#method___construct",
		"name": "Illuminate\\Queue\\Events\\JobExceptionOccurred::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Events",
		"fromLink": "Illuminate/Queue/Events.html",
		"link": "Illuminate/Queue/Events/JobFailed.html",
		"name": "Illuminate\\Queue\\Events\\JobFailed",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Events\\JobFailed",
		"fromLink": "Illuminate/Queue/Events/JobFailed.html",
		"link": "Illuminate/Queue/Events/JobFailed.html#method___construct",
		"name": "Illuminate\\Queue\\Events\\JobFailed::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Events",
		"fromLink": "Illuminate/Queue/Events.html",
		"link": "Illuminate/Queue/Events/JobProcessed.html",
		"name": "Illuminate\\Queue\\Events\\JobProcessed",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Events\\JobProcessed",
		"fromLink": "Illuminate/Queue/Events/JobProcessed.html",
		"link": "Illuminate/Queue/Events/JobProcessed.html#method___construct",
		"name": "Illuminate\\Queue\\Events\\JobProcessed::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Events",
		"fromLink": "Illuminate/Queue/Events.html",
		"link": "Illuminate/Queue/Events/JobProcessing.html",
		"name": "Illuminate\\Queue\\Events\\JobProcessing",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Events\\JobProcessing",
		"fromLink": "Illuminate/Queue/Events/JobProcessing.html",
		"link": "Illuminate/Queue/Events/JobProcessing.html#method___construct",
		"name": "Illuminate\\Queue\\Events\\JobProcessing::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Events",
		"fromLink": "Illuminate/Queue/Events.html",
		"link": "Illuminate/Queue/Events/Looping.html",
		"name": "Illuminate\\Queue\\Events\\Looping",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Events\\Looping",
		"fromLink": "Illuminate/Queue/Events/Looping.html",
		"link": "Illuminate/Queue/Events/Looping.html#method___construct",
		"name": "Illuminate\\Queue\\Events\\Looping::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Events",
		"fromLink": "Illuminate/Queue/Events.html",
		"link": "Illuminate/Queue/Events/WorkerStopping.html",
		"name": "Illuminate\\Queue\\Events\\WorkerStopping",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Events\\WorkerStopping",
		"fromLink": "Illuminate/Queue/Events/WorkerStopping.html",
		"link": "Illuminate/Queue/Events/WorkerStopping.html#method___construct",
		"name": "Illuminate\\Queue\\Events\\WorkerStopping::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Failed",
		"fromLink": "Illuminate/Queue/Failed.html",
		"link": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html",
		"name": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html#method___construct",
		"name": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider::__construct",
		"doc": "Create a new database failed job provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html#method_log",
		"name": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider::log",
		"doc": "Log a failed job into storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html#method_all",
		"name": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider::all",
		"doc": "Get a list of all of the failed jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html#method_find",
		"name": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider::find",
		"doc": "Get a single failed job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html#method_forget",
		"name": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider::forget",
		"doc": "Delete a single failed job from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html#method_flush",
		"name": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider::flush",
		"doc": "Flush all of the failed jobs from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseFailedJobProvider.html#method_getTable",
		"name": "Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider::getTable",
		"doc": "Get a new query builder instance for the table."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Failed",
		"fromLink": "Illuminate/Queue/Failed.html",
		"link": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html",
		"name": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html#method___construct",
		"name": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider::__construct",
		"doc": "Create a new database failed job provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html#method_log",
		"name": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider::log",
		"doc": "Log a failed job into storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html#method_all",
		"name": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider::all",
		"doc": "Get a list of all of the failed jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html#method_find",
		"name": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider::find",
		"doc": "Get a single failed job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html#method_forget",
		"name": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider::forget",
		"doc": "Delete a single failed job from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html#method_flush",
		"name": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider::flush",
		"doc": "Flush all of the failed jobs from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DatabaseUuidFailedJobProvider.html#method_getTable",
		"name": "Illuminate\\Queue\\Failed\\DatabaseUuidFailedJobProvider::getTable",
		"doc": "Get a new query builder instance for the table."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Failed",
		"fromLink": "Illuminate/Queue/Failed.html",
		"link": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html",
		"name": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html#method___construct",
		"name": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider::__construct",
		"doc": "Create a new DynamoDb failed job provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html#method_log",
		"name": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider::log",
		"doc": "Log a failed job into storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html#method_all",
		"name": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider::all",
		"doc": "Get a list of all of the failed jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html#method_find",
		"name": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider::find",
		"doc": "Get a single failed job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html#method_forget",
		"name": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider::forget",
		"doc": "Delete a single failed job from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/DynamoDbFailedJobProvider.html#method_flush",
		"name": "Illuminate\\Queue\\Failed\\DynamoDbFailedJobProvider::flush",
		"doc": "Flush all of the failed jobs from storage."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Failed",
		"fromLink": "Illuminate/Queue/Failed.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_log",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::log",
		"doc": "Log a failed job into storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_all",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::all",
		"doc": "Get a list of all of the failed jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_find",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::find",
		"doc": "Get a single failed job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_forget",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::forget",
		"doc": "Delete a single failed job from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface",
		"fromLink": "Illuminate/Queue/Failed/FailedJobProviderInterface.html",
		"link": "Illuminate/Queue/Failed/FailedJobProviderInterface.html#method_flush",
		"name": "Illuminate\\Queue\\Failed\\FailedJobProviderInterface::flush",
		"doc": "Flush all of the failed jobs from storage."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Failed",
		"fromLink": "Illuminate/Queue/Failed.html",
		"link": "Illuminate/Queue/Failed/NullFailedJobProvider.html",
		"name": "Illuminate\\Queue\\Failed\\NullFailedJobProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\NullFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/NullFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/NullFailedJobProvider.html#method_log",
		"name": "Illuminate\\Queue\\Failed\\NullFailedJobProvider::log",
		"doc": "Log a failed job into storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\NullFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/NullFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/NullFailedJobProvider.html#method_all",
		"name": "Illuminate\\Queue\\Failed\\NullFailedJobProvider::all",
		"doc": "Get a list of all of the failed jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\NullFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/NullFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/NullFailedJobProvider.html#method_find",
		"name": "Illuminate\\Queue\\Failed\\NullFailedJobProvider::find",
		"doc": "Get a single failed job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\NullFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/NullFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/NullFailedJobProvider.html#method_forget",
		"name": "Illuminate\\Queue\\Failed\\NullFailedJobProvider::forget",
		"doc": "Delete a single failed job from storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Failed\\NullFailedJobProvider",
		"fromLink": "Illuminate/Queue/Failed/NullFailedJobProvider.html",
		"link": "Illuminate/Queue/Failed/NullFailedJobProvider.html#method_flush",
		"name": "Illuminate\\Queue\\Failed\\NullFailedJobProvider::flush",
		"doc": "Flush all of the failed jobs from storage."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/InteractsWithQueue.html",
		"name": "Illuminate\\Queue\\InteractsWithQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\InteractsWithQueue",
		"fromLink": "Illuminate/Queue/InteractsWithQueue.html",
		"link": "Illuminate/Queue/InteractsWithQueue.html#method_attempts",
		"name": "Illuminate\\Queue\\InteractsWithQueue::attempts",
		"doc": "Get the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\InteractsWithQueue",
		"fromLink": "Illuminate/Queue/InteractsWithQueue.html",
		"link": "Illuminate/Queue/InteractsWithQueue.html#method_delete",
		"name": "Illuminate\\Queue\\InteractsWithQueue::delete",
		"doc": "Delete the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\InteractsWithQueue",
		"fromLink": "Illuminate/Queue/InteractsWithQueue.html",
		"link": "Illuminate/Queue/InteractsWithQueue.html#method_fail",
		"name": "Illuminate\\Queue\\InteractsWithQueue::fail",
		"doc": "Fail the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\InteractsWithQueue",
		"fromLink": "Illuminate/Queue/InteractsWithQueue.html",
		"link": "Illuminate/Queue/InteractsWithQueue.html#method_release",
		"name": "Illuminate\\Queue\\InteractsWithQueue::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\InteractsWithQueue",
		"fromLink": "Illuminate/Queue/InteractsWithQueue.html",
		"link": "Illuminate/Queue/InteractsWithQueue.html#method_setJob",
		"name": "Illuminate\\Queue\\InteractsWithQueue::setJob",
		"doc": "Set the base queue job instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/InvalidPayloadException.html",
		"name": "Illuminate\\Queue\\InvalidPayloadException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\InvalidPayloadException",
		"fromLink": "Illuminate/Queue/InvalidPayloadException.html",
		"link": "Illuminate/Queue/InvalidPayloadException.html#method___construct",
		"name": "Illuminate\\Queue\\InvalidPayloadException::__construct",
		"doc": "Create a new exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Jobs",
		"fromLink": "Illuminate/Queue/Jobs.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method___construct",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method_release",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method_bury",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::bury",
		"doc": "Bury the job in the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method_delete",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::delete",
		"doc": "Delete the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method_attempts",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::attempts",
		"doc": "Get the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method_getJobId",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::getJobId",
		"doc": "Get the job identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method_getRawBody",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::getRawBody",
		"doc": "Get the raw body string for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method_getPheanstalk",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::getPheanstalk",
		"doc": "Get the underlying Pheanstalk instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\BeanstalkdJob",
		"fromLink": "Illuminate/Queue/Jobs/BeanstalkdJob.html",
		"link": "Illuminate/Queue/Jobs/BeanstalkdJob.html#method_getPheanstalkJob",
		"name": "Illuminate\\Queue\\Jobs\\BeanstalkdJob::getPheanstalkJob",
		"doc": "Get the underlying Pheanstalk job."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Jobs",
		"fromLink": "Illuminate/Queue/Jobs.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJob.html",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJob",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJob",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJob.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJob.html#method___construct",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJob::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJob",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJob.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJob.html#method_release",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJob::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJob",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJob.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJob.html#method_delete",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJob::delete",
		"doc": "Delete the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJob",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJob.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJob.html#method_attempts",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJob::attempts",
		"doc": "Get the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJob",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJob.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJob.html#method_getJobId",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJob::getJobId",
		"doc": "Get the job identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJob",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJob.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJob.html#method_getRawBody",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJob::getRawBody",
		"doc": "Get the raw body string for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJob",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJob.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJob.html#method_getJobRecord",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJob::getJobRecord",
		"doc": "Get the database job record."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Jobs",
		"fromLink": "Illuminate/Queue/Jobs.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJobRecord.html",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJobRecord.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJobRecord.html#method___construct",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord::__construct",
		"doc": "Create a new job record instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJobRecord.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJobRecord.html#method_increment",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord::increment",
		"doc": "Increment the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJobRecord.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJobRecord.html#method_touch",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord::touch",
		"doc": "Update the \"reserved at\" timestamp of the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord",
		"fromLink": "Illuminate/Queue/Jobs/DatabaseJobRecord.html",
		"link": "Illuminate/Queue/Jobs/DatabaseJobRecord.html#method___get",
		"name": "Illuminate\\Queue\\Jobs\\DatabaseJobRecord::__get",
		"doc": "Dynamically access the underlying job information."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Jobs",
		"fromLink": "Illuminate/Queue/Jobs.html",
		"link": "Illuminate/Queue/Jobs/Job.html",
		"name": "Illuminate\\Queue\\Jobs\\Job",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_getJobId",
		"name": "Illuminate\\Queue\\Jobs\\Job::getJobId",
		"doc": "Get the job identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_getRawBody",
		"name": "Illuminate\\Queue\\Jobs\\Job::getRawBody",
		"doc": "Get the raw body of the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_uuid",
		"name": "Illuminate\\Queue\\Jobs\\Job::uuid",
		"doc": "Get the UUID of the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_fire",
		"name": "Illuminate\\Queue\\Jobs\\Job::fire",
		"doc": "Fire the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_delete",
		"name": "Illuminate\\Queue\\Jobs\\Job::delete",
		"doc": "Delete the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_isDeleted",
		"name": "Illuminate\\Queue\\Jobs\\Job::isDeleted",
		"doc": "Determine if the job has been deleted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_release",
		"name": "Illuminate\\Queue\\Jobs\\Job::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_isReleased",
		"name": "Illuminate\\Queue\\Jobs\\Job::isReleased",
		"doc": "Determine if the job was released back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_isDeletedOrReleased",
		"name": "Illuminate\\Queue\\Jobs\\Job::isDeletedOrReleased",
		"doc": "Determine if the job has been deleted or released."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_hasFailed",
		"name": "Illuminate\\Queue\\Jobs\\Job::hasFailed",
		"doc": "Determine if the job has been marked as a failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_markAsFailed",
		"name": "Illuminate\\Queue\\Jobs\\Job::markAsFailed",
		"doc": "Mark the job as \"failed\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_fail",
		"name": "Illuminate\\Queue\\Jobs\\Job::fail",
		"doc": "Delete the job, call the \"failed\" method, and raise the failed job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_failed",
		"name": "Illuminate\\Queue\\Jobs\\Job::failed",
		"doc": "Process an exception that caused the job to fail."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_resolve",
		"name": "Illuminate\\Queue\\Jobs\\Job::resolve",
		"doc": "Resolve the given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_getResolvedJob",
		"name": "Illuminate\\Queue\\Jobs\\Job::getResolvedJob",
		"doc": "Get the resolved job handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_payload",
		"name": "Illuminate\\Queue\\Jobs\\Job::payload",
		"doc": "Get the decoded body of the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_maxTries",
		"name": "Illuminate\\Queue\\Jobs\\Job::maxTries",
		"doc": "Get the number of times to attempt a job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_maxExceptions",
		"name": "Illuminate\\Queue\\Jobs\\Job::maxExceptions",
		"doc": "Get the number of times to attempt a job after an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_backoff",
		"name": "Illuminate\\Queue\\Jobs\\Job::backoff",
		"doc": "The number of seconds to wait before retrying a job that encountered an uncaught exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_timeout",
		"name": "Illuminate\\Queue\\Jobs\\Job::timeout",
		"doc": "Get the number of seconds the job can run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_retryUntil",
		"name": "Illuminate\\Queue\\Jobs\\Job::retryUntil",
		"doc": "Get the timestamp indicating when the job should timeout."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_getName",
		"name": "Illuminate\\Queue\\Jobs\\Job::getName",
		"doc": "Get the name of the queued job class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_resolveName",
		"name": "Illuminate\\Queue\\Jobs\\Job::resolveName",
		"doc": "Get the resolved name of the queued job class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_getConnectionName",
		"name": "Illuminate\\Queue\\Jobs\\Job::getConnectionName",
		"doc": "Get the name of the connection the job belongs to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_getQueue",
		"name": "Illuminate\\Queue\\Jobs\\Job::getQueue",
		"doc": "Get the name of the queue the job belongs to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\Job",
		"fromLink": "Illuminate/Queue/Jobs/Job.html",
		"link": "Illuminate/Queue/Jobs/Job.html#method_getContainer",
		"name": "Illuminate\\Queue\\Jobs\\Job::getContainer",
		"doc": "Get the service container instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Jobs",
		"fromLink": "Illuminate/Queue/Jobs.html",
		"link": "Illuminate/Queue/Jobs/JobName.html",
		"name": "Illuminate\\Queue\\Jobs\\JobName",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\JobName",
		"fromLink": "Illuminate/Queue/Jobs/JobName.html",
		"link": "Illuminate/Queue/Jobs/JobName.html#method_parse",
		"name": "Illuminate\\Queue\\Jobs\\JobName::parse",
		"doc": "Parse the given job name into a class / method array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\JobName",
		"fromLink": "Illuminate/Queue/Jobs/JobName.html",
		"link": "Illuminate/Queue/Jobs/JobName.html#method_resolve",
		"name": "Illuminate\\Queue\\Jobs\\JobName::resolve",
		"doc": "Get the resolved name of the queued job class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Jobs",
		"fromLink": "Illuminate/Queue/Jobs.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\RedisJob",
		"fromLink": "Illuminate/Queue/Jobs/RedisJob.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html#method___construct",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\RedisJob",
		"fromLink": "Illuminate/Queue/Jobs/RedisJob.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html#method_getRawBody",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob::getRawBody",
		"doc": "Get the raw body string for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\RedisJob",
		"fromLink": "Illuminate/Queue/Jobs/RedisJob.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html#method_delete",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob::delete",
		"doc": "Delete the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\RedisJob",
		"fromLink": "Illuminate/Queue/Jobs/RedisJob.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html#method_release",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\RedisJob",
		"fromLink": "Illuminate/Queue/Jobs/RedisJob.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html#method_attempts",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob::attempts",
		"doc": "Get the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\RedisJob",
		"fromLink": "Illuminate/Queue/Jobs/RedisJob.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html#method_getJobId",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob::getJobId",
		"doc": "Get the job identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\RedisJob",
		"fromLink": "Illuminate/Queue/Jobs/RedisJob.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html#method_getRedisQueue",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob::getRedisQueue",
		"doc": "Get the underlying Redis factory implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\RedisJob",
		"fromLink": "Illuminate/Queue/Jobs/RedisJob.html",
		"link": "Illuminate/Queue/Jobs/RedisJob.html#method_getReservedJob",
		"name": "Illuminate\\Queue\\Jobs\\RedisJob::getReservedJob",
		"doc": "Get the underlying reserved Redis job."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Jobs",
		"fromLink": "Illuminate/Queue/Jobs.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SqsJob",
		"fromLink": "Illuminate/Queue/Jobs/SqsJob.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html#method___construct",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SqsJob",
		"fromLink": "Illuminate/Queue/Jobs/SqsJob.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html#method_release",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SqsJob",
		"fromLink": "Illuminate/Queue/Jobs/SqsJob.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html#method_delete",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob::delete",
		"doc": "Delete the job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SqsJob",
		"fromLink": "Illuminate/Queue/Jobs/SqsJob.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html#method_attempts",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob::attempts",
		"doc": "Get the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SqsJob",
		"fromLink": "Illuminate/Queue/Jobs/SqsJob.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html#method_getJobId",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob::getJobId",
		"doc": "Get the job identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SqsJob",
		"fromLink": "Illuminate/Queue/Jobs/SqsJob.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html#method_getRawBody",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob::getRawBody",
		"doc": "Get the raw body string for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SqsJob",
		"fromLink": "Illuminate/Queue/Jobs/SqsJob.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html#method_getSqs",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob::getSqs",
		"doc": "Get the underlying SQS client instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SqsJob",
		"fromLink": "Illuminate/Queue/Jobs/SqsJob.html",
		"link": "Illuminate/Queue/Jobs/SqsJob.html#method_getSqsJob",
		"name": "Illuminate\\Queue\\Jobs\\SqsJob::getSqsJob",
		"doc": "Get the underlying raw SQS job."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Jobs",
		"fromLink": "Illuminate/Queue/Jobs.html",
		"link": "Illuminate/Queue/Jobs/SyncJob.html",
		"name": "Illuminate\\Queue\\Jobs\\SyncJob",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SyncJob",
		"fromLink": "Illuminate/Queue/Jobs/SyncJob.html",
		"link": "Illuminate/Queue/Jobs/SyncJob.html#method___construct",
		"name": "Illuminate\\Queue\\Jobs\\SyncJob::__construct",
		"doc": "Create a new job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SyncJob",
		"fromLink": "Illuminate/Queue/Jobs/SyncJob.html",
		"link": "Illuminate/Queue/Jobs/SyncJob.html#method_release",
		"name": "Illuminate\\Queue\\Jobs\\SyncJob::release",
		"doc": "Release the job back into the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SyncJob",
		"fromLink": "Illuminate/Queue/Jobs/SyncJob.html",
		"link": "Illuminate/Queue/Jobs/SyncJob.html#method_attempts",
		"name": "Illuminate\\Queue\\Jobs\\SyncJob::attempts",
		"doc": "Get the number of times the job has been attempted."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SyncJob",
		"fromLink": "Illuminate/Queue/Jobs/SyncJob.html",
		"link": "Illuminate/Queue/Jobs/SyncJob.html#method_getJobId",
		"name": "Illuminate\\Queue\\Jobs\\SyncJob::getJobId",
		"doc": "Get the job identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SyncJob",
		"fromLink": "Illuminate/Queue/Jobs/SyncJob.html",
		"link": "Illuminate/Queue/Jobs/SyncJob.html#method_getRawBody",
		"name": "Illuminate\\Queue\\Jobs\\SyncJob::getRawBody",
		"doc": "Get the raw body string for the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Jobs\\SyncJob",
		"fromLink": "Illuminate/Queue/Jobs/SyncJob.html",
		"link": "Illuminate/Queue/Jobs/SyncJob.html#method_getQueue",
		"name": "Illuminate\\Queue\\Jobs\\SyncJob::getQueue",
		"doc": "Get the name of the queue the job belongs to."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/Listener.html",
		"name": "Illuminate\\Queue\\Listener",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method___construct",
		"name": "Illuminate\\Queue\\Listener::__construct",
		"doc": "Create a new queue listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_phpBinary",
		"name": "Illuminate\\Queue\\Listener::phpBinary",
		"doc": "Get the PHP binary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_artisanBinary",
		"name": "Illuminate\\Queue\\Listener::artisanBinary",
		"doc": "Get the Artisan binary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_listen",
		"name": "Illuminate\\Queue\\Listener::listen",
		"doc": "Listen to the given queue connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_makeProcess",
		"name": "Illuminate\\Queue\\Listener::makeProcess",
		"doc": "Create a new Symfony process for the worker."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_addEnvironment",
		"name": "Illuminate\\Queue\\Listener::addEnvironment",
		"doc": "Add the environment option to the given command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_createCommand",
		"name": "Illuminate\\Queue\\Listener::createCommand",
		"doc": "Create the command with the listener options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_runProcess",
		"name": "Illuminate\\Queue\\Listener::runProcess",
		"doc": "Run the given process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_handleWorkerOutput",
		"name": "Illuminate\\Queue\\Listener::handleWorkerOutput",
		"doc": "Handle output from the worker process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_memoryExceeded",
		"name": "Illuminate\\Queue\\Listener::memoryExceeded",
		"doc": "Determine if the memory limit has been exceeded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_stop",
		"name": "Illuminate\\Queue\\Listener::stop",
		"doc": "Stop listening and bail out of the script."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Listener",
		"fromLink": "Illuminate/Queue/Listener.html",
		"link": "Illuminate/Queue/Listener.html#method_setOutputHandler",
		"name": "Illuminate\\Queue\\Listener::setOutputHandler",
		"doc": "Set the output handler callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/ListenerOptions.html",
		"name": "Illuminate\\Queue\\ListenerOptions",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\ListenerOptions",
		"fromLink": "Illuminate/Queue/ListenerOptions.html",
		"link": "Illuminate/Queue/ListenerOptions.html#method___construct",
		"name": "Illuminate\\Queue\\ListenerOptions::__construct",
		"doc": "Create a new listener options instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/LuaScripts.html",
		"name": "Illuminate\\Queue\\LuaScripts",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\LuaScripts",
		"fromLink": "Illuminate/Queue/LuaScripts.html",
		"link": "Illuminate/Queue/LuaScripts.html#method_size",
		"name": "Illuminate\\Queue\\LuaScripts::size",
		"doc": "Get the Lua script for computing the size of queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\LuaScripts",
		"fromLink": "Illuminate/Queue/LuaScripts.html",
		"link": "Illuminate/Queue/LuaScripts.html#method_push",
		"name": "Illuminate\\Queue\\LuaScripts::push",
		"doc": "Get the Lua script for pushing jobs onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\LuaScripts",
		"fromLink": "Illuminate/Queue/LuaScripts.html",
		"link": "Illuminate/Queue/LuaScripts.html#method_pop",
		"name": "Illuminate\\Queue\\LuaScripts::pop",
		"doc": "Get the Lua script for popping the next job off of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\LuaScripts",
		"fromLink": "Illuminate/Queue/LuaScripts.html",
		"link": "Illuminate/Queue/LuaScripts.html#method_release",
		"name": "Illuminate\\Queue\\LuaScripts::release",
		"doc": "Get the Lua script for releasing reserved jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\LuaScripts",
		"fromLink": "Illuminate/Queue/LuaScripts.html",
		"link": "Illuminate/Queue/LuaScripts.html#method_migrateExpiredJobs",
		"name": "Illuminate\\Queue\\LuaScripts::migrateExpiredJobs",
		"doc": "Get the Lua script to migrate expired jobs back onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\LuaScripts",
		"fromLink": "Illuminate/Queue/LuaScripts.html",
		"link": "Illuminate/Queue/LuaScripts.html#method_clear",
		"name": "Illuminate\\Queue\\LuaScripts::clear",
		"doc": "Get the Lua script for removing all jobs from the queue."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/ManuallyFailedException.html",
		"name": "Illuminate\\Queue\\ManuallyFailedException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/MaxAttemptsExceededException.html",
		"name": "Illuminate\\Queue\\MaxAttemptsExceededException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Middleware",
		"fromLink": "Illuminate/Queue/Middleware.html",
		"link": "Illuminate/Queue/Middleware/RateLimited.html",
		"name": "Illuminate\\Queue\\Middleware\\RateLimited",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimited",
		"fromLink": "Illuminate/Queue/Middleware/RateLimited.html",
		"link": "Illuminate/Queue/Middleware/RateLimited.html#method___construct",
		"name": "Illuminate\\Queue\\Middleware\\RateLimited::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimited",
		"fromLink": "Illuminate/Queue/Middleware/RateLimited.html",
		"link": "Illuminate/Queue/Middleware/RateLimited.html#method_handle",
		"name": "Illuminate\\Queue\\Middleware\\RateLimited::handle",
		"doc": "Process the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimited",
		"fromLink": "Illuminate/Queue/Middleware/RateLimited.html",
		"link": "Illuminate/Queue/Middleware/RateLimited.html#method_handleJob",
		"name": "Illuminate\\Queue\\Middleware\\RateLimited::handleJob",
		"doc": "Handle a rate limited job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimited",
		"fromLink": "Illuminate/Queue/Middleware/RateLimited.html",
		"link": "Illuminate/Queue/Middleware/RateLimited.html#method_dontRelease",
		"name": "Illuminate\\Queue\\Middleware\\RateLimited::dontRelease",
		"doc": "Do not release the job back to the queue if limit is exceeded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimited",
		"fromLink": "Illuminate/Queue/Middleware/RateLimited.html",
		"link": "Illuminate/Queue/Middleware/RateLimited.html#method_getTimeUntilNextRetry",
		"name": "Illuminate\\Queue\\Middleware\\RateLimited::getTimeUntilNextRetry",
		"doc": "Get the number of seconds that should elapse before the job is retried."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Middleware",
		"fromLink": "Illuminate/Queue/Middleware.html",
		"link": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html",
		"name": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis",
		"fromLink": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html",
		"link": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html#method___construct",
		"name": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis",
		"fromLink": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html",
		"link": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html#method_handleJob",
		"name": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis::handleJob",
		"doc": "Handle a rate limited job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis",
		"fromLink": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html",
		"link": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html#method_tooManyAttempts",
		"name": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis::tooManyAttempts",
		"doc": "Determine if the given key has been \"accessed\" too many times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis",
		"fromLink": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html",
		"link": "Illuminate/Queue/Middleware/RateLimitedWithRedis.html#method_getTimeUntilNextRetry",
		"name": "Illuminate\\Queue\\Middleware\\RateLimitedWithRedis::getTimeUntilNextRetry",
		"doc": "Get the number of seconds that should elapse before the job is retried."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue\\Middleware",
		"fromLink": "Illuminate/Queue/Middleware.html",
		"link": "Illuminate/Queue/Middleware/WithoutOverlapping.html",
		"name": "Illuminate\\Queue\\Middleware\\WithoutOverlapping",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\WithoutOverlapping",
		"fromLink": "Illuminate/Queue/Middleware/WithoutOverlapping.html",
		"link": "Illuminate/Queue/Middleware/WithoutOverlapping.html#method___construct",
		"name": "Illuminate\\Queue\\Middleware\\WithoutOverlapping::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\WithoutOverlapping",
		"fromLink": "Illuminate/Queue/Middleware/WithoutOverlapping.html",
		"link": "Illuminate/Queue/Middleware/WithoutOverlapping.html#method_handle",
		"name": "Illuminate\\Queue\\Middleware\\WithoutOverlapping::handle",
		"doc": "Process the job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\WithoutOverlapping",
		"fromLink": "Illuminate/Queue/Middleware/WithoutOverlapping.html",
		"link": "Illuminate/Queue/Middleware/WithoutOverlapping.html#method_releaseAfter",
		"name": "Illuminate\\Queue\\Middleware\\WithoutOverlapping::releaseAfter",
		"doc": "Set the delay (in seconds) to release the job back to the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\WithoutOverlapping",
		"fromLink": "Illuminate/Queue/Middleware/WithoutOverlapping.html",
		"link": "Illuminate/Queue/Middleware/WithoutOverlapping.html#method_dontRelease",
		"name": "Illuminate\\Queue\\Middleware\\WithoutOverlapping::dontRelease",
		"doc": "Do not release the job back to the queue if no lock can be acquired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\WithoutOverlapping",
		"fromLink": "Illuminate/Queue/Middleware/WithoutOverlapping.html",
		"link": "Illuminate/Queue/Middleware/WithoutOverlapping.html#method_expireAfter",
		"name": "Illuminate\\Queue\\Middleware\\WithoutOverlapping::expireAfter",
		"doc": "Set the maximum number of seconds that can elapse before the lock is released."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\WithoutOverlapping",
		"fromLink": "Illuminate/Queue/Middleware/WithoutOverlapping.html",
		"link": "Illuminate/Queue/Middleware/WithoutOverlapping.html#method_withPrefix",
		"name": "Illuminate\\Queue\\Middleware\\WithoutOverlapping::withPrefix",
		"doc": "Set the prefix of the lock key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Middleware\\WithoutOverlapping",
		"fromLink": "Illuminate/Queue/Middleware/WithoutOverlapping.html",
		"link": "Illuminate/Queue/Middleware/WithoutOverlapping.html#method_getLockKey",
		"name": "Illuminate\\Queue\\Middleware\\WithoutOverlapping::getLockKey",
		"doc": "Get the lock key for the given job."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/NullQueue.html",
		"name": "Illuminate\\Queue\\NullQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\NullQueue",
		"fromLink": "Illuminate/Queue/NullQueue.html",
		"link": "Illuminate/Queue/NullQueue.html#method_size",
		"name": "Illuminate\\Queue\\NullQueue::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\NullQueue",
		"fromLink": "Illuminate/Queue/NullQueue.html",
		"link": "Illuminate/Queue/NullQueue.html#method_push",
		"name": "Illuminate\\Queue\\NullQueue::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\NullQueue",
		"fromLink": "Illuminate/Queue/NullQueue.html",
		"link": "Illuminate/Queue/NullQueue.html#method_pushRaw",
		"name": "Illuminate\\Queue\\NullQueue::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\NullQueue",
		"fromLink": "Illuminate/Queue/NullQueue.html",
		"link": "Illuminate/Queue/NullQueue.html#method_later",
		"name": "Illuminate\\Queue\\NullQueue::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\NullQueue",
		"fromLink": "Illuminate/Queue/NullQueue.html",
		"link": "Illuminate/Queue/NullQueue.html#method_pop",
		"name": "Illuminate\\Queue\\NullQueue::pop",
		"doc": "Pop the next job off of the queue."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/Queue.html",
		"name": "Illuminate\\Queue\\Queue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_pushOn",
		"name": "Illuminate\\Queue\\Queue::pushOn",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_laterOn",
		"name": "Illuminate\\Queue\\Queue::laterOn",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_bulk",
		"name": "Illuminate\\Queue\\Queue::bulk",
		"doc": "Push an array of jobs onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_createPayload",
		"name": "Illuminate\\Queue\\Queue::createPayload",
		"doc": "Create a payload string from the given job and data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_createPayloadArray",
		"name": "Illuminate\\Queue\\Queue::createPayloadArray",
		"doc": "Create a payload array from the given job and data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_createObjectPayload",
		"name": "Illuminate\\Queue\\Queue::createObjectPayload",
		"doc": "Create a payload for an object-based queue handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_getDisplayName",
		"name": "Illuminate\\Queue\\Queue::getDisplayName",
		"doc": "Get the display name for the given job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_getJobBackoff",
		"name": "Illuminate\\Queue\\Queue::getJobBackoff",
		"doc": "Get the backoff for an object-based queue handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_getJobExpiration",
		"name": "Illuminate\\Queue\\Queue::getJobExpiration",
		"doc": "Get the expiration timestamp for an object-based queue handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_createStringPayload",
		"name": "Illuminate\\Queue\\Queue::createStringPayload",
		"doc": "Create a typical, string based queue payload array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_createPayloadUsing",
		"name": "Illuminate\\Queue\\Queue::createPayloadUsing",
		"doc": "Register a callback to be executed when creating job payloads."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_withCreatePayloadHooks",
		"name": "Illuminate\\Queue\\Queue::withCreatePayloadHooks",
		"doc": "Create the given payload using any registered payload hooks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_getConnectionName",
		"name": "Illuminate\\Queue\\Queue::getConnectionName",
		"doc": "Get the connection name for the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_setConnectionName",
		"name": "Illuminate\\Queue\\Queue::setConnectionName",
		"doc": "Set the connection name for the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Queue",
		"fromLink": "Illuminate/Queue/Queue.html",
		"link": "Illuminate/Queue/Queue.html#method_setContainer",
		"name": "Illuminate\\Queue\\Queue::setContainer",
		"doc": "Set the IoC container instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/QueueManager.html",
		"name": "Illuminate\\Queue\\QueueManager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method___construct",
		"name": "Illuminate\\Queue\\QueueManager::__construct",
		"doc": "Create a new queue manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_before",
		"name": "Illuminate\\Queue\\QueueManager::before",
		"doc": "Register an event listener for the before job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_after",
		"name": "Illuminate\\Queue\\QueueManager::after",
		"doc": "Register an event listener for the after job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_exceptionOccurred",
		"name": "Illuminate\\Queue\\QueueManager::exceptionOccurred",
		"doc": "Register an event listener for the exception occurred job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_looping",
		"name": "Illuminate\\Queue\\QueueManager::looping",
		"doc": "Register an event listener for the daemon queue loop."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_failing",
		"name": "Illuminate\\Queue\\QueueManager::failing",
		"doc": "Register an event listener for the failed job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_stopping",
		"name": "Illuminate\\Queue\\QueueManager::stopping",
		"doc": "Register an event listener for the daemon queue stopping."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_connected",
		"name": "Illuminate\\Queue\\QueueManager::connected",
		"doc": "Determine if the driver is connected."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_connection",
		"name": "Illuminate\\Queue\\QueueManager::connection",
		"doc": "Resolve a queue connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_resolve",
		"name": "Illuminate\\Queue\\QueueManager::resolve",
		"doc": "Resolve a queue connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_getConnector",
		"name": "Illuminate\\Queue\\QueueManager::getConnector",
		"doc": "Get the connector for a given driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_extend",
		"name": "Illuminate\\Queue\\QueueManager::extend",
		"doc": "Add a queue connection resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_addConnector",
		"name": "Illuminate\\Queue\\QueueManager::addConnector",
		"doc": "Add a queue connection resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_getConfig",
		"name": "Illuminate\\Queue\\QueueManager::getConfig",
		"doc": "Get the queue connection configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Queue\\QueueManager::getDefaultDriver",
		"doc": "Get the name of the default queue connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_setDefaultDriver",
		"name": "Illuminate\\Queue\\QueueManager::setDefaultDriver",
		"doc": "Set the name of the default queue connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method_getName",
		"name": "Illuminate\\Queue\\QueueManager::getName",
		"doc": "Get the full name for the given connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueManager",
		"fromLink": "Illuminate/Queue/QueueManager.html",
		"link": "Illuminate/Queue/QueueManager.html#method___call",
		"name": "Illuminate\\Queue\\QueueManager::__call",
		"doc": "Dynamically pass calls to the default connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html",
		"name": "Illuminate\\Queue\\QueueServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_register",
		"name": "Illuminate\\Queue\\QueueServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerManager",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerManager",
		"doc": "Register the queue manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerConnection",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerConnection",
		"doc": "Register the default queue connection binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerConnectors",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerConnectors",
		"doc": "Register the connectors on the queue manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerNullConnector",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerNullConnector",
		"doc": "Register the Null queue connector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerSyncConnector",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerSyncConnector",
		"doc": "Register the Sync queue connector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerDatabaseConnector",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerDatabaseConnector",
		"doc": "Register the database queue connector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerRedisConnector",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerRedisConnector",
		"doc": "Register the Redis queue connector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerBeanstalkdConnector",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerBeanstalkdConnector",
		"doc": "Register the Beanstalkd queue connector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerSqsConnector",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerSqsConnector",
		"doc": "Register the Amazon SQS queue connector."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerWorker",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerWorker",
		"doc": "Register the queue worker."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerListener",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerListener",
		"doc": "Register the queue listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_registerFailedJobServices",
		"name": "Illuminate\\Queue\\QueueServiceProvider::registerFailedJobServices",
		"doc": "Register the failed job services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_databaseFailedJobProvider",
		"name": "Illuminate\\Queue\\QueueServiceProvider::databaseFailedJobProvider",
		"doc": "Create a new database failed job provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_databaseUuidFailedJobProvider",
		"name": "Illuminate\\Queue\\QueueServiceProvider::databaseUuidFailedJobProvider",
		"doc": "Create a new database failed job provider that uses UUIDs as IDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_dynamoFailedJobProvider",
		"name": "Illuminate\\Queue\\QueueServiceProvider::dynamoFailedJobProvider",
		"doc": "Create a new DynamoDb failed job provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\QueueServiceProvider",
		"fromLink": "Illuminate/Queue/QueueServiceProvider.html",
		"link": "Illuminate/Queue/QueueServiceProvider.html#method_provides",
		"name": "Illuminate\\Queue\\QueueServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/RedisQueue.html",
		"name": "Illuminate\\Queue\\RedisQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method___construct",
		"name": "Illuminate\\Queue\\RedisQueue::__construct",
		"doc": "Create a new Redis queue instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_size",
		"name": "Illuminate\\Queue\\RedisQueue::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_bulk",
		"name": "Illuminate\\Queue\\RedisQueue::bulk",
		"doc": "Push an array of jobs onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_push",
		"name": "Illuminate\\Queue\\RedisQueue::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_pushRaw",
		"name": "Illuminate\\Queue\\RedisQueue::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_later",
		"name": "Illuminate\\Queue\\RedisQueue::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_laterRaw",
		"name": "Illuminate\\Queue\\RedisQueue::laterRaw",
		"doc": "Push a raw job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_createPayloadArray",
		"name": "Illuminate\\Queue\\RedisQueue::createPayloadArray",
		"doc": "Create a payload string from the given job and data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_pop",
		"name": "Illuminate\\Queue\\RedisQueue::pop",
		"doc": "Pop the next job off of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_migrate",
		"name": "Illuminate\\Queue\\RedisQueue::migrate",
		"doc": "Migrate any delayed or expired jobs onto the primary queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_migrateExpiredJobs",
		"name": "Illuminate\\Queue\\RedisQueue::migrateExpiredJobs",
		"doc": "Migrate the delayed jobs that are ready to the regular queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_retrieveNextJob",
		"name": "Illuminate\\Queue\\RedisQueue::retrieveNextJob",
		"doc": "Retrieve the next job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_deleteReserved",
		"name": "Illuminate\\Queue\\RedisQueue::deleteReserved",
		"doc": "Delete a reserved job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_deleteAndRelease",
		"name": "Illuminate\\Queue\\RedisQueue::deleteAndRelease",
		"doc": "Delete a reserved job from the reserved queue and release it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_clear",
		"name": "Illuminate\\Queue\\RedisQueue::clear",
		"doc": "Delete all of the jobs from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_getRandomId",
		"name": "Illuminate\\Queue\\RedisQueue::getRandomId",
		"doc": "Get a random ID string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_getQueue",
		"name": "Illuminate\\Queue\\RedisQueue::getQueue",
		"doc": "Get the queue or return the default."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_getConnection",
		"name": "Illuminate\\Queue\\RedisQueue::getConnection",
		"doc": "Get the connection for the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\RedisQueue",
		"fromLink": "Illuminate/Queue/RedisQueue.html",
		"link": "Illuminate/Queue/RedisQueue.html#method_getRedis",
		"name": "Illuminate\\Queue\\RedisQueue::getRedis",
		"doc": "Get the underlying Redis instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/SerializableClosure.html",
		"name": "Illuminate\\Queue\\SerializableClosure",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializableClosure",
		"fromLink": "Illuminate/Queue/SerializableClosure.html",
		"link": "Illuminate/Queue/SerializableClosure.html#method_transformUseVariables",
		"name": "Illuminate\\Queue\\SerializableClosure::transformUseVariables",
		"doc": "Transform the use variables before serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializableClosure",
		"fromLink": "Illuminate/Queue/SerializableClosure.html",
		"link": "Illuminate/Queue/SerializableClosure.html#method_resolveUseVariables",
		"name": "Illuminate\\Queue\\SerializableClosure::resolveUseVariables",
		"doc": "Resolve the use variables after unserialization."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html",
		"name": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers",
		"fromLink": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html",
		"link": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html#method_getSerializedPropertyValue",
		"name": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers::getSerializedPropertyValue",
		"doc": "Get the property value prepared for serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers",
		"fromLink": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html",
		"link": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html#method_getRestoredPropertyValue",
		"name": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers::getRestoredPropertyValue",
		"doc": "Get the restored property value after deserialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers",
		"fromLink": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html",
		"link": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html#method_restoreCollection",
		"name": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers::restoreCollection",
		"doc": "Restore a queueable collection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers",
		"fromLink": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html",
		"link": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html#method_restoreModel",
		"name": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers::restoreModel",
		"doc": "Restore the model from the model identifier instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers",
		"fromLink": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html",
		"link": "Illuminate/Queue/SerializesAndRestoresModelIdentifiers.html#method_getQueryForModelRestoration",
		"name": "Illuminate\\Queue\\SerializesAndRestoresModelIdentifiers::getQueryForModelRestoration",
		"doc": "Get the query for model restoration."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/SerializesModels.html",
		"name": "Illuminate\\Queue\\SerializesModels",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesModels",
		"fromLink": "Illuminate/Queue/SerializesModels.html",
		"link": "Illuminate/Queue/SerializesModels.html#method___sleep",
		"name": "Illuminate\\Queue\\SerializesModels::__sleep",
		"doc": "Prepare the instance for serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesModels",
		"fromLink": "Illuminate/Queue/SerializesModels.html",
		"link": "Illuminate/Queue/SerializesModels.html#method___wakeup",
		"name": "Illuminate\\Queue\\SerializesModels::__wakeup",
		"doc": "Restore the model after serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesModels",
		"fromLink": "Illuminate/Queue/SerializesModels.html",
		"link": "Illuminate/Queue/SerializesModels.html#method___serialize",
		"name": "Illuminate\\Queue\\SerializesModels::__serialize",
		"doc": "Prepare the instance values for serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesModels",
		"fromLink": "Illuminate/Queue/SerializesModels.html",
		"link": "Illuminate/Queue/SerializesModels.html#method___unserialize",
		"name": "Illuminate\\Queue\\SerializesModels::__unserialize",
		"doc": "Restore the model after serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SerializesModels",
		"fromLink": "Illuminate/Queue/SerializesModels.html",
		"link": "Illuminate/Queue/SerializesModels.html#method_getPropertyValue",
		"name": "Illuminate\\Queue\\SerializesModels::getPropertyValue",
		"doc": "Get the property value for the given property."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/SqsQueue.html",
		"name": "Illuminate\\Queue\\SqsQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method___construct",
		"name": "Illuminate\\Queue\\SqsQueue::__construct",
		"doc": "Create a new Amazon SQS queue instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method_size",
		"name": "Illuminate\\Queue\\SqsQueue::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method_push",
		"name": "Illuminate\\Queue\\SqsQueue::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method_pushRaw",
		"name": "Illuminate\\Queue\\SqsQueue::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method_later",
		"name": "Illuminate\\Queue\\SqsQueue::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method_pop",
		"name": "Illuminate\\Queue\\SqsQueue::pop",
		"doc": "Pop the next job off of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method_clear",
		"name": "Illuminate\\Queue\\SqsQueue::clear",
		"doc": "Delete all of the jobs from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method_getQueue",
		"name": "Illuminate\\Queue\\SqsQueue::getQueue",
		"doc": "Get the queue or return the default."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SqsQueue",
		"fromLink": "Illuminate/Queue/SqsQueue.html",
		"link": "Illuminate/Queue/SqsQueue.html#method_getSqs",
		"name": "Illuminate\\Queue\\SqsQueue::getSqs",
		"doc": "Get the underlying SQS instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/SyncQueue.html",
		"name": "Illuminate\\Queue\\SyncQueue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_size",
		"name": "Illuminate\\Queue\\SyncQueue::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_push",
		"name": "Illuminate\\Queue\\SyncQueue::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_resolveJob",
		"name": "Illuminate\\Queue\\SyncQueue::resolveJob",
		"doc": "Resolve a Sync job instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_raiseBeforeJobEvent",
		"name": "Illuminate\\Queue\\SyncQueue::raiseBeforeJobEvent",
		"doc": "Raise the before queue job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_raiseAfterJobEvent",
		"name": "Illuminate\\Queue\\SyncQueue::raiseAfterJobEvent",
		"doc": "Raise the after queue job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_raiseExceptionOccurredJobEvent",
		"name": "Illuminate\\Queue\\SyncQueue::raiseExceptionOccurredJobEvent",
		"doc": "Raise the exception occurred queue job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_handleException",
		"name": "Illuminate\\Queue\\SyncQueue::handleException",
		"doc": "Handle an exception that occurred while processing a job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_pushRaw",
		"name": "Illuminate\\Queue\\SyncQueue::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_later",
		"name": "Illuminate\\Queue\\SyncQueue::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\SyncQueue",
		"fromLink": "Illuminate/Queue/SyncQueue.html",
		"link": "Illuminate/Queue/SyncQueue.html#method_pop",
		"name": "Illuminate\\Queue\\SyncQueue::pop",
		"doc": "Pop the next job off of the queue."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/Worker.html",
		"name": "Illuminate\\Queue\\Worker",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method___construct",
		"name": "Illuminate\\Queue\\Worker::__construct",
		"doc": "Create a new queue worker."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_daemon",
		"name": "Illuminate\\Queue\\Worker::daemon",
		"doc": "Listen to the given queue in a loop."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_registerTimeoutHandler",
		"name": "Illuminate\\Queue\\Worker::registerTimeoutHandler",
		"doc": "Register the worker timeout handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_resetTimeoutHandler",
		"name": "Illuminate\\Queue\\Worker::resetTimeoutHandler",
		"doc": "Reset the worker timeout handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_timeoutForJob",
		"name": "Illuminate\\Queue\\Worker::timeoutForJob",
		"doc": "Get the appropriate timeout for the given job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_daemonShouldRun",
		"name": "Illuminate\\Queue\\Worker::daemonShouldRun",
		"doc": "Determine if the daemon should process on this iteration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_pauseWorker",
		"name": "Illuminate\\Queue\\Worker::pauseWorker",
		"doc": "Pause the worker for the current loop."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_stopIfNecessary",
		"name": "Illuminate\\Queue\\Worker::stopIfNecessary",
		"doc": "Determine the exit code to stop the process if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_runNextJob",
		"name": "Illuminate\\Queue\\Worker::runNextJob",
		"doc": "Process the next job on the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_getNextJob",
		"name": "Illuminate\\Queue\\Worker::getNextJob",
		"doc": "Get the next job from the queue connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_runJob",
		"name": "Illuminate\\Queue\\Worker::runJob",
		"doc": "Process the given job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_stopWorkerIfLostConnection",
		"name": "Illuminate\\Queue\\Worker::stopWorkerIfLostConnection",
		"doc": "Stop the worker if we have lost connection to a database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_process",
		"name": "Illuminate\\Queue\\Worker::process",
		"doc": "Process the given job from the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_handleJobException",
		"name": "Illuminate\\Queue\\Worker::handleJobException",
		"doc": "Handle an exception that occurred while the job was running."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_markJobAsFailedIfAlreadyExceedsMaxAttempts",
		"name": "Illuminate\\Queue\\Worker::markJobAsFailedIfAlreadyExceedsMaxAttempts",
		"doc": "Mark the given job as failed if it has exceeded the maximum allowed attempts."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_markJobAsFailedIfWillExceedMaxAttempts",
		"name": "Illuminate\\Queue\\Worker::markJobAsFailedIfWillExceedMaxAttempts",
		"doc": "Mark the given job as failed if it has exceeded the maximum allowed attempts."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_markJobAsFailedIfWillExceedMaxExceptions",
		"name": "Illuminate\\Queue\\Worker::markJobAsFailedIfWillExceedMaxExceptions",
		"doc": "Mark the given job as failed if it has exceeded the maximum allowed attempts."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_failJob",
		"name": "Illuminate\\Queue\\Worker::failJob",
		"doc": "Mark the given job as failed and raise the relevant event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_calculateBackoff",
		"name": "Illuminate\\Queue\\Worker::calculateBackoff",
		"doc": "Calculate the backoff for the given job."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_raiseBeforeJobEvent",
		"name": "Illuminate\\Queue\\Worker::raiseBeforeJobEvent",
		"doc": "Raise the before queue job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_raiseAfterJobEvent",
		"name": "Illuminate\\Queue\\Worker::raiseAfterJobEvent",
		"doc": "Raise the after queue job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_raiseExceptionOccurredJobEvent",
		"name": "Illuminate\\Queue\\Worker::raiseExceptionOccurredJobEvent",
		"doc": "Raise the exception occurred queue job event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_queueShouldRestart",
		"name": "Illuminate\\Queue\\Worker::queueShouldRestart",
		"doc": "Determine if the queue worker should restart."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_getTimestampOfLastQueueRestart",
		"name": "Illuminate\\Queue\\Worker::getTimestampOfLastQueueRestart",
		"doc": "Get the last queue restart timestamp, or null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_listenForSignals",
		"name": "Illuminate\\Queue\\Worker::listenForSignals",
		"doc": "Enable async signals for the process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_supportsAsyncSignals",
		"name": "Illuminate\\Queue\\Worker::supportsAsyncSignals",
		"doc": "Determine if \"async\" signals are supported."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_memoryExceeded",
		"name": "Illuminate\\Queue\\Worker::memoryExceeded",
		"doc": "Determine if the memory limit has been exceeded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_stop",
		"name": "Illuminate\\Queue\\Worker::stop",
		"doc": "Stop listening and bail out of the script."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_kill",
		"name": "Illuminate\\Queue\\Worker::kill",
		"doc": "Kill the process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_maxAttemptsExceededException",
		"name": "Illuminate\\Queue\\Worker::maxAttemptsExceededException",
		"doc": "Create an instance of MaxAttemptsExceededException."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_sleep",
		"name": "Illuminate\\Queue\\Worker::sleep",
		"doc": "Sleep the script for a given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_setCache",
		"name": "Illuminate\\Queue\\Worker::setCache",
		"doc": "Set the cache repository implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_setName",
		"name": "Illuminate\\Queue\\Worker::setName",
		"doc": "Set the name of the worker."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_popUsing",
		"name": "Illuminate\\Queue\\Worker::popUsing",
		"doc": "Register a callback to be executed to pick jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_getManager",
		"name": "Illuminate\\Queue\\Worker::getManager",
		"doc": "Get the queue manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\Worker",
		"fromLink": "Illuminate/Queue/Worker.html",
		"link": "Illuminate/Queue/Worker.html#method_setManager",
		"name": "Illuminate\\Queue\\Worker::setManager",
		"doc": "Set the queue manager instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Queue",
		"fromLink": "Illuminate/Queue.html",
		"link": "Illuminate/Queue/WorkerOptions.html",
		"name": "Illuminate\\Queue\\WorkerOptions",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Queue\\WorkerOptions",
		"fromLink": "Illuminate/Queue/WorkerOptions.html",
		"link": "Illuminate/Queue/WorkerOptions.html#method___construct",
		"name": "Illuminate\\Queue\\WorkerOptions::__construct",
		"doc": "Create a new worker options instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Connections",
		"fromLink": "Illuminate/Redis/Connections.html",
		"link": "Illuminate/Redis/Connections/Connection.html",
		"name": "Illuminate\\Redis\\Connections\\Connection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_createSubscription",
		"name": "Illuminate\\Redis\\Connections\\Connection::createSubscription",
		"doc": "Subscribe to a set of given channels for messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_funnel",
		"name": "Illuminate\\Redis\\Connections\\Connection::funnel",
		"doc": "Funnel a callback for a maximum number of simultaneous executions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_throttle",
		"name": "Illuminate\\Redis\\Connections\\Connection::throttle",
		"doc": "Throttle a callback for a maximum number of executions over a given duration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_client",
		"name": "Illuminate\\Redis\\Connections\\Connection::client",
		"doc": "Get the underlying Redis client."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_subscribe",
		"name": "Illuminate\\Redis\\Connections\\Connection::subscribe",
		"doc": "Subscribe to a set of given channels for messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_psubscribe",
		"name": "Illuminate\\Redis\\Connections\\Connection::psubscribe",
		"doc": "Subscribe to a set of given channels with wildcards."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_command",
		"name": "Illuminate\\Redis\\Connections\\Connection::command",
		"doc": "Run a command against the Redis database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_event",
		"name": "Illuminate\\Redis\\Connections\\Connection::event",
		"doc": "Fire the given event if possible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_listen",
		"name": "Illuminate\\Redis\\Connections\\Connection::listen",
		"doc": "Register a Redis command listener with the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_getName",
		"name": "Illuminate\\Redis\\Connections\\Connection::getName",
		"doc": "Get the connection name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_setName",
		"name": "Illuminate\\Redis\\Connections\\Connection::setName",
		"doc": "Set the connections name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_getEventDispatcher",
		"name": "Illuminate\\Redis\\Connections\\Connection::getEventDispatcher",
		"doc": "Get the event dispatcher used by the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_setEventDispatcher",
		"name": "Illuminate\\Redis\\Connections\\Connection::setEventDispatcher",
		"doc": "Set the event dispatcher instance on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method_unsetEventDispatcher",
		"name": "Illuminate\\Redis\\Connections\\Connection::unsetEventDispatcher",
		"doc": "Unset the event dispatcher instance on the connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\Connection",
		"fromLink": "Illuminate/Redis/Connections/Connection.html",
		"link": "Illuminate/Redis/Connections/Connection.html#method___call",
		"name": "Illuminate\\Redis\\Connections\\Connection::__call",
		"doc": "Pass other method calls down to the underlying client."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Connections",
		"fromLink": "Illuminate/Redis/Connections.html",
		"link": "Illuminate/Redis/Connections/PhpRedisClusterConnection.html",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisClusterConnection",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Connections",
		"fromLink": "Illuminate/Redis/Connections.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method___construct",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::__construct",
		"doc": "Create a new PhpRedis connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_get",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::get",
		"doc": "Returns the value of the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_mget",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::mget",
		"doc": "Get the values of all the given keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_set",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::set",
		"doc": "Set the string value in argument as value of the key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_setnx",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::setnx",
		"doc": "Set the given key if it doesn't exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_hmget",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::hmget",
		"doc": "Get the value of the given hash fields."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_hmset",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::hmset",
		"doc": "Set the given hash fields to their respective values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_hsetnx",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::hsetnx",
		"doc": "Set the given hash field if it doesn't exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_lrem",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::lrem",
		"doc": "Removes the first count occurrences of the value element from the list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_blpop",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::blpop",
		"doc": "Removes and returns the first element of the list stored at key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_brpop",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::brpop",
		"doc": "Removes and returns the last element of the list stored at key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_spop",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::spop",
		"doc": "Removes and returns a random element from the set value at key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_zadd",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::zadd",
		"doc": "Add one or more members to a sorted set or update its score if it already exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_zrangebyscore",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::zrangebyscore",
		"doc": "Return elements with score between $min and $max."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_zrevrangebyscore",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::zrevrangebyscore",
		"doc": "Return elements with score between $min and $max."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_zinterstore",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::zinterstore",
		"doc": "Find the intersection between sets and store in a new set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_zunionstore",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::zunionstore",
		"doc": "Find the union between sets and store in a new set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_scan",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::scan",
		"doc": "Scans all keys based on options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_zscan",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::zscan",
		"doc": "Scans the given set for all values based on options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_hscan",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::hscan",
		"doc": "Scans the given hash for all values based on options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_sscan",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::sscan",
		"doc": "Scans the given set for all values based on options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_pipeline",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::pipeline",
		"doc": "Execute commands in a pipeline."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_transaction",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::transaction",
		"doc": "Execute commands in a transaction."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_evalsha",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::evalsha",
		"doc": "Evaluate a LUA script serverside, from the SHA1 hash of the script instead of the script itself."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_eval",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::eval",
		"doc": "Evaluate a script and return its result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_subscribe",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::subscribe",
		"doc": "Subscribe to a set of given channels for messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_psubscribe",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::psubscribe",
		"doc": "Subscribe to a set of given channels with wildcards."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_createSubscription",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::createSubscription",
		"doc": "Subscribe to a set of given channels for messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_flushdb",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::flushdb",
		"doc": "Flush the selected Redis database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_executeRaw",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::executeRaw",
		"doc": "Execute a raw command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_command",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::command",
		"doc": "Run a command against the Redis database."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method_disconnect",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::disconnect",
		"doc": "Disconnects from the Redis instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PhpRedisConnection",
		"fromLink": "Illuminate/Redis/Connections/PhpRedisConnection.html",
		"link": "Illuminate/Redis/Connections/PhpRedisConnection.html#method___call",
		"name": "Illuminate\\Redis\\Connections\\PhpRedisConnection::__call",
		"doc": "Pass other method calls down to the underlying client."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Connections",
		"fromLink": "Illuminate/Redis/Connections.html",
		"link": "Illuminate/Redis/Connections/PredisClusterConnection.html",
		"name": "Illuminate\\Redis\\Connections\\PredisClusterConnection",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Connections",
		"fromLink": "Illuminate/Redis/Connections.html",
		"link": "Illuminate/Redis/Connections/PredisConnection.html",
		"name": "Illuminate\\Redis\\Connections\\PredisConnection",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PredisConnection",
		"fromLink": "Illuminate/Redis/Connections/PredisConnection.html",
		"link": "Illuminate/Redis/Connections/PredisConnection.html#method___construct",
		"name": "Illuminate\\Redis\\Connections\\PredisConnection::__construct",
		"doc": "Create a new Predis connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PredisConnection",
		"fromLink": "Illuminate/Redis/Connections/PredisConnection.html",
		"link": "Illuminate/Redis/Connections/PredisConnection.html#method_createSubscription",
		"name": "Illuminate\\Redis\\Connections\\PredisConnection::createSubscription",
		"doc": "Subscribe to a set of given channels for messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connections\\PredisConnection",
		"fromLink": "Illuminate/Redis/Connections/PredisConnection.html",
		"link": "Illuminate/Redis/Connections/PredisConnection.html#method_flushdb",
		"name": "Illuminate\\Redis\\Connections\\PredisConnection::flushdb",
		"doc": "Flush the selected Redis database."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Connectors",
		"fromLink": "Illuminate/Redis/Connectors.html",
		"link": "Illuminate/Redis/Connectors/PhpRedisConnector.html",
		"name": "Illuminate\\Redis\\Connectors\\PhpRedisConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PhpRedisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PhpRedisConnector.html",
		"link": "Illuminate/Redis/Connectors/PhpRedisConnector.html#method_connect",
		"name": "Illuminate\\Redis\\Connectors\\PhpRedisConnector::connect",
		"doc": "Create a new clustered PhpRedis connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PhpRedisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PhpRedisConnector.html",
		"link": "Illuminate/Redis/Connectors/PhpRedisConnector.html#method_connectToCluster",
		"name": "Illuminate\\Redis\\Connectors\\PhpRedisConnector::connectToCluster",
		"doc": "Create a new clustered PhpRedis connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PhpRedisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PhpRedisConnector.html",
		"link": "Illuminate/Redis/Connectors/PhpRedisConnector.html#method_buildClusterConnectionString",
		"name": "Illuminate\\Redis\\Connectors\\PhpRedisConnector::buildClusterConnectionString",
		"doc": "Build a single cluster seed string from array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PhpRedisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PhpRedisConnector.html",
		"link": "Illuminate/Redis/Connectors/PhpRedisConnector.html#method_createClient",
		"name": "Illuminate\\Redis\\Connectors\\PhpRedisConnector::createClient",
		"doc": "Create the Redis client instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PhpRedisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PhpRedisConnector.html",
		"link": "Illuminate/Redis/Connectors/PhpRedisConnector.html#method_establishConnection",
		"name": "Illuminate\\Redis\\Connectors\\PhpRedisConnector::establishConnection",
		"doc": "Establish a connection with the Redis host."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PhpRedisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PhpRedisConnector.html",
		"link": "Illuminate/Redis/Connectors/PhpRedisConnector.html#method_createRedisClusterInstance",
		"name": "Illuminate\\Redis\\Connectors\\PhpRedisConnector::createRedisClusterInstance",
		"doc": "Create a new redis cluster instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PhpRedisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PhpRedisConnector.html",
		"link": "Illuminate/Redis/Connectors/PhpRedisConnector.html#method_formatHost",
		"name": "Illuminate\\Redis\\Connectors\\PhpRedisConnector::formatHost",
		"doc": "Format the host using the scheme if available."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Connectors",
		"fromLink": "Illuminate/Redis/Connectors.html",
		"link": "Illuminate/Redis/Connectors/PredisConnector.html",
		"name": "Illuminate\\Redis\\Connectors\\PredisConnector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PredisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PredisConnector.html",
		"link": "Illuminate/Redis/Connectors/PredisConnector.html#method_connect",
		"name": "Illuminate\\Redis\\Connectors\\PredisConnector::connect",
		"doc": "Create a new clustered Predis connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Connectors\\PredisConnector",
		"fromLink": "Illuminate/Redis/Connectors/PredisConnector.html",
		"link": "Illuminate/Redis/Connectors/PredisConnector.html#method_connectToCluster",
		"name": "Illuminate\\Redis\\Connectors\\PredisConnector::connectToCluster",
		"doc": "Create a new clustered Predis connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Events",
		"fromLink": "Illuminate/Redis/Events.html",
		"link": "Illuminate/Redis/Events/CommandExecuted.html",
		"name": "Illuminate\\Redis\\Events\\CommandExecuted",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Events\\CommandExecuted",
		"fromLink": "Illuminate/Redis/Events/CommandExecuted.html",
		"link": "Illuminate/Redis/Events/CommandExecuted.html#method___construct",
		"name": "Illuminate\\Redis\\Events\\CommandExecuted::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Limiters",
		"fromLink": "Illuminate/Redis/Limiters.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html#method___construct",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter::__construct",
		"doc": "Create a new concurrency limiter instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html#method_block",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter::block",
		"doc": "Attempt to acquire the lock for the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html#method_acquire",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html#method_lockScript",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter::lockScript",
		"doc": "Get the Lua script for acquiring a lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html#method_release",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter::release",
		"doc": "Release the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiter.html#method_releaseScript",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiter::releaseScript",
		"doc": "Get the Lua script to atomically release a lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Limiters",
		"fromLink": "Illuminate/Redis/Limiters.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html#method___construct",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder::__construct",
		"doc": "Create a new builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html#method_limit",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder::limit",
		"doc": "Set the maximum number of locks that can obtained per time window."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html#method_releaseAfter",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder::releaseAfter",
		"doc": "Set the number of seconds until the lock will be released."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html#method_block",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder::block",
		"doc": "Set the amount of time to block until a lock is available."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/ConcurrencyLimiterBuilder.html#method_then",
		"name": "Illuminate\\Redis\\Limiters\\ConcurrencyLimiterBuilder::then",
		"doc": "Execute the given callback if a lock is obtained, otherwise call the failure callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Limiters",
		"fromLink": "Illuminate/Redis/Limiters.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiter.html",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiter",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiter",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiter.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiter.html#method___construct",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiter::__construct",
		"doc": "Create a new duration limiter instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiter",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiter.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiter.html#method_block",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiter::block",
		"doc": "Attempt to acquire the lock for the given number of seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiter",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiter.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiter.html#method_acquire",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiter::acquire",
		"doc": "Attempt to acquire the lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiter",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiter.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiter.html#method_luaScript",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiter::luaScript",
		"doc": "Get the Lua script for acquiring a lock."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis\\Limiters",
		"fromLink": "Illuminate/Redis/Limiters.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html#method___construct",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder::__construct",
		"doc": "Create a new builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html#method_allow",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder::allow",
		"doc": "Set the maximum number of locks that can obtained per time window."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html#method_every",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder::every",
		"doc": "Set the amount of time the lock window is maintained."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html#method_block",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder::block",
		"doc": "Set the amount of time to block until a lock is available."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder",
		"fromLink": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html",
		"link": "Illuminate/Redis/Limiters/DurationLimiterBuilder.html#method_then",
		"name": "Illuminate\\Redis\\Limiters\\DurationLimiterBuilder::then",
		"doc": "Execute the given callback if a lock is obtained, otherwise call the failure callback."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis",
		"fromLink": "Illuminate/Redis.html",
		"link": "Illuminate/Redis/RedisManager.html",
		"name": "Illuminate\\Redis\\RedisManager",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method___construct",
		"name": "Illuminate\\Redis\\RedisManager::__construct",
		"doc": "Create a new Redis manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_connection",
		"name": "Illuminate\\Redis\\RedisManager::connection",
		"doc": "Get a Redis connection by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_resolve",
		"name": "Illuminate\\Redis\\RedisManager::resolve",
		"doc": "Resolve the given connection by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_resolveCluster",
		"name": "Illuminate\\Redis\\RedisManager::resolveCluster",
		"doc": "Resolve the given cluster connection by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_configure",
		"name": "Illuminate\\Redis\\RedisManager::configure",
		"doc": "Configure the given connection to prepare it for commands."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_connector",
		"name": "Illuminate\\Redis\\RedisManager::connector",
		"doc": "Get the connector instance for the current driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_parseConnectionConfiguration",
		"name": "Illuminate\\Redis\\RedisManager::parseConnectionConfiguration",
		"doc": "Parse the Redis connection configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_connections",
		"name": "Illuminate\\Redis\\RedisManager::connections",
		"doc": "Return all of the created connections."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_enableEvents",
		"name": "Illuminate\\Redis\\RedisManager::enableEvents",
		"doc": "Enable the firing of Redis command events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_disableEvents",
		"name": "Illuminate\\Redis\\RedisManager::disableEvents",
		"doc": "Disable the firing of Redis command events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_setDriver",
		"name": "Illuminate\\Redis\\RedisManager::setDriver",
		"doc": "Set the default driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_purge",
		"name": "Illuminate\\Redis\\RedisManager::purge",
		"doc": "Disconnect the given connection and remove from local cache."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method_extend",
		"name": "Illuminate\\Redis\\RedisManager::extend",
		"doc": "Register a custom driver creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisManager",
		"fromLink": "Illuminate/Redis/RedisManager.html",
		"link": "Illuminate/Redis/RedisManager.html#method___call",
		"name": "Illuminate\\Redis\\RedisManager::__call",
		"doc": "Pass methods onto the default Redis connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Redis",
		"fromLink": "Illuminate/Redis.html",
		"link": "Illuminate/Redis/RedisServiceProvider.html",
		"name": "Illuminate\\Redis\\RedisServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisServiceProvider",
		"fromLink": "Illuminate/Redis/RedisServiceProvider.html",
		"link": "Illuminate/Redis/RedisServiceProvider.html#method_register",
		"name": "Illuminate\\Redis\\RedisServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Redis\\RedisServiceProvider",
		"fromLink": "Illuminate/Redis/RedisServiceProvider.html",
		"link": "Illuminate/Redis/RedisServiceProvider.html#method_provides",
		"name": "Illuminate\\Redis\\RedisServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html",
		"name": "Illuminate\\Routing\\AbstractRouteCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_handleMatchedRoute",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::handleMatchedRoute",
		"doc": "Handle the matched route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_checkForAlternateVerbs",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::checkForAlternateVerbs",
		"doc": "Determine if any routes match on another HTTP verb."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_matchAgainstRoutes",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::matchAgainstRoutes",
		"doc": "Determine if a route in the array matches the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_getRouteForMethods",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::getRouteForMethods",
		"doc": "Get a route (if necessary) that responds when other available methods are present."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_methodNotAllowed",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::methodNotAllowed",
		"doc": "Throw a method not allowed HTTP exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_compile",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::compile",
		"doc": "Compile the routes for caching."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_dumper",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::dumper",
		"doc": "Return the CompiledUrlMatcherDumper instance for the route collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_toSymfonyRouteCollection",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::toSymfonyRouteCollection",
		"doc": "Convert the collection to a Symfony RouteCollection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_addToSymfonyRoutesCollection",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::addToSymfonyRoutesCollection",
		"doc": "Add a route to the SymfonyRouteCollection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_generateRouteName",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::generateRouteName",
		"doc": "Get a randomly generated route name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_getIterator",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::getIterator",
		"doc": "Get an iterator for the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\AbstractRouteCollection",
		"fromLink": "Illuminate/Routing/AbstractRouteCollection.html",
		"link": "Illuminate/Routing/AbstractRouteCollection.html#method_count",
		"name": "Illuminate\\Routing\\AbstractRouteCollection::count",
		"doc": "Count the number of items in the collection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html",
		"name": "Illuminate\\Routing\\CompiledRouteCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method___construct",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::__construct",
		"doc": "Create a new CompiledRouteCollection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_add",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::add",
		"doc": "Add a Route instance to the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_refreshNameLookups",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::refreshNameLookups",
		"doc": "Refresh the name look-up table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_refreshActionLookups",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::refreshActionLookups",
		"doc": "Refresh the action look-up table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_match",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::match",
		"doc": "Find the first route matching a given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_requestWithoutTrailingSlash",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::requestWithoutTrailingSlash",
		"doc": "Get a cloned instance of the given request without any trailing slash on the URI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_get",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::get",
		"doc": "Get routes from the collection by method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_hasNamedRoute",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::hasNamedRoute",
		"doc": "Determine if the route collection contains a given named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_getByName",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::getByName",
		"doc": "Get a route instance by its name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_getByAction",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::getByAction",
		"doc": "Get a route instance by its controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_getRoutes",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::getRoutes",
		"doc": "Get all of the routes in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_getRoutesByMethod",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::getRoutesByMethod",
		"doc": "Get all of the routes keyed by their HTTP verb / method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_getRoutesByName",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::getRoutesByName",
		"doc": "Get all of the routes keyed by their name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_newRoute",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::newRoute",
		"doc": "Resolve an array of attributes to a Route instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_setRouter",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::setRouter",
		"doc": "Set the router instance on the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CompiledRouteCollection",
		"fromLink": "Illuminate/Routing/CompiledRouteCollection.html",
		"link": "Illuminate/Routing/CompiledRouteCollection.html#method_setContainer",
		"name": "Illuminate\\Routing\\CompiledRouteCollection::setContainer",
		"doc": "Set the container instance on the route."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Console",
		"fromLink": "Illuminate/Routing/Console.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"fromLink": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html#method_getStub",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"fromLink": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"fromLink": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"fromLink": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html#method_buildClass",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand::buildClass",
		"doc": "Build the class with the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"fromLink": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html#method_buildParentReplacements",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand::buildParentReplacements",
		"doc": "Build the replacements for a parent controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"fromLink": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html#method_buildModelReplacements",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand::buildModelReplacements",
		"doc": "Build the model replacement values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"fromLink": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html#method_parseModel",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand::parseModel",
		"doc": "Get the fully-qualified model class name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\ControllerMakeCommand",
		"fromLink": "Illuminate/Routing/Console/ControllerMakeCommand.html",
		"link": "Illuminate/Routing/Console/ControllerMakeCommand.html#method_getOptions",
		"name": "Illuminate\\Routing\\Console\\ControllerMakeCommand::getOptions",
		"doc": "Get the console command options."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Console",
		"fromLink": "Illuminate/Routing/Console.html",
		"link": "Illuminate/Routing/Console/MiddlewareMakeCommand.html",
		"name": "Illuminate\\Routing\\Console\\MiddlewareMakeCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\MiddlewareMakeCommand",
		"fromLink": "Illuminate/Routing/Console/MiddlewareMakeCommand.html",
		"link": "Illuminate/Routing/Console/MiddlewareMakeCommand.html#method_getStub",
		"name": "Illuminate\\Routing\\Console\\MiddlewareMakeCommand::getStub",
		"doc": "Get the stub file for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\MiddlewareMakeCommand",
		"fromLink": "Illuminate/Routing/Console/MiddlewareMakeCommand.html",
		"link": "Illuminate/Routing/Console/MiddlewareMakeCommand.html#method_resolveStubPath",
		"name": "Illuminate\\Routing\\Console\\MiddlewareMakeCommand::resolveStubPath",
		"doc": "Resolve the fully-qualified path to the stub."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Console\\MiddlewareMakeCommand",
		"fromLink": "Illuminate/Routing/Console/MiddlewareMakeCommand.html",
		"link": "Illuminate/Routing/Console/MiddlewareMakeCommand.html#method_getDefaultNamespace",
		"name": "Illuminate\\Routing\\Console\\MiddlewareMakeCommand::getDefaultNamespace",
		"doc": "Get the default namespace for the class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Contracts",
		"fromLink": "Illuminate/Routing/Contracts.html",
		"link": "Illuminate/Routing/Contracts/ControllerDispatcher.html",
		"name": "Illuminate\\Routing\\Contracts\\ControllerDispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Contracts\\ControllerDispatcher",
		"fromLink": "Illuminate/Routing/Contracts/ControllerDispatcher.html",
		"link": "Illuminate/Routing/Contracts/ControllerDispatcher.html#method_dispatch",
		"name": "Illuminate\\Routing\\Contracts\\ControllerDispatcher::dispatch",
		"doc": "Dispatch a request to a given controller and method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Contracts\\ControllerDispatcher",
		"fromLink": "Illuminate/Routing/Contracts/ControllerDispatcher.html",
		"link": "Illuminate/Routing/Contracts/ControllerDispatcher.html#method_getMiddleware",
		"name": "Illuminate\\Routing\\Contracts\\ControllerDispatcher::getMiddleware",
		"doc": "Get the middleware for the controller instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/Controller.html",
		"name": "Illuminate\\Routing\\Controller",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Controller",
		"fromLink": "Illuminate/Routing/Controller.html",
		"link": "Illuminate/Routing/Controller.html#method_middleware",
		"name": "Illuminate\\Routing\\Controller::middleware",
		"doc": "Register middleware on the controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Controller",
		"fromLink": "Illuminate/Routing/Controller.html",
		"link": "Illuminate/Routing/Controller.html#method_getMiddleware",
		"name": "Illuminate\\Routing\\Controller::getMiddleware",
		"doc": "Get the middleware assigned to the controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Controller",
		"fromLink": "Illuminate/Routing/Controller.html",
		"link": "Illuminate/Routing/Controller.html#method_callAction",
		"name": "Illuminate\\Routing\\Controller::callAction",
		"doc": "Execute an action on the controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Controller",
		"fromLink": "Illuminate/Routing/Controller.html",
		"link": "Illuminate/Routing/Controller.html#method___call",
		"name": "Illuminate\\Routing\\Controller::__call",
		"doc": "Handle calls to missing methods on the controller."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/ControllerDispatcher.html",
		"name": "Illuminate\\Routing\\ControllerDispatcher",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ControllerDispatcher",
		"fromLink": "Illuminate/Routing/ControllerDispatcher.html",
		"link": "Illuminate/Routing/ControllerDispatcher.html#method___construct",
		"name": "Illuminate\\Routing\\ControllerDispatcher::__construct",
		"doc": "Create a new controller dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ControllerDispatcher",
		"fromLink": "Illuminate/Routing/ControllerDispatcher.html",
		"link": "Illuminate/Routing/ControllerDispatcher.html#method_dispatch",
		"name": "Illuminate\\Routing\\ControllerDispatcher::dispatch",
		"doc": "Dispatch a request to a given controller and method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ControllerDispatcher",
		"fromLink": "Illuminate/Routing/ControllerDispatcher.html",
		"link": "Illuminate/Routing/ControllerDispatcher.html#method_getMiddleware",
		"name": "Illuminate\\Routing\\ControllerDispatcher::getMiddleware",
		"doc": "Get the middleware for the controller instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ControllerDispatcher",
		"fromLink": "Illuminate/Routing/ControllerDispatcher.html",
		"link": "Illuminate/Routing/ControllerDispatcher.html#method_methodExcludedByOptions",
		"name": "Illuminate\\Routing\\ControllerDispatcher::methodExcludedByOptions",
		"doc": "Determine if the given options exclude a particular method."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/ControllerMiddlewareOptions.html",
		"name": "Illuminate\\Routing\\ControllerMiddlewareOptions",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ControllerMiddlewareOptions",
		"fromLink": "Illuminate/Routing/ControllerMiddlewareOptions.html",
		"link": "Illuminate/Routing/ControllerMiddlewareOptions.html#method___construct",
		"name": "Illuminate\\Routing\\ControllerMiddlewareOptions::__construct",
		"doc": "Create a new middleware option instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ControllerMiddlewareOptions",
		"fromLink": "Illuminate/Routing/ControllerMiddlewareOptions.html",
		"link": "Illuminate/Routing/ControllerMiddlewareOptions.html#method_only",
		"name": "Illuminate\\Routing\\ControllerMiddlewareOptions::only",
		"doc": "Set the controller methods the middleware should apply to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ControllerMiddlewareOptions",
		"fromLink": "Illuminate/Routing/ControllerMiddlewareOptions.html",
		"link": "Illuminate/Routing/ControllerMiddlewareOptions.html#method_except",
		"name": "Illuminate\\Routing\\ControllerMiddlewareOptions::except",
		"doc": "Set the controller methods the middleware should exclude."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html",
		"name": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints",
		"fromLink": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html",
		"link": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html#method_whereAlpha",
		"name": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints::whereAlpha",
		"doc": "Specify that the given route parameters must be alphabetic."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints",
		"fromLink": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html",
		"link": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html#method_whereAlphaNumeric",
		"name": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints::whereAlphaNumeric",
		"doc": "Specify that the given route parameters must be alphanumeric."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints",
		"fromLink": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html",
		"link": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html#method_whereNumber",
		"name": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints::whereNumber",
		"doc": "Specify that the given route parameters must be numeric."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints",
		"fromLink": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html",
		"link": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html#method_whereUuid",
		"name": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints::whereUuid",
		"doc": "Specify that the given route parameters must be UUIDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints",
		"fromLink": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html",
		"link": "Illuminate/Routing/CreatesRegularExpressionRouteConstraints.html#method_assignExpressionToParameters",
		"name": "Illuminate\\Routing\\CreatesRegularExpressionRouteConstraints::assignExpressionToParameters",
		"doc": "Apply the given regular expression to the given parameters."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Events",
		"fromLink": "Illuminate/Routing/Events.html",
		"link": "Illuminate/Routing/Events/RouteMatched.html",
		"name": "Illuminate\\Routing\\Events\\RouteMatched",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Events\\RouteMatched",
		"fromLink": "Illuminate/Routing/Events/RouteMatched.html",
		"link": "Illuminate/Routing/Events/RouteMatched.html#method___construct",
		"name": "Illuminate\\Routing\\Events\\RouteMatched::__construct",
		"doc": "Create a new event instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Exceptions",
		"fromLink": "Illuminate/Routing/Exceptions.html",
		"link": "Illuminate/Routing/Exceptions/InvalidSignatureException.html",
		"name": "Illuminate\\Routing\\Exceptions\\InvalidSignatureException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Exceptions\\InvalidSignatureException",
		"fromLink": "Illuminate/Routing/Exceptions/InvalidSignatureException.html",
		"link": "Illuminate/Routing/Exceptions/InvalidSignatureException.html#method___construct",
		"name": "Illuminate\\Routing\\Exceptions\\InvalidSignatureException::__construct",
		"doc": "Create a new exception instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Exceptions",
		"fromLink": "Illuminate/Routing/Exceptions.html",
		"link": "Illuminate/Routing/Exceptions/UrlGenerationException.html",
		"name": "Illuminate\\Routing\\Exceptions\\UrlGenerationException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Exceptions\\UrlGenerationException",
		"fromLink": "Illuminate/Routing/Exceptions/UrlGenerationException.html",
		"link": "Illuminate/Routing/Exceptions/UrlGenerationException.html#method_forMissingParameters",
		"name": "Illuminate\\Routing\\Exceptions\\UrlGenerationException::forMissingParameters",
		"doc": "Create a new exception for missing route parameters."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/ImplicitRouteBinding.html",
		"name": "Illuminate\\Routing\\ImplicitRouteBinding",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ImplicitRouteBinding",
		"fromLink": "Illuminate/Routing/ImplicitRouteBinding.html",
		"link": "Illuminate/Routing/ImplicitRouteBinding.html#method_resolveForRoute",
		"name": "Illuminate\\Routing\\ImplicitRouteBinding::resolveForRoute",
		"doc": "Resolve the implicit route bindings for the given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ImplicitRouteBinding",
		"fromLink": "Illuminate/Routing/ImplicitRouteBinding.html",
		"link": "Illuminate/Routing/ImplicitRouteBinding.html#method_getParameterName",
		"name": "Illuminate\\Routing\\ImplicitRouteBinding::getParameterName",
		"doc": "Return the parameter name if it exists in the given parameters."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Matching",
		"fromLink": "Illuminate/Routing/Matching.html",
		"link": "Illuminate/Routing/Matching/HostValidator.html",
		"name": "Illuminate\\Routing\\Matching\\HostValidator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Matching\\HostValidator",
		"fromLink": "Illuminate/Routing/Matching/HostValidator.html",
		"link": "Illuminate/Routing/Matching/HostValidator.html#method_matches",
		"name": "Illuminate\\Routing\\Matching\\HostValidator::matches",
		"doc": "Validate a given rule against a route and request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Matching",
		"fromLink": "Illuminate/Routing/Matching.html",
		"link": "Illuminate/Routing/Matching/MethodValidator.html",
		"name": "Illuminate\\Routing\\Matching\\MethodValidator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Matching\\MethodValidator",
		"fromLink": "Illuminate/Routing/Matching/MethodValidator.html",
		"link": "Illuminate/Routing/Matching/MethodValidator.html#method_matches",
		"name": "Illuminate\\Routing\\Matching\\MethodValidator::matches",
		"doc": "Validate a given rule against a route and request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Matching",
		"fromLink": "Illuminate/Routing/Matching.html",
		"link": "Illuminate/Routing/Matching/SchemeValidator.html",
		"name": "Illuminate\\Routing\\Matching\\SchemeValidator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Matching\\SchemeValidator",
		"fromLink": "Illuminate/Routing/Matching/SchemeValidator.html",
		"link": "Illuminate/Routing/Matching/SchemeValidator.html#method_matches",
		"name": "Illuminate\\Routing\\Matching\\SchemeValidator::matches",
		"doc": "Validate a given rule against a route and request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Matching",
		"fromLink": "Illuminate/Routing/Matching.html",
		"link": "Illuminate/Routing/Matching/UriValidator.html",
		"name": "Illuminate\\Routing\\Matching\\UriValidator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Matching\\UriValidator",
		"fromLink": "Illuminate/Routing/Matching/UriValidator.html",
		"link": "Illuminate/Routing/Matching/UriValidator.html#method_matches",
		"name": "Illuminate\\Routing\\Matching\\UriValidator::matches",
		"doc": "Validate a given rule against a route and request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Matching",
		"fromLink": "Illuminate/Routing/Matching.html",
		"link": "Illuminate/Routing/Matching/ValidatorInterface.html",
		"name": "Illuminate\\Routing\\Matching\\ValidatorInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Matching\\ValidatorInterface",
		"fromLink": "Illuminate/Routing/Matching/ValidatorInterface.html",
		"link": "Illuminate/Routing/Matching/ValidatorInterface.html#method_matches",
		"name": "Illuminate\\Routing\\Matching\\ValidatorInterface::matches",
		"doc": "Validate a given rule against a route and request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/MiddlewareNameResolver.html",
		"name": "Illuminate\\Routing\\MiddlewareNameResolver",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\MiddlewareNameResolver",
		"fromLink": "Illuminate/Routing/MiddlewareNameResolver.html",
		"link": "Illuminate/Routing/MiddlewareNameResolver.html#method_resolve",
		"name": "Illuminate\\Routing\\MiddlewareNameResolver::resolve",
		"doc": "Resolve the middleware name to a class name(s) preserving passed parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\MiddlewareNameResolver",
		"fromLink": "Illuminate/Routing/MiddlewareNameResolver.html",
		"link": "Illuminate/Routing/MiddlewareNameResolver.html#method_parseMiddlewareGroup",
		"name": "Illuminate\\Routing\\MiddlewareNameResolver::parseMiddlewareGroup",
		"doc": "Parse the middleware group and format it for usage."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Middleware",
		"fromLink": "Illuminate/Routing/Middleware.html",
		"link": "Illuminate/Routing/Middleware/SubstituteBindings.html",
		"name": "Illuminate\\Routing\\Middleware\\SubstituteBindings",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\SubstituteBindings",
		"fromLink": "Illuminate/Routing/Middleware/SubstituteBindings.html",
		"link": "Illuminate/Routing/Middleware/SubstituteBindings.html#method___construct",
		"name": "Illuminate\\Routing\\Middleware\\SubstituteBindings::__construct",
		"doc": "Create a new bindings substitutor."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\SubstituteBindings",
		"fromLink": "Illuminate/Routing/Middleware/SubstituteBindings.html",
		"link": "Illuminate/Routing/Middleware/SubstituteBindings.html#method_handle",
		"name": "Illuminate\\Routing\\Middleware\\SubstituteBindings::handle",
		"doc": "Handle an incoming request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Middleware",
		"fromLink": "Illuminate/Routing/Middleware.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method___construct",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::__construct",
		"doc": "Create a new request throttler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_handle",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_handleRequestUsingNamedLimiter",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::handleRequestUsingNamedLimiter",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_handleRequest",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::handleRequest",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_resolveMaxAttempts",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::resolveMaxAttempts",
		"doc": "Resolve the number of attempts if the user is authenticated or not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_resolveRequestSignature",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::resolveRequestSignature",
		"doc": "Resolve request signature."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_buildException",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::buildException",
		"doc": "Create a 'too many attempts' exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_getTimeUntilNextRetry",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::getTimeUntilNextRetry",
		"doc": "Get the number of seconds until the next retry."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_addHeaders",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::addHeaders",
		"doc": "Add the limit header information to the given response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_getHeaders",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::getHeaders",
		"doc": "Get the limit headers information."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequests.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequests.html#method_calculateRemainingAttempts",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequests::calculateRemainingAttempts",
		"doc": "Calculate the number of remaining attempts."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Middleware",
		"fromLink": "Illuminate/Routing/Middleware.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html#method___construct",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::__construct",
		"doc": "Create a new request throttler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html#method_handleRequest",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::handleRequest",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html#method_tooManyAttempts",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::tooManyAttempts",
		"doc": "Determine if the given key has been \"accessed\" too many times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html#method_calculateRemainingAttempts",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::calculateRemainingAttempts",
		"doc": "Calculate the number of remaining attempts."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis",
		"fromLink": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html",
		"link": "Illuminate/Routing/Middleware/ThrottleRequestsWithRedis.html#method_getTimeUntilNextRetry",
		"name": "Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::getTimeUntilNextRetry",
		"doc": "Get the number of seconds until the lock is released."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing\\Middleware",
		"fromLink": "Illuminate/Routing/Middleware.html",
		"link": "Illuminate/Routing/Middleware/ValidateSignature.html",
		"name": "Illuminate\\Routing\\Middleware\\ValidateSignature",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Middleware\\ValidateSignature",
		"fromLink": "Illuminate/Routing/Middleware/ValidateSignature.html",
		"link": "Illuminate/Routing/Middleware/ValidateSignature.html#method_handle",
		"name": "Illuminate\\Routing\\Middleware\\ValidateSignature::handle",
		"doc": "Handle an incoming request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html",
		"name": "Illuminate\\Routing\\PendingResourceRegistration",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method___construct",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::__construct",
		"doc": "Create a new pending resource registration instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_only",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::only",
		"doc": "Set the methods the controller should apply to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_except",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::except",
		"doc": "Set the methods the controller should exclude."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_names",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::names",
		"doc": "Set the route names for controller actions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_name",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::name",
		"doc": "Set the route name for a controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_parameters",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::parameters",
		"doc": "Override the route parameter names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_parameter",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::parameter",
		"doc": "Override a route parameter's name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_middleware",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::middleware",
		"doc": "Add middleware to the resource routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_withoutMiddleware",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::withoutMiddleware",
		"doc": "Specify middleware that should be removed from the resource routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_where",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::where",
		"doc": "Add \"where\" constraints to the resource routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_shallow",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::shallow",
		"doc": "Indicate that the resource routes should have \"shallow\" nesting."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_scoped",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::scoped",
		"doc": "Indicate that the resource routes should be scoped using the given binding fields."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method_register",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::register",
		"doc": "Register the resource route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\PendingResourceRegistration",
		"fromLink": "Illuminate/Routing/PendingResourceRegistration.html",
		"link": "Illuminate/Routing/PendingResourceRegistration.html#method___destruct",
		"name": "Illuminate\\Routing\\PendingResourceRegistration::__destruct",
		"doc": "Handle the object's destruction."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/Pipeline.html",
		"name": "Illuminate\\Routing\\Pipeline",
		"doc": "This extended pipeline catches any exceptions that occur during each slice."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Pipeline",
		"fromLink": "Illuminate/Routing/Pipeline.html",
		"link": "Illuminate/Routing/Pipeline.html#method_handleCarry",
		"name": "Illuminate\\Routing\\Pipeline::handleCarry",
		"doc": "Handles the value returned from each pipe before passing it to the next."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Pipeline",
		"fromLink": "Illuminate/Routing/Pipeline.html",
		"link": "Illuminate/Routing/Pipeline.html#method_handleException",
		"name": "Illuminate\\Routing\\Pipeline::handleException",
		"doc": "Handle the given exception."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RedirectController.html",
		"name": "Illuminate\\Routing\\RedirectController",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RedirectController",
		"fromLink": "Illuminate/Routing/RedirectController.html",
		"link": "Illuminate/Routing/RedirectController.html#method___invoke",
		"name": "Illuminate\\Routing\\RedirectController::__invoke",
		"doc": "Invoke the controller method."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/Redirector.html",
		"name": "Illuminate\\Routing\\Redirector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method___construct",
		"name": "Illuminate\\Routing\\Redirector::__construct",
		"doc": "Create a new Redirector instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_home",
		"name": "Illuminate\\Routing\\Redirector::home",
		"doc": "Create a new redirect response to the \"home\" route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_back",
		"name": "Illuminate\\Routing\\Redirector::back",
		"doc": "Create a new redirect response to the previous location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_refresh",
		"name": "Illuminate\\Routing\\Redirector::refresh",
		"doc": "Create a new redirect response to the current URI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_guest",
		"name": "Illuminate\\Routing\\Redirector::guest",
		"doc": "Create a new redirect response, while putting the current URL in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_intended",
		"name": "Illuminate\\Routing\\Redirector::intended",
		"doc": "Create a new redirect response to the previously intended location."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_setIntendedUrl",
		"name": "Illuminate\\Routing\\Redirector::setIntendedUrl",
		"doc": "Set the intended url."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_to",
		"name": "Illuminate\\Routing\\Redirector::to",
		"doc": "Create a new redirect response to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_away",
		"name": "Illuminate\\Routing\\Redirector::away",
		"doc": "Create a new redirect response to an external URL (no validation)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_secure",
		"name": "Illuminate\\Routing\\Redirector::secure",
		"doc": "Create a new redirect response to the given HTTPS path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_route",
		"name": "Illuminate\\Routing\\Redirector::route",
		"doc": "Create a new redirect response to a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_signedRoute",
		"name": "Illuminate\\Routing\\Redirector::signedRoute",
		"doc": "Create a new redirect response to a signed named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_temporarySignedRoute",
		"name": "Illuminate\\Routing\\Redirector::temporarySignedRoute",
		"doc": "Create a new redirect response to a signed named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_action",
		"name": "Illuminate\\Routing\\Redirector::action",
		"doc": "Create a new redirect response to a controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_createRedirect",
		"name": "Illuminate\\Routing\\Redirector::createRedirect",
		"doc": "Create a new redirect response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_getUrlGenerator",
		"name": "Illuminate\\Routing\\Redirector::getUrlGenerator",
		"doc": "Get the URL generator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Redirector",
		"fromLink": "Illuminate/Routing/Redirector.html",
		"link": "Illuminate/Routing/Redirector.html#method_setSession",
		"name": "Illuminate\\Routing\\Redirector::setSession",
		"doc": "Set the active session store."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html",
		"name": "Illuminate\\Routing\\ResourceRegistrar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method___construct",
		"name": "Illuminate\\Routing\\ResourceRegistrar::__construct",
		"doc": "Create a new resource registrar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_register",
		"name": "Illuminate\\Routing\\ResourceRegistrar::register",
		"doc": "Route a resource to a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_prefixedResource",
		"name": "Illuminate\\Routing\\ResourceRegistrar::prefixedResource",
		"doc": "Build a set of prefixed resource routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getResourcePrefix",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getResourcePrefix",
		"doc": "Extract the resource and prefix from a resource name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getResourceMethods",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getResourceMethods",
		"doc": "Get the applicable resource methods."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_addResourceIndex",
		"name": "Illuminate\\Routing\\ResourceRegistrar::addResourceIndex",
		"doc": "Add the index method for a resourceful route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_addResourceCreate",
		"name": "Illuminate\\Routing\\ResourceRegistrar::addResourceCreate",
		"doc": "Add the create method for a resourceful route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_addResourceStore",
		"name": "Illuminate\\Routing\\ResourceRegistrar::addResourceStore",
		"doc": "Add the store method for a resourceful route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_addResourceShow",
		"name": "Illuminate\\Routing\\ResourceRegistrar::addResourceShow",
		"doc": "Add the show method for a resourceful route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_addResourceEdit",
		"name": "Illuminate\\Routing\\ResourceRegistrar::addResourceEdit",
		"doc": "Add the edit method for a resourceful route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_addResourceUpdate",
		"name": "Illuminate\\Routing\\ResourceRegistrar::addResourceUpdate",
		"doc": "Add the update method for a resourceful route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_addResourceDestroy",
		"name": "Illuminate\\Routing\\ResourceRegistrar::addResourceDestroy",
		"doc": "Add the destroy method for a resourceful route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getShallowName",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getShallowName",
		"doc": "Get the name for a given resource with shallowness applied when applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_setResourceBindingFields",
		"name": "Illuminate\\Routing\\ResourceRegistrar::setResourceBindingFields",
		"doc": "Set the route's binding fields if the resource is scoped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getResourceUri",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getResourceUri",
		"doc": "Get the base resource URI for a given resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getNestedResourceUri",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getNestedResourceUri",
		"doc": "Get the URI for a nested resource segment array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getResourceWildcard",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getResourceWildcard",
		"doc": "Format a resource parameter for usage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getResourceAction",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getResourceAction",
		"doc": "Get the action array for a resource route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getResourceRouteName",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getResourceRouteName",
		"doc": "Get the name for a given resource."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_singularParameters",
		"name": "Illuminate\\Routing\\ResourceRegistrar::singularParameters",
		"doc": "Set or unset the unmapped global parameters to singular."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_getParameters",
		"name": "Illuminate\\Routing\\ResourceRegistrar::getParameters",
		"doc": "Get the global parameter map."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_setParameters",
		"name": "Illuminate\\Routing\\ResourceRegistrar::setParameters",
		"doc": "Set the global parameter mapping."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResourceRegistrar",
		"fromLink": "Illuminate/Routing/ResourceRegistrar.html",
		"link": "Illuminate/Routing/ResourceRegistrar.html#method_verbs",
		"name": "Illuminate\\Routing\\ResourceRegistrar::verbs",
		"doc": "Get or set the action verbs used in the resource URIs."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/ResponseFactory.html",
		"name": "Illuminate\\Routing\\ResponseFactory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method___construct",
		"name": "Illuminate\\Routing\\ResponseFactory::__construct",
		"doc": "Create a new response factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_make",
		"name": "Illuminate\\Routing\\ResponseFactory::make",
		"doc": "Create a new response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_noContent",
		"name": "Illuminate\\Routing\\ResponseFactory::noContent",
		"doc": "Create a new \"no content\" response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_view",
		"name": "Illuminate\\Routing\\ResponseFactory::view",
		"doc": "Create a new response for a given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_json",
		"name": "Illuminate\\Routing\\ResponseFactory::json",
		"doc": "Create a new JSON response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_jsonp",
		"name": "Illuminate\\Routing\\ResponseFactory::jsonp",
		"doc": "Create a new JSONP response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_stream",
		"name": "Illuminate\\Routing\\ResponseFactory::stream",
		"doc": "Create a new streamed response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_streamDownload",
		"name": "Illuminate\\Routing\\ResponseFactory::streamDownload",
		"doc": "Create a new streamed response instance as a file download."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_download",
		"name": "Illuminate\\Routing\\ResponseFactory::download",
		"doc": "Create a new file download response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_fallbackName",
		"name": "Illuminate\\Routing\\ResponseFactory::fallbackName",
		"doc": "Convert the string to ASCII characters that are equivalent to the given name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_file",
		"name": "Illuminate\\Routing\\ResponseFactory::file",
		"doc": "Return the raw contents of a binary file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_redirectTo",
		"name": "Illuminate\\Routing\\ResponseFactory::redirectTo",
		"doc": "Create a new redirect response to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_redirectToRoute",
		"name": "Illuminate\\Routing\\ResponseFactory::redirectToRoute",
		"doc": "Create a new redirect response to a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_redirectToAction",
		"name": "Illuminate\\Routing\\ResponseFactory::redirectToAction",
		"doc": "Create a new redirect response to a controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_redirectGuest",
		"name": "Illuminate\\Routing\\ResponseFactory::redirectGuest",
		"doc": "Create a new redirect response, while putting the current URL in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ResponseFactory",
		"fromLink": "Illuminate/Routing/ResponseFactory.html",
		"link": "Illuminate/Routing/ResponseFactory.html#method_redirectToIntended",
		"name": "Illuminate\\Routing\\ResponseFactory::redirectToIntended",
		"doc": "Create a new redirect response to the previously intended location."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/Route.html",
		"name": "Illuminate\\Routing\\Route",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method___construct",
		"name": "Illuminate\\Routing\\Route::__construct",
		"doc": "Create a new Route instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parseAction",
		"name": "Illuminate\\Routing\\Route::parseAction",
		"doc": "Parse the route action into a standard array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_run",
		"name": "Illuminate\\Routing\\Route::run",
		"doc": "Run the route action and return the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_isControllerAction",
		"name": "Illuminate\\Routing\\Route::isControllerAction",
		"doc": "Checks whether the route's action is a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_runCallable",
		"name": "Illuminate\\Routing\\Route::runCallable",
		"doc": "Run the route action and return the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_isSerializedClosure",
		"name": "Illuminate\\Routing\\Route::isSerializedClosure",
		"doc": "Determine if the route action is a serialized Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_runController",
		"name": "Illuminate\\Routing\\Route::runController",
		"doc": "Run the route action and return the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getController",
		"name": "Illuminate\\Routing\\Route::getController",
		"doc": "Get the controller instance for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getControllerMethod",
		"name": "Illuminate\\Routing\\Route::getControllerMethod",
		"doc": "Get the controller method used for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parseControllerCallback",
		"name": "Illuminate\\Routing\\Route::parseControllerCallback",
		"doc": "Parse the controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_matches",
		"name": "Illuminate\\Routing\\Route::matches",
		"doc": "Determine if the route matches a given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_compileRoute",
		"name": "Illuminate\\Routing\\Route::compileRoute",
		"doc": "Compile the route into a Symfony CompiledRoute instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_bind",
		"name": "Illuminate\\Routing\\Route::bind",
		"doc": "Bind the route to a given request for execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_hasParameters",
		"name": "Illuminate\\Routing\\Route::hasParameters",
		"doc": "Determine if the route has parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_hasParameter",
		"name": "Illuminate\\Routing\\Route::hasParameter",
		"doc": "Determine a given parameter exists from the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parameter",
		"name": "Illuminate\\Routing\\Route::parameter",
		"doc": "Get a given parameter from the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_originalParameter",
		"name": "Illuminate\\Routing\\Route::originalParameter",
		"doc": "Get original value of a given parameter from the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setParameter",
		"name": "Illuminate\\Routing\\Route::setParameter",
		"doc": "Set a parameter to the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_forgetParameter",
		"name": "Illuminate\\Routing\\Route::forgetParameter",
		"doc": "Unset a parameter on the route if it is set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parameters",
		"name": "Illuminate\\Routing\\Route::parameters",
		"doc": "Get the key / value list of parameters for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_originalParameters",
		"name": "Illuminate\\Routing\\Route::originalParameters",
		"doc": "Get the key / value list of original parameters for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parametersWithoutNulls",
		"name": "Illuminate\\Routing\\Route::parametersWithoutNulls",
		"doc": "Get the key / value list of parameters without null values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parameterNames",
		"name": "Illuminate\\Routing\\Route::parameterNames",
		"doc": "Get all of the parameter names for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_compileParameterNames",
		"name": "Illuminate\\Routing\\Route::compileParameterNames",
		"doc": "Get the parameter names for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_signatureParameters",
		"name": "Illuminate\\Routing\\Route::signatureParameters",
		"doc": "Get the parameters that are listed in the route / controller signature."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_bindingFieldFor",
		"name": "Illuminate\\Routing\\Route::bindingFieldFor",
		"doc": "Get the binding field for the given parameter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_bindingFields",
		"name": "Illuminate\\Routing\\Route::bindingFields",
		"doc": "Get the binding fields for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setBindingFields",
		"name": "Illuminate\\Routing\\Route::setBindingFields",
		"doc": "Set the binding fields for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parentOfParameter",
		"name": "Illuminate\\Routing\\Route::parentOfParameter",
		"doc": "Get the parent parameter of the given parameter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_defaults",
		"name": "Illuminate\\Routing\\Route::defaults",
		"doc": "Set a default value for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setDefaults",
		"name": "Illuminate\\Routing\\Route::setDefaults",
		"doc": "Set the default values for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_where",
		"name": "Illuminate\\Routing\\Route::where",
		"doc": "Set a regular expression requirement on the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parseWhere",
		"name": "Illuminate\\Routing\\Route::parseWhere",
		"doc": "Parse arguments to the where method into an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setWheres",
		"name": "Illuminate\\Routing\\Route::setWheres",
		"doc": "Set a list of regular expression requirements on the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_fallback",
		"name": "Illuminate\\Routing\\Route::fallback",
		"doc": "Mark this route as a fallback route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setFallback",
		"name": "Illuminate\\Routing\\Route::setFallback",
		"doc": "Set the fallback value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_methods",
		"name": "Illuminate\\Routing\\Route::methods",
		"doc": "Get the HTTP verbs the route responds to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_httpOnly",
		"name": "Illuminate\\Routing\\Route::httpOnly",
		"doc": "Determine if the route only responds to HTTP requests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_httpsOnly",
		"name": "Illuminate\\Routing\\Route::httpsOnly",
		"doc": "Determine if the route only responds to HTTPS requests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_secure",
		"name": "Illuminate\\Routing\\Route::secure",
		"doc": "Determine if the route only responds to HTTPS requests."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_domain",
		"name": "Illuminate\\Routing\\Route::domain",
		"doc": "Get or set the domain for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getDomain",
		"name": "Illuminate\\Routing\\Route::getDomain",
		"doc": "Get the domain defined for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getPrefix",
		"name": "Illuminate\\Routing\\Route::getPrefix",
		"doc": "Get the prefix of the route instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_prefix",
		"name": "Illuminate\\Routing\\Route::prefix",
		"doc": "Add a prefix to the route URI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_updatePrefixOnAction",
		"name": "Illuminate\\Routing\\Route::updatePrefixOnAction",
		"doc": "Update the \"prefix\" attribute on the action array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_uri",
		"name": "Illuminate\\Routing\\Route::uri",
		"doc": "Get the URI associated with the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setUri",
		"name": "Illuminate\\Routing\\Route::setUri",
		"doc": "Set the URI that the route responds to."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_parseUri",
		"name": "Illuminate\\Routing\\Route::parseUri",
		"doc": "Parse the route URI and normalize / store any implicit binding fields."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getName",
		"name": "Illuminate\\Routing\\Route::getName",
		"doc": "Get the name of the route instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_name",
		"name": "Illuminate\\Routing\\Route::name",
		"doc": "Add or change the route name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_named",
		"name": "Illuminate\\Routing\\Route::named",
		"doc": "Determine whether the route's name matches the given patterns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_uses",
		"name": "Illuminate\\Routing\\Route::uses",
		"doc": "Set the handler for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_addGroupNamespaceToStringUses",
		"name": "Illuminate\\Routing\\Route::addGroupNamespaceToStringUses",
		"doc": "Parse a string based action for the \"uses\" fluent method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getActionName",
		"name": "Illuminate\\Routing\\Route::getActionName",
		"doc": "Get the action name for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getActionMethod",
		"name": "Illuminate\\Routing\\Route::getActionMethod",
		"doc": "Get the method name of the route action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getAction",
		"name": "Illuminate\\Routing\\Route::getAction",
		"doc": "Get the action array or one of its properties for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setAction",
		"name": "Illuminate\\Routing\\Route::setAction",
		"doc": "Set the action array for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_gatherMiddleware",
		"name": "Illuminate\\Routing\\Route::gatherMiddleware",
		"doc": "Get all middleware, including the ones from the controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_middleware",
		"name": "Illuminate\\Routing\\Route::middleware",
		"doc": "Get or set the middlewares attached to the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_controllerMiddleware",
		"name": "Illuminate\\Routing\\Route::controllerMiddleware",
		"doc": "Get the middleware for the route's controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_withoutMiddleware",
		"name": "Illuminate\\Routing\\Route::withoutMiddleware",
		"doc": "Specify middleware that should be removed from the given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_excludedMiddleware",
		"name": "Illuminate\\Routing\\Route::excludedMiddleware",
		"doc": "Get the middleware should be removed from the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_block",
		"name": "Illuminate\\Routing\\Route::block",
		"doc": "Specify that the route should not allow concurrent requests from the same session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_withoutBlocking",
		"name": "Illuminate\\Routing\\Route::withoutBlocking",
		"doc": "Specify that the route should allow concurrent requests from the same session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_locksFor",
		"name": "Illuminate\\Routing\\Route::locksFor",
		"doc": "Get the maximum number of seconds the route's session lock should be held for."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_waitsFor",
		"name": "Illuminate\\Routing\\Route::waitsFor",
		"doc": "Get the maximum number of seconds to wait while attempting to acquire a session lock."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_controllerDispatcher",
		"name": "Illuminate\\Routing\\Route::controllerDispatcher",
		"doc": "Get the dispatcher for the route's controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getValidators",
		"name": "Illuminate\\Routing\\Route::getValidators",
		"doc": "Get the route validators for the instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_toSymfonyRoute",
		"name": "Illuminate\\Routing\\Route::toSymfonyRoute",
		"doc": "Convert the route to a Symfony route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getOptionalParameterNames",
		"name": "Illuminate\\Routing\\Route::getOptionalParameterNames",
		"doc": "Get the optional parameter names for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_getCompiled",
		"name": "Illuminate\\Routing\\Route::getCompiled",
		"doc": "Get the compiled version of the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setRouter",
		"name": "Illuminate\\Routing\\Route::setRouter",
		"doc": "Set the router instance on the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_setContainer",
		"name": "Illuminate\\Routing\\Route::setContainer",
		"doc": "Set the container instance on the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method_prepareForSerialization",
		"name": "Illuminate\\Routing\\Route::prepareForSerialization",
		"doc": "Prepare the route instance for serialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Route",
		"fromLink": "Illuminate/Routing/Route.html",
		"link": "Illuminate/Routing/Route.html#method___get",
		"name": "Illuminate\\Routing\\Route::__get",
		"doc": "Dynamically access route parameters."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteAction.html",
		"name": "Illuminate\\Routing\\RouteAction",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteAction",
		"fromLink": "Illuminate/Routing/RouteAction.html",
		"link": "Illuminate/Routing/RouteAction.html#method_parse",
		"name": "Illuminate\\Routing\\RouteAction::parse",
		"doc": "Parse the given action into an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteAction",
		"fromLink": "Illuminate/Routing/RouteAction.html",
		"link": "Illuminate/Routing/RouteAction.html#method_missingAction",
		"name": "Illuminate\\Routing\\RouteAction::missingAction",
		"doc": "Get an action for a route that has no action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteAction",
		"fromLink": "Illuminate/Routing/RouteAction.html",
		"link": "Illuminate/Routing/RouteAction.html#method_findCallable",
		"name": "Illuminate\\Routing\\RouteAction::findCallable",
		"doc": "Find the callable in an action array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteAction",
		"fromLink": "Illuminate/Routing/RouteAction.html",
		"link": "Illuminate/Routing/RouteAction.html#method_makeInvokable",
		"name": "Illuminate\\Routing\\RouteAction::makeInvokable",
		"doc": "Make an action for an invokable controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteAction",
		"fromLink": "Illuminate/Routing/RouteAction.html",
		"link": "Illuminate/Routing/RouteAction.html#method_containsSerializedClosure",
		"name": "Illuminate\\Routing\\RouteAction::containsSerializedClosure",
		"doc": "Determine if the given array actions contains a serialized Closure."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteBinding.html",
		"name": "Illuminate\\Routing\\RouteBinding",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteBinding",
		"fromLink": "Illuminate/Routing/RouteBinding.html",
		"link": "Illuminate/Routing/RouteBinding.html#method_forCallback",
		"name": "Illuminate\\Routing\\RouteBinding::forCallback",
		"doc": "Create a Route model binding for a given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteBinding",
		"fromLink": "Illuminate/Routing/RouteBinding.html",
		"link": "Illuminate/Routing/RouteBinding.html#method_createClassBinding",
		"name": "Illuminate\\Routing\\RouteBinding::createClassBinding",
		"doc": "Create a class based binding using the IoC container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteBinding",
		"fromLink": "Illuminate/Routing/RouteBinding.html",
		"link": "Illuminate/Routing/RouteBinding.html#method_forModel",
		"name": "Illuminate\\Routing\\RouteBinding::forModel",
		"doc": "Create a Route model binding for a model."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteCollection.html",
		"name": "Illuminate\\Routing\\RouteCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_add",
		"name": "Illuminate\\Routing\\RouteCollection::add",
		"doc": "Add a Route instance to the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_addToCollections",
		"name": "Illuminate\\Routing\\RouteCollection::addToCollections",
		"doc": "Add the given route to the arrays of routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_addLookups",
		"name": "Illuminate\\Routing\\RouteCollection::addLookups",
		"doc": "Add the route to any look-up tables if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_addToActionList",
		"name": "Illuminate\\Routing\\RouteCollection::addToActionList",
		"doc": "Add a route to the controller action dictionary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_refreshNameLookups",
		"name": "Illuminate\\Routing\\RouteCollection::refreshNameLookups",
		"doc": "Refresh the name look-up table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_refreshActionLookups",
		"name": "Illuminate\\Routing\\RouteCollection::refreshActionLookups",
		"doc": "Refresh the action look-up table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_match",
		"name": "Illuminate\\Routing\\RouteCollection::match",
		"doc": "Find the first route matching a given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_get",
		"name": "Illuminate\\Routing\\RouteCollection::get",
		"doc": "Get routes from the collection by method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_hasNamedRoute",
		"name": "Illuminate\\Routing\\RouteCollection::hasNamedRoute",
		"doc": "Determine if the route collection contains a given named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_getByName",
		"name": "Illuminate\\Routing\\RouteCollection::getByName",
		"doc": "Get a route instance by its name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_getByAction",
		"name": "Illuminate\\Routing\\RouteCollection::getByAction",
		"doc": "Get a route instance by its controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_getRoutes",
		"name": "Illuminate\\Routing\\RouteCollection::getRoutes",
		"doc": "Get all of the routes in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_getRoutesByMethod",
		"name": "Illuminate\\Routing\\RouteCollection::getRoutesByMethod",
		"doc": "Get all of the routes keyed by their HTTP verb / method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_getRoutesByName",
		"name": "Illuminate\\Routing\\RouteCollection::getRoutesByName",
		"doc": "Get all of the routes keyed by their name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_toSymfonyRouteCollection",
		"name": "Illuminate\\Routing\\RouteCollection::toSymfonyRouteCollection",
		"doc": "Convert the collection to a Symfony RouteCollection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollection",
		"fromLink": "Illuminate/Routing/RouteCollection.html",
		"link": "Illuminate/Routing/RouteCollection.html#method_toCompiledRouteCollection",
		"name": "Illuminate\\Routing\\RouteCollection::toCompiledRouteCollection",
		"doc": "Convert the collection to a CompiledRouteCollection instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html",
		"name": "Illuminate\\Routing\\RouteCollectionInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_add",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::add",
		"doc": "Add a Route instance to the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_refreshNameLookups",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::refreshNameLookups",
		"doc": "Refresh the name look-up table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_refreshActionLookups",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::refreshActionLookups",
		"doc": "Refresh the action look-up table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_match",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::match",
		"doc": "Find the first route matching a given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_get",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::get",
		"doc": "Get routes from the collection by method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_hasNamedRoute",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::hasNamedRoute",
		"doc": "Determine if the route collection contains a given named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getByName",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getByName",
		"doc": "Get a route instance by its name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getByAction",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getByAction",
		"doc": "Get a route instance by its controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getRoutes",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getRoutes",
		"doc": "Get all of the routes in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getRoutesByMethod",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getRoutesByMethod",
		"doc": "Get all of the routes keyed by their HTTP verb / method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteCollectionInterface",
		"fromLink": "Illuminate/Routing/RouteCollectionInterface.html",
		"link": "Illuminate/Routing/RouteCollectionInterface.html#method_getRoutesByName",
		"name": "Illuminate\\Routing\\RouteCollectionInterface::getRoutesByName",
		"doc": "Get all of the routes keyed by their name."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteDependencyResolverTrait.html",
		"name": "Illuminate\\Routing\\RouteDependencyResolverTrait",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteDependencyResolverTrait",
		"fromLink": "Illuminate/Routing/RouteDependencyResolverTrait.html",
		"link": "Illuminate/Routing/RouteDependencyResolverTrait.html#method_resolveClassMethodDependencies",
		"name": "Illuminate\\Routing\\RouteDependencyResolverTrait::resolveClassMethodDependencies",
		"doc": "Resolve the object method's type-hinted dependencies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteDependencyResolverTrait",
		"fromLink": "Illuminate/Routing/RouteDependencyResolverTrait.html",
		"link": "Illuminate/Routing/RouteDependencyResolverTrait.html#method_resolveMethodDependencies",
		"name": "Illuminate\\Routing\\RouteDependencyResolverTrait::resolveMethodDependencies",
		"doc": "Resolve the given method's type-hinted dependencies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteDependencyResolverTrait",
		"fromLink": "Illuminate/Routing/RouteDependencyResolverTrait.html",
		"link": "Illuminate/Routing/RouteDependencyResolverTrait.html#method_transformDependency",
		"name": "Illuminate\\Routing\\RouteDependencyResolverTrait::transformDependency",
		"doc": "Attempt to transform the given parameter into a class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteDependencyResolverTrait",
		"fromLink": "Illuminate/Routing/RouteDependencyResolverTrait.html",
		"link": "Illuminate/Routing/RouteDependencyResolverTrait.html#method_alreadyInParameters",
		"name": "Illuminate\\Routing\\RouteDependencyResolverTrait::alreadyInParameters",
		"doc": "Determine if an object of the given class is in a list of parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteDependencyResolverTrait",
		"fromLink": "Illuminate/Routing/RouteDependencyResolverTrait.html",
		"link": "Illuminate/Routing/RouteDependencyResolverTrait.html#method_spliceIntoParameters",
		"name": "Illuminate\\Routing\\RouteDependencyResolverTrait::spliceIntoParameters",
		"doc": "Splice the given value into the parameter list."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteFileRegistrar.html",
		"name": "Illuminate\\Routing\\RouteFileRegistrar",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteFileRegistrar",
		"fromLink": "Illuminate/Routing/RouteFileRegistrar.html",
		"link": "Illuminate/Routing/RouteFileRegistrar.html#method___construct",
		"name": "Illuminate\\Routing\\RouteFileRegistrar::__construct",
		"doc": "Create a new route file registrar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteFileRegistrar",
		"fromLink": "Illuminate/Routing/RouteFileRegistrar.html",
		"link": "Illuminate/Routing/RouteFileRegistrar.html#method_register",
		"name": "Illuminate\\Routing\\RouteFileRegistrar::register",
		"doc": "Require the given routes file."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteGroup.html",
		"name": "Illuminate\\Routing\\RouteGroup",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteGroup",
		"fromLink": "Illuminate/Routing/RouteGroup.html",
		"link": "Illuminate/Routing/RouteGroup.html#method_merge",
		"name": "Illuminate\\Routing\\RouteGroup::merge",
		"doc": "Merge route groups into a new array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteGroup",
		"fromLink": "Illuminate/Routing/RouteGroup.html",
		"link": "Illuminate/Routing/RouteGroup.html#method_formatNamespace",
		"name": "Illuminate\\Routing\\RouteGroup::formatNamespace",
		"doc": "Format the namespace for the new group attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteGroup",
		"fromLink": "Illuminate/Routing/RouteGroup.html",
		"link": "Illuminate/Routing/RouteGroup.html#method_formatPrefix",
		"name": "Illuminate\\Routing\\RouteGroup::formatPrefix",
		"doc": "Format the prefix for the new group attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteGroup",
		"fromLink": "Illuminate/Routing/RouteGroup.html",
		"link": "Illuminate/Routing/RouteGroup.html#method_formatWhere",
		"name": "Illuminate\\Routing\\RouteGroup::formatWhere",
		"doc": "Format the \"wheres\" for the new group attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteGroup",
		"fromLink": "Illuminate/Routing/RouteGroup.html",
		"link": "Illuminate/Routing/RouteGroup.html#method_formatAs",
		"name": "Illuminate\\Routing\\RouteGroup::formatAs",
		"doc": "Format the \"as\" clause of the new group attributes."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteParameterBinder.html",
		"name": "Illuminate\\Routing\\RouteParameterBinder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteParameterBinder",
		"fromLink": "Illuminate/Routing/RouteParameterBinder.html",
		"link": "Illuminate/Routing/RouteParameterBinder.html#method___construct",
		"name": "Illuminate\\Routing\\RouteParameterBinder::__construct",
		"doc": "Create a new Route parameter binder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteParameterBinder",
		"fromLink": "Illuminate/Routing/RouteParameterBinder.html",
		"link": "Illuminate/Routing/RouteParameterBinder.html#method_parameters",
		"name": "Illuminate\\Routing\\RouteParameterBinder::parameters",
		"doc": "Get the parameters for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteParameterBinder",
		"fromLink": "Illuminate/Routing/RouteParameterBinder.html",
		"link": "Illuminate/Routing/RouteParameterBinder.html#method_bindPathParameters",
		"name": "Illuminate\\Routing\\RouteParameterBinder::bindPathParameters",
		"doc": "Get the parameter matches for the path portion of the URI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteParameterBinder",
		"fromLink": "Illuminate/Routing/RouteParameterBinder.html",
		"link": "Illuminate/Routing/RouteParameterBinder.html#method_bindHostParameters",
		"name": "Illuminate\\Routing\\RouteParameterBinder::bindHostParameters",
		"doc": "Extract the parameter list from the host part of the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteParameterBinder",
		"fromLink": "Illuminate/Routing/RouteParameterBinder.html",
		"link": "Illuminate/Routing/RouteParameterBinder.html#method_matchToKeys",
		"name": "Illuminate\\Routing\\RouteParameterBinder::matchToKeys",
		"doc": "Combine a set of parameter matches with the route's keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteParameterBinder",
		"fromLink": "Illuminate/Routing/RouteParameterBinder.html",
		"link": "Illuminate/Routing/RouteParameterBinder.html#method_replaceDefaults",
		"name": "Illuminate\\Routing\\RouteParameterBinder::replaceDefaults",
		"doc": "Replace null parameters with their defaults."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteRegistrar.html",
		"name": "Illuminate\\Routing\\RouteRegistrar",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method___construct",
		"name": "Illuminate\\Routing\\RouteRegistrar::__construct",
		"doc": "Create a new route registrar instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_attribute",
		"name": "Illuminate\\Routing\\RouteRegistrar::attribute",
		"doc": "Set the value for a given attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_resource",
		"name": "Illuminate\\Routing\\RouteRegistrar::resource",
		"doc": "Route a resource to a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_apiResource",
		"name": "Illuminate\\Routing\\RouteRegistrar::apiResource",
		"doc": "Route an API resource to a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_group",
		"name": "Illuminate\\Routing\\RouteRegistrar::group",
		"doc": "Create a route group with shared attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_match",
		"name": "Illuminate\\Routing\\RouteRegistrar::match",
		"doc": "Register a new route with the given verbs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_registerRoute",
		"name": "Illuminate\\Routing\\RouteRegistrar::registerRoute",
		"doc": "Register a new route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_compileAction",
		"name": "Illuminate\\Routing\\RouteRegistrar::compileAction",
		"doc": "Compile the action into an array including the attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method___call",
		"name": "Illuminate\\Routing\\RouteRegistrar::__call",
		"doc": "Dynamically handle calls into the route registrar."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_get",
		"name": "Illuminate\\Routing\\RouteRegistrar::get",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_post",
		"name": "Illuminate\\Routing\\RouteRegistrar::post",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_put",
		"name": "Illuminate\\Routing\\RouteRegistrar::put",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_delete",
		"name": "Illuminate\\Routing\\RouteRegistrar::delete",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_patch",
		"name": "Illuminate\\Routing\\RouteRegistrar::patch",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_options",
		"name": "Illuminate\\Routing\\RouteRegistrar::options",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_any",
		"name": "Illuminate\\Routing\\RouteRegistrar::any",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_as",
		"name": "Illuminate\\Routing\\RouteRegistrar::as",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_domain",
		"name": "Illuminate\\Routing\\RouteRegistrar::domain",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_middleware",
		"name": "Illuminate\\Routing\\RouteRegistrar::middleware",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_name",
		"name": "Illuminate\\Routing\\RouteRegistrar::name",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_namespace",
		"name": "Illuminate\\Routing\\RouteRegistrar::namespace",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_prefix",
		"name": "Illuminate\\Routing\\RouteRegistrar::prefix",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteRegistrar",
		"fromLink": "Illuminate/Routing/RouteRegistrar.html",
		"link": "Illuminate/Routing/RouteRegistrar.html#method_where",
		"name": "Illuminate\\Routing\\RouteRegistrar::where",
		"doc": ""
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteSignatureParameters.html",
		"name": "Illuminate\\Routing\\RouteSignatureParameters",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteSignatureParameters",
		"fromLink": "Illuminate/Routing/RouteSignatureParameters.html",
		"link": "Illuminate/Routing/RouteSignatureParameters.html#method_fromAction",
		"name": "Illuminate\\Routing\\RouteSignatureParameters::fromAction",
		"doc": "Extract the route action's signature parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteSignatureParameters",
		"fromLink": "Illuminate/Routing/RouteSignatureParameters.html",
		"link": "Illuminate/Routing/RouteSignatureParameters.html#method_fromClassMethodString",
		"name": "Illuminate\\Routing\\RouteSignatureParameters::fromClassMethodString",
		"doc": "Get the parameters for the given class / method by string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteUri.html",
		"name": "Illuminate\\Routing\\RouteUri",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUri",
		"fromLink": "Illuminate/Routing/RouteUri.html",
		"link": "Illuminate/Routing/RouteUri.html#method___construct",
		"name": "Illuminate\\Routing\\RouteUri::__construct",
		"doc": "Create a new route URI instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUri",
		"fromLink": "Illuminate/Routing/RouteUri.html",
		"link": "Illuminate/Routing/RouteUri.html#method_parse",
		"name": "Illuminate\\Routing\\RouteUri::parse",
		"doc": "Parse the given URI."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html",
		"name": "Illuminate\\Routing\\RouteUrlGenerator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method___construct",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::__construct",
		"doc": "Create a new Route URL generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_to",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::to",
		"doc": "Generate a URL for the given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_getRouteDomain",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::getRouteDomain",
		"doc": "Get the formatted domain for a given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_formatDomain",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::formatDomain",
		"doc": "Format the domain and port for the route and request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_getRouteScheme",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::getRouteScheme",
		"doc": "Get the scheme for the given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_addPortToDomain",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::addPortToDomain",
		"doc": "Add the port to the domain if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_replaceRootParameters",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::replaceRootParameters",
		"doc": "Replace the parameters on the root path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_replaceRouteParameters",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::replaceRouteParameters",
		"doc": "Replace all of the wildcard parameters for a route path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_replaceNamedParameters",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::replaceNamedParameters",
		"doc": "Replace all of the named parameters in the path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_addQueryString",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::addQueryString",
		"doc": "Add a query string to the URI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_getRouteQueryString",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::getRouteQueryString",
		"doc": "Get the query string for a given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_getStringParameters",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::getStringParameters",
		"doc": "Get the string parameters from a given list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_getNumericParameters",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::getNumericParameters",
		"doc": "Get the numeric parameters from a given list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RouteUrlGenerator",
		"fromLink": "Illuminate/Routing/RouteUrlGenerator.html",
		"link": "Illuminate/Routing/RouteUrlGenerator.html#method_defaults",
		"name": "Illuminate\\Routing\\RouteUrlGenerator::defaults",
		"doc": "Set the default named parameters used by the URL generator."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/Router.html",
		"name": "Illuminate\\Routing\\Router",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method___construct",
		"name": "Illuminate\\Routing\\Router::__construct",
		"doc": "Create a new Router instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_get",
		"name": "Illuminate\\Routing\\Router::get",
		"doc": "Register a new GET route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_post",
		"name": "Illuminate\\Routing\\Router::post",
		"doc": "Register a new POST route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_put",
		"name": "Illuminate\\Routing\\Router::put",
		"doc": "Register a new PUT route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_patch",
		"name": "Illuminate\\Routing\\Router::patch",
		"doc": "Register a new PATCH route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_delete",
		"name": "Illuminate\\Routing\\Router::delete",
		"doc": "Register a new DELETE route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_options",
		"name": "Illuminate\\Routing\\Router::options",
		"doc": "Register a new OPTIONS route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_any",
		"name": "Illuminate\\Routing\\Router::any",
		"doc": "Register a new route responding to all verbs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_fallback",
		"name": "Illuminate\\Routing\\Router::fallback",
		"doc": "Register a new Fallback route with the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_redirect",
		"name": "Illuminate\\Routing\\Router::redirect",
		"doc": "Create a redirect from one URI to another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_permanentRedirect",
		"name": "Illuminate\\Routing\\Router::permanentRedirect",
		"doc": "Create a permanent redirect from one URI to another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_view",
		"name": "Illuminate\\Routing\\Router::view",
		"doc": "Register a new route that returns a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_match",
		"name": "Illuminate\\Routing\\Router::match",
		"doc": "Register a new route with the given verbs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_resources",
		"name": "Illuminate\\Routing\\Router::resources",
		"doc": "Register an array of resource controllers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_resource",
		"name": "Illuminate\\Routing\\Router::resource",
		"doc": "Route a resource to a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_apiResources",
		"name": "Illuminate\\Routing\\Router::apiResources",
		"doc": "Register an array of API resource controllers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_apiResource",
		"name": "Illuminate\\Routing\\Router::apiResource",
		"doc": "Route an API resource to a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_group",
		"name": "Illuminate\\Routing\\Router::group",
		"doc": "Create a route group with shared attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_updateGroupStack",
		"name": "Illuminate\\Routing\\Router::updateGroupStack",
		"doc": "Update the group stack with the given attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_mergeWithLastGroup",
		"name": "Illuminate\\Routing\\Router::mergeWithLastGroup",
		"doc": "Merge the given array with the last group stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_loadRoutes",
		"name": "Illuminate\\Routing\\Router::loadRoutes",
		"doc": "Load the provided routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getLastGroupPrefix",
		"name": "Illuminate\\Routing\\Router::getLastGroupPrefix",
		"doc": "Get the prefix from the last group on the stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_addRoute",
		"name": "Illuminate\\Routing\\Router::addRoute",
		"doc": "Add a route to the underlying route collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_createRoute",
		"name": "Illuminate\\Routing\\Router::createRoute",
		"doc": "Create a new route instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_actionReferencesController",
		"name": "Illuminate\\Routing\\Router::actionReferencesController",
		"doc": "Determine if the action is routing to a controller."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_convertToControllerAction",
		"name": "Illuminate\\Routing\\Router::convertToControllerAction",
		"doc": "Add a controller based route action to the action array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_prependGroupNamespace",
		"name": "Illuminate\\Routing\\Router::prependGroupNamespace",
		"doc": "Prepend the last group namespace onto the use clause."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_newRoute",
		"name": "Illuminate\\Routing\\Router::newRoute",
		"doc": "Create a new Route object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_prefix",
		"name": "Illuminate\\Routing\\Router::prefix",
		"doc": "Prefix the given URI with the last prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_addWhereClausesToRoute",
		"name": "Illuminate\\Routing\\Router::addWhereClausesToRoute",
		"doc": "Add the necessary where clauses to the route based on its initial registration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_mergeGroupAttributesIntoRoute",
		"name": "Illuminate\\Routing\\Router::mergeGroupAttributesIntoRoute",
		"doc": "Merge the group stack with the controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_respondWithRoute",
		"name": "Illuminate\\Routing\\Router::respondWithRoute",
		"doc": "Return the response returned by the given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_dispatch",
		"name": "Illuminate\\Routing\\Router::dispatch",
		"doc": "Dispatch the request to the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_dispatchToRoute",
		"name": "Illuminate\\Routing\\Router::dispatchToRoute",
		"doc": "Dispatch the request to a route and return the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_findRoute",
		"name": "Illuminate\\Routing\\Router::findRoute",
		"doc": "Find the route matching a given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_runRoute",
		"name": "Illuminate\\Routing\\Router::runRoute",
		"doc": "Return the response for the given route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_runRouteWithinStack",
		"name": "Illuminate\\Routing\\Router::runRouteWithinStack",
		"doc": "Run the given route within a Stack \"onion\" instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_gatherRouteMiddleware",
		"name": "Illuminate\\Routing\\Router::gatherRouteMiddleware",
		"doc": "Gather the middleware for the given route with resolved class names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_sortMiddleware",
		"name": "Illuminate\\Routing\\Router::sortMiddleware",
		"doc": "Sort the given middleware by priority."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_prepareResponse",
		"name": "Illuminate\\Routing\\Router::prepareResponse",
		"doc": "Create a response instance from the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_toResponse",
		"name": "Illuminate\\Routing\\Router::toResponse",
		"doc": "Static version of prepareResponse."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_substituteBindings",
		"name": "Illuminate\\Routing\\Router::substituteBindings",
		"doc": "Substitute the route bindings onto the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_substituteImplicitBindings",
		"name": "Illuminate\\Routing\\Router::substituteImplicitBindings",
		"doc": "Substitute the implicit Eloquent model bindings for the route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_performBinding",
		"name": "Illuminate\\Routing\\Router::performBinding",
		"doc": "Call the binding callback for the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_matched",
		"name": "Illuminate\\Routing\\Router::matched",
		"doc": "Register a route matched event listener."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getMiddleware",
		"name": "Illuminate\\Routing\\Router::getMiddleware",
		"doc": "Get all of the defined middleware short-hand names."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_aliasMiddleware",
		"name": "Illuminate\\Routing\\Router::aliasMiddleware",
		"doc": "Register a short-hand name for a middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_hasMiddlewareGroup",
		"name": "Illuminate\\Routing\\Router::hasMiddlewareGroup",
		"doc": "Check if a middlewareGroup with the given name exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getMiddlewareGroups",
		"name": "Illuminate\\Routing\\Router::getMiddlewareGroups",
		"doc": "Get all of the defined middleware groups."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_middlewareGroup",
		"name": "Illuminate\\Routing\\Router::middlewareGroup",
		"doc": "Register a group of middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_prependMiddlewareToGroup",
		"name": "Illuminate\\Routing\\Router::prependMiddlewareToGroup",
		"doc": "Add a middleware to the beginning of a middleware group."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_pushMiddlewareToGroup",
		"name": "Illuminate\\Routing\\Router::pushMiddlewareToGroup",
		"doc": "Add a middleware to the end of a middleware group."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_bind",
		"name": "Illuminate\\Routing\\Router::bind",
		"doc": "Add a new route parameter binder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_model",
		"name": "Illuminate\\Routing\\Router::model",
		"doc": "Register a model binder for a wildcard."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getBindingCallback",
		"name": "Illuminate\\Routing\\Router::getBindingCallback",
		"doc": "Get the binding callback for a given binding."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getPatterns",
		"name": "Illuminate\\Routing\\Router::getPatterns",
		"doc": "Get the global \"where\" patterns."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_pattern",
		"name": "Illuminate\\Routing\\Router::pattern",
		"doc": "Set a global where pattern on all routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_patterns",
		"name": "Illuminate\\Routing\\Router::patterns",
		"doc": "Set a group of global where patterns on all routes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_hasGroupStack",
		"name": "Illuminate\\Routing\\Router::hasGroupStack",
		"doc": "Determine if the router currently has a group stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getGroupStack",
		"name": "Illuminate\\Routing\\Router::getGroupStack",
		"doc": "Get the current group stack for the router."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_input",
		"name": "Illuminate\\Routing\\Router::input",
		"doc": "Get a route parameter for the current route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getCurrentRequest",
		"name": "Illuminate\\Routing\\Router::getCurrentRequest",
		"doc": "Get the request currently being dispatched."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getCurrentRoute",
		"name": "Illuminate\\Routing\\Router::getCurrentRoute",
		"doc": "Get the currently dispatched route instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_current",
		"name": "Illuminate\\Routing\\Router::current",
		"doc": "Get the currently dispatched route instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_has",
		"name": "Illuminate\\Routing\\Router::has",
		"doc": "Check if a route with the given name exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_currentRouteName",
		"name": "Illuminate\\Routing\\Router::currentRouteName",
		"doc": "Get the current route name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_is",
		"name": "Illuminate\\Routing\\Router::is",
		"doc": "Alias for the \"currentRouteNamed\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_currentRouteNamed",
		"name": "Illuminate\\Routing\\Router::currentRouteNamed",
		"doc": "Determine if the current route matches a pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_currentRouteAction",
		"name": "Illuminate\\Routing\\Router::currentRouteAction",
		"doc": "Get the current route action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_uses",
		"name": "Illuminate\\Routing\\Router::uses",
		"doc": "Alias for the \"currentRouteUses\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_currentRouteUses",
		"name": "Illuminate\\Routing\\Router::currentRouteUses",
		"doc": "Determine if the current route action matches a given action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_singularResourceParameters",
		"name": "Illuminate\\Routing\\Router::singularResourceParameters",
		"doc": "Set the unmapped global resource parameters to singular."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_resourceParameters",
		"name": "Illuminate\\Routing\\Router::resourceParameters",
		"doc": "Set the global resource parameter mapping."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_resourceVerbs",
		"name": "Illuminate\\Routing\\Router::resourceVerbs",
		"doc": "Get or set the verbs used in the resource URIs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_getRoutes",
		"name": "Illuminate\\Routing\\Router::getRoutes",
		"doc": "Get the underlying route collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_setRoutes",
		"name": "Illuminate\\Routing\\Router::setRoutes",
		"doc": "Set the route collection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_setCompiledRoutes",
		"name": "Illuminate\\Routing\\Router::setCompiledRoutes",
		"doc": "Set the compiled route collection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method_uniqueMiddleware",
		"name": "Illuminate\\Routing\\Router::uniqueMiddleware",
		"doc": "Remove any duplicate middleware from the given array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\Router",
		"fromLink": "Illuminate/Routing/Router.html",
		"link": "Illuminate/Routing/Router.html#method___call",
		"name": "Illuminate\\Routing\\Router::__call",
		"doc": "Dynamically handle calls into the router instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html",
		"name": "Illuminate\\Routing\\RoutingServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_register",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_registerRouter",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::registerRouter",
		"doc": "Register the router instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_registerUrlGenerator",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::registerUrlGenerator",
		"doc": "Register the URL generator service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_requestRebinder",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::requestRebinder",
		"doc": "Get the URL generator request rebinder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_registerRedirector",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::registerRedirector",
		"doc": "Register the Redirector service."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_registerPsrRequest",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::registerPsrRequest",
		"doc": "Register a binding for the PSR-7 request implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_registerPsrResponse",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::registerPsrResponse",
		"doc": "Register a binding for the PSR-7 response implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_registerResponseFactory",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::registerResponseFactory",
		"doc": "Register the response factory implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\RoutingServiceProvider",
		"fromLink": "Illuminate/Routing/RoutingServiceProvider.html",
		"link": "Illuminate/Routing/RoutingServiceProvider.html#method_registerControllerDispatcher",
		"name": "Illuminate\\Routing\\RoutingServiceProvider::registerControllerDispatcher",
		"doc": "Register the controller dispatcher."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/SortedMiddleware.html",
		"name": "Illuminate\\Routing\\SortedMiddleware",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\SortedMiddleware",
		"fromLink": "Illuminate/Routing/SortedMiddleware.html",
		"link": "Illuminate/Routing/SortedMiddleware.html#method___construct",
		"name": "Illuminate\\Routing\\SortedMiddleware::__construct",
		"doc": "Create a new Sorted Middleware container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\SortedMiddleware",
		"fromLink": "Illuminate/Routing/SortedMiddleware.html",
		"link": "Illuminate/Routing/SortedMiddleware.html#method_sortMiddleware",
		"name": "Illuminate\\Routing\\SortedMiddleware::sortMiddleware",
		"doc": "Sort the middlewares by the given priority map."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\SortedMiddleware",
		"fromLink": "Illuminate/Routing/SortedMiddleware.html",
		"link": "Illuminate/Routing/SortedMiddleware.html#method_priorityMapIndex",
		"name": "Illuminate\\Routing\\SortedMiddleware::priorityMapIndex",
		"doc": "Calculate the priority map index of the middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\SortedMiddleware",
		"fromLink": "Illuminate/Routing/SortedMiddleware.html",
		"link": "Illuminate/Routing/SortedMiddleware.html#method_middlewareNames",
		"name": "Illuminate\\Routing\\SortedMiddleware::middlewareNames",
		"doc": "Resolve the middleware names to look for in the priority array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\SortedMiddleware",
		"fromLink": "Illuminate/Routing/SortedMiddleware.html",
		"link": "Illuminate/Routing/SortedMiddleware.html#method_moveMiddleware",
		"name": "Illuminate\\Routing\\SortedMiddleware::moveMiddleware",
		"doc": "Splice a middleware into a new position and remove the old entry."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/UrlGenerator.html",
		"name": "Illuminate\\Routing\\UrlGenerator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method___construct",
		"name": "Illuminate\\Routing\\UrlGenerator::__construct",
		"doc": "Create a new URL Generator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_full",
		"name": "Illuminate\\Routing\\UrlGenerator::full",
		"doc": "Get the full URL for the current request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_current",
		"name": "Illuminate\\Routing\\UrlGenerator::current",
		"doc": "Get the current URL for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_previous",
		"name": "Illuminate\\Routing\\UrlGenerator::previous",
		"doc": "Get the URL for the previous request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_getPreviousUrlFromSession",
		"name": "Illuminate\\Routing\\UrlGenerator::getPreviousUrlFromSession",
		"doc": "Get the previous URL from the session if possible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_to",
		"name": "Illuminate\\Routing\\UrlGenerator::to",
		"doc": "Generate an absolute URL to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_secure",
		"name": "Illuminate\\Routing\\UrlGenerator::secure",
		"doc": "Generate a secure, absolute URL to the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_asset",
		"name": "Illuminate\\Routing\\UrlGenerator::asset",
		"doc": "Generate the URL to an application asset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_secureAsset",
		"name": "Illuminate\\Routing\\UrlGenerator::secureAsset",
		"doc": "Generate the URL to a secure asset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_assetFrom",
		"name": "Illuminate\\Routing\\UrlGenerator::assetFrom",
		"doc": "Generate the URL to an asset from a custom root domain such as CDN, etc."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_removeIndex",
		"name": "Illuminate\\Routing\\UrlGenerator::removeIndex",
		"doc": "Remove the index.php file from a path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_formatScheme",
		"name": "Illuminate\\Routing\\UrlGenerator::formatScheme",
		"doc": "Get the default scheme for a raw URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_signedRoute",
		"name": "Illuminate\\Routing\\UrlGenerator::signedRoute",
		"doc": "Create a signed route URL for a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_temporarySignedRoute",
		"name": "Illuminate\\Routing\\UrlGenerator::temporarySignedRoute",
		"doc": "Create a temporary signed route URL for a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_hasValidSignature",
		"name": "Illuminate\\Routing\\UrlGenerator::hasValidSignature",
		"doc": "Determine if the given request has a valid signature."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_hasValidRelativeSignature",
		"name": "Illuminate\\Routing\\UrlGenerator::hasValidRelativeSignature",
		"doc": "Determine if the given request has a valid signature for a relative URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_hasCorrectSignature",
		"name": "Illuminate\\Routing\\UrlGenerator::hasCorrectSignature",
		"doc": "Determine if the signature from the given request matches the URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_signatureHasNotExpired",
		"name": "Illuminate\\Routing\\UrlGenerator::signatureHasNotExpired",
		"doc": "Determine if the expires timestamp from the given request is not from the past."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_route",
		"name": "Illuminate\\Routing\\UrlGenerator::route",
		"doc": "Get the URL to a named route."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_toRoute",
		"name": "Illuminate\\Routing\\UrlGenerator::toRoute",
		"doc": "Get the URL for a given route instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_action",
		"name": "Illuminate\\Routing\\UrlGenerator::action",
		"doc": "Get the URL to a controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_formatAction",
		"name": "Illuminate\\Routing\\UrlGenerator::formatAction",
		"doc": "Format the given controller action."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_formatParameters",
		"name": "Illuminate\\Routing\\UrlGenerator::formatParameters",
		"doc": "Format the array of URL parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_extractQueryString",
		"name": "Illuminate\\Routing\\UrlGenerator::extractQueryString",
		"doc": "Extract the query string from the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_formatRoot",
		"name": "Illuminate\\Routing\\UrlGenerator::formatRoot",
		"doc": "Get the base URL for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_format",
		"name": "Illuminate\\Routing\\UrlGenerator::format",
		"doc": "Format the given URL segments into a single URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_isValidUrl",
		"name": "Illuminate\\Routing\\UrlGenerator::isValidUrl",
		"doc": "Determine if the given path is a valid URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_routeUrl",
		"name": "Illuminate\\Routing\\UrlGenerator::routeUrl",
		"doc": "Get the Route URL generator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_defaults",
		"name": "Illuminate\\Routing\\UrlGenerator::defaults",
		"doc": "Set the default named parameters used by the URL generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_getDefaultParameters",
		"name": "Illuminate\\Routing\\UrlGenerator::getDefaultParameters",
		"doc": "Get the default named parameters used by the URL generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_forceScheme",
		"name": "Illuminate\\Routing\\UrlGenerator::forceScheme",
		"doc": "Force the scheme for URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_forceRootUrl",
		"name": "Illuminate\\Routing\\UrlGenerator::forceRootUrl",
		"doc": "Set the forced root URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_formatHostUsing",
		"name": "Illuminate\\Routing\\UrlGenerator::formatHostUsing",
		"doc": "Set a callback to be used to format the host of generated URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_formatPathUsing",
		"name": "Illuminate\\Routing\\UrlGenerator::formatPathUsing",
		"doc": "Set a callback to be used to format the path of generated URLs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_pathFormatter",
		"name": "Illuminate\\Routing\\UrlGenerator::pathFormatter",
		"doc": "Get the path formatter being used by the URL generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_getRequest",
		"name": "Illuminate\\Routing\\UrlGenerator::getRequest",
		"doc": "Get the request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_setRequest",
		"name": "Illuminate\\Routing\\UrlGenerator::setRequest",
		"doc": "Set the current request instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_setRoutes",
		"name": "Illuminate\\Routing\\UrlGenerator::setRoutes",
		"doc": "Set the route collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_getSession",
		"name": "Illuminate\\Routing\\UrlGenerator::getSession",
		"doc": "Get the session implementation from the resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_setSessionResolver",
		"name": "Illuminate\\Routing\\UrlGenerator::setSessionResolver",
		"doc": "Set the session resolver for the generator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_setKeyResolver",
		"name": "Illuminate\\Routing\\UrlGenerator::setKeyResolver",
		"doc": "Set the encryption key resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\UrlGenerator",
		"fromLink": "Illuminate/Routing/UrlGenerator.html",
		"link": "Illuminate/Routing/UrlGenerator.html#method_setRootControllerNamespace",
		"name": "Illuminate\\Routing\\UrlGenerator::setRootControllerNamespace",
		"doc": "Set the root controller namespace."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Routing",
		"fromLink": "Illuminate/Routing.html",
		"link": "Illuminate/Routing/ViewController.html",
		"name": "Illuminate\\Routing\\ViewController",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ViewController",
		"fromLink": "Illuminate/Routing/ViewController.html",
		"link": "Illuminate/Routing/ViewController.html#method___construct",
		"name": "Illuminate\\Routing\\ViewController::__construct",
		"doc": "Create a new controller instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Routing\\ViewController",
		"fromLink": "Illuminate/Routing/ViewController.html",
		"link": "Illuminate/Routing/ViewController.html#method___invoke",
		"name": "Illuminate\\Routing\\ViewController::__invoke",
		"doc": "Invoke the controller method."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/ArraySessionHandler.html",
		"name": "Illuminate\\Session\\ArraySessionHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ArraySessionHandler",
		"fromLink": "Illuminate/Session/ArraySessionHandler.html",
		"link": "Illuminate/Session/ArraySessionHandler.html#method___construct",
		"name": "Illuminate\\Session\\ArraySessionHandler::__construct",
		"doc": "Create a new array driven handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ArraySessionHandler",
		"fromLink": "Illuminate/Session/ArraySessionHandler.html",
		"link": "Illuminate/Session/ArraySessionHandler.html#method_open",
		"name": "Illuminate\\Session\\ArraySessionHandler::open",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ArraySessionHandler",
		"fromLink": "Illuminate/Session/ArraySessionHandler.html",
		"link": "Illuminate/Session/ArraySessionHandler.html#method_close",
		"name": "Illuminate\\Session\\ArraySessionHandler::close",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ArraySessionHandler",
		"fromLink": "Illuminate/Session/ArraySessionHandler.html",
		"link": "Illuminate/Session/ArraySessionHandler.html#method_read",
		"name": "Illuminate\\Session\\ArraySessionHandler::read",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ArraySessionHandler",
		"fromLink": "Illuminate/Session/ArraySessionHandler.html",
		"link": "Illuminate/Session/ArraySessionHandler.html#method_write",
		"name": "Illuminate\\Session\\ArraySessionHandler::write",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ArraySessionHandler",
		"fromLink": "Illuminate/Session/ArraySessionHandler.html",
		"link": "Illuminate/Session/ArraySessionHandler.html#method_destroy",
		"name": "Illuminate\\Session\\ArraySessionHandler::destroy",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ArraySessionHandler",
		"fromLink": "Illuminate/Session/ArraySessionHandler.html",
		"link": "Illuminate/Session/ArraySessionHandler.html#method_gc",
		"name": "Illuminate\\Session\\ArraySessionHandler::gc",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ArraySessionHandler",
		"fromLink": "Illuminate/Session/ArraySessionHandler.html",
		"link": "Illuminate/Session/ArraySessionHandler.html#method_calculateExpiration",
		"name": "Illuminate\\Session\\ArraySessionHandler::calculateExpiration",
		"doc": "Get the expiration time of the session."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CacheBasedSessionHandler",
		"fromLink": "Illuminate/Session/CacheBasedSessionHandler.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html#method___construct",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler::__construct",
		"doc": "Create a new cache driven handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CacheBasedSessionHandler",
		"fromLink": "Illuminate/Session/CacheBasedSessionHandler.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html#method_open",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler::open",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CacheBasedSessionHandler",
		"fromLink": "Illuminate/Session/CacheBasedSessionHandler.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html#method_close",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler::close",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CacheBasedSessionHandler",
		"fromLink": "Illuminate/Session/CacheBasedSessionHandler.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html#method_read",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler::read",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CacheBasedSessionHandler",
		"fromLink": "Illuminate/Session/CacheBasedSessionHandler.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html#method_write",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler::write",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CacheBasedSessionHandler",
		"fromLink": "Illuminate/Session/CacheBasedSessionHandler.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html#method_destroy",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler::destroy",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CacheBasedSessionHandler",
		"fromLink": "Illuminate/Session/CacheBasedSessionHandler.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html#method_gc",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler::gc",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CacheBasedSessionHandler",
		"fromLink": "Illuminate/Session/CacheBasedSessionHandler.html",
		"link": "Illuminate/Session/CacheBasedSessionHandler.html#method_getCache",
		"name": "Illuminate\\Session\\CacheBasedSessionHandler::getCache",
		"doc": "Get the underlying cache repository."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session\\Console",
		"fromLink": "Illuminate/Session/Console.html",
		"link": "Illuminate/Session/Console/SessionTableCommand.html",
		"name": "Illuminate\\Session\\Console\\SessionTableCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Console\\SessionTableCommand",
		"fromLink": "Illuminate/Session/Console/SessionTableCommand.html",
		"link": "Illuminate/Session/Console/SessionTableCommand.html#method___construct",
		"name": "Illuminate\\Session\\Console\\SessionTableCommand::__construct",
		"doc": "Create a new session table command instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Console\\SessionTableCommand",
		"fromLink": "Illuminate/Session/Console/SessionTableCommand.html",
		"link": "Illuminate/Session/Console/SessionTableCommand.html#method_handle",
		"name": "Illuminate\\Session\\Console\\SessionTableCommand::handle",
		"doc": "Execute the console command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Console\\SessionTableCommand",
		"fromLink": "Illuminate/Session/Console/SessionTableCommand.html",
		"link": "Illuminate/Session/Console/SessionTableCommand.html#method_createBaseMigration",
		"name": "Illuminate\\Session\\Console\\SessionTableCommand::createBaseMigration",
		"doc": "Create a base migration file for the session."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/CookieSessionHandler.html",
		"name": "Illuminate\\Session\\CookieSessionHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CookieSessionHandler",
		"fromLink": "Illuminate/Session/CookieSessionHandler.html",
		"link": "Illuminate/Session/CookieSessionHandler.html#method___construct",
		"name": "Illuminate\\Session\\CookieSessionHandler::__construct",
		"doc": "Create a new cookie driven handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CookieSessionHandler",
		"fromLink": "Illuminate/Session/CookieSessionHandler.html",
		"link": "Illuminate/Session/CookieSessionHandler.html#method_open",
		"name": "Illuminate\\Session\\CookieSessionHandler::open",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CookieSessionHandler",
		"fromLink": "Illuminate/Session/CookieSessionHandler.html",
		"link": "Illuminate/Session/CookieSessionHandler.html#method_close",
		"name": "Illuminate\\Session\\CookieSessionHandler::close",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CookieSessionHandler",
		"fromLink": "Illuminate/Session/CookieSessionHandler.html",
		"link": "Illuminate/Session/CookieSessionHandler.html#method_read",
		"name": "Illuminate\\Session\\CookieSessionHandler::read",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CookieSessionHandler",
		"fromLink": "Illuminate/Session/CookieSessionHandler.html",
		"link": "Illuminate/Session/CookieSessionHandler.html#method_write",
		"name": "Illuminate\\Session\\CookieSessionHandler::write",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CookieSessionHandler",
		"fromLink": "Illuminate/Session/CookieSessionHandler.html",
		"link": "Illuminate/Session/CookieSessionHandler.html#method_destroy",
		"name": "Illuminate\\Session\\CookieSessionHandler::destroy",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CookieSessionHandler",
		"fromLink": "Illuminate/Session/CookieSessionHandler.html",
		"link": "Illuminate/Session/CookieSessionHandler.html#method_gc",
		"name": "Illuminate\\Session\\CookieSessionHandler::gc",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\CookieSessionHandler",
		"fromLink": "Illuminate/Session/CookieSessionHandler.html",
		"link": "Illuminate/Session/CookieSessionHandler.html#method_setRequest",
		"name": "Illuminate\\Session\\CookieSessionHandler::setRequest",
		"doc": "Set the request instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html",
		"name": "Illuminate\\Session\\DatabaseSessionHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method___construct",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::__construct",
		"doc": "Create a new database session handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_open",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::open",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_close",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::close",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_read",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::read",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_expired",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::expired",
		"doc": "Determine if the session is expired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_write",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::write",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_performInsert",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::performInsert",
		"doc": "Perform an insert operation on the session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_performUpdate",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::performUpdate",
		"doc": "Perform an update operation on the session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_getDefaultPayload",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::getDefaultPayload",
		"doc": "Get the default payload for the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_addUserInformation",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::addUserInformation",
		"doc": "Add the user information to the session payload."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_userId",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::userId",
		"doc": "Get the currently authenticated user's ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_addRequestInformation",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::addRequestInformation",
		"doc": "Add the request information to the session payload."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_ipAddress",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::ipAddress",
		"doc": "Get the IP address for the current request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_userAgent",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::userAgent",
		"doc": "Get the user agent for the current request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_destroy",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::destroy",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_gc",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::gc",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_getQuery",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::getQuery",
		"doc": "Get a fresh query builder instance for the table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\DatabaseSessionHandler",
		"fromLink": "Illuminate/Session/DatabaseSessionHandler.html",
		"link": "Illuminate/Session/DatabaseSessionHandler.html#method_setExists",
		"name": "Illuminate\\Session\\DatabaseSessionHandler::setExists",
		"doc": "Set the existence state for the session."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/EncryptedStore.html",
		"name": "Illuminate\\Session\\EncryptedStore",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\EncryptedStore",
		"fromLink": "Illuminate/Session/EncryptedStore.html",
		"link": "Illuminate/Session/EncryptedStore.html#method___construct",
		"name": "Illuminate\\Session\\EncryptedStore::__construct",
		"doc": "Create a new session instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\EncryptedStore",
		"fromLink": "Illuminate/Session/EncryptedStore.html",
		"link": "Illuminate/Session/EncryptedStore.html#method_prepareForUnserialize",
		"name": "Illuminate\\Session\\EncryptedStore::prepareForUnserialize",
		"doc": "Prepare the raw string data from the session for unserialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\EncryptedStore",
		"fromLink": "Illuminate/Session/EncryptedStore.html",
		"link": "Illuminate/Session/EncryptedStore.html#method_prepareForStorage",
		"name": "Illuminate\\Session\\EncryptedStore::prepareForStorage",
		"doc": "Prepare the serialized session data for storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\EncryptedStore",
		"fromLink": "Illuminate/Session/EncryptedStore.html",
		"link": "Illuminate/Session/EncryptedStore.html#method_getEncrypter",
		"name": "Illuminate\\Session\\EncryptedStore::getEncrypter",
		"doc": "Get the encrypter instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/ExistenceAwareInterface.html",
		"name": "Illuminate\\Session\\ExistenceAwareInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\ExistenceAwareInterface",
		"fromLink": "Illuminate/Session/ExistenceAwareInterface.html",
		"link": "Illuminate/Session/ExistenceAwareInterface.html#method_setExists",
		"name": "Illuminate\\Session\\ExistenceAwareInterface::setExists",
		"doc": "Set the existence state for the session."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/FileSessionHandler.html",
		"name": "Illuminate\\Session\\FileSessionHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\FileSessionHandler",
		"fromLink": "Illuminate/Session/FileSessionHandler.html",
		"link": "Illuminate/Session/FileSessionHandler.html#method___construct",
		"name": "Illuminate\\Session\\FileSessionHandler::__construct",
		"doc": "Create a new file driven handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\FileSessionHandler",
		"fromLink": "Illuminate/Session/FileSessionHandler.html",
		"link": "Illuminate/Session/FileSessionHandler.html#method_open",
		"name": "Illuminate\\Session\\FileSessionHandler::open",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\FileSessionHandler",
		"fromLink": "Illuminate/Session/FileSessionHandler.html",
		"link": "Illuminate/Session/FileSessionHandler.html#method_close",
		"name": "Illuminate\\Session\\FileSessionHandler::close",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\FileSessionHandler",
		"fromLink": "Illuminate/Session/FileSessionHandler.html",
		"link": "Illuminate/Session/FileSessionHandler.html#method_read",
		"name": "Illuminate\\Session\\FileSessionHandler::read",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\FileSessionHandler",
		"fromLink": "Illuminate/Session/FileSessionHandler.html",
		"link": "Illuminate/Session/FileSessionHandler.html#method_write",
		"name": "Illuminate\\Session\\FileSessionHandler::write",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\FileSessionHandler",
		"fromLink": "Illuminate/Session/FileSessionHandler.html",
		"link": "Illuminate/Session/FileSessionHandler.html#method_destroy",
		"name": "Illuminate\\Session\\FileSessionHandler::destroy",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\FileSessionHandler",
		"fromLink": "Illuminate/Session/FileSessionHandler.html",
		"link": "Illuminate/Session/FileSessionHandler.html#method_gc",
		"name": "Illuminate\\Session\\FileSessionHandler::gc",
		"doc": "{@inheritdoc}"
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session\\Middleware",
		"fromLink": "Illuminate/Session/Middleware.html",
		"link": "Illuminate/Session/Middleware/AuthenticateSession.html",
		"name": "Illuminate\\Session\\Middleware\\AuthenticateSession",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\AuthenticateSession",
		"fromLink": "Illuminate/Session/Middleware/AuthenticateSession.html",
		"link": "Illuminate/Session/Middleware/AuthenticateSession.html#method___construct",
		"name": "Illuminate\\Session\\Middleware\\AuthenticateSession::__construct",
		"doc": "Create a new middleware instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\AuthenticateSession",
		"fromLink": "Illuminate/Session/Middleware/AuthenticateSession.html",
		"link": "Illuminate/Session/Middleware/AuthenticateSession.html#method_handle",
		"name": "Illuminate\\Session\\Middleware\\AuthenticateSession::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\AuthenticateSession",
		"fromLink": "Illuminate/Session/Middleware/AuthenticateSession.html",
		"link": "Illuminate/Session/Middleware/AuthenticateSession.html#method_storePasswordHashInSession",
		"name": "Illuminate\\Session\\Middleware\\AuthenticateSession::storePasswordHashInSession",
		"doc": "Store the user's current password hash in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\AuthenticateSession",
		"fromLink": "Illuminate/Session/Middleware/AuthenticateSession.html",
		"link": "Illuminate/Session/Middleware/AuthenticateSession.html#method_logout",
		"name": "Illuminate\\Session\\Middleware\\AuthenticateSession::logout",
		"doc": "Log the user out of the application."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\AuthenticateSession",
		"fromLink": "Illuminate/Session/Middleware/AuthenticateSession.html",
		"link": "Illuminate/Session/Middleware/AuthenticateSession.html#method_guard",
		"name": "Illuminate\\Session\\Middleware\\AuthenticateSession::guard",
		"doc": "Get the guard instance that should be used by the middleware."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session\\Middleware",
		"fromLink": "Illuminate/Session/Middleware.html",
		"link": "Illuminate/Session/Middleware/StartSession.html",
		"name": "Illuminate\\Session\\Middleware\\StartSession",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method___construct",
		"name": "Illuminate\\Session\\Middleware\\StartSession::__construct",
		"doc": "Create a new session middleware."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_handle",
		"name": "Illuminate\\Session\\Middleware\\StartSession::handle",
		"doc": "Handle an incoming request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_handleRequestWhileBlocking",
		"name": "Illuminate\\Session\\Middleware\\StartSession::handleRequestWhileBlocking",
		"doc": "Handle the given request within session state."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_handleStatefulRequest",
		"name": "Illuminate\\Session\\Middleware\\StartSession::handleStatefulRequest",
		"doc": "Handle the given request within session state."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_startSession",
		"name": "Illuminate\\Session\\Middleware\\StartSession::startSession",
		"doc": "Start the session for the given request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_getSession",
		"name": "Illuminate\\Session\\Middleware\\StartSession::getSession",
		"doc": "Get the session implementation from the manager."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_collectGarbage",
		"name": "Illuminate\\Session\\Middleware\\StartSession::collectGarbage",
		"doc": "Remove the garbage from the session if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_configHitsLottery",
		"name": "Illuminate\\Session\\Middleware\\StartSession::configHitsLottery",
		"doc": "Determine if the configuration odds hit the lottery."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_storeCurrentUrl",
		"name": "Illuminate\\Session\\Middleware\\StartSession::storeCurrentUrl",
		"doc": "Store the current URL for the request if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_addCookieToResponse",
		"name": "Illuminate\\Session\\Middleware\\StartSession::addCookieToResponse",
		"doc": "Add the session cookie to the application response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_saveSession",
		"name": "Illuminate\\Session\\Middleware\\StartSession::saveSession",
		"doc": "Save the session data to storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_getSessionLifetimeInSeconds",
		"name": "Illuminate\\Session\\Middleware\\StartSession::getSessionLifetimeInSeconds",
		"doc": "Get the session lifetime in seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_getCookieExpirationDate",
		"name": "Illuminate\\Session\\Middleware\\StartSession::getCookieExpirationDate",
		"doc": "Get the cookie lifetime in seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_sessionConfigured",
		"name": "Illuminate\\Session\\Middleware\\StartSession::sessionConfigured",
		"doc": "Determine if a session driver has been configured."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_sessionIsPersistent",
		"name": "Illuminate\\Session\\Middleware\\StartSession::sessionIsPersistent",
		"doc": "Determine if the configured session driver is persistent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Middleware\\StartSession",
		"fromLink": "Illuminate/Session/Middleware/StartSession.html",
		"link": "Illuminate/Session/Middleware/StartSession.html#method_cache",
		"name": "Illuminate\\Session\\Middleware\\StartSession::cache",
		"doc": "Resolve the given cache driver."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/NullSessionHandler.html",
		"name": "Illuminate\\Session\\NullSessionHandler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\NullSessionHandler",
		"fromLink": "Illuminate/Session/NullSessionHandler.html",
		"link": "Illuminate/Session/NullSessionHandler.html#method_open",
		"name": "Illuminate\\Session\\NullSessionHandler::open",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\NullSessionHandler",
		"fromLink": "Illuminate/Session/NullSessionHandler.html",
		"link": "Illuminate/Session/NullSessionHandler.html#method_close",
		"name": "Illuminate\\Session\\NullSessionHandler::close",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\NullSessionHandler",
		"fromLink": "Illuminate/Session/NullSessionHandler.html",
		"link": "Illuminate/Session/NullSessionHandler.html#method_read",
		"name": "Illuminate\\Session\\NullSessionHandler::read",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\NullSessionHandler",
		"fromLink": "Illuminate/Session/NullSessionHandler.html",
		"link": "Illuminate/Session/NullSessionHandler.html#method_write",
		"name": "Illuminate\\Session\\NullSessionHandler::write",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\NullSessionHandler",
		"fromLink": "Illuminate/Session/NullSessionHandler.html",
		"link": "Illuminate/Session/NullSessionHandler.html#method_destroy",
		"name": "Illuminate\\Session\\NullSessionHandler::destroy",
		"doc": "{@inheritdoc}"
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\NullSessionHandler",
		"fromLink": "Illuminate/Session/NullSessionHandler.html",
		"link": "Illuminate/Session/NullSessionHandler.html#method_gc",
		"name": "Illuminate\\Session\\NullSessionHandler::gc",
		"doc": "{@inheritdoc}"
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/SessionManager.html",
		"name": "Illuminate\\Session\\SessionManager",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_callCustomCreator",
		"name": "Illuminate\\Session\\SessionManager::callCustomCreator",
		"doc": "Call a custom driver creator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createNullDriver",
		"name": "Illuminate\\Session\\SessionManager::createNullDriver",
		"doc": "Create an instance of the \"null\" session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createArrayDriver",
		"name": "Illuminate\\Session\\SessionManager::createArrayDriver",
		"doc": "Create an instance of the \"array\" session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createCookieDriver",
		"name": "Illuminate\\Session\\SessionManager::createCookieDriver",
		"doc": "Create an instance of the \"cookie\" session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createFileDriver",
		"name": "Illuminate\\Session\\SessionManager::createFileDriver",
		"doc": "Create an instance of the file session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createNativeDriver",
		"name": "Illuminate\\Session\\SessionManager::createNativeDriver",
		"doc": "Create an instance of the file session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createDatabaseDriver",
		"name": "Illuminate\\Session\\SessionManager::createDatabaseDriver",
		"doc": "Create an instance of the database session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_getDatabaseConnection",
		"name": "Illuminate\\Session\\SessionManager::getDatabaseConnection",
		"doc": "Get the database connection for the database driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createApcDriver",
		"name": "Illuminate\\Session\\SessionManager::createApcDriver",
		"doc": "Create an instance of the APC session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createMemcachedDriver",
		"name": "Illuminate\\Session\\SessionManager::createMemcachedDriver",
		"doc": "Create an instance of the Memcached session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createRedisDriver",
		"name": "Illuminate\\Session\\SessionManager::createRedisDriver",
		"doc": "Create an instance of the Redis session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createDynamodbDriver",
		"name": "Illuminate\\Session\\SessionManager::createDynamodbDriver",
		"doc": "Create an instance of the DynamoDB session driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createCacheBased",
		"name": "Illuminate\\Session\\SessionManager::createCacheBased",
		"doc": "Create an instance of a cache driven driver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_createCacheHandler",
		"name": "Illuminate\\Session\\SessionManager::createCacheHandler",
		"doc": "Create the cache based session handler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_buildSession",
		"name": "Illuminate\\Session\\SessionManager::buildSession",
		"doc": "Build the session instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_buildEncryptedSession",
		"name": "Illuminate\\Session\\SessionManager::buildEncryptedSession",
		"doc": "Build the encrypted session instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_shouldBlock",
		"name": "Illuminate\\Session\\SessionManager::shouldBlock",
		"doc": "Determine if requests for the same session should wait for each to finish before executing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_blockDriver",
		"name": "Illuminate\\Session\\SessionManager::blockDriver",
		"doc": "Get the name of the cache store / driver that should be used to acquire session locks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_getSessionConfig",
		"name": "Illuminate\\Session\\SessionManager::getSessionConfig",
		"doc": "Get the session configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_getDefaultDriver",
		"name": "Illuminate\\Session\\SessionManager::getDefaultDriver",
		"doc": "Get the default session driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionManager",
		"fromLink": "Illuminate/Session/SessionManager.html",
		"link": "Illuminate/Session/SessionManager.html#method_setDefaultDriver",
		"name": "Illuminate\\Session\\SessionManager::setDefaultDriver",
		"doc": "Set the default session driver name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/SessionServiceProvider.html",
		"name": "Illuminate\\Session\\SessionServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionServiceProvider",
		"fromLink": "Illuminate/Session/SessionServiceProvider.html",
		"link": "Illuminate/Session/SessionServiceProvider.html#method_register",
		"name": "Illuminate\\Session\\SessionServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionServiceProvider",
		"fromLink": "Illuminate/Session/SessionServiceProvider.html",
		"link": "Illuminate/Session/SessionServiceProvider.html#method_registerSessionManager",
		"name": "Illuminate\\Session\\SessionServiceProvider::registerSessionManager",
		"doc": "Register the session manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\SessionServiceProvider",
		"fromLink": "Illuminate/Session/SessionServiceProvider.html",
		"link": "Illuminate/Session/SessionServiceProvider.html#method_registerSessionDriver",
		"name": "Illuminate\\Session\\SessionServiceProvider::registerSessionDriver",
		"doc": "Register the session driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/Store.html",
		"name": "Illuminate\\Session\\Store",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method___construct",
		"name": "Illuminate\\Session\\Store::__construct",
		"doc": "Create a new session instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_start",
		"name": "Illuminate\\Session\\Store::start",
		"doc": "Start the session, reading the data from a handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_loadSession",
		"name": "Illuminate\\Session\\Store::loadSession",
		"doc": "Load the session data from the handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_readFromHandler",
		"name": "Illuminate\\Session\\Store::readFromHandler",
		"doc": "Read the session data from the handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_prepareForUnserialize",
		"name": "Illuminate\\Session\\Store::prepareForUnserialize",
		"doc": "Prepare the raw string data from the session for unserialization."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_save",
		"name": "Illuminate\\Session\\Store::save",
		"doc": "Save the session data to storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_prepareForStorage",
		"name": "Illuminate\\Session\\Store::prepareForStorage",
		"doc": "Prepare the serialized session data for storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_ageFlashData",
		"name": "Illuminate\\Session\\Store::ageFlashData",
		"doc": "Age the flash data for the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_all",
		"name": "Illuminate\\Session\\Store::all",
		"doc": "Get all of the session data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_only",
		"name": "Illuminate\\Session\\Store::only",
		"doc": "Get a subset of the session data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_exists",
		"name": "Illuminate\\Session\\Store::exists",
		"doc": "Checks if a key exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_has",
		"name": "Illuminate\\Session\\Store::has",
		"doc": "Checks if a key is present and not null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_get",
		"name": "Illuminate\\Session\\Store::get",
		"doc": "Get an item from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_pull",
		"name": "Illuminate\\Session\\Store::pull",
		"doc": "Get the value of a given key and then forget it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_hasOldInput",
		"name": "Illuminate\\Session\\Store::hasOldInput",
		"doc": "Determine if the session contains old input."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_getOldInput",
		"name": "Illuminate\\Session\\Store::getOldInput",
		"doc": "Get the requested item from the flashed input array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_replace",
		"name": "Illuminate\\Session\\Store::replace",
		"doc": "Replace the given session attributes entirely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_put",
		"name": "Illuminate\\Session\\Store::put",
		"doc": "Put a key / value pair or array of key / value pairs in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_remember",
		"name": "Illuminate\\Session\\Store::remember",
		"doc": "Get an item from the session, or store the default value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_push",
		"name": "Illuminate\\Session\\Store::push",
		"doc": "Push a value onto a session array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_increment",
		"name": "Illuminate\\Session\\Store::increment",
		"doc": "Increment the value of an item in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_decrement",
		"name": "Illuminate\\Session\\Store::decrement",
		"doc": "Decrement the value of an item in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_flash",
		"name": "Illuminate\\Session\\Store::flash",
		"doc": "Flash a key / value pair to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_now",
		"name": "Illuminate\\Session\\Store::now",
		"doc": "Flash a key / value pair to the session for immediate use."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_reflash",
		"name": "Illuminate\\Session\\Store::reflash",
		"doc": "Reflash all of the session flash data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_keep",
		"name": "Illuminate\\Session\\Store::keep",
		"doc": "Reflash a subset of the current flash data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_mergeNewFlashes",
		"name": "Illuminate\\Session\\Store::mergeNewFlashes",
		"doc": "Merge new flash keys into the new flash array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_removeFromOldFlashData",
		"name": "Illuminate\\Session\\Store::removeFromOldFlashData",
		"doc": "Remove the given keys from the old flash data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_flashInput",
		"name": "Illuminate\\Session\\Store::flashInput",
		"doc": "Flash an input array to the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_remove",
		"name": "Illuminate\\Session\\Store::remove",
		"doc": "Remove an item from the session, returning its value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_forget",
		"name": "Illuminate\\Session\\Store::forget",
		"doc": "Remove one or many items from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_flush",
		"name": "Illuminate\\Session\\Store::flush",
		"doc": "Remove all of the items from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_invalidate",
		"name": "Illuminate\\Session\\Store::invalidate",
		"doc": "Flush the session data and regenerate the ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_regenerate",
		"name": "Illuminate\\Session\\Store::regenerate",
		"doc": "Generate a new session identifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_migrate",
		"name": "Illuminate\\Session\\Store::migrate",
		"doc": "Generate a new session ID for the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_isStarted",
		"name": "Illuminate\\Session\\Store::isStarted",
		"doc": "Determine if the session has been started."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_getName",
		"name": "Illuminate\\Session\\Store::getName",
		"doc": "Get the name of the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_setName",
		"name": "Illuminate\\Session\\Store::setName",
		"doc": "Set the name of the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_getId",
		"name": "Illuminate\\Session\\Store::getId",
		"doc": "Get the current session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_setId",
		"name": "Illuminate\\Session\\Store::setId",
		"doc": "Set the session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_isValidId",
		"name": "Illuminate\\Session\\Store::isValidId",
		"doc": "Determine if this is a valid session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_generateSessionId",
		"name": "Illuminate\\Session\\Store::generateSessionId",
		"doc": "Get a new, random session ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_setExists",
		"name": "Illuminate\\Session\\Store::setExists",
		"doc": "Set the existence of the session on the handler if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_token",
		"name": "Illuminate\\Session\\Store::token",
		"doc": "Get the CSRF token value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_regenerateToken",
		"name": "Illuminate\\Session\\Store::regenerateToken",
		"doc": "Regenerate the CSRF token value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_previousUrl",
		"name": "Illuminate\\Session\\Store::previousUrl",
		"doc": "Get the previous URL from the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_setPreviousUrl",
		"name": "Illuminate\\Session\\Store::setPreviousUrl",
		"doc": "Set the \"previous\" URL in the session."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_passwordConfirmed",
		"name": "Illuminate\\Session\\Store::passwordConfirmed",
		"doc": "Specify that the user has confirmed their password."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_getHandler",
		"name": "Illuminate\\Session\\Store::getHandler",
		"doc": "Get the underlying session handler implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_handlerNeedsRequest",
		"name": "Illuminate\\Session\\Store::handlerNeedsRequest",
		"doc": "Determine if the session handler needs a request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Session\\Store",
		"fromLink": "Illuminate/Session/Store.html",
		"link": "Illuminate/Session/Store.html#method_setRequestOnHandler",
		"name": "Illuminate\\Session\\Store::setRequestOnHandler",
		"doc": "Set the request on the handler instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Session",
		"fromLink": "Illuminate/Session.html",
		"link": "Illuminate/Session/TokenMismatchException.html",
		"name": "Illuminate\\Session\\TokenMismatchException",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/AggregateServiceProvider.html",
		"name": "Illuminate\\Support\\AggregateServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\AggregateServiceProvider",
		"fromLink": "Illuminate/Support/AggregateServiceProvider.html",
		"link": "Illuminate/Support/AggregateServiceProvider.html#method_register",
		"name": "Illuminate\\Support\\AggregateServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\AggregateServiceProvider",
		"fromLink": "Illuminate/Support/AggregateServiceProvider.html",
		"link": "Illuminate/Support/AggregateServiceProvider.html#method_provides",
		"name": "Illuminate\\Support\\AggregateServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Arr.html",
		"name": "Illuminate\\Support\\Arr",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_accessible",
		"name": "Illuminate\\Support\\Arr::accessible",
		"doc": "Determine whether the given value is array accessible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_add",
		"name": "Illuminate\\Support\\Arr::add",
		"doc": "Add an element to an array using \"dot\" notation if it doesn't exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_collapse",
		"name": "Illuminate\\Support\\Arr::collapse",
		"doc": "Collapse an array of arrays into a single array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_crossJoin",
		"name": "Illuminate\\Support\\Arr::crossJoin",
		"doc": "Cross join the given arrays, returning all possible permutations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_divide",
		"name": "Illuminate\\Support\\Arr::divide",
		"doc": "Divide an array into two arrays. One with keys and the other with values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_dot",
		"name": "Illuminate\\Support\\Arr::dot",
		"doc": "Flatten a multi-dimensional associative array with dots."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_except",
		"name": "Illuminate\\Support\\Arr::except",
		"doc": "Get all of the given array except for a specified array of keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_exists",
		"name": "Illuminate\\Support\\Arr::exists",
		"doc": "Determine if the given key exists in the provided array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_first",
		"name": "Illuminate\\Support\\Arr::first",
		"doc": "Return the first element in an array passing a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_last",
		"name": "Illuminate\\Support\\Arr::last",
		"doc": "Return the last element in an array passing a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_flatten",
		"name": "Illuminate\\Support\\Arr::flatten",
		"doc": "Flatten a multi-dimensional array into a single level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_forget",
		"name": "Illuminate\\Support\\Arr::forget",
		"doc": "Remove one or many array items from a given array using \"dot\" notation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_get",
		"name": "Illuminate\\Support\\Arr::get",
		"doc": "Get an item from an array using \"dot\" notation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_has",
		"name": "Illuminate\\Support\\Arr::has",
		"doc": "Check if an item or items exist in an array using \"dot\" notation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_hasAny",
		"name": "Illuminate\\Support\\Arr::hasAny",
		"doc": "Determine if any of the keys exist in an array using \"dot\" notation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_isAssoc",
		"name": "Illuminate\\Support\\Arr::isAssoc",
		"doc": "Determines if an array is associative."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_only",
		"name": "Illuminate\\Support\\Arr::only",
		"doc": "Get a subset of the items from the given array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_pluck",
		"name": "Illuminate\\Support\\Arr::pluck",
		"doc": "Pluck an array of values from an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_explodePluckParameters",
		"name": "Illuminate\\Support\\Arr::explodePluckParameters",
		"doc": "Explode the \"value\" and \"key\" arguments passed to \"pluck\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_prepend",
		"name": "Illuminate\\Support\\Arr::prepend",
		"doc": "Push an item onto the beginning of an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_pull",
		"name": "Illuminate\\Support\\Arr::pull",
		"doc": "Get a value from the array, and remove it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_random",
		"name": "Illuminate\\Support\\Arr::random",
		"doc": "Get one or a specified number of random values from an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_set",
		"name": "Illuminate\\Support\\Arr::set",
		"doc": "Set an array item to a given value using \"dot\" notation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_shuffle",
		"name": "Illuminate\\Support\\Arr::shuffle",
		"doc": "Shuffle the given array and return the result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_sort",
		"name": "Illuminate\\Support\\Arr::sort",
		"doc": "Sort the array using the given callback or \"dot\" notation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_sortRecursive",
		"name": "Illuminate\\Support\\Arr::sortRecursive",
		"doc": "Recursively sort an array by keys and values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_query",
		"name": "Illuminate\\Support\\Arr::query",
		"doc": "Convert the array into a query string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_where",
		"name": "Illuminate\\Support\\Arr::where",
		"doc": "Filter the array using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Arr",
		"fromLink": "Illuminate/Support/Arr.html",
		"link": "Illuminate/Support/Arr.html#method_wrap",
		"name": "Illuminate\\Support\\Arr::wrap",
		"doc": "If the given value is not an array and not null, wrap it in one."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Carbon.html",
		"name": "Illuminate\\Support\\Carbon",
		"doc": null
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Collection.html",
		"name": "Illuminate\\Support\\Collection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method___construct",
		"name": "Illuminate\\Support\\Collection::__construct",
		"doc": "Create a new collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_range",
		"name": "Illuminate\\Support\\Collection::range",
		"doc": "Create a collection with the given range."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_all",
		"name": "Illuminate\\Support\\Collection::all",
		"doc": "Get all of the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_lazy",
		"name": "Illuminate\\Support\\Collection::lazy",
		"doc": "Get a lazy collection for the items in this collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_avg",
		"name": "Illuminate\\Support\\Collection::avg",
		"doc": "Get the average value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_median",
		"name": "Illuminate\\Support\\Collection::median",
		"doc": "Get the median of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_mode",
		"name": "Illuminate\\Support\\Collection::mode",
		"doc": "Get the mode of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_collapse",
		"name": "Illuminate\\Support\\Collection::collapse",
		"doc": "Collapse the collection of items into a single array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_contains",
		"name": "Illuminate\\Support\\Collection::contains",
		"doc": "Determine if an item exists in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_crossJoin",
		"name": "Illuminate\\Support\\Collection::crossJoin",
		"doc": "Cross join with the given lists, returning all possible permutations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_diff",
		"name": "Illuminate\\Support\\Collection::diff",
		"doc": "Get the items in the collection that are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_diffUsing",
		"name": "Illuminate\\Support\\Collection::diffUsing",
		"doc": "Get the items in the collection that are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_diffAssoc",
		"name": "Illuminate\\Support\\Collection::diffAssoc",
		"doc": "Get the items in the collection whose keys and values are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_diffAssocUsing",
		"name": "Illuminate\\Support\\Collection::diffAssocUsing",
		"doc": "Get the items in the collection whose keys and values are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_diffKeys",
		"name": "Illuminate\\Support\\Collection::diffKeys",
		"doc": "Get the items in the collection whose keys are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_diffKeysUsing",
		"name": "Illuminate\\Support\\Collection::diffKeysUsing",
		"doc": "Get the items in the collection whose keys are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_duplicates",
		"name": "Illuminate\\Support\\Collection::duplicates",
		"doc": "Retrieve duplicate items from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_duplicatesStrict",
		"name": "Illuminate\\Support\\Collection::duplicatesStrict",
		"doc": "Retrieve duplicate items from the collection using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_duplicateComparator",
		"name": "Illuminate\\Support\\Collection::duplicateComparator",
		"doc": "Get the comparison function to detect duplicates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_except",
		"name": "Illuminate\\Support\\Collection::except",
		"doc": "Get all items except for those with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_filter",
		"name": "Illuminate\\Support\\Collection::filter",
		"doc": "Run a filter over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_first",
		"name": "Illuminate\\Support\\Collection::first",
		"doc": "Get the first item from the collection passing the given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_flatten",
		"name": "Illuminate\\Support\\Collection::flatten",
		"doc": "Get a flattened array of the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_flip",
		"name": "Illuminate\\Support\\Collection::flip",
		"doc": "Flip the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_forget",
		"name": "Illuminate\\Support\\Collection::forget",
		"doc": "Remove an item from the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_get",
		"name": "Illuminate\\Support\\Collection::get",
		"doc": "Get an item from the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_groupBy",
		"name": "Illuminate\\Support\\Collection::groupBy",
		"doc": "Group an associative array by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_keyBy",
		"name": "Illuminate\\Support\\Collection::keyBy",
		"doc": "Key an associative array by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_has",
		"name": "Illuminate\\Support\\Collection::has",
		"doc": "Determine if an item exists in the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_implode",
		"name": "Illuminate\\Support\\Collection::implode",
		"doc": "Concatenate values of a given key as a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_intersect",
		"name": "Illuminate\\Support\\Collection::intersect",
		"doc": "Intersect the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_intersectByKeys",
		"name": "Illuminate\\Support\\Collection::intersectByKeys",
		"doc": "Intersect the collection with the given items by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_isEmpty",
		"name": "Illuminate\\Support\\Collection::isEmpty",
		"doc": "Determine if the collection is empty or not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_join",
		"name": "Illuminate\\Support\\Collection::join",
		"doc": "Join all items from the collection using a string. The final items can use a separate glue string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_keys",
		"name": "Illuminate\\Support\\Collection::keys",
		"doc": "Get the keys of the collection items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_last",
		"name": "Illuminate\\Support\\Collection::last",
		"doc": "Get the last item from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_pluck",
		"name": "Illuminate\\Support\\Collection::pluck",
		"doc": "Get the values of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_map",
		"name": "Illuminate\\Support\\Collection::map",
		"doc": "Run a map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_mapToDictionary",
		"name": "Illuminate\\Support\\Collection::mapToDictionary",
		"doc": "Run a dictionary map over the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_mapWithKeys",
		"name": "Illuminate\\Support\\Collection::mapWithKeys",
		"doc": "Run an associative map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_merge",
		"name": "Illuminate\\Support\\Collection::merge",
		"doc": "Merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_mergeRecursive",
		"name": "Illuminate\\Support\\Collection::mergeRecursive",
		"doc": "Recursively merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_combine",
		"name": "Illuminate\\Support\\Collection::combine",
		"doc": "Create a collection by using this collection for keys and another for its values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_union",
		"name": "Illuminate\\Support\\Collection::union",
		"doc": "Union the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_nth",
		"name": "Illuminate\\Support\\Collection::nth",
		"doc": "Create a new collection consisting of every n-th element."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_only",
		"name": "Illuminate\\Support\\Collection::only",
		"doc": "Get the items with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_pop",
		"name": "Illuminate\\Support\\Collection::pop",
		"doc": "Get and remove the last item from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_prepend",
		"name": "Illuminate\\Support\\Collection::prepend",
		"doc": "Push an item onto the beginning of the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_push",
		"name": "Illuminate\\Support\\Collection::push",
		"doc": "Push one or more items onto the end of the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_concat",
		"name": "Illuminate\\Support\\Collection::concat",
		"doc": "Push all of the given items onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_pull",
		"name": "Illuminate\\Support\\Collection::pull",
		"doc": "Get and remove an item from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_put",
		"name": "Illuminate\\Support\\Collection::put",
		"doc": "Put an item in the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_random",
		"name": "Illuminate\\Support\\Collection::random",
		"doc": "Get one or a specified number of items randomly from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_reduce",
		"name": "Illuminate\\Support\\Collection::reduce",
		"doc": "Reduce the collection to a single value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_replace",
		"name": "Illuminate\\Support\\Collection::replace",
		"doc": "Replace the collection items with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_replaceRecursive",
		"name": "Illuminate\\Support\\Collection::replaceRecursive",
		"doc": "Recursively replace the collection items with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_reverse",
		"name": "Illuminate\\Support\\Collection::reverse",
		"doc": "Reverse items order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_search",
		"name": "Illuminate\\Support\\Collection::search",
		"doc": "Search the collection for a given value and return the corresponding key if successful."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_shift",
		"name": "Illuminate\\Support\\Collection::shift",
		"doc": "Get and remove the first item from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_shuffle",
		"name": "Illuminate\\Support\\Collection::shuffle",
		"doc": "Shuffle the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_skip",
		"name": "Illuminate\\Support\\Collection::skip",
		"doc": "Skip the first {$count} items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_skipUntil",
		"name": "Illuminate\\Support\\Collection::skipUntil",
		"doc": "Skip items in the collection until the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_skipWhile",
		"name": "Illuminate\\Support\\Collection::skipWhile",
		"doc": "Skip items in the collection while the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_slice",
		"name": "Illuminate\\Support\\Collection::slice",
		"doc": "Slice the underlying collection array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_split",
		"name": "Illuminate\\Support\\Collection::split",
		"doc": "Split a collection into a certain number of groups."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_splitIn",
		"name": "Illuminate\\Support\\Collection::splitIn",
		"doc": "Split a collection into a certain number of groups, and fill the first groups completely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_chunk",
		"name": "Illuminate\\Support\\Collection::chunk",
		"doc": "Chunk the collection into chunks of the given size."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_chunkWhile",
		"name": "Illuminate\\Support\\Collection::chunkWhile",
		"doc": "Chunk the collection into chunks with a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_sort",
		"name": "Illuminate\\Support\\Collection::sort",
		"doc": "Sort through each item with a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_sortDesc",
		"name": "Illuminate\\Support\\Collection::sortDesc",
		"doc": "Sort items in descending order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_sortBy",
		"name": "Illuminate\\Support\\Collection::sortBy",
		"doc": "Sort the collection using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_sortByMany",
		"name": "Illuminate\\Support\\Collection::sortByMany",
		"doc": "Sort the collection using multiple comparisons."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_sortByDesc",
		"name": "Illuminate\\Support\\Collection::sortByDesc",
		"doc": "Sort the collection in descending order using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_sortKeys",
		"name": "Illuminate\\Support\\Collection::sortKeys",
		"doc": "Sort the collection keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_sortKeysDesc",
		"name": "Illuminate\\Support\\Collection::sortKeysDesc",
		"doc": "Sort the collection keys in descending order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_splice",
		"name": "Illuminate\\Support\\Collection::splice",
		"doc": "Splice a portion of the underlying collection array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_take",
		"name": "Illuminate\\Support\\Collection::take",
		"doc": "Take the first or last {$limit} items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_takeUntil",
		"name": "Illuminate\\Support\\Collection::takeUntil",
		"doc": "Take items in the collection until the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_takeWhile",
		"name": "Illuminate\\Support\\Collection::takeWhile",
		"doc": "Take items in the collection while the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_transform",
		"name": "Illuminate\\Support\\Collection::transform",
		"doc": "Transform each item in the collection using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_values",
		"name": "Illuminate\\Support\\Collection::values",
		"doc": "Reset the keys on the underlying array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_zip",
		"name": "Illuminate\\Support\\Collection::zip",
		"doc": "Zip the collection together with one or more arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_pad",
		"name": "Illuminate\\Support\\Collection::pad",
		"doc": "Pad collection to the specified length with a value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_getIterator",
		"name": "Illuminate\\Support\\Collection::getIterator",
		"doc": "Get an iterator for the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_count",
		"name": "Illuminate\\Support\\Collection::count",
		"doc": "Count the number of items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_countBy",
		"name": "Illuminate\\Support\\Collection::countBy",
		"doc": "Count the number of items in the collection by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_add",
		"name": "Illuminate\\Support\\Collection::add",
		"doc": "Add an item to the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_toBase",
		"name": "Illuminate\\Support\\Collection::toBase",
		"doc": "Get a base Support collection instance from this collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_offsetExists",
		"name": "Illuminate\\Support\\Collection::offsetExists",
		"doc": "Determine if an item exists at an offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_offsetGet",
		"name": "Illuminate\\Support\\Collection::offsetGet",
		"doc": "Get an item at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_offsetSet",
		"name": "Illuminate\\Support\\Collection::offsetSet",
		"doc": "Set the item at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Collection",
		"fromLink": "Illuminate/Support/Collection.html",
		"link": "Illuminate/Support/Collection.html#method_offsetUnset",
		"name": "Illuminate\\Support\\Collection::offsetUnset",
		"doc": "Unset the item at a given offset."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Composer.html",
		"name": "Illuminate\\Support\\Composer",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Composer",
		"fromLink": "Illuminate/Support/Composer.html",
		"link": "Illuminate/Support/Composer.html#method___construct",
		"name": "Illuminate\\Support\\Composer::__construct",
		"doc": "Create a new Composer manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Composer",
		"fromLink": "Illuminate/Support/Composer.html",
		"link": "Illuminate/Support/Composer.html#method_dumpAutoloads",
		"name": "Illuminate\\Support\\Composer::dumpAutoloads",
		"doc": "Regenerate the Composer autoloader files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Composer",
		"fromLink": "Illuminate/Support/Composer.html",
		"link": "Illuminate/Support/Composer.html#method_dumpOptimized",
		"name": "Illuminate\\Support\\Composer::dumpOptimized",
		"doc": "Regenerate the optimized Composer autoloader files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Composer",
		"fromLink": "Illuminate/Support/Composer.html",
		"link": "Illuminate/Support/Composer.html#method_findComposer",
		"name": "Illuminate\\Support\\Composer::findComposer",
		"doc": "Get the composer command for the environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Composer",
		"fromLink": "Illuminate/Support/Composer.html",
		"link": "Illuminate/Support/Composer.html#method_phpBinary",
		"name": "Illuminate\\Support\\Composer::phpBinary",
		"doc": "Get the PHP binary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Composer",
		"fromLink": "Illuminate/Support/Composer.html",
		"link": "Illuminate/Support/Composer.html#method_getProcess",
		"name": "Illuminate\\Support\\Composer::getProcess",
		"doc": "Get a new Symfony process instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Composer",
		"fromLink": "Illuminate/Support/Composer.html",
		"link": "Illuminate/Support/Composer.html#method_setWorkingPath",
		"name": "Illuminate\\Support\\Composer::setWorkingPath",
		"doc": "Set the working path used by the class."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html",
		"name": "Illuminate\\Support\\ConfigurationUrlParser",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_parseConfiguration",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::parseConfiguration",
		"doc": "Parse the database configuration, hydrating options using a database configuration URL if possible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_getPrimaryOptions",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::getPrimaryOptions",
		"doc": "Get the primary database connection options."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_getDriver",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::getDriver",
		"doc": "Get the database driver from the URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_getDatabase",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::getDatabase",
		"doc": "Get the database name from the URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_getQueryOptions",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::getQueryOptions",
		"doc": "Get all of the additional database options from the query string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_parseUrl",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::parseUrl",
		"doc": "Parse the string URL to an array of components."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_parseStringsToNativeTypes",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::parseStringsToNativeTypes",
		"doc": "Convert string casted values to their native types."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_getDriverAliases",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::getDriverAliases",
		"doc": "Get all of the current drivers aliases."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ConfigurationUrlParser",
		"fromLink": "Illuminate/Support/ConfigurationUrlParser.html",
		"link": "Illuminate/Support/ConfigurationUrlParser.html#method_addDriverAlias",
		"name": "Illuminate\\Support\\ConfigurationUrlParser::addDriverAlias",
		"doc": "Add the given driver alias to the driver aliases array."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/DateFactory.html",
		"name": "Illuminate\\Support\\DateFactory",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\DateFactory",
		"fromLink": "Illuminate/Support/DateFactory.html",
		"link": "Illuminate/Support/DateFactory.html#method_use",
		"name": "Illuminate\\Support\\DateFactory::use",
		"doc": "Use the given handler when generating dates (class name, callable, or factory)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\DateFactory",
		"fromLink": "Illuminate/Support/DateFactory.html",
		"link": "Illuminate/Support/DateFactory.html#method_useDefault",
		"name": "Illuminate\\Support\\DateFactory::useDefault",
		"doc": "Use the default date class when generating dates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\DateFactory",
		"fromLink": "Illuminate/Support/DateFactory.html",
		"link": "Illuminate/Support/DateFactory.html#method_useCallable",
		"name": "Illuminate\\Support\\DateFactory::useCallable",
		"doc": "Execute the given callable on each date creation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\DateFactory",
		"fromLink": "Illuminate/Support/DateFactory.html",
		"link": "Illuminate/Support/DateFactory.html#method_useClass",
		"name": "Illuminate\\Support\\DateFactory::useClass",
		"doc": "Use the given date type (class) when generating dates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\DateFactory",
		"fromLink": "Illuminate/Support/DateFactory.html",
		"link": "Illuminate/Support/DateFactory.html#method_useFactory",
		"name": "Illuminate\\Support\\DateFactory::useFactory",
		"doc": "Use the given Carbon factory when generating dates."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\DateFactory",
		"fromLink": "Illuminate/Support/DateFactory.html",
		"link": "Illuminate/Support/DateFactory.html#method___call",
		"name": "Illuminate\\Support\\DateFactory::__call",
		"doc": "Handle dynamic calls to generate dates."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Enumerable.html",
		"name": "Illuminate\\Support\\Enumerable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_make",
		"name": "Illuminate\\Support\\Enumerable::make",
		"doc": "Create a new collection instance if the value isn't one already."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_times",
		"name": "Illuminate\\Support\\Enumerable::times",
		"doc": "Create a new instance by invoking the callback a given amount of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_range",
		"name": "Illuminate\\Support\\Enumerable::range",
		"doc": "Create a collection with the given range."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_wrap",
		"name": "Illuminate\\Support\\Enumerable::wrap",
		"doc": "Wrap the given value in a collection if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unwrap",
		"name": "Illuminate\\Support\\Enumerable::unwrap",
		"doc": "Get the underlying items from the given collection if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_empty",
		"name": "Illuminate\\Support\\Enumerable::empty",
		"doc": "Create a new instance with no items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_all",
		"name": "Illuminate\\Support\\Enumerable::all",
		"doc": "Get all items in the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_average",
		"name": "Illuminate\\Support\\Enumerable::average",
		"doc": "Alias for the \"avg\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_median",
		"name": "Illuminate\\Support\\Enumerable::median",
		"doc": "Get the median of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mode",
		"name": "Illuminate\\Support\\Enumerable::mode",
		"doc": "Get the mode of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_collapse",
		"name": "Illuminate\\Support\\Enumerable::collapse",
		"doc": "Collapse the items into a single enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_some",
		"name": "Illuminate\\Support\\Enumerable::some",
		"doc": "Alias for the \"contains\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_containsStrict",
		"name": "Illuminate\\Support\\Enumerable::containsStrict",
		"doc": "Determine if an item exists, using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_avg",
		"name": "Illuminate\\Support\\Enumerable::avg",
		"doc": "Get the average value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_contains",
		"name": "Illuminate\\Support\\Enumerable::contains",
		"doc": "Determine if an item exists in the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_crossJoin",
		"name": "Illuminate\\Support\\Enumerable::crossJoin",
		"doc": "Cross join with the given lists, returning all possible permutations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_dd",
		"name": "Illuminate\\Support\\Enumerable::dd",
		"doc": "Dump the collection and end the script."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_dump",
		"name": "Illuminate\\Support\\Enumerable::dump",
		"doc": "Dump the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diff",
		"name": "Illuminate\\Support\\Enumerable::diff",
		"doc": "Get the items that are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffUsing",
		"name": "Illuminate\\Support\\Enumerable::diffUsing",
		"doc": "Get the items that are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffAssoc",
		"name": "Illuminate\\Support\\Enumerable::diffAssoc",
		"doc": "Get the items whose keys and values are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffAssocUsing",
		"name": "Illuminate\\Support\\Enumerable::diffAssocUsing",
		"doc": "Get the items whose keys and values are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffKeys",
		"name": "Illuminate\\Support\\Enumerable::diffKeys",
		"doc": "Get the items whose keys are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_diffKeysUsing",
		"name": "Illuminate\\Support\\Enumerable::diffKeysUsing",
		"doc": "Get the items whose keys are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_duplicates",
		"name": "Illuminate\\Support\\Enumerable::duplicates",
		"doc": "Retrieve duplicate items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_duplicatesStrict",
		"name": "Illuminate\\Support\\Enumerable::duplicatesStrict",
		"doc": "Retrieve duplicate items using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_each",
		"name": "Illuminate\\Support\\Enumerable::each",
		"doc": "Execute a callback over each item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_eachSpread",
		"name": "Illuminate\\Support\\Enumerable::eachSpread",
		"doc": "Execute a callback over each nested chunk of items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_every",
		"name": "Illuminate\\Support\\Enumerable::every",
		"doc": "Determine if all items pass the given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_except",
		"name": "Illuminate\\Support\\Enumerable::except",
		"doc": "Get all items except for those with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_filter",
		"name": "Illuminate\\Support\\Enumerable::filter",
		"doc": "Run a filter over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_when",
		"name": "Illuminate\\Support\\Enumerable::when",
		"doc": "Apply the callback if the value is truthy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whenEmpty",
		"name": "Illuminate\\Support\\Enumerable::whenEmpty",
		"doc": "Apply the callback if the collection is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whenNotEmpty",
		"name": "Illuminate\\Support\\Enumerable::whenNotEmpty",
		"doc": "Apply the callback if the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unless",
		"name": "Illuminate\\Support\\Enumerable::unless",
		"doc": "Apply the callback if the value is falsy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unlessEmpty",
		"name": "Illuminate\\Support\\Enumerable::unlessEmpty",
		"doc": "Apply the callback unless the collection is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unlessNotEmpty",
		"name": "Illuminate\\Support\\Enumerable::unlessNotEmpty",
		"doc": "Apply the callback unless the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_where",
		"name": "Illuminate\\Support\\Enumerable::where",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNull",
		"name": "Illuminate\\Support\\Enumerable::whereNull",
		"doc": "Filter items where the value for the given key is null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNotNull",
		"name": "Illuminate\\Support\\Enumerable::whereNotNull",
		"doc": "Filter items where the value for the given key is not null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereStrict",
		"name": "Illuminate\\Support\\Enumerable::whereStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereIn",
		"name": "Illuminate\\Support\\Enumerable::whereIn",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereInStrict",
		"name": "Illuminate\\Support\\Enumerable::whereInStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereBetween",
		"name": "Illuminate\\Support\\Enumerable::whereBetween",
		"doc": "Filter items such that the value of the given key is between the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNotBetween",
		"name": "Illuminate\\Support\\Enumerable::whereNotBetween",
		"doc": "Filter items such that the value of the given key is not between the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNotIn",
		"name": "Illuminate\\Support\\Enumerable::whereNotIn",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereNotInStrict",
		"name": "Illuminate\\Support\\Enumerable::whereNotInStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_whereInstanceOf",
		"name": "Illuminate\\Support\\Enumerable::whereInstanceOf",
		"doc": "Filter the items, removing any items that don't match the given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_first",
		"name": "Illuminate\\Support\\Enumerable::first",
		"doc": "Get the first item from the enumerable passing the given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_firstWhere",
		"name": "Illuminate\\Support\\Enumerable::firstWhere",
		"doc": "Get the first item by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_flatten",
		"name": "Illuminate\\Support\\Enumerable::flatten",
		"doc": "Get a flattened array of the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_flip",
		"name": "Illuminate\\Support\\Enumerable::flip",
		"doc": "Flip the values with their keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_get",
		"name": "Illuminate\\Support\\Enumerable::get",
		"doc": "Get an item from the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_groupBy",
		"name": "Illuminate\\Support\\Enumerable::groupBy",
		"doc": "Group an associative array by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_keyBy",
		"name": "Illuminate\\Support\\Enumerable::keyBy",
		"doc": "Key an associative array by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_has",
		"name": "Illuminate\\Support\\Enumerable::has",
		"doc": "Determine if an item exists in the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_implode",
		"name": "Illuminate\\Support\\Enumerable::implode",
		"doc": "Concatenate values of a given key as a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_intersect",
		"name": "Illuminate\\Support\\Enumerable::intersect",
		"doc": "Intersect the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_intersectByKeys",
		"name": "Illuminate\\Support\\Enumerable::intersectByKeys",
		"doc": "Intersect the collection with the given items by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_isEmpty",
		"name": "Illuminate\\Support\\Enumerable::isEmpty",
		"doc": "Determine if the collection is empty or not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_isNotEmpty",
		"name": "Illuminate\\Support\\Enumerable::isNotEmpty",
		"doc": "Determine if the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_join",
		"name": "Illuminate\\Support\\Enumerable::join",
		"doc": "Join all items from the collection using a string. The final items can use a separate glue string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_keys",
		"name": "Illuminate\\Support\\Enumerable::keys",
		"doc": "Get the keys of the collection items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_last",
		"name": "Illuminate\\Support\\Enumerable::last",
		"doc": "Get the last item from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_map",
		"name": "Illuminate\\Support\\Enumerable::map",
		"doc": "Run a map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapSpread",
		"name": "Illuminate\\Support\\Enumerable::mapSpread",
		"doc": "Run a map over each nested chunk of items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapToDictionary",
		"name": "Illuminate\\Support\\Enumerable::mapToDictionary",
		"doc": "Run a dictionary map over the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapToGroups",
		"name": "Illuminate\\Support\\Enumerable::mapToGroups",
		"doc": "Run a grouping map over the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapWithKeys",
		"name": "Illuminate\\Support\\Enumerable::mapWithKeys",
		"doc": "Run an associative map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_flatMap",
		"name": "Illuminate\\Support\\Enumerable::flatMap",
		"doc": "Map a collection and flatten the result by a single level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mapInto",
		"name": "Illuminate\\Support\\Enumerable::mapInto",
		"doc": "Map the values into a new class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_merge",
		"name": "Illuminate\\Support\\Enumerable::merge",
		"doc": "Merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_mergeRecursive",
		"name": "Illuminate\\Support\\Enumerable::mergeRecursive",
		"doc": "Recursively merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_combine",
		"name": "Illuminate\\Support\\Enumerable::combine",
		"doc": "Create a collection by using this collection for keys and another for its values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_union",
		"name": "Illuminate\\Support\\Enumerable::union",
		"doc": "Union the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_min",
		"name": "Illuminate\\Support\\Enumerable::min",
		"doc": "Get the min value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_max",
		"name": "Illuminate\\Support\\Enumerable::max",
		"doc": "Get the max value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_nth",
		"name": "Illuminate\\Support\\Enumerable::nth",
		"doc": "Create a new collection consisting of every n-th element."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_only",
		"name": "Illuminate\\Support\\Enumerable::only",
		"doc": "Get the items with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_forPage",
		"name": "Illuminate\\Support\\Enumerable::forPage",
		"doc": "\"Paginate\" the collection by slicing it into a smaller collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_partition",
		"name": "Illuminate\\Support\\Enumerable::partition",
		"doc": "Partition the collection into two arrays using the given callback or key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_concat",
		"name": "Illuminate\\Support\\Enumerable::concat",
		"doc": "Push all of the given items onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_random",
		"name": "Illuminate\\Support\\Enumerable::random",
		"doc": "Get one or a specified number of items randomly from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_reduce",
		"name": "Illuminate\\Support\\Enumerable::reduce",
		"doc": "Reduce the collection to a single value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_replace",
		"name": "Illuminate\\Support\\Enumerable::replace",
		"doc": "Replace the collection items with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_replaceRecursive",
		"name": "Illuminate\\Support\\Enumerable::replaceRecursive",
		"doc": "Recursively replace the collection items with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_reverse",
		"name": "Illuminate\\Support\\Enumerable::reverse",
		"doc": "Reverse items order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_search",
		"name": "Illuminate\\Support\\Enumerable::search",
		"doc": "Search the collection for a given value and return the corresponding key if successful."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_shuffle",
		"name": "Illuminate\\Support\\Enumerable::shuffle",
		"doc": "Shuffle the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_skip",
		"name": "Illuminate\\Support\\Enumerable::skip",
		"doc": "Skip the first {$count} items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_skipUntil",
		"name": "Illuminate\\Support\\Enumerable::skipUntil",
		"doc": "Skip items in the collection until the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_skipWhile",
		"name": "Illuminate\\Support\\Enumerable::skipWhile",
		"doc": "Skip items in the collection while the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_slice",
		"name": "Illuminate\\Support\\Enumerable::slice",
		"doc": "Get a slice of items from the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_split",
		"name": "Illuminate\\Support\\Enumerable::split",
		"doc": "Split a collection into a certain number of groups."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_chunk",
		"name": "Illuminate\\Support\\Enumerable::chunk",
		"doc": "Chunk the collection into chunks of the given size."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_chunkWhile",
		"name": "Illuminate\\Support\\Enumerable::chunkWhile",
		"doc": "Chunk the collection into chunks with a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sort",
		"name": "Illuminate\\Support\\Enumerable::sort",
		"doc": "Sort through each item with a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortDesc",
		"name": "Illuminate\\Support\\Enumerable::sortDesc",
		"doc": "Sort items in descending order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortBy",
		"name": "Illuminate\\Support\\Enumerable::sortBy",
		"doc": "Sort the collection using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortByDesc",
		"name": "Illuminate\\Support\\Enumerable::sortByDesc",
		"doc": "Sort the collection in descending order using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortKeys",
		"name": "Illuminate\\Support\\Enumerable::sortKeys",
		"doc": "Sort the collection keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sortKeysDesc",
		"name": "Illuminate\\Support\\Enumerable::sortKeysDesc",
		"doc": "Sort the collection keys in descending order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_sum",
		"name": "Illuminate\\Support\\Enumerable::sum",
		"doc": "Get the sum of the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_take",
		"name": "Illuminate\\Support\\Enumerable::take",
		"doc": "Take the first or last {$limit} items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_takeUntil",
		"name": "Illuminate\\Support\\Enumerable::takeUntil",
		"doc": "Take items in the collection until the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_takeWhile",
		"name": "Illuminate\\Support\\Enumerable::takeWhile",
		"doc": "Take items in the collection while the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_tap",
		"name": "Illuminate\\Support\\Enumerable::tap",
		"doc": "Pass the collection to the given callback and then return it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_pipe",
		"name": "Illuminate\\Support\\Enumerable::pipe",
		"doc": "Pass the enumerable to the given callback and return the result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_pluck",
		"name": "Illuminate\\Support\\Enumerable::pluck",
		"doc": "Get the values of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_reject",
		"name": "Illuminate\\Support\\Enumerable::reject",
		"doc": "Create a collection of all elements that do not pass a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_unique",
		"name": "Illuminate\\Support\\Enumerable::unique",
		"doc": "Return only unique items from the collection array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_uniqueStrict",
		"name": "Illuminate\\Support\\Enumerable::uniqueStrict",
		"doc": "Return only unique items from the collection array using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_values",
		"name": "Illuminate\\Support\\Enumerable::values",
		"doc": "Reset the keys on the underlying array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_pad",
		"name": "Illuminate\\Support\\Enumerable::pad",
		"doc": "Pad collection to the specified length with a value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_countBy",
		"name": "Illuminate\\Support\\Enumerable::countBy",
		"doc": "Count the number of items in the collection using a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_zip",
		"name": "Illuminate\\Support\\Enumerable::zip",
		"doc": "Zip the collection together with one or more arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_collect",
		"name": "Illuminate\\Support\\Enumerable::collect",
		"doc": "Collect the values into a collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method___toString",
		"name": "Illuminate\\Support\\Enumerable::__toString",
		"doc": "Convert the collection to its string representation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method_proxy",
		"name": "Illuminate\\Support\\Enumerable::proxy",
		"doc": "Add a method to the list of proxied methods."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Enumerable",
		"fromLink": "Illuminate/Support/Enumerable.html",
		"link": "Illuminate/Support/Enumerable.html#method___get",
		"name": "Illuminate\\Support\\Enumerable::__get",
		"doc": "Dynamically access collection proxies."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Env.html",
		"name": "Illuminate\\Support\\Env",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Env",
		"fromLink": "Illuminate/Support/Env.html",
		"link": "Illuminate/Support/Env.html#method_enablePutenv",
		"name": "Illuminate\\Support\\Env::enablePutenv",
		"doc": "Enable the putenv adapter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Env",
		"fromLink": "Illuminate/Support/Env.html",
		"link": "Illuminate/Support/Env.html#method_disablePutenv",
		"name": "Illuminate\\Support\\Env::disablePutenv",
		"doc": "Disable the putenv adapter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Env",
		"fromLink": "Illuminate/Support/Env.html",
		"link": "Illuminate/Support/Env.html#method_getRepository",
		"name": "Illuminate\\Support\\Env::getRepository",
		"doc": "Get the environment repository instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Env",
		"fromLink": "Illuminate/Support/Env.html",
		"link": "Illuminate/Support/Env.html#method_get",
		"name": "Illuminate\\Support\\Env::get",
		"doc": "Gets the value of an environment variable."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/App.html",
		"name": "Illuminate\\Support\\Facades\\App",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\App",
		"fromLink": "Illuminate/Support/Facades/App.html",
		"link": "Illuminate/Support/Facades/App.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\App::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Artisan.html",
		"name": "Illuminate\\Support\\Facades\\Artisan",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Artisan",
		"fromLink": "Illuminate/Support/Facades/Artisan.html",
		"link": "Illuminate/Support/Facades/Artisan.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Artisan::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Auth.html",
		"name": "Illuminate\\Support\\Facades\\Auth",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Auth",
		"fromLink": "Illuminate/Support/Facades/Auth.html",
		"link": "Illuminate/Support/Facades/Auth.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Auth::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Auth",
		"fromLink": "Illuminate/Support/Facades/Auth.html",
		"link": "Illuminate/Support/Facades/Auth.html#method_routes",
		"name": "Illuminate\\Support\\Facades\\Auth::routes",
		"doc": "Register the typical authentication routes for an application."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Blade.html",
		"name": "Illuminate\\Support\\Facades\\Blade",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Blade",
		"fromLink": "Illuminate/Support/Facades/Blade.html",
		"link": "Illuminate/Support/Facades/Blade.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Blade::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Broadcast.html",
		"name": "Illuminate\\Support\\Facades\\Broadcast",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Broadcast",
		"fromLink": "Illuminate/Support/Facades/Broadcast.html",
		"link": "Illuminate/Support/Facades/Broadcast.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Broadcast::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Bus.html",
		"name": "Illuminate\\Support\\Facades\\Bus",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Bus",
		"fromLink": "Illuminate/Support/Facades/Bus.html",
		"link": "Illuminate/Support/Facades/Bus.html#method_fake",
		"name": "Illuminate\\Support\\Facades\\Bus::fake",
		"doc": "Replace the bound instance with a fake."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Bus",
		"fromLink": "Illuminate/Support/Facades/Bus.html",
		"link": "Illuminate/Support/Facades/Bus.html#method_dispatchChain",
		"name": "Illuminate\\Support\\Facades\\Bus::dispatchChain",
		"doc": "Dispatch the given chain of jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Bus",
		"fromLink": "Illuminate/Support/Facades/Bus.html",
		"link": "Illuminate/Support/Facades/Bus.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Bus::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Cache.html",
		"name": "Illuminate\\Support\\Facades\\Cache",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Cache",
		"fromLink": "Illuminate/Support/Facades/Cache.html",
		"link": "Illuminate/Support/Facades/Cache.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Cache::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Config.html",
		"name": "Illuminate\\Support\\Facades\\Config",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Config",
		"fromLink": "Illuminate/Support/Facades/Config.html",
		"link": "Illuminate/Support/Facades/Config.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Config::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Cookie.html",
		"name": "Illuminate\\Support\\Facades\\Cookie",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Cookie",
		"fromLink": "Illuminate/Support/Facades/Cookie.html",
		"link": "Illuminate/Support/Facades/Cookie.html#method_has",
		"name": "Illuminate\\Support\\Facades\\Cookie::has",
		"doc": "Determine if a cookie exists on the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Cookie",
		"fromLink": "Illuminate/Support/Facades/Cookie.html",
		"link": "Illuminate/Support/Facades/Cookie.html#method_get",
		"name": "Illuminate\\Support\\Facades\\Cookie::get",
		"doc": "Retrieve a cookie from the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Cookie",
		"fromLink": "Illuminate/Support/Facades/Cookie.html",
		"link": "Illuminate/Support/Facades/Cookie.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Cookie::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Crypt.html",
		"name": "Illuminate\\Support\\Facades\\Crypt",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Crypt",
		"fromLink": "Illuminate/Support/Facades/Crypt.html",
		"link": "Illuminate/Support/Facades/Crypt.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Crypt::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/DB.html",
		"name": "Illuminate\\Support\\Facades\\DB",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\DB",
		"fromLink": "Illuminate/Support/Facades/DB.html",
		"link": "Illuminate/Support/Facades/DB.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\DB::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Date.html",
		"name": "Illuminate\\Support\\Facades\\Date",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Date",
		"fromLink": "Illuminate/Support/Facades/Date.html",
		"link": "Illuminate/Support/Facades/Date.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Date::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Date",
		"fromLink": "Illuminate/Support/Facades/Date.html",
		"link": "Illuminate/Support/Facades/Date.html#method_resolveFacadeInstance",
		"name": "Illuminate\\Support\\Facades\\Date::resolveFacadeInstance",
		"doc": "Resolve the facade root instance from the container."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Event.html",
		"name": "Illuminate\\Support\\Facades\\Event",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Event",
		"fromLink": "Illuminate/Support/Facades/Event.html",
		"link": "Illuminate/Support/Facades/Event.html#method_fake",
		"name": "Illuminate\\Support\\Facades\\Event::fake",
		"doc": "Replace the bound instance with a fake."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Event",
		"fromLink": "Illuminate/Support/Facades/Event.html",
		"link": "Illuminate/Support/Facades/Event.html#method_fakeFor",
		"name": "Illuminate\\Support\\Facades\\Event::fakeFor",
		"doc": "Replace the bound instance with a fake during the given callable's execution."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Event",
		"fromLink": "Illuminate/Support/Facades/Event.html",
		"link": "Illuminate/Support/Facades/Event.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Event::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Facade.html",
		"name": "Illuminate\\Support\\Facades\\Facade",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_resolved",
		"name": "Illuminate\\Support\\Facades\\Facade::resolved",
		"doc": "Run a Closure when the facade has been resolved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_spy",
		"name": "Illuminate\\Support\\Facades\\Facade::spy",
		"doc": "Convert the facade into a Mockery spy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_partialMock",
		"name": "Illuminate\\Support\\Facades\\Facade::partialMock",
		"doc": "Initiate a partial mock on the facade."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_shouldReceive",
		"name": "Illuminate\\Support\\Facades\\Facade::shouldReceive",
		"doc": "Initiate a mock expectation on the facade."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_createFreshMockInstance",
		"name": "Illuminate\\Support\\Facades\\Facade::createFreshMockInstance",
		"doc": "Create a fresh mock instance for the given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_createMock",
		"name": "Illuminate\\Support\\Facades\\Facade::createMock",
		"doc": "Create a fresh mock instance for the given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_isMock",
		"name": "Illuminate\\Support\\Facades\\Facade::isMock",
		"doc": "Determines whether a mock is set as the instance of the facade."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_getMockableClass",
		"name": "Illuminate\\Support\\Facades\\Facade::getMockableClass",
		"doc": "Get the mockable class for the bound instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_swap",
		"name": "Illuminate\\Support\\Facades\\Facade::swap",
		"doc": "Hotswap the underlying instance behind the facade."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_getFacadeRoot",
		"name": "Illuminate\\Support\\Facades\\Facade::getFacadeRoot",
		"doc": "Get the root object behind the facade."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Facade::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_resolveFacadeInstance",
		"name": "Illuminate\\Support\\Facades\\Facade::resolveFacadeInstance",
		"doc": "Resolve the facade root instance from the container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_clearResolvedInstance",
		"name": "Illuminate\\Support\\Facades\\Facade::clearResolvedInstance",
		"doc": "Clear a resolved facade instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_clearResolvedInstances",
		"name": "Illuminate\\Support\\Facades\\Facade::clearResolvedInstances",
		"doc": "Clear all of the resolved instances."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_getFacadeApplication",
		"name": "Illuminate\\Support\\Facades\\Facade::getFacadeApplication",
		"doc": "Get the application instance behind the facade."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method_setFacadeApplication",
		"name": "Illuminate\\Support\\Facades\\Facade::setFacadeApplication",
		"doc": "Set the application instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Facade",
		"fromLink": "Illuminate/Support/Facades/Facade.html",
		"link": "Illuminate/Support/Facades/Facade.html#method___callStatic",
		"name": "Illuminate\\Support\\Facades\\Facade::__callStatic",
		"doc": "Handle dynamic, static calls to the object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/File.html",
		"name": "Illuminate\\Support\\Facades\\File",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\File",
		"fromLink": "Illuminate/Support/Facades/File.html",
		"link": "Illuminate/Support/Facades/File.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\File::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Gate.html",
		"name": "Illuminate\\Support\\Facades\\Gate",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Gate",
		"fromLink": "Illuminate/Support/Facades/Gate.html",
		"link": "Illuminate/Support/Facades/Gate.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Gate::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Hash.html",
		"name": "Illuminate\\Support\\Facades\\Hash",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Hash",
		"fromLink": "Illuminate/Support/Facades/Hash.html",
		"link": "Illuminate/Support/Facades/Hash.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Hash::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Http.html",
		"name": "Illuminate\\Support\\Facades\\Http",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Http",
		"fromLink": "Illuminate/Support/Facades/Http.html",
		"link": "Illuminate/Support/Facades/Http.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Http::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Lang.html",
		"name": "Illuminate\\Support\\Facades\\Lang",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Lang",
		"fromLink": "Illuminate/Support/Facades/Lang.html",
		"link": "Illuminate/Support/Facades/Lang.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Lang::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Log.html",
		"name": "Illuminate\\Support\\Facades\\Log",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Log",
		"fromLink": "Illuminate/Support/Facades/Log.html",
		"link": "Illuminate/Support/Facades/Log.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Log::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Mail.html",
		"name": "Illuminate\\Support\\Facades\\Mail",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Mail",
		"fromLink": "Illuminate/Support/Facades/Mail.html",
		"link": "Illuminate/Support/Facades/Mail.html#method_fake",
		"name": "Illuminate\\Support\\Facades\\Mail::fake",
		"doc": "Replace the bound instance with a fake."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Mail",
		"fromLink": "Illuminate/Support/Facades/Mail.html",
		"link": "Illuminate/Support/Facades/Mail.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Mail::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Notification.html",
		"name": "Illuminate\\Support\\Facades\\Notification",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Notification",
		"fromLink": "Illuminate/Support/Facades/Notification.html",
		"link": "Illuminate/Support/Facades/Notification.html#method_fake",
		"name": "Illuminate\\Support\\Facades\\Notification::fake",
		"doc": "Replace the bound instance with a fake."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Notification",
		"fromLink": "Illuminate/Support/Facades/Notification.html",
		"link": "Illuminate/Support/Facades/Notification.html#method_route",
		"name": "Illuminate\\Support\\Facades\\Notification::route",
		"doc": "Begin sending a notification to an anonymous notifiable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Notification",
		"fromLink": "Illuminate/Support/Facades/Notification.html",
		"link": "Illuminate/Support/Facades/Notification.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Notification::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Password.html",
		"name": "Illuminate\\Support\\Facades\\Password",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Password",
		"fromLink": "Illuminate/Support/Facades/Password.html",
		"link": "Illuminate/Support/Facades/Password.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Password::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Queue.html",
		"name": "Illuminate\\Support\\Facades\\Queue",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Queue",
		"fromLink": "Illuminate/Support/Facades/Queue.html",
		"link": "Illuminate/Support/Facades/Queue.html#method_popUsing",
		"name": "Illuminate\\Support\\Facades\\Queue::popUsing",
		"doc": "Register a callback to be executed to pick jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Queue",
		"fromLink": "Illuminate/Support/Facades/Queue.html",
		"link": "Illuminate/Support/Facades/Queue.html#method_fake",
		"name": "Illuminate\\Support\\Facades\\Queue::fake",
		"doc": "Replace the bound instance with a fake."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Queue",
		"fromLink": "Illuminate/Support/Facades/Queue.html",
		"link": "Illuminate/Support/Facades/Queue.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Queue::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/RateLimiter.html",
		"name": "Illuminate\\Support\\Facades\\RateLimiter",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\RateLimiter",
		"fromLink": "Illuminate/Support/Facades/RateLimiter.html",
		"link": "Illuminate/Support/Facades/RateLimiter.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\RateLimiter::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Redirect.html",
		"name": "Illuminate\\Support\\Facades\\Redirect",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Redirect",
		"fromLink": "Illuminate/Support/Facades/Redirect.html",
		"link": "Illuminate/Support/Facades/Redirect.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Redirect::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Redis.html",
		"name": "Illuminate\\Support\\Facades\\Redis",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Redis",
		"fromLink": "Illuminate/Support/Facades/Redis.html",
		"link": "Illuminate/Support/Facades/Redis.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Redis::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Request.html",
		"name": "Illuminate\\Support\\Facades\\Request",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Request",
		"fromLink": "Illuminate/Support/Facades/Request.html",
		"link": "Illuminate/Support/Facades/Request.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Request::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Response.html",
		"name": "Illuminate\\Support\\Facades\\Response",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Response",
		"fromLink": "Illuminate/Support/Facades/Response.html",
		"link": "Illuminate/Support/Facades/Response.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Response::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Route.html",
		"name": "Illuminate\\Support\\Facades\\Route",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Route",
		"fromLink": "Illuminate/Support/Facades/Route.html",
		"link": "Illuminate/Support/Facades/Route.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Route::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Schema.html",
		"name": "Illuminate\\Support\\Facades\\Schema",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Schema",
		"fromLink": "Illuminate/Support/Facades/Schema.html",
		"link": "Illuminate/Support/Facades/Schema.html#method_connection",
		"name": "Illuminate\\Support\\Facades\\Schema::connection",
		"doc": "Get a schema builder instance for a connection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Schema",
		"fromLink": "Illuminate/Support/Facades/Schema.html",
		"link": "Illuminate/Support/Facades/Schema.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Schema::getFacadeAccessor",
		"doc": "Get a schema builder instance for the default connection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Session.html",
		"name": "Illuminate\\Support\\Facades\\Session",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Session",
		"fromLink": "Illuminate/Support/Facades/Session.html",
		"link": "Illuminate/Support/Facades/Session.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Session::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Storage.html",
		"name": "Illuminate\\Support\\Facades\\Storage",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Storage",
		"fromLink": "Illuminate/Support/Facades/Storage.html",
		"link": "Illuminate/Support/Facades/Storage.html#method_fake",
		"name": "Illuminate\\Support\\Facades\\Storage::fake",
		"doc": "Replace the given disk with a local testing disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Storage",
		"fromLink": "Illuminate/Support/Facades/Storage.html",
		"link": "Illuminate/Support/Facades/Storage.html#method_persistentFake",
		"name": "Illuminate\\Support\\Facades\\Storage::persistentFake",
		"doc": "Replace the given disk with a persistent local testing disk."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Storage",
		"fromLink": "Illuminate/Support/Facades/Storage.html",
		"link": "Illuminate/Support/Facades/Storage.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Storage::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/URL.html",
		"name": "Illuminate\\Support\\Facades\\URL",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\URL",
		"fromLink": "Illuminate/Support/Facades/URL.html",
		"link": "Illuminate/Support/Facades/URL.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\URL::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/Validator.html",
		"name": "Illuminate\\Support\\Facades\\Validator",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\Validator",
		"fromLink": "Illuminate/Support/Facades/Validator.html",
		"link": "Illuminate/Support/Facades/Validator.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\Validator::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Facades",
		"fromLink": "Illuminate/Support/Facades.html",
		"link": "Illuminate/Support/Facades/View.html",
		"name": "Illuminate\\Support\\Facades\\View",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Facades\\View",
		"fromLink": "Illuminate/Support/Facades/View.html",
		"link": "Illuminate/Support/Facades/View.html#method_getFacadeAccessor",
		"name": "Illuminate\\Support\\Facades\\View::getFacadeAccessor",
		"doc": "Get the registered name of the component."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Fluent.html",
		"name": "Illuminate\\Support\\Fluent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method___construct",
		"name": "Illuminate\\Support\\Fluent::__construct",
		"doc": "Create a new fluent instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_get",
		"name": "Illuminate\\Support\\Fluent::get",
		"doc": "Get an attribute from the fluent instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_getAttributes",
		"name": "Illuminate\\Support\\Fluent::getAttributes",
		"doc": "Get the attributes from the fluent instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_toArray",
		"name": "Illuminate\\Support\\Fluent::toArray",
		"doc": "Convert the fluent instance to an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_jsonSerialize",
		"name": "Illuminate\\Support\\Fluent::jsonSerialize",
		"doc": "Convert the object into something JSON serializable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_toJson",
		"name": "Illuminate\\Support\\Fluent::toJson",
		"doc": "Convert the fluent instance to JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_offsetExists",
		"name": "Illuminate\\Support\\Fluent::offsetExists",
		"doc": "Determine if the given offset exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_offsetGet",
		"name": "Illuminate\\Support\\Fluent::offsetGet",
		"doc": "Get the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_offsetSet",
		"name": "Illuminate\\Support\\Fluent::offsetSet",
		"doc": "Set the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method_offsetUnset",
		"name": "Illuminate\\Support\\Fluent::offsetUnset",
		"doc": "Unset the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method___call",
		"name": "Illuminate\\Support\\Fluent::__call",
		"doc": "Handle dynamic calls to the fluent instance to set attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method___get",
		"name": "Illuminate\\Support\\Fluent::__get",
		"doc": "Dynamically retrieve the value of an attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method___set",
		"name": "Illuminate\\Support\\Fluent::__set",
		"doc": "Dynamically set the value of an attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method___isset",
		"name": "Illuminate\\Support\\Fluent::__isset",
		"doc": "Dynamically check if an attribute is set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Fluent",
		"fromLink": "Illuminate/Support/Fluent.html",
		"link": "Illuminate/Support/Fluent.html#method___unset",
		"name": "Illuminate\\Support\\Fluent::__unset",
		"doc": "Dynamically unset an attribute."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/HigherOrderCollectionProxy.html",
		"name": "Illuminate\\Support\\HigherOrderCollectionProxy",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HigherOrderCollectionProxy",
		"fromLink": "Illuminate/Support/HigherOrderCollectionProxy.html",
		"link": "Illuminate/Support/HigherOrderCollectionProxy.html#method___construct",
		"name": "Illuminate\\Support\\HigherOrderCollectionProxy::__construct",
		"doc": "Create a new proxy instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HigherOrderCollectionProxy",
		"fromLink": "Illuminate/Support/HigherOrderCollectionProxy.html",
		"link": "Illuminate/Support/HigherOrderCollectionProxy.html#method___get",
		"name": "Illuminate\\Support\\HigherOrderCollectionProxy::__get",
		"doc": "Proxy accessing an attribute onto the collection items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HigherOrderCollectionProxy",
		"fromLink": "Illuminate/Support/HigherOrderCollectionProxy.html",
		"link": "Illuminate/Support/HigherOrderCollectionProxy.html#method___call",
		"name": "Illuminate\\Support\\HigherOrderCollectionProxy::__call",
		"doc": "Proxy a method call onto the collection items."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/HigherOrderTapProxy.html",
		"name": "Illuminate\\Support\\HigherOrderTapProxy",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HigherOrderTapProxy",
		"fromLink": "Illuminate/Support/HigherOrderTapProxy.html",
		"link": "Illuminate/Support/HigherOrderTapProxy.html#method___construct",
		"name": "Illuminate\\Support\\HigherOrderTapProxy::__construct",
		"doc": "Create a new tap proxy instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HigherOrderTapProxy",
		"fromLink": "Illuminate/Support/HigherOrderTapProxy.html",
		"link": "Illuminate/Support/HigherOrderTapProxy.html#method___call",
		"name": "Illuminate\\Support\\HigherOrderTapProxy::__call",
		"doc": "Dynamically pass method calls to the target."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/HigherOrderWhenProxy.html",
		"name": "Illuminate\\Support\\HigherOrderWhenProxy",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HigherOrderWhenProxy",
		"fromLink": "Illuminate/Support/HigherOrderWhenProxy.html",
		"link": "Illuminate/Support/HigherOrderWhenProxy.html#method___construct",
		"name": "Illuminate\\Support\\HigherOrderWhenProxy::__construct",
		"doc": "Create a new proxy instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HigherOrderWhenProxy",
		"fromLink": "Illuminate/Support/HigherOrderWhenProxy.html",
		"link": "Illuminate/Support/HigherOrderWhenProxy.html#method___get",
		"name": "Illuminate\\Support\\HigherOrderWhenProxy::__get",
		"doc": "Proxy accessing an attribute onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HigherOrderWhenProxy",
		"fromLink": "Illuminate/Support/HigherOrderWhenProxy.html",
		"link": "Illuminate/Support/HigherOrderWhenProxy.html#method___call",
		"name": "Illuminate\\Support\\HigherOrderWhenProxy::__call",
		"doc": "Proxy a method call onto the collection."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/HtmlString.html",
		"name": "Illuminate\\Support\\HtmlString",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HtmlString",
		"fromLink": "Illuminate/Support/HtmlString.html",
		"link": "Illuminate/Support/HtmlString.html#method___construct",
		"name": "Illuminate\\Support\\HtmlString::__construct",
		"doc": "Create a new HTML string instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HtmlString",
		"fromLink": "Illuminate/Support/HtmlString.html",
		"link": "Illuminate/Support/HtmlString.html#method_toHtml",
		"name": "Illuminate\\Support\\HtmlString::toHtml",
		"doc": "Get the HTML string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HtmlString",
		"fromLink": "Illuminate/Support/HtmlString.html",
		"link": "Illuminate/Support/HtmlString.html#method_isEmpty",
		"name": "Illuminate\\Support\\HtmlString::isEmpty",
		"doc": "Determine if the given HTML string is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HtmlString",
		"fromLink": "Illuminate/Support/HtmlString.html",
		"link": "Illuminate/Support/HtmlString.html#method_isNotEmpty",
		"name": "Illuminate\\Support\\HtmlString::isNotEmpty",
		"doc": "Determine if the given HTML string is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\HtmlString",
		"fromLink": "Illuminate/Support/HtmlString.html",
		"link": "Illuminate/Support/HtmlString.html#method___toString",
		"name": "Illuminate\\Support\\HtmlString::__toString",
		"doc": "Get the HTML string."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/InteractsWithTime.html",
		"name": "Illuminate\\Support\\InteractsWithTime",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\InteractsWithTime",
		"fromLink": "Illuminate/Support/InteractsWithTime.html",
		"link": "Illuminate/Support/InteractsWithTime.html#method_secondsUntil",
		"name": "Illuminate\\Support\\InteractsWithTime::secondsUntil",
		"doc": "Get the number of seconds until the given DateTime."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\InteractsWithTime",
		"fromLink": "Illuminate/Support/InteractsWithTime.html",
		"link": "Illuminate/Support/InteractsWithTime.html#method_availableAt",
		"name": "Illuminate\\Support\\InteractsWithTime::availableAt",
		"doc": "Get the \"available at\" UNIX timestamp."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\InteractsWithTime",
		"fromLink": "Illuminate/Support/InteractsWithTime.html",
		"link": "Illuminate/Support/InteractsWithTime.html#method_parseDateInterval",
		"name": "Illuminate\\Support\\InteractsWithTime::parseDateInterval",
		"doc": "If the given value is an interval, convert it to a DateTime instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\InteractsWithTime",
		"fromLink": "Illuminate/Support/InteractsWithTime.html",
		"link": "Illuminate/Support/InteractsWithTime.html#method_currentTime",
		"name": "Illuminate\\Support\\InteractsWithTime::currentTime",
		"doc": "Get the current system time as a UNIX timestamp."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/LazyCollection.html",
		"name": "Illuminate\\Support\\LazyCollection",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method___construct",
		"name": "Illuminate\\Support\\LazyCollection::__construct",
		"doc": "Create a new lazy collection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_range",
		"name": "Illuminate\\Support\\LazyCollection::range",
		"doc": "Create a collection with the given range."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_all",
		"name": "Illuminate\\Support\\LazyCollection::all",
		"doc": "Get all items in the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_eager",
		"name": "Illuminate\\Support\\LazyCollection::eager",
		"doc": "Eager load all items into a new lazy collection backed by an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_remember",
		"name": "Illuminate\\Support\\LazyCollection::remember",
		"doc": "Cache values as they're enumerated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_avg",
		"name": "Illuminate\\Support\\LazyCollection::avg",
		"doc": "Get the average value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_median",
		"name": "Illuminate\\Support\\LazyCollection::median",
		"doc": "Get the median of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_mode",
		"name": "Illuminate\\Support\\LazyCollection::mode",
		"doc": "Get the mode of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_collapse",
		"name": "Illuminate\\Support\\LazyCollection::collapse",
		"doc": "Collapse the collection of items into a single array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_contains",
		"name": "Illuminate\\Support\\LazyCollection::contains",
		"doc": "Determine if an item exists in the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_crossJoin",
		"name": "Illuminate\\Support\\LazyCollection::crossJoin",
		"doc": "Cross join the given iterables, returning all possible permutations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_countBy",
		"name": "Illuminate\\Support\\LazyCollection::countBy",
		"doc": "Count the number of items in the collection by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_diff",
		"name": "Illuminate\\Support\\LazyCollection::diff",
		"doc": "Get the items that are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_diffUsing",
		"name": "Illuminate\\Support\\LazyCollection::diffUsing",
		"doc": "Get the items that are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_diffAssoc",
		"name": "Illuminate\\Support\\LazyCollection::diffAssoc",
		"doc": "Get the items whose keys and values are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_diffAssocUsing",
		"name": "Illuminate\\Support\\LazyCollection::diffAssocUsing",
		"doc": "Get the items whose keys and values are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_diffKeys",
		"name": "Illuminate\\Support\\LazyCollection::diffKeys",
		"doc": "Get the items whose keys are not present in the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_diffKeysUsing",
		"name": "Illuminate\\Support\\LazyCollection::diffKeysUsing",
		"doc": "Get the items whose keys are not present in the given items, using the callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_duplicates",
		"name": "Illuminate\\Support\\LazyCollection::duplicates",
		"doc": "Retrieve duplicate items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_duplicatesStrict",
		"name": "Illuminate\\Support\\LazyCollection::duplicatesStrict",
		"doc": "Retrieve duplicate items using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_except",
		"name": "Illuminate\\Support\\LazyCollection::except",
		"doc": "Get all items except for those with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_filter",
		"name": "Illuminate\\Support\\LazyCollection::filter",
		"doc": "Run a filter over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_first",
		"name": "Illuminate\\Support\\LazyCollection::first",
		"doc": "Get the first item from the enumerable passing the given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_flatten",
		"name": "Illuminate\\Support\\LazyCollection::flatten",
		"doc": "Get a flattened list of the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_flip",
		"name": "Illuminate\\Support\\LazyCollection::flip",
		"doc": "Flip the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_get",
		"name": "Illuminate\\Support\\LazyCollection::get",
		"doc": "Get an item by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_groupBy",
		"name": "Illuminate\\Support\\LazyCollection::groupBy",
		"doc": "Group an associative array by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_keyBy",
		"name": "Illuminate\\Support\\LazyCollection::keyBy",
		"doc": "Key an associative array by a field or using a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_has",
		"name": "Illuminate\\Support\\LazyCollection::has",
		"doc": "Determine if an item exists in the collection by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_implode",
		"name": "Illuminate\\Support\\LazyCollection::implode",
		"doc": "Concatenate values of a given key as a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_intersect",
		"name": "Illuminate\\Support\\LazyCollection::intersect",
		"doc": "Intersect the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_intersectByKeys",
		"name": "Illuminate\\Support\\LazyCollection::intersectByKeys",
		"doc": "Intersect the collection with the given items by key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_isEmpty",
		"name": "Illuminate\\Support\\LazyCollection::isEmpty",
		"doc": "Determine if the items is empty or not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_join",
		"name": "Illuminate\\Support\\LazyCollection::join",
		"doc": "Join all items from the collection using a string. The final items can use a separate glue string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_keys",
		"name": "Illuminate\\Support\\LazyCollection::keys",
		"doc": "Get the keys of the collection items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_last",
		"name": "Illuminate\\Support\\LazyCollection::last",
		"doc": "Get the last item from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_pluck",
		"name": "Illuminate\\Support\\LazyCollection::pluck",
		"doc": "Get the values of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_map",
		"name": "Illuminate\\Support\\LazyCollection::map",
		"doc": "Run a map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_mapToDictionary",
		"name": "Illuminate\\Support\\LazyCollection::mapToDictionary",
		"doc": "Run a dictionary map over the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_mapWithKeys",
		"name": "Illuminate\\Support\\LazyCollection::mapWithKeys",
		"doc": "Run an associative map over each of the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_merge",
		"name": "Illuminate\\Support\\LazyCollection::merge",
		"doc": "Merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_mergeRecursive",
		"name": "Illuminate\\Support\\LazyCollection::mergeRecursive",
		"doc": "Recursively merge the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_combine",
		"name": "Illuminate\\Support\\LazyCollection::combine",
		"doc": "Create a collection by using this collection for keys and another for its values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_union",
		"name": "Illuminate\\Support\\LazyCollection::union",
		"doc": "Union the collection with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_nth",
		"name": "Illuminate\\Support\\LazyCollection::nth",
		"doc": "Create a new collection consisting of every n-th element."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_only",
		"name": "Illuminate\\Support\\LazyCollection::only",
		"doc": "Get the items with the specified keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_concat",
		"name": "Illuminate\\Support\\LazyCollection::concat",
		"doc": "Push all of the given items onto the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_random",
		"name": "Illuminate\\Support\\LazyCollection::random",
		"doc": "Get one or a specified number of items randomly from the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_reduce",
		"name": "Illuminate\\Support\\LazyCollection::reduce",
		"doc": "Reduce the collection to a single value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_replace",
		"name": "Illuminate\\Support\\LazyCollection::replace",
		"doc": "Replace the collection items with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_replaceRecursive",
		"name": "Illuminate\\Support\\LazyCollection::replaceRecursive",
		"doc": "Recursively replace the collection items with the given items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_reverse",
		"name": "Illuminate\\Support\\LazyCollection::reverse",
		"doc": "Reverse items order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_search",
		"name": "Illuminate\\Support\\LazyCollection::search",
		"doc": "Search the collection for a given value and return the corresponding key if successful."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_shuffle",
		"name": "Illuminate\\Support\\LazyCollection::shuffle",
		"doc": "Shuffle the items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_skip",
		"name": "Illuminate\\Support\\LazyCollection::skip",
		"doc": "Skip the first {$count} items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_skipUntil",
		"name": "Illuminate\\Support\\LazyCollection::skipUntil",
		"doc": "Skip items in the collection until the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_skipWhile",
		"name": "Illuminate\\Support\\LazyCollection::skipWhile",
		"doc": "Skip items in the collection while the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_slice",
		"name": "Illuminate\\Support\\LazyCollection::slice",
		"doc": "Get a slice of items from the enumerable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_split",
		"name": "Illuminate\\Support\\LazyCollection::split",
		"doc": "Split a collection into a certain number of groups."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_chunk",
		"name": "Illuminate\\Support\\LazyCollection::chunk",
		"doc": "Chunk the collection into chunks of the given size."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_splitIn",
		"name": "Illuminate\\Support\\LazyCollection::splitIn",
		"doc": "Split a collection into a certain number of groups, and fill the first groups completely."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_chunkWhile",
		"name": "Illuminate\\Support\\LazyCollection::chunkWhile",
		"doc": "Chunk the collection into chunks with a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_sort",
		"name": "Illuminate\\Support\\LazyCollection::sort",
		"doc": "Sort through each item with a callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_sortDesc",
		"name": "Illuminate\\Support\\LazyCollection::sortDesc",
		"doc": "Sort items in descending order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_sortBy",
		"name": "Illuminate\\Support\\LazyCollection::sortBy",
		"doc": "Sort the collection using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_sortByDesc",
		"name": "Illuminate\\Support\\LazyCollection::sortByDesc",
		"doc": "Sort the collection in descending order using the given callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_sortKeys",
		"name": "Illuminate\\Support\\LazyCollection::sortKeys",
		"doc": "Sort the collection keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_sortKeysDesc",
		"name": "Illuminate\\Support\\LazyCollection::sortKeysDesc",
		"doc": "Sort the collection keys in descending order."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_take",
		"name": "Illuminate\\Support\\LazyCollection::take",
		"doc": "Take the first or last {$limit} items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_takeUntil",
		"name": "Illuminate\\Support\\LazyCollection::takeUntil",
		"doc": "Take items in the collection until the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_takeUntilTimeout",
		"name": "Illuminate\\Support\\LazyCollection::takeUntilTimeout",
		"doc": "Take items in the collection until a given point in time."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_takeWhile",
		"name": "Illuminate\\Support\\LazyCollection::takeWhile",
		"doc": "Take items in the collection while the given condition is met."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_tapEach",
		"name": "Illuminate\\Support\\LazyCollection::tapEach",
		"doc": "Pass each item in the collection to the given callback, lazily."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_values",
		"name": "Illuminate\\Support\\LazyCollection::values",
		"doc": "Reset the keys on the underlying array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_zip",
		"name": "Illuminate\\Support\\LazyCollection::zip",
		"doc": "Zip the collection together with one or more arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_pad",
		"name": "Illuminate\\Support\\LazyCollection::pad",
		"doc": "Pad collection to the specified length with a value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_getIterator",
		"name": "Illuminate\\Support\\LazyCollection::getIterator",
		"doc": "Get the values iterator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_count",
		"name": "Illuminate\\Support\\LazyCollection::count",
		"doc": "Count the number of items in the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_makeIterator",
		"name": "Illuminate\\Support\\LazyCollection::makeIterator",
		"doc": "Make an iterator from the given source."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_explodePluckParameters",
		"name": "Illuminate\\Support\\LazyCollection::explodePluckParameters",
		"doc": "Explode the \"value\" and \"key\" arguments passed to \"pluck\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_passthru",
		"name": "Illuminate\\Support\\LazyCollection::passthru",
		"doc": "Pass this lazy collection through a method on the collection class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\LazyCollection",
		"fromLink": "Illuminate/Support/LazyCollection.html",
		"link": "Illuminate/Support/LazyCollection.html#method_now",
		"name": "Illuminate\\Support\\LazyCollection::now",
		"doc": "Get the current time."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Manager.html",
		"name": "Illuminate\\Support\\Manager",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Manager",
		"fromLink": "Illuminate/Support/Manager.html",
		"link": "Illuminate/Support/Manager.html#method___construct",
		"name": "Illuminate\\Support\\Manager::__construct",
		"doc": "Create a new manager instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Manager",
		"fromLink": "Illuminate/Support/Manager.html",
		"link": "Illuminate/Support/Manager.html#method_getDefaultDriver",
		"name": "Illuminate\\Support\\Manager::getDefaultDriver",
		"doc": "Get the default driver name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Manager",
		"fromLink": "Illuminate/Support/Manager.html",
		"link": "Illuminate/Support/Manager.html#method_driver",
		"name": "Illuminate\\Support\\Manager::driver",
		"doc": "Get a driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Manager",
		"fromLink": "Illuminate/Support/Manager.html",
		"link": "Illuminate/Support/Manager.html#method_createDriver",
		"name": "Illuminate\\Support\\Manager::createDriver",
		"doc": "Create a new driver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Manager",
		"fromLink": "Illuminate/Support/Manager.html",
		"link": "Illuminate/Support/Manager.html#method_callCustomCreator",
		"name": "Illuminate\\Support\\Manager::callCustomCreator",
		"doc": "Call a custom driver creator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Manager",
		"fromLink": "Illuminate/Support/Manager.html",
		"link": "Illuminate/Support/Manager.html#method_extend",
		"name": "Illuminate\\Support\\Manager::extend",
		"doc": "Register a custom driver creator Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Manager",
		"fromLink": "Illuminate/Support/Manager.html",
		"link": "Illuminate/Support/Manager.html#method_getDrivers",
		"name": "Illuminate\\Support\\Manager::getDrivers",
		"doc": "Get all of the created \"drivers\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Manager",
		"fromLink": "Illuminate/Support/Manager.html",
		"link": "Illuminate/Support/Manager.html#method___call",
		"name": "Illuminate\\Support\\Manager::__call",
		"doc": "Dynamically call the default driver instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/MessageBag.html",
		"name": "Illuminate\\Support\\MessageBag",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method___construct",
		"name": "Illuminate\\Support\\MessageBag::__construct",
		"doc": "Create a new message bag instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_keys",
		"name": "Illuminate\\Support\\MessageBag::keys",
		"doc": "Get the keys present in the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_add",
		"name": "Illuminate\\Support\\MessageBag::add",
		"doc": "Add a message to the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_addIf",
		"name": "Illuminate\\Support\\MessageBag::addIf",
		"doc": "Add a message to the message bag if the given conditional is \"true\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_isUnique",
		"name": "Illuminate\\Support\\MessageBag::isUnique",
		"doc": "Determine if a key and message combination already exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_merge",
		"name": "Illuminate\\Support\\MessageBag::merge",
		"doc": "Merge a new array of messages into the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_has",
		"name": "Illuminate\\Support\\MessageBag::has",
		"doc": "Determine if messages exist for all of the given keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_hasAny",
		"name": "Illuminate\\Support\\MessageBag::hasAny",
		"doc": "Determine if messages exist for any of the given keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_first",
		"name": "Illuminate\\Support\\MessageBag::first",
		"doc": "Get the first message from the message bag for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_get",
		"name": "Illuminate\\Support\\MessageBag::get",
		"doc": "Get all of the messages from the message bag for a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_getMessagesForWildcardKey",
		"name": "Illuminate\\Support\\MessageBag::getMessagesForWildcardKey",
		"doc": "Get the messages for a wildcard key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_all",
		"name": "Illuminate\\Support\\MessageBag::all",
		"doc": "Get all of the messages for every key in the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_unique",
		"name": "Illuminate\\Support\\MessageBag::unique",
		"doc": "Get all of the unique messages for every key in the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_transform",
		"name": "Illuminate\\Support\\MessageBag::transform",
		"doc": "Format an array of messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_checkFormat",
		"name": "Illuminate\\Support\\MessageBag::checkFormat",
		"doc": "Get the appropriate format based on the given format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_messages",
		"name": "Illuminate\\Support\\MessageBag::messages",
		"doc": "Get the raw messages in the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_getMessages",
		"name": "Illuminate\\Support\\MessageBag::getMessages",
		"doc": "Get the raw messages in the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_getMessageBag",
		"name": "Illuminate\\Support\\MessageBag::getMessageBag",
		"doc": "Get the messages for the instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_getFormat",
		"name": "Illuminate\\Support\\MessageBag::getFormat",
		"doc": "Get the default message format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_setFormat",
		"name": "Illuminate\\Support\\MessageBag::setFormat",
		"doc": "Set the default message format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_isEmpty",
		"name": "Illuminate\\Support\\MessageBag::isEmpty",
		"doc": "Determine if the message bag has any messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_isNotEmpty",
		"name": "Illuminate\\Support\\MessageBag::isNotEmpty",
		"doc": "Determine if the message bag has any messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_any",
		"name": "Illuminate\\Support\\MessageBag::any",
		"doc": "Determine if the message bag has any messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_count",
		"name": "Illuminate\\Support\\MessageBag::count",
		"doc": "Get the number of messages in the message bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_toArray",
		"name": "Illuminate\\Support\\MessageBag::toArray",
		"doc": "Get the instance as an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_jsonSerialize",
		"name": "Illuminate\\Support\\MessageBag::jsonSerialize",
		"doc": "Convert the object into something JSON serializable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method_toJson",
		"name": "Illuminate\\Support\\MessageBag::toJson",
		"doc": "Convert the object to its JSON representation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\MessageBag",
		"fromLink": "Illuminate/Support/MessageBag.html",
		"link": "Illuminate/Support/MessageBag.html#method___toString",
		"name": "Illuminate\\Support\\MessageBag::__toString",
		"doc": "Convert the message bag to its string representation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/NamespacedItemResolver.html",
		"name": "Illuminate\\Support\\NamespacedItemResolver",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\NamespacedItemResolver",
		"fromLink": "Illuminate/Support/NamespacedItemResolver.html",
		"link": "Illuminate/Support/NamespacedItemResolver.html#method_parseKey",
		"name": "Illuminate\\Support\\NamespacedItemResolver::parseKey",
		"doc": "Parse a key into namespace, group, and item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\NamespacedItemResolver",
		"fromLink": "Illuminate/Support/NamespacedItemResolver.html",
		"link": "Illuminate/Support/NamespacedItemResolver.html#method_parseBasicSegments",
		"name": "Illuminate\\Support\\NamespacedItemResolver::parseBasicSegments",
		"doc": "Parse an array of basic segments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\NamespacedItemResolver",
		"fromLink": "Illuminate/Support/NamespacedItemResolver.html",
		"link": "Illuminate/Support/NamespacedItemResolver.html#method_parseNamespacedSegments",
		"name": "Illuminate\\Support\\NamespacedItemResolver::parseNamespacedSegments",
		"doc": "Parse an array of namespaced segments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\NamespacedItemResolver",
		"fromLink": "Illuminate/Support/NamespacedItemResolver.html",
		"link": "Illuminate/Support/NamespacedItemResolver.html#method_setParsedKey",
		"name": "Illuminate\\Support\\NamespacedItemResolver::setParsedKey",
		"doc": "Set the parsed value of a key."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Optional.html",
		"name": "Illuminate\\Support\\Optional",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Optional",
		"fromLink": "Illuminate/Support/Optional.html",
		"link": "Illuminate/Support/Optional.html#method___construct",
		"name": "Illuminate\\Support\\Optional::__construct",
		"doc": "Create a new optional instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Optional",
		"fromLink": "Illuminate/Support/Optional.html",
		"link": "Illuminate/Support/Optional.html#method___get",
		"name": "Illuminate\\Support\\Optional::__get",
		"doc": "Dynamically access a property on the underlying object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Optional",
		"fromLink": "Illuminate/Support/Optional.html",
		"link": "Illuminate/Support/Optional.html#method___isset",
		"name": "Illuminate\\Support\\Optional::__isset",
		"doc": "Dynamically check a property exists on the underlying object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Optional",
		"fromLink": "Illuminate/Support/Optional.html",
		"link": "Illuminate/Support/Optional.html#method_offsetExists",
		"name": "Illuminate\\Support\\Optional::offsetExists",
		"doc": "Determine if an item exists at an offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Optional",
		"fromLink": "Illuminate/Support/Optional.html",
		"link": "Illuminate/Support/Optional.html#method_offsetGet",
		"name": "Illuminate\\Support\\Optional::offsetGet",
		"doc": "Get an item at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Optional",
		"fromLink": "Illuminate/Support/Optional.html",
		"link": "Illuminate/Support/Optional.html#method_offsetSet",
		"name": "Illuminate\\Support\\Optional::offsetSet",
		"doc": "Set the item at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Optional",
		"fromLink": "Illuminate/Support/Optional.html",
		"link": "Illuminate/Support/Optional.html#method_offsetUnset",
		"name": "Illuminate\\Support\\Optional::offsetUnset",
		"doc": "Unset the item at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Optional",
		"fromLink": "Illuminate/Support/Optional.html",
		"link": "Illuminate/Support/Optional.html#method___call",
		"name": "Illuminate\\Support\\Optional::__call",
		"doc": "Dynamically pass a method to the underlying object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Pluralizer.html",
		"name": "Illuminate\\Support\\Pluralizer",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Pluralizer",
		"fromLink": "Illuminate/Support/Pluralizer.html",
		"link": "Illuminate/Support/Pluralizer.html#method_plural",
		"name": "Illuminate\\Support\\Pluralizer::plural",
		"doc": "Get the plural form of an English word."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Pluralizer",
		"fromLink": "Illuminate/Support/Pluralizer.html",
		"link": "Illuminate/Support/Pluralizer.html#method_singular",
		"name": "Illuminate\\Support\\Pluralizer::singular",
		"doc": "Get the singular form of an English word."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Pluralizer",
		"fromLink": "Illuminate/Support/Pluralizer.html",
		"link": "Illuminate/Support/Pluralizer.html#method_uncountable",
		"name": "Illuminate\\Support\\Pluralizer::uncountable",
		"doc": "Determine if the given value is uncountable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Pluralizer",
		"fromLink": "Illuminate/Support/Pluralizer.html",
		"link": "Illuminate/Support/Pluralizer.html#method_matchCase",
		"name": "Illuminate\\Support\\Pluralizer::matchCase",
		"doc": "Attempt to match the case on two strings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Pluralizer",
		"fromLink": "Illuminate/Support/Pluralizer.html",
		"link": "Illuminate/Support/Pluralizer.html#method_inflector",
		"name": "Illuminate\\Support\\Pluralizer::inflector",
		"doc": "Get the inflector instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/ProcessUtils.html",
		"name": "Illuminate\\Support\\ProcessUtils",
		"doc": "ProcessUtils is a bunch of utility methods."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ProcessUtils",
		"fromLink": "Illuminate/Support/ProcessUtils.html",
		"link": "Illuminate/Support/ProcessUtils.html#method_escapeArgument",
		"name": "Illuminate\\Support\\ProcessUtils::escapeArgument",
		"doc": "Escapes a string to be used as a shell argument."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ProcessUtils",
		"fromLink": "Illuminate/Support/ProcessUtils.html",
		"link": "Illuminate/Support/ProcessUtils.html#method_isSurroundedBy",
		"name": "Illuminate\\Support\\ProcessUtils::isSurroundedBy",
		"doc": "Is the given string surrounded by the given character?"
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Reflector.html",
		"name": "Illuminate\\Support\\Reflector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Reflector",
		"fromLink": "Illuminate/Support/Reflector.html",
		"link": "Illuminate/Support/Reflector.html#method_isCallable",
		"name": "Illuminate\\Support\\Reflector::isCallable",
		"doc": "This is a PHP 7.4 compatible implementation of is_callable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Reflector",
		"fromLink": "Illuminate/Support/Reflector.html",
		"link": "Illuminate/Support/Reflector.html#method_getParameterClassName",
		"name": "Illuminate\\Support\\Reflector::getParameterClassName",
		"doc": "Get the class name of the given parameter's type, if possible."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Reflector",
		"fromLink": "Illuminate/Support/Reflector.html",
		"link": "Illuminate/Support/Reflector.html#method_isParameterSubclassOf",
		"name": "Illuminate\\Support\\Reflector::isParameterSubclassOf",
		"doc": "Determine if the parameter's type is a subclass of the given type."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/ServiceProvider.html",
		"name": "Illuminate\\Support\\ServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method___construct",
		"name": "Illuminate\\Support\\ServiceProvider::__construct",
		"doc": "Create a new service provider instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_register",
		"name": "Illuminate\\Support\\ServiceProvider::register",
		"doc": "Register any application services."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_booting",
		"name": "Illuminate\\Support\\ServiceProvider::booting",
		"doc": "Register a booting callback to be run before the \"boot\" method is called."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_booted",
		"name": "Illuminate\\Support\\ServiceProvider::booted",
		"doc": "Register a booted callback to be run after the \"boot\" method is called."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_callBootingCallbacks",
		"name": "Illuminate\\Support\\ServiceProvider::callBootingCallbacks",
		"doc": "Call the registered booting callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_callBootedCallbacks",
		"name": "Illuminate\\Support\\ServiceProvider::callBootedCallbacks",
		"doc": "Call the registered booted callbacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_mergeConfigFrom",
		"name": "Illuminate\\Support\\ServiceProvider::mergeConfigFrom",
		"doc": "Merge the given configuration with the existing configuration."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_loadRoutesFrom",
		"name": "Illuminate\\Support\\ServiceProvider::loadRoutesFrom",
		"doc": "Load the given routes file if routes are not already cached."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_loadViewsFrom",
		"name": "Illuminate\\Support\\ServiceProvider::loadViewsFrom",
		"doc": "Register a view file namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_loadViewComponentsAs",
		"name": "Illuminate\\Support\\ServiceProvider::loadViewComponentsAs",
		"doc": "Register the given view components with a custom prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_loadTranslationsFrom",
		"name": "Illuminate\\Support\\ServiceProvider::loadTranslationsFrom",
		"doc": "Register a translation file namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_loadJsonTranslationsFrom",
		"name": "Illuminate\\Support\\ServiceProvider::loadJsonTranslationsFrom",
		"doc": "Register a JSON translation file path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_loadMigrationsFrom",
		"name": "Illuminate\\Support\\ServiceProvider::loadMigrationsFrom",
		"doc": "Register database migration paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_loadFactoriesFrom",
		"name": "Illuminate\\Support\\ServiceProvider::loadFactoriesFrom",
		"doc": "Register Eloquent model factory paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_callAfterResolving",
		"name": "Illuminate\\Support\\ServiceProvider::callAfterResolving",
		"doc": "Setup an after resolving listener, or fire immediately if already resolved."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_publishes",
		"name": "Illuminate\\Support\\ServiceProvider::publishes",
		"doc": "Register paths to be published by the publish command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_ensurePublishArrayInitialized",
		"name": "Illuminate\\Support\\ServiceProvider::ensurePublishArrayInitialized",
		"doc": "Ensure the publish array for the service provider is initialized."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_addPublishGroup",
		"name": "Illuminate\\Support\\ServiceProvider::addPublishGroup",
		"doc": "Add a publish group / tag to the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_pathsToPublish",
		"name": "Illuminate\\Support\\ServiceProvider::pathsToPublish",
		"doc": "Get the paths to publish."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_pathsForProviderOrGroup",
		"name": "Illuminate\\Support\\ServiceProvider::pathsForProviderOrGroup",
		"doc": "Get the paths for the provider or group (or both)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_pathsForProviderAndGroup",
		"name": "Illuminate\\Support\\ServiceProvider::pathsForProviderAndGroup",
		"doc": "Get the paths for the provider and group."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_publishableProviders",
		"name": "Illuminate\\Support\\ServiceProvider::publishableProviders",
		"doc": "Get the service providers available for publishing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_publishableGroups",
		"name": "Illuminate\\Support\\ServiceProvider::publishableGroups",
		"doc": "Get the groups available for publishing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_commands",
		"name": "Illuminate\\Support\\ServiceProvider::commands",
		"doc": "Register the package's custom Artisan commands."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_provides",
		"name": "Illuminate\\Support\\ServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_when",
		"name": "Illuminate\\Support\\ServiceProvider::when",
		"doc": "Get the events that trigger this service provider to register."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ServiceProvider",
		"fromLink": "Illuminate/Support/ServiceProvider.html",
		"link": "Illuminate/Support/ServiceProvider.html#method_isDeferred",
		"name": "Illuminate\\Support\\ServiceProvider::isDeferred",
		"doc": "Determine if the provider is deferred."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Str.html",
		"name": "Illuminate\\Support\\Str",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_of",
		"name": "Illuminate\\Support\\Str::of",
		"doc": "Get a new stringable object from the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_after",
		"name": "Illuminate\\Support\\Str::after",
		"doc": "Return the remainder of a string after the first occurrence of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_afterLast",
		"name": "Illuminate\\Support\\Str::afterLast",
		"doc": "Return the remainder of a string after the last occurrence of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_ascii",
		"name": "Illuminate\\Support\\Str::ascii",
		"doc": "Transliterate a UTF-8 value to ASCII."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_before",
		"name": "Illuminate\\Support\\Str::before",
		"doc": "Get the portion of a string before the first occurrence of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_beforeLast",
		"name": "Illuminate\\Support\\Str::beforeLast",
		"doc": "Get the portion of a string before the last occurrence of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_between",
		"name": "Illuminate\\Support\\Str::between",
		"doc": "Get the portion of a string between two given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_camel",
		"name": "Illuminate\\Support\\Str::camel",
		"doc": "Convert a value to camel case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_contains",
		"name": "Illuminate\\Support\\Str::contains",
		"doc": "Determine if a given string contains a given substring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_containsAll",
		"name": "Illuminate\\Support\\Str::containsAll",
		"doc": "Determine if a given string contains all array values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_endsWith",
		"name": "Illuminate\\Support\\Str::endsWith",
		"doc": "Determine if a given string ends with a given substring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_finish",
		"name": "Illuminate\\Support\\Str::finish",
		"doc": "Cap a string with a single instance of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_is",
		"name": "Illuminate\\Support\\Str::is",
		"doc": "Determine if a given string matches a given pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_isAscii",
		"name": "Illuminate\\Support\\Str::isAscii",
		"doc": "Determine if a given string is 7 bit ASCII."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_isUuid",
		"name": "Illuminate\\Support\\Str::isUuid",
		"doc": "Determine if a given string is a valid UUID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_kebab",
		"name": "Illuminate\\Support\\Str::kebab",
		"doc": "Convert a string to kebab case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_length",
		"name": "Illuminate\\Support\\Str::length",
		"doc": "Return the length of the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_limit",
		"name": "Illuminate\\Support\\Str::limit",
		"doc": "Limit the number of characters in a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_lower",
		"name": "Illuminate\\Support\\Str::lower",
		"doc": "Convert the given string to lower-case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_words",
		"name": "Illuminate\\Support\\Str::words",
		"doc": "Limit the number of words in a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_padBoth",
		"name": "Illuminate\\Support\\Str::padBoth",
		"doc": "Pad both sides of a string with another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_padLeft",
		"name": "Illuminate\\Support\\Str::padLeft",
		"doc": "Pad the left side of a string with another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_padRight",
		"name": "Illuminate\\Support\\Str::padRight",
		"doc": "Pad the right side of a string with another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_parseCallback",
		"name": "Illuminate\\Support\\Str::parseCallback",
		"doc": "Parse a Class[@]method style callback into class and method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_plural",
		"name": "Illuminate\\Support\\Str::plural",
		"doc": "Get the plural form of an English word."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_pluralStudly",
		"name": "Illuminate\\Support\\Str::pluralStudly",
		"doc": "Pluralize the last word of an English, studly caps case string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_random",
		"name": "Illuminate\\Support\\Str::random",
		"doc": "Generate a more truly \"random\" alpha-numeric string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_replaceArray",
		"name": "Illuminate\\Support\\Str::replaceArray",
		"doc": "Replace a given value in the string sequentially with an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_replaceFirst",
		"name": "Illuminate\\Support\\Str::replaceFirst",
		"doc": "Replace the first occurrence of a given value in the string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_replaceLast",
		"name": "Illuminate\\Support\\Str::replaceLast",
		"doc": "Replace the last occurrence of a given value in the string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_start",
		"name": "Illuminate\\Support\\Str::start",
		"doc": "Begin a string with a single instance of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_upper",
		"name": "Illuminate\\Support\\Str::upper",
		"doc": "Convert the given string to upper-case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_title",
		"name": "Illuminate\\Support\\Str::title",
		"doc": "Convert the given string to title case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_singular",
		"name": "Illuminate\\Support\\Str::singular",
		"doc": "Get the singular form of an English word."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_slug",
		"name": "Illuminate\\Support\\Str::slug",
		"doc": "Generate a URL friendly \"slug\" from a given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_snake",
		"name": "Illuminate\\Support\\Str::snake",
		"doc": "Convert a string to snake case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_startsWith",
		"name": "Illuminate\\Support\\Str::startsWith",
		"doc": "Determine if a given string starts with a given substring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_studly",
		"name": "Illuminate\\Support\\Str::studly",
		"doc": "Convert a value to studly caps case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_substr",
		"name": "Illuminate\\Support\\Str::substr",
		"doc": "Returns the portion of string specified by the start and length parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_substrCount",
		"name": "Illuminate\\Support\\Str::substrCount",
		"doc": "Returns the number of substring occurrences."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_ucfirst",
		"name": "Illuminate\\Support\\Str::ucfirst",
		"doc": "Make a string's first character uppercase."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_uuid",
		"name": "Illuminate\\Support\\Str::uuid",
		"doc": "Generate a UUID (version 4)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_orderedUuid",
		"name": "Illuminate\\Support\\Str::orderedUuid",
		"doc": "Generate a time-ordered UUID (version 4)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_createUuidsUsing",
		"name": "Illuminate\\Support\\Str::createUuidsUsing",
		"doc": "Set the callable that will be used to generate UUIDs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Str",
		"fromLink": "Illuminate/Support/Str.html",
		"link": "Illuminate/Support/Str.html#method_createUuidsNormally",
		"name": "Illuminate\\Support\\Str::createUuidsNormally",
		"doc": "Indicate that UUIDs should be created normally and not using a custom factory."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/Stringable.html",
		"name": "Illuminate\\Support\\Stringable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method___construct",
		"name": "Illuminate\\Support\\Stringable::__construct",
		"doc": "Create a new instance of the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_after",
		"name": "Illuminate\\Support\\Stringable::after",
		"doc": "Return the remainder of a string after the first occurrence of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_afterLast",
		"name": "Illuminate\\Support\\Stringable::afterLast",
		"doc": "Return the remainder of a string after the last occurrence of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_append",
		"name": "Illuminate\\Support\\Stringable::append",
		"doc": "Append the given values to the string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_ascii",
		"name": "Illuminate\\Support\\Stringable::ascii",
		"doc": "Transliterate a UTF-8 value to ASCII."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_basename",
		"name": "Illuminate\\Support\\Stringable::basename",
		"doc": "Get the trailing name component of the path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_classBasename",
		"name": "Illuminate\\Support\\Stringable::classBasename",
		"doc": "Get the basename of the class path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_before",
		"name": "Illuminate\\Support\\Stringable::before",
		"doc": "Get the portion of a string before the first occurrence of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_beforeLast",
		"name": "Illuminate\\Support\\Stringable::beforeLast",
		"doc": "Get the portion of a string before the last occurrence of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_between",
		"name": "Illuminate\\Support\\Stringable::between",
		"doc": "Get the portion of a string between two given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_camel",
		"name": "Illuminate\\Support\\Stringable::camel",
		"doc": "Convert a value to camel case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_contains",
		"name": "Illuminate\\Support\\Stringable::contains",
		"doc": "Determine if a given string contains a given substring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_containsAll",
		"name": "Illuminate\\Support\\Stringable::containsAll",
		"doc": "Determine if a given string contains all array values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_dirname",
		"name": "Illuminate\\Support\\Stringable::dirname",
		"doc": "Get the parent directory's path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_endsWith",
		"name": "Illuminate\\Support\\Stringable::endsWith",
		"doc": "Determine if a given string ends with a given substring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_exactly",
		"name": "Illuminate\\Support\\Stringable::exactly",
		"doc": "Determine if the string is an exact match with the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_explode",
		"name": "Illuminate\\Support\\Stringable::explode",
		"doc": "Explode the string into an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_split",
		"name": "Illuminate\\Support\\Stringable::split",
		"doc": "Split a string using a regular expression or by length."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_finish",
		"name": "Illuminate\\Support\\Stringable::finish",
		"doc": "Cap a string with a single instance of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_is",
		"name": "Illuminate\\Support\\Stringable::is",
		"doc": "Determine if a given string matches a given pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_isAscii",
		"name": "Illuminate\\Support\\Stringable::isAscii",
		"doc": "Determine if a given string is 7 bit ASCII."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_isEmpty",
		"name": "Illuminate\\Support\\Stringable::isEmpty",
		"doc": "Determine if the given string is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_isNotEmpty",
		"name": "Illuminate\\Support\\Stringable::isNotEmpty",
		"doc": "Determine if the given string is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_kebab",
		"name": "Illuminate\\Support\\Stringable::kebab",
		"doc": "Convert a string to kebab case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_length",
		"name": "Illuminate\\Support\\Stringable::length",
		"doc": "Return the length of the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_limit",
		"name": "Illuminate\\Support\\Stringable::limit",
		"doc": "Limit the number of characters in a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_lower",
		"name": "Illuminate\\Support\\Stringable::lower",
		"doc": "Convert the given string to lower-case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_match",
		"name": "Illuminate\\Support\\Stringable::match",
		"doc": "Get the string matching the given pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_matchAll",
		"name": "Illuminate\\Support\\Stringable::matchAll",
		"doc": "Get the string matching the given pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_padBoth",
		"name": "Illuminate\\Support\\Stringable::padBoth",
		"doc": "Pad both sides of the string with another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_padLeft",
		"name": "Illuminate\\Support\\Stringable::padLeft",
		"doc": "Pad the left side of the string with another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_padRight",
		"name": "Illuminate\\Support\\Stringable::padRight",
		"doc": "Pad the right side of the string with another."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_parseCallback",
		"name": "Illuminate\\Support\\Stringable::parseCallback",
		"doc": "Parse a Class@method style callback into class and method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_plural",
		"name": "Illuminate\\Support\\Stringable::plural",
		"doc": "Get the plural form of an English word."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_pluralStudly",
		"name": "Illuminate\\Support\\Stringable::pluralStudly",
		"doc": "Pluralize the last word of an English, studly caps case string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_prepend",
		"name": "Illuminate\\Support\\Stringable::prepend",
		"doc": "Prepend the given values to the string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_replace",
		"name": "Illuminate\\Support\\Stringable::replace",
		"doc": "Replace the given value in the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_replaceArray",
		"name": "Illuminate\\Support\\Stringable::replaceArray",
		"doc": "Replace a given value in the string sequentially with an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_replaceFirst",
		"name": "Illuminate\\Support\\Stringable::replaceFirst",
		"doc": "Replace the first occurrence of a given value in the string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_replaceLast",
		"name": "Illuminate\\Support\\Stringable::replaceLast",
		"doc": "Replace the last occurrence of a given value in the string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_replaceMatches",
		"name": "Illuminate\\Support\\Stringable::replaceMatches",
		"doc": "Replace the patterns matching the given regular expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_start",
		"name": "Illuminate\\Support\\Stringable::start",
		"doc": "Begin a string with a single instance of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_upper",
		"name": "Illuminate\\Support\\Stringable::upper",
		"doc": "Convert the given string to upper-case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_title",
		"name": "Illuminate\\Support\\Stringable::title",
		"doc": "Convert the given string to title case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_singular",
		"name": "Illuminate\\Support\\Stringable::singular",
		"doc": "Get the singular form of an English word."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_slug",
		"name": "Illuminate\\Support\\Stringable::slug",
		"doc": "Generate a URL friendly \"slug\" from a given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_snake",
		"name": "Illuminate\\Support\\Stringable::snake",
		"doc": "Convert a string to snake case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_startsWith",
		"name": "Illuminate\\Support\\Stringable::startsWith",
		"doc": "Determine if a given string starts with a given substring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_studly",
		"name": "Illuminate\\Support\\Stringable::studly",
		"doc": "Convert a value to studly caps case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_substr",
		"name": "Illuminate\\Support\\Stringable::substr",
		"doc": "Returns the portion of string specified by the start and length parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_substrCount",
		"name": "Illuminate\\Support\\Stringable::substrCount",
		"doc": "Returns the number of substring occurrences."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_trim",
		"name": "Illuminate\\Support\\Stringable::trim",
		"doc": "Trim the string of the given characters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_ltrim",
		"name": "Illuminate\\Support\\Stringable::ltrim",
		"doc": "Left trim the string of the given characters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_rtrim",
		"name": "Illuminate\\Support\\Stringable::rtrim",
		"doc": "Right trim the string of the given characters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_ucfirst",
		"name": "Illuminate\\Support\\Stringable::ucfirst",
		"doc": "Make a string's first character uppercase."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_when",
		"name": "Illuminate\\Support\\Stringable::when",
		"doc": "Apply the callback's string changes if the given \"value\" is true."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_whenEmpty",
		"name": "Illuminate\\Support\\Stringable::whenEmpty",
		"doc": "Execute the given callback if the string is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_words",
		"name": "Illuminate\\Support\\Stringable::words",
		"doc": "Limit the number of words in a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_dump",
		"name": "Illuminate\\Support\\Stringable::dump",
		"doc": "Dump the string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method_dd",
		"name": "Illuminate\\Support\\Stringable::dd",
		"doc": "Dump the string and end the script."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method___get",
		"name": "Illuminate\\Support\\Stringable::__get",
		"doc": "Proxy dynamic properties onto methods."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Stringable",
		"fromLink": "Illuminate/Support/Stringable.html",
		"link": "Illuminate/Support/Stringable.html#method___toString",
		"name": "Illuminate\\Support\\Stringable::__toString",
		"doc": "Get the raw string value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_get",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::get",
		"doc": "Retrieve a list of batches."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_find",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::find",
		"doc": "Retrieve information about an existing batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_store",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::store",
		"doc": "Store a new pending batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_incrementTotalJobs",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::incrementTotalJobs",
		"doc": "Increment the total number of jobs within the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_decrementPendingJobs",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::decrementPendingJobs",
		"doc": "Decrement the total number of pending jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_incrementFailedJobs",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::incrementFailedJobs",
		"doc": "Increment the total number of failed jobs for the batch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_markAsFinished",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::markAsFinished",
		"doc": "Mark the batch that has the given ID as finished."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_cancel",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::cancel",
		"doc": "Cancel the batch that has the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_delete",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::delete",
		"doc": "Delete the batch that has the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BatchRepositoryFake.html#method_transaction",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BatchRepositoryFake::transaction",
		"doc": "Execute the given Closure within a storage specific transaction."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method___construct",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::__construct",
		"doc": "Create a new bus fake instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_assertDispatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::assertDispatched",
		"doc": "Assert if a job was dispatched based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_assertDispatchedTimes",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::assertDispatchedTimes",
		"doc": "Assert if a job was pushed a number of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_assertNotDispatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::assertNotDispatched",
		"doc": "Determine if a job was dispatched based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_assertDispatchedAfterResponse",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::assertDispatchedAfterResponse",
		"doc": "Assert if a job was dispatched after the response was sent based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_assertDispatchedAfterResponseTimes",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::assertDispatchedAfterResponseTimes",
		"doc": "Assert if a job was pushed after the response was sent a number of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_assertNotDispatchedAfterResponse",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::assertNotDispatchedAfterResponse",
		"doc": "Determine if a job was dispatched based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_assertBatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::assertBatched",
		"doc": "Assert if a batch was dispatched based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_dispatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::dispatched",
		"doc": "Get all of the jobs matching a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_dispatchedAfterResponse",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::dispatchedAfterResponse",
		"doc": "Get all of the jobs dispatched after the response was sent matching a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_batched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::batched",
		"doc": "Get all of the pending batches matching a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_hasDispatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::hasDispatched",
		"doc": "Determine if there are any stored commands for a given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_hasDispatchedAfterResponse",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::hasDispatchedAfterResponse",
		"doc": "Determine if there are any stored commands for a given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_dispatch",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::dispatch",
		"doc": "Dispatch a command to its appropriate handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_dispatchSync",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::dispatchSync",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_dispatchNow",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::dispatchNow",
		"doc": "Dispatch a command to its appropriate handler in the current process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_dispatchToQueue",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::dispatchToQueue",
		"doc": "Dispatch a command to its appropriate handler behind a queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_dispatchAfterResponse",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::dispatchAfterResponse",
		"doc": "Dispatch a command to its appropriate handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_chain",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::chain",
		"doc": "Create a new chain of queueable jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_findBatch",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::findBatch",
		"doc": "Attempt to find the batch with the given ID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_batch",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::batch",
		"doc": "Create a new batch of queueable jobs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_recordPendingBatch",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::recordPendingBatch",
		"doc": "Record the fake pending batch dispatch."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_shouldFakeJob",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::shouldFakeJob",
		"doc": "Determine if an command should be faked or actually dispatched."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_pipeThrough",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::pipeThrough",
		"doc": "Set the pipes commands should be piped through before dispatching."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_hasCommandHandler",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::hasCommandHandler",
		"doc": "Determine if the given command has a handler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_getCommandHandler",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::getCommandHandler",
		"doc": "Retrieve the handler for a command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\BusFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/BusFake.html",
		"link": "Illuminate/Support/Testing/Fakes/BusFake.html#method_map",
		"name": "Illuminate\\Support\\Testing\\Fakes\\BusFake::map",
		"doc": "Map a command to a handler."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method___construct",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::__construct",
		"doc": "Create a new event fake instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_assertDispatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::assertDispatched",
		"doc": "Assert if an event was dispatched based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_assertDispatchedTimes",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::assertDispatchedTimes",
		"doc": "Assert if an event was dispatched a number of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_assertNotDispatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::assertNotDispatched",
		"doc": "Determine if an event was dispatched based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_dispatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::dispatched",
		"doc": "Get all of the events matching a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_hasDispatched",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::hasDispatched",
		"doc": "Determine if the given event has been dispatched."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_listen",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::listen",
		"doc": "Register an event listener with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_hasListeners",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::hasListeners",
		"doc": "Determine if a given event has listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_push",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::push",
		"doc": "Register an event and payload to be dispatched later."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_subscribe",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::subscribe",
		"doc": "Register an event subscriber with the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_flush",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::flush",
		"doc": "Flush a set of pushed events."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_dispatch",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::dispatch",
		"doc": "Fire an event and call the listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_shouldFakeEvent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::shouldFakeEvent",
		"doc": "Determine if an event should be faked or actually dispatched."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_forget",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::forget",
		"doc": "Remove a set of listeners from the dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_forgetPushed",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::forgetPushed",
		"doc": "Forget all of the queued listeners."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\EventFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/EventFake.html",
		"link": "Illuminate/Support/Testing/Fakes/EventFake.html#method_until",
		"name": "Illuminate\\Support\\Testing\\Fakes\\EventFake::until",
		"doc": "Dispatch an event and call the listeners."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_assertSent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::assertSent",
		"doc": "Assert if a mailable was sent based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_assertSentTimes",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::assertSentTimes",
		"doc": "Assert if a mailable was sent a number of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_assertNotSent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::assertNotSent",
		"doc": "Determine if a mailable was not sent based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_assertNothingSent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::assertNothingSent",
		"doc": "Assert that no mailables were sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_assertQueued",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::assertQueued",
		"doc": "Assert if a mailable was queued based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_assertQueuedTimes",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::assertQueuedTimes",
		"doc": "Assert if a mailable was queued a number of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_assertNotQueued",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::assertNotQueued",
		"doc": "Determine if a mailable was not queued based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_assertNothingQueued",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::assertNothingQueued",
		"doc": "Assert that no mailables were queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_sent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::sent",
		"doc": "Get all of the mailables matching a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_hasSent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::hasSent",
		"doc": "Determine if the given mailable has been sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_queued",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::queued",
		"doc": "Get all of the queued mailables matching a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_hasQueued",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::hasQueued",
		"doc": "Determine if the given mailable has been queued."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_mailablesOf",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::mailablesOf",
		"doc": "Get all of the mailed mailables for a given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_queuedMailablesOf",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::queuedMailablesOf",
		"doc": "Get all of the mailed mailables for a given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_mailer",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::mailer",
		"doc": "Get a mailer instance by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_to",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::to",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_bcc",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::bcc",
		"doc": "Begin the process of mailing a mailable class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_raw",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::raw",
		"doc": "Send a new message with only a raw text part."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_send",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::send",
		"doc": "Send a new message using a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_queue",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::queue",
		"doc": "Queue a new e-mail message for sending."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_later",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::later",
		"doc": "Queue a new e-mail message for sending after (n) seconds."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\MailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/MailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/MailFake.html#method_failures",
		"name": "Illuminate\\Support\\Testing\\Fakes\\MailFake::failures",
		"doc": "Get the array of failed recipients."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_assertSentTo",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::assertSentTo",
		"doc": "Assert if a notification was sent based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_assertSentToTimes",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::assertSentToTimes",
		"doc": "Assert if a notification was sent a number of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_assertNotSentTo",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::assertNotSentTo",
		"doc": "Determine if a notification was sent based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_assertNothingSent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::assertNothingSent",
		"doc": "Assert that no notifications were sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_assertTimesSent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::assertTimesSent",
		"doc": "Assert the total amount of times a notification was sent."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_sent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::sent",
		"doc": "Get all of the notifications matching a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_hasSent",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::hasSent",
		"doc": "Determine if there are more notifications left to inspect."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_notificationsFor",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::notificationsFor",
		"doc": "Get all of the notifications for a notifiable entity by type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_send",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::send",
		"doc": "Send the given notification to the given notifiable entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_sendNow",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::sendNow",
		"doc": "Send the given notification immediately."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_channel",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::channel",
		"doc": "Get a channel instance by name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/NotificationFake.html",
		"link": "Illuminate/Support/Testing/Fakes/NotificationFake.html#method_locale",
		"name": "Illuminate\\Support\\Testing\\Fakes\\NotificationFake::locale",
		"doc": "Set the locale of notifications."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingBatchFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingBatchFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\PendingBatchFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/PendingBatchFake.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingBatchFake.html#method___construct",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingBatchFake::__construct",
		"doc": "Create a new pending batch instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\PendingBatchFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/PendingBatchFake.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingBatchFake.html#method_dispatch",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingBatchFake::dispatch",
		"doc": "Dispatch the batch."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingChainFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingChainFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\PendingChainFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/PendingChainFake.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingChainFake.html#method___construct",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingChainFake::__construct",
		"doc": "Create a new pending chain instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\PendingChainFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/PendingChainFake.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingChainFake.html#method_dispatch",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingChainFake::dispatch",
		"doc": "Dispatch the job with the given arguments."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingMailFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingMailFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\PendingMailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/PendingMailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingMailFake.html#method___construct",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingMailFake::__construct",
		"doc": "Create a new instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\PendingMailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/PendingMailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingMailFake.html#method_send",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingMailFake::send",
		"doc": "Send a new mailable message instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\PendingMailFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/PendingMailFake.html",
		"link": "Illuminate/Support/Testing/Fakes/PendingMailFake.html#method_queue",
		"name": "Illuminate\\Support\\Testing\\Fakes\\PendingMailFake::queue",
		"doc": "Push the given mailable onto the queue."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support\\Testing\\Fakes",
		"fromLink": "Illuminate/Support/Testing/Fakes.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertPushed",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertPushed",
		"doc": "Assert if a job was pushed based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertPushedTimes",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertPushedTimes",
		"doc": "Assert if a job was pushed a number of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertPushedOn",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertPushedOn",
		"doc": "Assert if a job was pushed based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertPushedWithChain",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertPushedWithChain",
		"doc": "Assert if a job was pushed with chained jobs based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertPushedWithoutChain",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertPushedWithoutChain",
		"doc": "Assert if a job was pushed with an empty chain based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertPushedWithChainOfObjects",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertPushedWithChainOfObjects",
		"doc": "Assert if a job was pushed with chained jobs based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertPushedWithChainOfClasses",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertPushedWithChainOfClasses",
		"doc": "Assert if a job was pushed with chained jobs based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_isChainOfObjects",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::isChainOfObjects",
		"doc": "Determine if the given chain is entirely composed of objects."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertNotPushed",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertNotPushed",
		"doc": "Determine if a job was pushed based on a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_assertNothingPushed",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::assertNothingPushed",
		"doc": "Assert that no jobs were pushed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_pushed",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::pushed",
		"doc": "Get all of the jobs matching a truth-test callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_hasPushed",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::hasPushed",
		"doc": "Determine if there are any stored jobs for a given class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_connection",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::connection",
		"doc": "Resolve a queue connection instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_size",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::size",
		"doc": "Get the size of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_push",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::push",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_pushRaw",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::pushRaw",
		"doc": "Push a raw payload onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_later",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::later",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_pushOn",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::pushOn",
		"doc": "Push a new job onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_laterOn",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::laterOn",
		"doc": "Push a new job onto the queue after a delay."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_pop",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::pop",
		"doc": "Pop the next job off of the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_bulk",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::bulk",
		"doc": "Push an array of jobs onto the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_pushedJobs",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::pushedJobs",
		"doc": "Get the jobs that have been pushed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_getConnectionName",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::getConnectionName",
		"doc": "Get the connection name for the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method_setConnectionName",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::setConnectionName",
		"doc": "Set the connection name for the queue."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Testing\\Fakes\\QueueFake",
		"fromLink": "Illuminate/Support/Testing/Fakes/QueueFake.html",
		"link": "Illuminate/Support/Testing/Fakes/QueueFake.html#method___call",
		"name": "Illuminate\\Support\\Testing\\Fakes\\QueueFake::__call",
		"doc": "Override the QueueManager to prevent circular dependency."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Support\\Traits",
		"fromLink": "Illuminate/Support/Traits.html",
		"link": "Illuminate/Support/Traits/CapsuleManagerTrait.html",
		"name": "Illuminate\\Support\\Traits\\CapsuleManagerTrait",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\CapsuleManagerTrait",
		"fromLink": "Illuminate/Support/Traits/CapsuleManagerTrait.html",
		"link": "Illuminate/Support/Traits/CapsuleManagerTrait.html#method_setupContainer",
		"name": "Illuminate\\Support\\Traits\\CapsuleManagerTrait::setupContainer",
		"doc": "Setup the IoC container instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\CapsuleManagerTrait",
		"fromLink": "Illuminate/Support/Traits/CapsuleManagerTrait.html",
		"link": "Illuminate/Support/Traits/CapsuleManagerTrait.html#method_setAsGlobal",
		"name": "Illuminate\\Support\\Traits\\CapsuleManagerTrait::setAsGlobal",
		"doc": "Make this capsule instance available globally."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\CapsuleManagerTrait",
		"fromLink": "Illuminate/Support/Traits/CapsuleManagerTrait.html",
		"link": "Illuminate/Support/Traits/CapsuleManagerTrait.html#method_getContainer",
		"name": "Illuminate\\Support\\Traits\\CapsuleManagerTrait::getContainer",
		"doc": "Get the IoC container instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\CapsuleManagerTrait",
		"fromLink": "Illuminate/Support/Traits/CapsuleManagerTrait.html",
		"link": "Illuminate/Support/Traits/CapsuleManagerTrait.html#method_setContainer",
		"name": "Illuminate\\Support\\Traits\\CapsuleManagerTrait::setContainer",
		"doc": "Set the IoC container instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Support\\Traits",
		"fromLink": "Illuminate/Support/Traits.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_make",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::make",
		"doc": "Create a new collection instance if the value isn't one already."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_wrap",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::wrap",
		"doc": "Wrap the given value in a collection if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_unwrap",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::unwrap",
		"doc": "Get the underlying items from the given collection if applicable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_empty",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::empty",
		"doc": "Create a new instance with no items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_times",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::times",
		"doc": "Create a new collection by invoking the callback a given amount of times."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_average",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::average",
		"doc": "Alias for the \"avg\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_some",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::some",
		"doc": "Alias for the \"contains\" method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_containsStrict",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::containsStrict",
		"doc": "Determine if an item exists, using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_dd",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::dd",
		"doc": "Dump the items and end the script."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_dump",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::dump",
		"doc": "Dump the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_each",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::each",
		"doc": "Execute a callback over each item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_eachSpread",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::eachSpread",
		"doc": "Execute a callback over each nested chunk of items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_every",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::every",
		"doc": "Determine if all items pass the given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_firstWhere",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::firstWhere",
		"doc": "Get the first item by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_isNotEmpty",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::isNotEmpty",
		"doc": "Determine if the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_mapSpread",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::mapSpread",
		"doc": "Run a map over each nested chunk of items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_mapToGroups",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::mapToGroups",
		"doc": "Run a grouping map over the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_flatMap",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::flatMap",
		"doc": "Map a collection and flatten the result by a single level."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_mapInto",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::mapInto",
		"doc": "Map the values into a new class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_min",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::min",
		"doc": "Get the min value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_max",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::max",
		"doc": "Get the max value of a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_forPage",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::forPage",
		"doc": "\"Paginate\" the collection by slicing it into a smaller collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_partition",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::partition",
		"doc": "Partition the collection into two arrays using the given callback or key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_sum",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::sum",
		"doc": "Get the sum of the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_when",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::when",
		"doc": "Apply the callback if the value is truthy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whenEmpty",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whenEmpty",
		"doc": "Apply the callback if the collection is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whenNotEmpty",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whenNotEmpty",
		"doc": "Apply the callback if the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_unless",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::unless",
		"doc": "Apply the callback if the value is falsy."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_unlessEmpty",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::unlessEmpty",
		"doc": "Apply the callback unless the collection is empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_unlessNotEmpty",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::unlessNotEmpty",
		"doc": "Apply the callback unless the collection is not empty."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_where",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::where",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereNull",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereNull",
		"doc": "Filter items where the value for the given key is null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereNotNull",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereNotNull",
		"doc": "Filter items where the value for the given key is not null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereStrict",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereIn",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereIn",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereInStrict",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereInStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereBetween",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereBetween",
		"doc": "Filter items such that the value of the given key is between the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereNotBetween",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereNotBetween",
		"doc": "Filter items such that the value of the given key is not between the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereNotIn",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereNotIn",
		"doc": "Filter items by the given key value pair."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereNotInStrict",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereNotInStrict",
		"doc": "Filter items by the given key value pair using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_whereInstanceOf",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::whereInstanceOf",
		"doc": "Filter the items, removing any items that don't match the given type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_pipe",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::pipe",
		"doc": "Pass the collection to the given callback and return the result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_pipeInto",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::pipeInto",
		"doc": "Pass the collection into a new class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_tap",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::tap",
		"doc": "Pass the collection to the given callback and then return it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_reject",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::reject",
		"doc": "Create a collection of all elements that do not pass a given truth test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_unique",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::unique",
		"doc": "Return only unique items from the collection array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_uniqueStrict",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::uniqueStrict",
		"doc": "Return only unique items from the collection array using strict comparison."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_collect",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::collect",
		"doc": "Collect the values into a collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_toArray",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::toArray",
		"doc": "Get the collection of items as a plain array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_jsonSerialize",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::jsonSerialize",
		"doc": "Convert the object into something JSON serializable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_toJson",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::toJson",
		"doc": "Get the collection of items as JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_getCachingIterator",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::getCachingIterator",
		"doc": "Get a CachingIterator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method___toString",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::__toString",
		"doc": "Convert the collection to its string representation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_proxy",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::proxy",
		"doc": "Add a method to the list of proxied methods."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method___get",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::__get",
		"doc": "Dynamically access collection proxies."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_getArrayableItems",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::getArrayableItems",
		"doc": "Results array of items from Collection or Arrayable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_operatorForWhere",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::operatorForWhere",
		"doc": "Get an operator checker callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_useAsCallable",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::useAsCallable",
		"doc": "Determine if the given value is callable, but not a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_valueRetriever",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::valueRetriever",
		"doc": "Get a value retrieving callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_equality",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::equality",
		"doc": "Make a function to check an item's equality."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_negate",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::negate",
		"doc": "Make a function using another function, by negating its result."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\EnumeratesValues",
		"fromLink": "Illuminate/Support/Traits/EnumeratesValues.html",
		"link": "Illuminate/Support/Traits/EnumeratesValues.html#method_identity",
		"name": "Illuminate\\Support\\Traits\\EnumeratesValues::identity",
		"doc": "Make a function that returns what's passed to it."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Support\\Traits",
		"fromLink": "Illuminate/Support/Traits.html",
		"link": "Illuminate/Support/Traits/ForwardsCalls.html",
		"name": "Illuminate\\Support\\Traits\\ForwardsCalls",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\ForwardsCalls",
		"fromLink": "Illuminate/Support/Traits/ForwardsCalls.html",
		"link": "Illuminate/Support/Traits/ForwardsCalls.html#method_forwardCallTo",
		"name": "Illuminate\\Support\\Traits\\ForwardsCalls::forwardCallTo",
		"doc": "Forward a method call to the given object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\ForwardsCalls",
		"fromLink": "Illuminate/Support/Traits/ForwardsCalls.html",
		"link": "Illuminate/Support/Traits/ForwardsCalls.html#method_throwBadMethodCallException",
		"name": "Illuminate\\Support\\Traits\\ForwardsCalls::throwBadMethodCallException",
		"doc": "Throw a bad method call exception for the given method."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Support\\Traits",
		"fromLink": "Illuminate/Support/Traits.html",
		"link": "Illuminate/Support/Traits/Localizable.html",
		"name": "Illuminate\\Support\\Traits\\Localizable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\Localizable",
		"fromLink": "Illuminate/Support/Traits/Localizable.html",
		"link": "Illuminate/Support/Traits/Localizable.html#method_withLocale",
		"name": "Illuminate\\Support\\Traits\\Localizable::withLocale",
		"doc": "Run the callback with the given locale."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Support\\Traits",
		"fromLink": "Illuminate/Support/Traits.html",
		"link": "Illuminate/Support/Traits/Macroable.html",
		"name": "Illuminate\\Support\\Traits\\Macroable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\Macroable",
		"fromLink": "Illuminate/Support/Traits/Macroable.html",
		"link": "Illuminate/Support/Traits/Macroable.html#method_macro",
		"name": "Illuminate\\Support\\Traits\\Macroable::macro",
		"doc": "Register a custom macro."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\Macroable",
		"fromLink": "Illuminate/Support/Traits/Macroable.html",
		"link": "Illuminate/Support/Traits/Macroable.html#method_mixin",
		"name": "Illuminate\\Support\\Traits\\Macroable::mixin",
		"doc": "Mix another object into the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\Macroable",
		"fromLink": "Illuminate/Support/Traits/Macroable.html",
		"link": "Illuminate/Support/Traits/Macroable.html#method_hasMacro",
		"name": "Illuminate\\Support\\Traits\\Macroable::hasMacro",
		"doc": "Checks if macro is registered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\Macroable",
		"fromLink": "Illuminate/Support/Traits/Macroable.html",
		"link": "Illuminate/Support/Traits/Macroable.html#method___callStatic",
		"name": "Illuminate\\Support\\Traits\\Macroable::__callStatic",
		"doc": "Dynamically handle calls to the class."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\Macroable",
		"fromLink": "Illuminate/Support/Traits/Macroable.html",
		"link": "Illuminate/Support/Traits/Macroable.html#method___call",
		"name": "Illuminate\\Support\\Traits\\Macroable::__call",
		"doc": "Dynamically handle calls to the class."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Support\\Traits",
		"fromLink": "Illuminate/Support/Traits.html",
		"link": "Illuminate/Support/Traits/ReflectsClosures.html",
		"name": "Illuminate\\Support\\Traits\\ReflectsClosures",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\ReflectsClosures",
		"fromLink": "Illuminate/Support/Traits/ReflectsClosures.html",
		"link": "Illuminate/Support/Traits/ReflectsClosures.html#method_closureParameterTypes",
		"name": "Illuminate\\Support\\Traits\\ReflectsClosures::closureParameterTypes",
		"doc": "Get the class names / types of the parameters of the given Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\ReflectsClosures",
		"fromLink": "Illuminate/Support/Traits/ReflectsClosures.html",
		"link": "Illuminate/Support/Traits/ReflectsClosures.html#method_firstClosureParameterType",
		"name": "Illuminate\\Support\\Traits\\ReflectsClosures::firstClosureParameterType",
		"doc": "Get the class name of the first parameter of the given Closure."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Support\\Traits",
		"fromLink": "Illuminate/Support/Traits.html",
		"link": "Illuminate/Support/Traits/Tappable.html",
		"name": "Illuminate\\Support\\Traits\\Tappable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\Traits\\Tappable",
		"fromLink": "Illuminate/Support/Traits/Tappable.html",
		"link": "Illuminate/Support/Traits/Tappable.html#method_tap",
		"name": "Illuminate\\Support\\Traits\\Tappable::tap",
		"doc": "Call the given Closure with this instance then return the instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Support",
		"fromLink": "Illuminate/Support.html",
		"link": "Illuminate/Support/ViewErrorBag.html",
		"name": "Illuminate\\Support\\ViewErrorBag",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method_hasBag",
		"name": "Illuminate\\Support\\ViewErrorBag::hasBag",
		"doc": "Checks if a named MessageBag exists in the bags."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method_getBag",
		"name": "Illuminate\\Support\\ViewErrorBag::getBag",
		"doc": "Get a MessageBag instance from the bags."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method_getBags",
		"name": "Illuminate\\Support\\ViewErrorBag::getBags",
		"doc": "Get all the bags."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method_put",
		"name": "Illuminate\\Support\\ViewErrorBag::put",
		"doc": "Add a new MessageBag instance to the bags."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method_any",
		"name": "Illuminate\\Support\\ViewErrorBag::any",
		"doc": "Determine if the default message bag has any messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method_count",
		"name": "Illuminate\\Support\\ViewErrorBag::count",
		"doc": "Get the number of messages in the default bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method___call",
		"name": "Illuminate\\Support\\ViewErrorBag::__call",
		"doc": "Dynamically call methods on the default bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method___get",
		"name": "Illuminate\\Support\\ViewErrorBag::__get",
		"doc": "Dynamically access a view error bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method___set",
		"name": "Illuminate\\Support\\ViewErrorBag::__set",
		"doc": "Dynamically set a view error bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Support\\ViewErrorBag",
		"fromLink": "Illuminate/Support/ViewErrorBag.html",
		"link": "Illuminate/Support/ViewErrorBag.html#method___toString",
		"name": "Illuminate\\Support\\ViewErrorBag::__toString",
		"doc": "Convert the default bag to its string representation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing",
		"fromLink": "Illuminate/Testing.html",
		"link": "Illuminate/Testing/Assert.html",
		"name": "Illuminate\\Testing\\Assert",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Assert",
		"fromLink": "Illuminate/Testing/Assert.html",
		"link": "Illuminate/Testing/Assert.html#method_assertArraySubset",
		"name": "Illuminate\\Testing\\Assert::assertArraySubset",
		"doc": "Asserts that an array has a specified subset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Assert",
		"fromLink": "Illuminate/Testing/Assert.html",
		"link": "Illuminate/Testing/Assert.html#method_assertFileDoesNotExist",
		"name": "Illuminate\\Testing\\Assert::assertFileDoesNotExist",
		"doc": "Asserts that a file does not exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Assert",
		"fromLink": "Illuminate/Testing/Assert.html",
		"link": "Illuminate/Testing/Assert.html#method_assertDirectoryDoesNotExist",
		"name": "Illuminate\\Testing\\Assert::assertDirectoryDoesNotExist",
		"doc": "Asserts that a directory does not exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Assert",
		"fromLink": "Illuminate/Testing/Assert.html",
		"link": "Illuminate/Testing/Assert.html#method_assertMatchesRegularExpression",
		"name": "Illuminate\\Testing\\Assert::assertMatchesRegularExpression",
		"doc": "Asserts that a string matches a given regular expression."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing",
		"fromLink": "Illuminate/Testing.html",
		"link": "Illuminate/Testing/AssertableJsonString.html",
		"name": "Illuminate\\Testing\\AssertableJsonString",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method___construct",
		"name": "Illuminate\\Testing\\AssertableJsonString::__construct",
		"doc": "Create a new assertable JSON string instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_json",
		"name": "Illuminate\\Testing\\AssertableJsonString::json",
		"doc": "Validate and return the decoded response JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertCount",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertCount",
		"doc": "Assert that the response JSON has the expected count of items at the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertExact",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertExact",
		"doc": "Assert that the response has the exact given JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertSimilar",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertSimilar",
		"doc": "Assert that the response has the similar JSON as given."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertFragment",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertFragment",
		"doc": "Assert that the response contains the given JSON fragment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertMissing",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertMissing",
		"doc": "Assert that the response does not contain the given JSON fragment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertMissingExact",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertMissingExact",
		"doc": "Assert that the response does not contain the exact JSON fragment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertPath",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertPath",
		"doc": "Assert that the expected value and type exists at the given path in the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertStructure",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertStructure",
		"doc": "Assert that the response has a given JSON structure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertSubset",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertSubset",
		"doc": "Assert that the response is a superset of the given JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_reorderAssocKeys",
		"name": "Illuminate\\Testing\\AssertableJsonString::reorderAssocKeys",
		"doc": "Reorder associative array keys to make it easy to compare arrays."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_assertJsonMessage",
		"name": "Illuminate\\Testing\\AssertableJsonString::assertJsonMessage",
		"doc": "Get the assertion message for assertJson."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_jsonSearchStrings",
		"name": "Illuminate\\Testing\\AssertableJsonString::jsonSearchStrings",
		"doc": "Get the strings we need to search for when examining the JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_count",
		"name": "Illuminate\\Testing\\AssertableJsonString::count",
		"doc": "Get the total number of items in the underlying JSON array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_offsetExists",
		"name": "Illuminate\\Testing\\AssertableJsonString::offsetExists",
		"doc": "Determine whether an offset exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_offsetGet",
		"name": "Illuminate\\Testing\\AssertableJsonString::offsetGet",
		"doc": "Get the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_offsetSet",
		"name": "Illuminate\\Testing\\AssertableJsonString::offsetSet",
		"doc": "Set the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\AssertableJsonString",
		"fromLink": "Illuminate/Testing/AssertableJsonString.html",
		"link": "Illuminate/Testing/AssertableJsonString.html#method_offsetUnset",
		"name": "Illuminate\\Testing\\AssertableJsonString::offsetUnset",
		"doc": "Unset the value at the given offset."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing\\Constraints",
		"fromLink": "Illuminate/Testing/Constraints.html",
		"link": "Illuminate/Testing/Constraints/ArraySubset.html",
		"name": "Illuminate\\Testing\\Constraints\\ArraySubset",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\ArraySubset",
		"fromLink": "Illuminate/Testing/Constraints/ArraySubset.html",
		"link": "Illuminate/Testing/Constraints/ArraySubset.html#method___construct",
		"name": "Illuminate\\Testing\\Constraints\\ArraySubset::__construct",
		"doc": "Create a new array subset constraint instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\ArraySubset",
		"fromLink": "Illuminate/Testing/Constraints/ArraySubset.html",
		"link": "Illuminate/Testing/Constraints/ArraySubset.html#method_evaluate",
		"name": "Illuminate\\Testing\\Constraints\\ArraySubset::evaluate",
		"doc": "Evaluates the constraint for parameter $other."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\ArraySubset",
		"fromLink": "Illuminate/Testing/Constraints/ArraySubset.html",
		"link": "Illuminate/Testing/Constraints/ArraySubset.html#method_toString",
		"name": "Illuminate\\Testing\\Constraints\\ArraySubset::toString",
		"doc": "Returns a string representation of the constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\ArraySubset",
		"fromLink": "Illuminate/Testing/Constraints/ArraySubset.html",
		"link": "Illuminate/Testing/Constraints/ArraySubset.html#method_failureDescription",
		"name": "Illuminate\\Testing\\Constraints\\ArraySubset::failureDescription",
		"doc": "Returns the description of the failure."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing\\Constraints",
		"fromLink": "Illuminate/Testing/Constraints.html",
		"link": "Illuminate/Testing/Constraints/CountInDatabase.html",
		"name": "Illuminate\\Testing\\Constraints\\CountInDatabase",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\CountInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/CountInDatabase.html",
		"link": "Illuminate/Testing/Constraints/CountInDatabase.html#method___construct",
		"name": "Illuminate\\Testing\\Constraints\\CountInDatabase::__construct",
		"doc": "Create a new constraint instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\CountInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/CountInDatabase.html",
		"link": "Illuminate/Testing/Constraints/CountInDatabase.html#method_matches",
		"name": "Illuminate\\Testing\\Constraints\\CountInDatabase::matches",
		"doc": "Check if the expected and actual count are equal."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\CountInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/CountInDatabase.html",
		"link": "Illuminate/Testing/Constraints/CountInDatabase.html#method_failureDescription",
		"name": "Illuminate\\Testing\\Constraints\\CountInDatabase::failureDescription",
		"doc": "Get the description of the failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\CountInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/CountInDatabase.html",
		"link": "Illuminate/Testing/Constraints/CountInDatabase.html#method_toString",
		"name": "Illuminate\\Testing\\Constraints\\CountInDatabase::toString",
		"doc": "Get a string representation of the object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing\\Constraints",
		"fromLink": "Illuminate/Testing/Constraints.html",
		"link": "Illuminate/Testing/Constraints/HasInDatabase.html",
		"name": "Illuminate\\Testing\\Constraints\\HasInDatabase",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\HasInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/HasInDatabase.html",
		"link": "Illuminate/Testing/Constraints/HasInDatabase.html#method___construct",
		"name": "Illuminate\\Testing\\Constraints\\HasInDatabase::__construct",
		"doc": "Create a new constraint instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\HasInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/HasInDatabase.html",
		"link": "Illuminate/Testing/Constraints/HasInDatabase.html#method_matches",
		"name": "Illuminate\\Testing\\Constraints\\HasInDatabase::matches",
		"doc": "Check if the data is found in the given table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\HasInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/HasInDatabase.html",
		"link": "Illuminate/Testing/Constraints/HasInDatabase.html#method_failureDescription",
		"name": "Illuminate\\Testing\\Constraints\\HasInDatabase::failureDescription",
		"doc": "Get the description of the failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\HasInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/HasInDatabase.html",
		"link": "Illuminate/Testing/Constraints/HasInDatabase.html#method_getAdditionalInfo",
		"name": "Illuminate\\Testing\\Constraints\\HasInDatabase::getAdditionalInfo",
		"doc": "Get additional info about the records found in the database table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\HasInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/HasInDatabase.html",
		"link": "Illuminate/Testing/Constraints/HasInDatabase.html#method_toString",
		"name": "Illuminate\\Testing\\Constraints\\HasInDatabase::toString",
		"doc": "Get a string representation of the object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing\\Constraints",
		"fromLink": "Illuminate/Testing/Constraints.html",
		"link": "Illuminate/Testing/Constraints/SeeInOrder.html",
		"name": "Illuminate\\Testing\\Constraints\\SeeInOrder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SeeInOrder",
		"fromLink": "Illuminate/Testing/Constraints/SeeInOrder.html",
		"link": "Illuminate/Testing/Constraints/SeeInOrder.html#method___construct",
		"name": "Illuminate\\Testing\\Constraints\\SeeInOrder::__construct",
		"doc": "Create a new constraint instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SeeInOrder",
		"fromLink": "Illuminate/Testing/Constraints/SeeInOrder.html",
		"link": "Illuminate/Testing/Constraints/SeeInOrder.html#method_matches",
		"name": "Illuminate\\Testing\\Constraints\\SeeInOrder::matches",
		"doc": "Determine if the rule passes validation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SeeInOrder",
		"fromLink": "Illuminate/Testing/Constraints/SeeInOrder.html",
		"link": "Illuminate/Testing/Constraints/SeeInOrder.html#method_failureDescription",
		"name": "Illuminate\\Testing\\Constraints\\SeeInOrder::failureDescription",
		"doc": "Get the description of the failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SeeInOrder",
		"fromLink": "Illuminate/Testing/Constraints/SeeInOrder.html",
		"link": "Illuminate/Testing/Constraints/SeeInOrder.html#method_toString",
		"name": "Illuminate\\Testing\\Constraints\\SeeInOrder::toString",
		"doc": "Get a string representation of the object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing\\Constraints",
		"fromLink": "Illuminate/Testing/Constraints.html",
		"link": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html",
		"name": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html",
		"link": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html#method___construct",
		"name": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase::__construct",
		"doc": "Create a new constraint instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html",
		"link": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html#method_matches",
		"name": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase::matches",
		"doc": "Check if the data is found in the given table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html",
		"link": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html#method_failureDescription",
		"name": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase::failureDescription",
		"doc": "Get the description of the failure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html",
		"link": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html#method_getAdditionalInfo",
		"name": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase::getAdditionalInfo",
		"doc": "Get additional info about the records found in the database table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase",
		"fromLink": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html",
		"link": "Illuminate/Testing/Constraints/SoftDeletedInDatabase.html#method_toString",
		"name": "Illuminate\\Testing\\Constraints\\SoftDeletedInDatabase::toString",
		"doc": "Get a string representation of the object."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing",
		"fromLink": "Illuminate/Testing.html",
		"link": "Illuminate/Testing/PendingCommand.html",
		"name": "Illuminate\\Testing\\PendingCommand",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method___construct",
		"name": "Illuminate\\Testing\\PendingCommand::__construct",
		"doc": "Create a new pending console command run."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_expectsQuestion",
		"name": "Illuminate\\Testing\\PendingCommand::expectsQuestion",
		"doc": "Specify an expected question that will be asked when the command runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_expectsConfirmation",
		"name": "Illuminate\\Testing\\PendingCommand::expectsConfirmation",
		"doc": "Specify an expected confirmation question that will be asked when the command runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_expectsChoice",
		"name": "Illuminate\\Testing\\PendingCommand::expectsChoice",
		"doc": "Specify an expected choice question with expected answers that will be asked/shown when the command runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_expectsOutput",
		"name": "Illuminate\\Testing\\PendingCommand::expectsOutput",
		"doc": "Specify output that should be printed when the command runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_doesntExpectOutput",
		"name": "Illuminate\\Testing\\PendingCommand::doesntExpectOutput",
		"doc": "Specify output that should never be printed when the command runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_expectsTable",
		"name": "Illuminate\\Testing\\PendingCommand::expectsTable",
		"doc": "Specify a table that should be printed when the command runs."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_assertExitCode",
		"name": "Illuminate\\Testing\\PendingCommand::assertExitCode",
		"doc": "Assert that the command has the given exit code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_execute",
		"name": "Illuminate\\Testing\\PendingCommand::execute",
		"doc": "Execute the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_run",
		"name": "Illuminate\\Testing\\PendingCommand::run",
		"doc": "Execute the command."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_verifyExpectations",
		"name": "Illuminate\\Testing\\PendingCommand::verifyExpectations",
		"doc": "Determine if expected questions / choices / outputs are fulfilled."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_mockConsoleOutput",
		"name": "Illuminate\\Testing\\PendingCommand::mockConsoleOutput",
		"doc": "Mock the application's console output."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method_flushExpectations",
		"name": "Illuminate\\Testing\\PendingCommand::flushExpectations",
		"doc": "Flush the expectations from the test case."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\PendingCommand",
		"fromLink": "Illuminate/Testing/PendingCommand.html",
		"link": "Illuminate/Testing/PendingCommand.html#method___destruct",
		"name": "Illuminate\\Testing\\PendingCommand::__destruct",
		"doc": "Handle the object's destruction."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing",
		"fromLink": "Illuminate/Testing.html",
		"link": "Illuminate/Testing/TestResponse.html",
		"name": "Illuminate\\Testing\\TestResponse",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method___construct",
		"name": "Illuminate\\Testing\\TestResponse::__construct",
		"doc": "Create a new test response instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_fromBaseResponse",
		"name": "Illuminate\\Testing\\TestResponse::fromBaseResponse",
		"doc": "Create a new TestResponse from another response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSuccessful",
		"name": "Illuminate\\Testing\\TestResponse::assertSuccessful",
		"doc": "Assert that the response has a successful status code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertOk",
		"name": "Illuminate\\Testing\\TestResponse::assertOk",
		"doc": "Assert that the response has a 200 status code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertCreated",
		"name": "Illuminate\\Testing\\TestResponse::assertCreated",
		"doc": "Assert that the response has a 201 status code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertNoContent",
		"name": "Illuminate\\Testing\\TestResponse::assertNoContent",
		"doc": "Assert that the response has the given status code and no content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertNotFound",
		"name": "Illuminate\\Testing\\TestResponse::assertNotFound",
		"doc": "Assert that the response has a not found status code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertForbidden",
		"name": "Illuminate\\Testing\\TestResponse::assertForbidden",
		"doc": "Assert that the response has a forbidden status code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertUnauthorized",
		"name": "Illuminate\\Testing\\TestResponse::assertUnauthorized",
		"doc": "Assert that the response has an unauthorized status code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertStatus",
		"name": "Illuminate\\Testing\\TestResponse::assertStatus",
		"doc": "Assert that the response has the given status code."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertRedirect",
		"name": "Illuminate\\Testing\\TestResponse::assertRedirect",
		"doc": "Assert whether the response is redirecting to a given URI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertHeader",
		"name": "Illuminate\\Testing\\TestResponse::assertHeader",
		"doc": "Asserts that the response contains the given header and equals the optional value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertHeaderMissing",
		"name": "Illuminate\\Testing\\TestResponse::assertHeaderMissing",
		"doc": "Asserts that the response does not contains the given header."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertLocation",
		"name": "Illuminate\\Testing\\TestResponse::assertLocation",
		"doc": "Assert that the current location header matches the given URI."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertPlainCookie",
		"name": "Illuminate\\Testing\\TestResponse::assertPlainCookie",
		"doc": "Asserts that the response contains the given cookie and equals the optional value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertCookie",
		"name": "Illuminate\\Testing\\TestResponse::assertCookie",
		"doc": "Asserts that the response contains the given cookie and equals the optional value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertCookieExpired",
		"name": "Illuminate\\Testing\\TestResponse::assertCookieExpired",
		"doc": "Asserts that the response contains the given cookie and is expired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertCookieNotExpired",
		"name": "Illuminate\\Testing\\TestResponse::assertCookieNotExpired",
		"doc": "Asserts that the response contains the given cookie and is not expired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertCookieMissing",
		"name": "Illuminate\\Testing\\TestResponse::assertCookieMissing",
		"doc": "Asserts that the response does not contains the given cookie."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_getCookie",
		"name": "Illuminate\\Testing\\TestResponse::getCookie",
		"doc": "Get the given cookie from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSee",
		"name": "Illuminate\\Testing\\TestResponse::assertSee",
		"doc": "Assert that the given string or array of strings are contained within the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSeeInOrder",
		"name": "Illuminate\\Testing\\TestResponse::assertSeeInOrder",
		"doc": "Assert that the given strings are contained in order within the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSeeText",
		"name": "Illuminate\\Testing\\TestResponse::assertSeeText",
		"doc": "Assert that the given string or array of strings are contained within the response text."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSeeTextInOrder",
		"name": "Illuminate\\Testing\\TestResponse::assertSeeTextInOrder",
		"doc": "Assert that the given strings are contained in order within the response text."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertDontSee",
		"name": "Illuminate\\Testing\\TestResponse::assertDontSee",
		"doc": "Assert that the given string or array of strings are not contained within the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertDontSeeText",
		"name": "Illuminate\\Testing\\TestResponse::assertDontSeeText",
		"doc": "Assert that the given string or array of strings are not contained within the response text."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJson",
		"name": "Illuminate\\Testing\\TestResponse::assertJson",
		"doc": "Assert that the response is a superset of the given JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJsonPath",
		"name": "Illuminate\\Testing\\TestResponse::assertJsonPath",
		"doc": "Assert that the expected value and type exists at the given path in the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertExactJson",
		"name": "Illuminate\\Testing\\TestResponse::assertExactJson",
		"doc": "Assert that the response has the exact given JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSimilarJson",
		"name": "Illuminate\\Testing\\TestResponse::assertSimilarJson",
		"doc": "Assert that the response has the similar JSON as given."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJsonFragment",
		"name": "Illuminate\\Testing\\TestResponse::assertJsonFragment",
		"doc": "Assert that the response contains the given JSON fragment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJsonMissing",
		"name": "Illuminate\\Testing\\TestResponse::assertJsonMissing",
		"doc": "Assert that the response does not contain the given JSON fragment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJsonMissingExact",
		"name": "Illuminate\\Testing\\TestResponse::assertJsonMissingExact",
		"doc": "Assert that the response does not contain the exact JSON fragment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJsonStructure",
		"name": "Illuminate\\Testing\\TestResponse::assertJsonStructure",
		"doc": "Assert that the response has a given JSON structure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJsonCount",
		"name": "Illuminate\\Testing\\TestResponse::assertJsonCount",
		"doc": "Assert that the response JSON has the expected count of items at the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJsonValidationErrors",
		"name": "Illuminate\\Testing\\TestResponse::assertJsonValidationErrors",
		"doc": "Assert that the response has the given JSON validation errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertJsonMissingValidationErrors",
		"name": "Illuminate\\Testing\\TestResponse::assertJsonMissingValidationErrors",
		"doc": "Assert that the response has no JSON validation errors for the given keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_decodeResponseJson",
		"name": "Illuminate\\Testing\\TestResponse::decodeResponseJson",
		"doc": "Validate and return the decoded response JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_json",
		"name": "Illuminate\\Testing\\TestResponse::json",
		"doc": "Validate and return the decoded response JSON."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertViewIs",
		"name": "Illuminate\\Testing\\TestResponse::assertViewIs",
		"doc": "Assert that the response view equals the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertViewHas",
		"name": "Illuminate\\Testing\\TestResponse::assertViewHas",
		"doc": "Assert that the response view has a given piece of bound data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertViewHasAll",
		"name": "Illuminate\\Testing\\TestResponse::assertViewHasAll",
		"doc": "Assert that the response view has a given list of bound data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_viewData",
		"name": "Illuminate\\Testing\\TestResponse::viewData",
		"doc": "Get a piece of data from the original view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertViewMissing",
		"name": "Illuminate\\Testing\\TestResponse::assertViewMissing",
		"doc": "Assert that the response view is missing a piece of bound data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_ensureResponseHasView",
		"name": "Illuminate\\Testing\\TestResponse::ensureResponseHasView",
		"doc": "Ensure that the response has a view as its original content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_responseHasView",
		"name": "Illuminate\\Testing\\TestResponse::responseHasView",
		"doc": "Determine if the original response is a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSessionHas",
		"name": "Illuminate\\Testing\\TestResponse::assertSessionHas",
		"doc": "Assert that the session has a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSessionHasAll",
		"name": "Illuminate\\Testing\\TestResponse::assertSessionHasAll",
		"doc": "Assert that the session has a given list of values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSessionHasInput",
		"name": "Illuminate\\Testing\\TestResponse::assertSessionHasInput",
		"doc": "Assert that the session has a given value in the flashed input array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSessionHasErrors",
		"name": "Illuminate\\Testing\\TestResponse::assertSessionHasErrors",
		"doc": "Assert that the session has the given errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSessionDoesntHaveErrors",
		"name": "Illuminate\\Testing\\TestResponse::assertSessionDoesntHaveErrors",
		"doc": "Assert that the session is missing the given errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSessionHasNoErrors",
		"name": "Illuminate\\Testing\\TestResponse::assertSessionHasNoErrors",
		"doc": "Assert that the session has no errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSessionHasErrorsIn",
		"name": "Illuminate\\Testing\\TestResponse::assertSessionHasErrorsIn",
		"doc": "Assert that the session has the given errors."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_assertSessionMissing",
		"name": "Illuminate\\Testing\\TestResponse::assertSessionMissing",
		"doc": "Assert that the session does not have a given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_session",
		"name": "Illuminate\\Testing\\TestResponse::session",
		"doc": "Get the current session store."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_dump",
		"name": "Illuminate\\Testing\\TestResponse::dump",
		"doc": "Dump the content from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_dumpHeaders",
		"name": "Illuminate\\Testing\\TestResponse::dumpHeaders",
		"doc": "Dump the headers from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_dumpSession",
		"name": "Illuminate\\Testing\\TestResponse::dumpSession",
		"doc": "Dump the session from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_streamedContent",
		"name": "Illuminate\\Testing\\TestResponse::streamedContent",
		"doc": "Get the streamed content from the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method___get",
		"name": "Illuminate\\Testing\\TestResponse::__get",
		"doc": "Dynamically access base response parameters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method___isset",
		"name": "Illuminate\\Testing\\TestResponse::__isset",
		"doc": "Proxy isset() checks to the underlying base response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_offsetExists",
		"name": "Illuminate\\Testing\\TestResponse::offsetExists",
		"doc": "Determine if the given offset exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_offsetGet",
		"name": "Illuminate\\Testing\\TestResponse::offsetGet",
		"doc": "Get the value for a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_offsetSet",
		"name": "Illuminate\\Testing\\TestResponse::offsetSet",
		"doc": "Set the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method_offsetUnset",
		"name": "Illuminate\\Testing\\TestResponse::offsetUnset",
		"doc": "Unset the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestResponse",
		"fromLink": "Illuminate/Testing/TestResponse.html",
		"link": "Illuminate/Testing/TestResponse.html#method___call",
		"name": "Illuminate\\Testing\\TestResponse::__call",
		"doc": "Handle dynamic calls into macros or pass missing methods to the base response."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Testing",
		"fromLink": "Illuminate/Testing.html",
		"link": "Illuminate/Testing/TestView.html",
		"name": "Illuminate\\Testing\\TestView",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestView",
		"fromLink": "Illuminate/Testing/TestView.html",
		"link": "Illuminate/Testing/TestView.html#method___construct",
		"name": "Illuminate\\Testing\\TestView::__construct",
		"doc": "Create a new test view instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestView",
		"fromLink": "Illuminate/Testing/TestView.html",
		"link": "Illuminate/Testing/TestView.html#method_assertSee",
		"name": "Illuminate\\Testing\\TestView::assertSee",
		"doc": "Assert that the given string is contained within the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestView",
		"fromLink": "Illuminate/Testing/TestView.html",
		"link": "Illuminate/Testing/TestView.html#method_assertSeeInOrder",
		"name": "Illuminate\\Testing\\TestView::assertSeeInOrder",
		"doc": "Assert that the given strings are contained in order within the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestView",
		"fromLink": "Illuminate/Testing/TestView.html",
		"link": "Illuminate/Testing/TestView.html#method_assertSeeText",
		"name": "Illuminate\\Testing\\TestView::assertSeeText",
		"doc": "Assert that the given string is contained within the view text."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestView",
		"fromLink": "Illuminate/Testing/TestView.html",
		"link": "Illuminate/Testing/TestView.html#method_assertSeeTextInOrder",
		"name": "Illuminate\\Testing\\TestView::assertSeeTextInOrder",
		"doc": "Assert that the given strings are contained in order within the view text."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestView",
		"fromLink": "Illuminate/Testing/TestView.html",
		"link": "Illuminate/Testing/TestView.html#method_assertDontSee",
		"name": "Illuminate\\Testing\\TestView::assertDontSee",
		"doc": "Assert that the given string is not contained within the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestView",
		"fromLink": "Illuminate/Testing/TestView.html",
		"link": "Illuminate/Testing/TestView.html#method_assertDontSeeText",
		"name": "Illuminate\\Testing\\TestView::assertDontSeeText",
		"doc": "Assert that the given string is not contained within the view text."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Testing\\TestView",
		"fromLink": "Illuminate/Testing/TestView.html",
		"link": "Illuminate/Testing/TestView.html#method___toString",
		"name": "Illuminate\\Testing\\TestView::__toString",
		"doc": "Get the string contents of the rendered view."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Translation",
		"fromLink": "Illuminate/Translation.html",
		"link": "Illuminate/Translation/ArrayLoader.html",
		"name": "Illuminate\\Translation\\ArrayLoader",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\ArrayLoader",
		"fromLink": "Illuminate/Translation/ArrayLoader.html",
		"link": "Illuminate/Translation/ArrayLoader.html#method_load",
		"name": "Illuminate\\Translation\\ArrayLoader::load",
		"doc": "Load the messages for the given locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\ArrayLoader",
		"fromLink": "Illuminate/Translation/ArrayLoader.html",
		"link": "Illuminate/Translation/ArrayLoader.html#method_addNamespace",
		"name": "Illuminate\\Translation\\ArrayLoader::addNamespace",
		"doc": "Add a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\ArrayLoader",
		"fromLink": "Illuminate/Translation/ArrayLoader.html",
		"link": "Illuminate/Translation/ArrayLoader.html#method_addJsonPath",
		"name": "Illuminate\\Translation\\ArrayLoader::addJsonPath",
		"doc": "Add a new JSON path to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\ArrayLoader",
		"fromLink": "Illuminate/Translation/ArrayLoader.html",
		"link": "Illuminate/Translation/ArrayLoader.html#method_addMessages",
		"name": "Illuminate\\Translation\\ArrayLoader::addMessages",
		"doc": "Add messages to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\ArrayLoader",
		"fromLink": "Illuminate/Translation/ArrayLoader.html",
		"link": "Illuminate/Translation/ArrayLoader.html#method_namespaces",
		"name": "Illuminate\\Translation\\ArrayLoader::namespaces",
		"doc": "Get an array of all the registered namespaces."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Translation",
		"fromLink": "Illuminate/Translation.html",
		"link": "Illuminate/Translation/FileLoader.html",
		"name": "Illuminate\\Translation\\FileLoader",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method___construct",
		"name": "Illuminate\\Translation\\FileLoader::__construct",
		"doc": "Create a new file loader instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method_load",
		"name": "Illuminate\\Translation\\FileLoader::load",
		"doc": "Load the messages for the given locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method_loadNamespaced",
		"name": "Illuminate\\Translation\\FileLoader::loadNamespaced",
		"doc": "Load a namespaced translation group."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method_loadNamespaceOverrides",
		"name": "Illuminate\\Translation\\FileLoader::loadNamespaceOverrides",
		"doc": "Load a local namespaced translation group for overrides."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method_loadPath",
		"name": "Illuminate\\Translation\\FileLoader::loadPath",
		"doc": "Load a locale from a given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method_loadJsonPaths",
		"name": "Illuminate\\Translation\\FileLoader::loadJsonPaths",
		"doc": "Load a locale from the given JSON file path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method_addNamespace",
		"name": "Illuminate\\Translation\\FileLoader::addNamespace",
		"doc": "Add a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method_addJsonPath",
		"name": "Illuminate\\Translation\\FileLoader::addJsonPath",
		"doc": "Add a new JSON path to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\FileLoader",
		"fromLink": "Illuminate/Translation/FileLoader.html",
		"link": "Illuminate/Translation/FileLoader.html#method_namespaces",
		"name": "Illuminate\\Translation\\FileLoader::namespaces",
		"doc": "Get an array of all the registered namespaces."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Translation",
		"fromLink": "Illuminate/Translation.html",
		"link": "Illuminate/Translation/MessageSelector.html",
		"name": "Illuminate\\Translation\\MessageSelector",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\MessageSelector",
		"fromLink": "Illuminate/Translation/MessageSelector.html",
		"link": "Illuminate/Translation/MessageSelector.html#method_choose",
		"name": "Illuminate\\Translation\\MessageSelector::choose",
		"doc": "Select a proper translation string based on the given number."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\MessageSelector",
		"fromLink": "Illuminate/Translation/MessageSelector.html",
		"link": "Illuminate/Translation/MessageSelector.html#method_getPluralIndex",
		"name": "Illuminate\\Translation\\MessageSelector::getPluralIndex",
		"doc": "Get the index to use for pluralization."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Translation",
		"fromLink": "Illuminate/Translation.html",
		"link": "Illuminate/Translation/TranslationServiceProvider.html",
		"name": "Illuminate\\Translation\\TranslationServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\TranslationServiceProvider",
		"fromLink": "Illuminate/Translation/TranslationServiceProvider.html",
		"link": "Illuminate/Translation/TranslationServiceProvider.html#method_register",
		"name": "Illuminate\\Translation\\TranslationServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\TranslationServiceProvider",
		"fromLink": "Illuminate/Translation/TranslationServiceProvider.html",
		"link": "Illuminate/Translation/TranslationServiceProvider.html#method_registerLoader",
		"name": "Illuminate\\Translation\\TranslationServiceProvider::registerLoader",
		"doc": "Register the translation line loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\TranslationServiceProvider",
		"fromLink": "Illuminate/Translation/TranslationServiceProvider.html",
		"link": "Illuminate/Translation/TranslationServiceProvider.html#method_provides",
		"name": "Illuminate\\Translation\\TranslationServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Translation",
		"fromLink": "Illuminate/Translation.html",
		"link": "Illuminate/Translation/Translator.html",
		"name": "Illuminate\\Translation\\Translator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method___construct",
		"name": "Illuminate\\Translation\\Translator::__construct",
		"doc": "Create a new translator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_hasForLocale",
		"name": "Illuminate\\Translation\\Translator::hasForLocale",
		"doc": "Determine if a translation exists for a given locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_has",
		"name": "Illuminate\\Translation\\Translator::has",
		"doc": "Determine if a translation exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_get",
		"name": "Illuminate\\Translation\\Translator::get",
		"doc": "Get the translation for the given key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_choice",
		"name": "Illuminate\\Translation\\Translator::choice",
		"doc": "Get a translation according to an integer value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_localeForChoice",
		"name": "Illuminate\\Translation\\Translator::localeForChoice",
		"doc": "Get the proper locale for a choice operation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_getLine",
		"name": "Illuminate\\Translation\\Translator::getLine",
		"doc": "Retrieve a language line out the loaded array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_makeReplacements",
		"name": "Illuminate\\Translation\\Translator::makeReplacements",
		"doc": "Make the place-holder replacements on a line."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_sortReplacements",
		"name": "Illuminate\\Translation\\Translator::sortReplacements",
		"doc": "Sort the replacements array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_addLines",
		"name": "Illuminate\\Translation\\Translator::addLines",
		"doc": "Add translation lines to the given locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_load",
		"name": "Illuminate\\Translation\\Translator::load",
		"doc": "Load the specified language group."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_isLoaded",
		"name": "Illuminate\\Translation\\Translator::isLoaded",
		"doc": "Determine if the given group has been loaded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_addNamespace",
		"name": "Illuminate\\Translation\\Translator::addNamespace",
		"doc": "Add a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_addJsonPath",
		"name": "Illuminate\\Translation\\Translator::addJsonPath",
		"doc": "Add a new JSON path to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_parseKey",
		"name": "Illuminate\\Translation\\Translator::parseKey",
		"doc": "Parse a key into namespace, group, and item."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_localeArray",
		"name": "Illuminate\\Translation\\Translator::localeArray",
		"doc": "Get the array of locales to be checked."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_getSelector",
		"name": "Illuminate\\Translation\\Translator::getSelector",
		"doc": "Get the message selector instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_setSelector",
		"name": "Illuminate\\Translation\\Translator::setSelector",
		"doc": "Set the message selector instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_getLoader",
		"name": "Illuminate\\Translation\\Translator::getLoader",
		"doc": "Get the language line loader implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_locale",
		"name": "Illuminate\\Translation\\Translator::locale",
		"doc": "Get the default locale being used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_getLocale",
		"name": "Illuminate\\Translation\\Translator::getLocale",
		"doc": "Get the default locale being used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_setLocale",
		"name": "Illuminate\\Translation\\Translator::setLocale",
		"doc": "Set the default locale."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_getFallback",
		"name": "Illuminate\\Translation\\Translator::getFallback",
		"doc": "Get the fallback locale being used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_setFallback",
		"name": "Illuminate\\Translation\\Translator::setFallback",
		"doc": "Set the fallback locale being used."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Translation\\Translator",
		"fromLink": "Illuminate/Translation/Translator.html",
		"link": "Illuminate/Translation/Translator.html#method_setLoaded",
		"name": "Illuminate\\Translation\\Translator::setLoaded",
		"doc": "Set the loaded translation groups."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/ClosureValidationRule.html",
		"name": "Illuminate\\Validation\\ClosureValidationRule",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ClosureValidationRule",
		"fromLink": "Illuminate/Validation/ClosureValidationRule.html",
		"link": "Illuminate/Validation/ClosureValidationRule.html#method___construct",
		"name": "Illuminate\\Validation\\ClosureValidationRule::__construct",
		"doc": "Create a new Closure based validation rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ClosureValidationRule",
		"fromLink": "Illuminate/Validation/ClosureValidationRule.html",
		"link": "Illuminate/Validation/ClosureValidationRule.html#method_passes",
		"name": "Illuminate\\Validation\\ClosureValidationRule::passes",
		"doc": "Determine if the validation rule passes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ClosureValidationRule",
		"fromLink": "Illuminate/Validation/ClosureValidationRule.html",
		"link": "Illuminate/Validation/ClosureValidationRule.html#method_message",
		"name": "Illuminate\\Validation\\ClosureValidationRule::message",
		"doc": "Get the validation error message."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation\\Concerns",
		"fromLink": "Illuminate/Validation/Concerns.html",
		"link": "Illuminate/Validation/Concerns/FilterEmailValidation.html",
		"name": "Illuminate\\Validation\\Concerns\\FilterEmailValidation",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FilterEmailValidation",
		"fromLink": "Illuminate/Validation/Concerns/FilterEmailValidation.html",
		"link": "Illuminate/Validation/Concerns/FilterEmailValidation.html#method___construct",
		"name": "Illuminate\\Validation\\Concerns\\FilterEmailValidation::__construct",
		"doc": "Create a new validation instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FilterEmailValidation",
		"fromLink": "Illuminate/Validation/Concerns/FilterEmailValidation.html",
		"link": "Illuminate/Validation/Concerns/FilterEmailValidation.html#method_unicode",
		"name": "Illuminate\\Validation\\Concerns\\FilterEmailValidation::unicode",
		"doc": "Create a new instance which allows any unicode characters in local-part."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FilterEmailValidation",
		"fromLink": "Illuminate/Validation/Concerns/FilterEmailValidation.html",
		"link": "Illuminate/Validation/Concerns/FilterEmailValidation.html#method_isValid",
		"name": "Illuminate\\Validation\\Concerns\\FilterEmailValidation::isValid",
		"doc": "Returns true if the given email is valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FilterEmailValidation",
		"fromLink": "Illuminate/Validation/Concerns/FilterEmailValidation.html",
		"link": "Illuminate/Validation/Concerns/FilterEmailValidation.html#method_getError",
		"name": "Illuminate\\Validation\\Concerns\\FilterEmailValidation::getError",
		"doc": "Returns the validation error."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FilterEmailValidation",
		"fromLink": "Illuminate/Validation/Concerns/FilterEmailValidation.html",
		"link": "Illuminate/Validation/Concerns/FilterEmailValidation.html#method_getWarnings",
		"name": "Illuminate\\Validation\\Concerns\\FilterEmailValidation::getWarnings",
		"doc": "Returns the validation warnings."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Validation\\Concerns",
		"fromLink": "Illuminate/Validation/Concerns.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getMessage",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getMessage",
		"doc": "Get the validation message for an attribute and rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getInlineMessage",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getInlineMessage",
		"doc": "Get the proper inline error message for standard and size rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getFromLocalArray",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getFromLocalArray",
		"doc": "Get the inline message for a rule if it exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getCustomMessageFromTranslator",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getCustomMessageFromTranslator",
		"doc": "Get the custom error message from translator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getWildcardCustomMessages",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getWildcardCustomMessages",
		"doc": "Check the given messages for a wildcard key."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getSizeMessage",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getSizeMessage",
		"doc": "Get the proper error message for an attribute and size rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getAttributeType",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getAttributeType",
		"doc": "Get the data type of the given attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_makeReplacements",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::makeReplacements",
		"doc": "Replace all error message place-holders with actual values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getDisplayableAttribute",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getDisplayableAttribute",
		"doc": "Get the displayable name of the attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getAttributeFromTranslations",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getAttributeFromTranslations",
		"doc": "Get the given attribute from the attribute translations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_replaceAttributePlaceholder",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::replaceAttributePlaceholder",
		"doc": "Replace the :attribute placeholder in the given message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_replaceInputPlaceholder",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::replaceInputPlaceholder",
		"doc": "Replace the :input placeholder in the given message."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getDisplayableValue",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getDisplayableValue",
		"doc": "Get the displayable name of the value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_getAttributeList",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::getAttributeList",
		"doc": "Transform an array of attributes to their displayable form."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_callReplacer",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::callReplacer",
		"doc": "Call a custom validator message replacer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\FormatsMessages",
		"fromLink": "Illuminate/Validation/Concerns/FormatsMessages.html",
		"link": "Illuminate/Validation/Concerns/FormatsMessages.html#method_callClassBasedReplacer",
		"name": "Illuminate\\Validation\\Concerns\\FormatsMessages::callClassBasedReplacer",
		"doc": "Call a class based validator message replacer."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Validation\\Concerns",
		"fromLink": "Illuminate/Validation/Concerns.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceBetween",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceBetween",
		"doc": "Replace all place-holders for the between rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceDateFormat",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceDateFormat",
		"doc": "Replace all place-holders for the date_format rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceDifferent",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceDifferent",
		"doc": "Replace all place-holders for the different rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceDigits",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceDigits",
		"doc": "Replace all place-holders for the digits rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceDigitsBetween",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceDigitsBetween",
		"doc": "Replace all place-holders for the digits (between) rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceMin",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceMin",
		"doc": "Replace all place-holders for the min rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceMax",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceMax",
		"doc": "Replace all place-holders for the max rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceMultipleOf",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceMultipleOf",
		"doc": "Replace all place-holders for the multiple_of rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceIn",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceIn",
		"doc": "Replace all place-holders for the in rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceNotIn",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceNotIn",
		"doc": "Replace all place-holders for the not_in rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceInArray",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceInArray",
		"doc": "Replace all place-holders for the in_array rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceMimetypes",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceMimetypes",
		"doc": "Replace all place-holders for the mimetypes rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceMimes",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceMimes",
		"doc": "Replace all place-holders for the mimes rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceRequiredWith",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceRequiredWith",
		"doc": "Replace all place-holders for the required_with rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceRequiredWithAll",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceRequiredWithAll",
		"doc": "Replace all place-holders for the required_with_all rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceRequiredWithout",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceRequiredWithout",
		"doc": "Replace all place-holders for the required_without rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceRequiredWithoutAll",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceRequiredWithoutAll",
		"doc": "Replace all place-holders for the required_without_all rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceSize",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceSize",
		"doc": "Replace all place-holders for the size rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceGt",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceGt",
		"doc": "Replace all place-holders for the gt rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceLt",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceLt",
		"doc": "Replace all place-holders for the lt rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceGte",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceGte",
		"doc": "Replace all place-holders for the gte rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceLte",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceLte",
		"doc": "Replace all place-holders for the lte rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceRequiredIf",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceRequiredIf",
		"doc": "Replace all place-holders for the required_if rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceRequiredUnless",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceRequiredUnless",
		"doc": "Replace all place-holders for the required_unless rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceSame",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceSame",
		"doc": "Replace all place-holders for the same rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceBefore",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceBefore",
		"doc": "Replace all place-holders for the before rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceBeforeOrEqual",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceBeforeOrEqual",
		"doc": "Replace all place-holders for the before_or_equal rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceAfter",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceAfter",
		"doc": "Replace all place-holders for the after rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceAfterOrEqual",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceAfterOrEqual",
		"doc": "Replace all place-holders for the after_or_equal rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceDateEquals",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceDateEquals",
		"doc": "Replace all place-holders for the date_equals rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceDimensions",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceDimensions",
		"doc": "Replace all place-holders for the dimensions rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceEndsWith",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceEndsWith",
		"doc": "Replace all place-holders for the ends_with rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ReplacesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ReplacesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ReplacesAttributes.html#method_replaceStartsWith",
		"name": "Illuminate\\Validation\\Concerns\\ReplacesAttributes::replaceStartsWith",
		"doc": "Replace all place-holders for the starts_with rule."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Validation\\Concerns",
		"fromLink": "Illuminate/Validation/Concerns.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateAccepted",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateAccepted",
		"doc": "Validate that an attribute was \"accepted\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateActiveUrl",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateActiveUrl",
		"doc": "Validate that an attribute is an active URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateBail",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateBail",
		"doc": "\"Break\" on first validation fail."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateBefore",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateBefore",
		"doc": "Validate the date is before a given date."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateBeforeOrEqual",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateBeforeOrEqual",
		"doc": "Validate the date is before or equal a given date."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateAfter",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateAfter",
		"doc": "Validate the date is after a given date."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateAfterOrEqual",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateAfterOrEqual",
		"doc": "Validate the date is equal or after a given date."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_compareDates",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::compareDates",
		"doc": "Compare a given date against another using an operator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getDateFormat",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getDateFormat",
		"doc": "Get the date format for an attribute if it has one."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getDateTimestamp",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getDateTimestamp",
		"doc": "Get the date timestamp."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_checkDateTimeOrder",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::checkDateTimeOrder",
		"doc": "Given two date/time strings, check that one is after the other."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getDateTimeWithOptionalFormat",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getDateTimeWithOptionalFormat",
		"doc": "Get a DateTime instance from a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getDateTime",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getDateTime",
		"doc": "Get a DateTime instance from a string with no format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateAlpha",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateAlpha",
		"doc": "Validate that an attribute contains only alphabetic characters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateAlphaDash",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateAlphaDash",
		"doc": "Validate that an attribute contains only alpha-numeric characters, dashes, and underscores."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateAlphaNum",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateAlphaNum",
		"doc": "Validate that an attribute contains only alpha-numeric characters."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateArray",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateArray",
		"doc": "Validate that an attribute is an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateBetween",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateBetween",
		"doc": "Validate the size of an attribute is between a set of values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateBoolean",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateBoolean",
		"doc": "Validate that an attribute is a boolean."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateConfirmed",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateConfirmed",
		"doc": "Validate that an attribute has a matching confirmation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateDate",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateDate",
		"doc": "Validate that an attribute is a valid date."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateDateFormat",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateDateFormat",
		"doc": "Validate that an attribute matches a date format."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateDateEquals",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateDateEquals",
		"doc": "Validate that an attribute is equal to another date."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateDifferent",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateDifferent",
		"doc": "Validate that an attribute is different from another attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateDigits",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateDigits",
		"doc": "Validate that an attribute has a given number of digits."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateDigitsBetween",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateDigitsBetween",
		"doc": "Validate that an attribute is between a given number of digits."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateDimensions",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateDimensions",
		"doc": "Validate the dimensions of an image matches the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_failsBasicDimensionChecks",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::failsBasicDimensionChecks",
		"doc": "Test if the given width and height fail any conditions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_failsRatioCheck",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::failsRatioCheck",
		"doc": "Determine if the given parameters fail a dimension ratio check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateDistinct",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateDistinct",
		"doc": "Validate an attribute is unique among other values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getDistinctValues",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getDistinctValues",
		"doc": "Get the values to distinct between."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_extractDistinctValues",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::extractDistinctValues",
		"doc": "Extract the distinct values from the data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateEmail",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateEmail",
		"doc": "Validate that an attribute is a valid e-mail address."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateExists",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateExists",
		"doc": "Validate the existence of an attribute value in a database table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getExistCount",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getExistCount",
		"doc": "Get the number of records that exist in storage."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateUnique",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateUnique",
		"doc": "Validate the uniqueness of an attribute value on a given database table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getUniqueIds",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getUniqueIds",
		"doc": "Get the excluded ID column and value for the unique rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_prepareUniqueId",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::prepareUniqueId",
		"doc": "Prepare the given ID for querying."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getUniqueExtra",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getUniqueExtra",
		"doc": "Get the extra conditions for a unique rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_parseTable",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::parseTable",
		"doc": "Parse the connection / table for the unique / exists rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getQueryColumn",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getQueryColumn",
		"doc": "Get the column name for an exists / unique query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_guessColumnForQuery",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::guessColumnForQuery",
		"doc": "Guess the database column from the given attribute name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getExtraConditions",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getExtraConditions",
		"doc": "Get the extra conditions for a unique / exists rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateFile",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateFile",
		"doc": "Validate the given value is a valid file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateFilled",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateFilled",
		"doc": "Validate the given attribute is filled if it is present."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateGt",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateGt",
		"doc": "Validate that an attribute is greater than another attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateLt",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateLt",
		"doc": "Validate that an attribute is less than another attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateGte",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateGte",
		"doc": "Validate that an attribute is greater than or equal another attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateLte",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateLte",
		"doc": "Validate that an attribute is less than or equal another attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateImage",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateImage",
		"doc": "Validate the MIME type of a file is an image MIME type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateIn",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateIn",
		"doc": "Validate an attribute is contained within a list of values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateInArray",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateInArray",
		"doc": "Validate that the values of an attribute is in another attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateInteger",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateInteger",
		"doc": "Validate that an attribute is an integer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateIp",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateIp",
		"doc": "Validate that an attribute is a valid IP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateIpv4",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateIpv4",
		"doc": "Validate that an attribute is a valid IPv4."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateIpv6",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateIpv6",
		"doc": "Validate that an attribute is a valid IPv6."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateJson",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateJson",
		"doc": "Validate the attribute is a valid JSON string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateMax",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateMax",
		"doc": "Validate the size of an attribute is less than a maximum value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateMimes",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateMimes",
		"doc": "Validate the guessed extension of a file upload is in a set of file extensions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateMimetypes",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateMimetypes",
		"doc": "Validate the MIME type of a file upload attribute is in a set of MIME types."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_shouldBlockPhpUpload",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::shouldBlockPhpUpload",
		"doc": "Check if PHP uploads are explicitly allowed."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateMin",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateMin",
		"doc": "Validate the size of an attribute is greater than a minimum value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateMultipleOf",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateMultipleOf",
		"doc": "Validate the value of an attribute is a multiple of a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateNullable",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateNullable",
		"doc": "\"Indicate\" validation should pass if value is null."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateNotIn",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateNotIn",
		"doc": "Validate an attribute is not contained within a list of values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateNumeric",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateNumeric",
		"doc": "Validate that an attribute is numeric."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validatePassword",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validatePassword",
		"doc": "Validate that the current logged in user's password matches the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validatePresent",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validatePresent",
		"doc": "Validate that an attribute exists even if not filled."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateRegex",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateRegex",
		"doc": "Validate that an attribute passes a regular expression check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateNotRegex",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateNotRegex",
		"doc": "Validate that an attribute does not pass a regular expression check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateRequired",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateRequired",
		"doc": "Validate that a required attribute exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateRequiredIf",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateRequiredIf",
		"doc": "Validate that an attribute exists when another attribute has a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateExcludeIf",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateExcludeIf",
		"doc": "Indicate that an attribute should be excluded when another attribute has a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateExcludeUnless",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateExcludeUnless",
		"doc": "Indicate that an attribute should be excluded when another attribute does not have a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateExcludeWithout",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateExcludeWithout",
		"doc": "Indicate that an attribute should be excluded when another attribute is missing."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_prepareValuesAndOther",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::prepareValuesAndOther",
		"doc": "Prepare the values and the other value for validation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_convertValuesToBoolean",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::convertValuesToBoolean",
		"doc": "Convert the given values to boolean if they are string \"true\" / \"false\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_convertValuesToNull",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::convertValuesToNull",
		"doc": "Convert the given values to null if they are string \"null\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateRequiredUnless",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateRequiredUnless",
		"doc": "Validate that an attribute exists when another attribute does not have a given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateRequiredWith",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateRequiredWith",
		"doc": "Validate that an attribute exists when any other attribute exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateRequiredWithAll",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateRequiredWithAll",
		"doc": "Validate that an attribute exists when all other attributes exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateRequiredWithout",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateRequiredWithout",
		"doc": "Validate that an attribute exists when another attribute does not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateRequiredWithoutAll",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateRequiredWithoutAll",
		"doc": "Validate that an attribute exists when all other attributes do not."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_anyFailingRequired",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::anyFailingRequired",
		"doc": "Determine if any of the given attributes fail the required test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_allFailingRequired",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::allFailingRequired",
		"doc": "Determine if all of the given attributes fail the required test."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateSame",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateSame",
		"doc": "Validate that two attributes match."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateSize",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateSize",
		"doc": "Validate the size of an attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateSometimes",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateSometimes",
		"doc": "\"Validate\" optional attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateStartsWith",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateStartsWith",
		"doc": "Validate the attribute starts with a given substring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateEndsWith",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateEndsWith",
		"doc": "Validate the attribute ends with a given substring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateString",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateString",
		"doc": "Validate that an attribute is a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateTimezone",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateTimezone",
		"doc": "Validate that an attribute is a valid timezone."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateUrl",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateUrl",
		"doc": "Validate that an attribute is a valid URL."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_validateUuid",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::validateUuid",
		"doc": "Validate that an attribute is a valid UUID."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_getSize",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::getSize",
		"doc": "Get the size of an attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_isValidFileInstance",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::isValidFileInstance",
		"doc": "Check that the given value is a valid file instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_compare",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::compare",
		"doc": "Determine if a comparison passes between the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_parseNamedParameters",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::parseNamedParameters",
		"doc": "Parse named parameters to $key => $value items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_requireParameterCount",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::requireParameterCount",
		"doc": "Require a certain number of parameters to be present."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_isSameType",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::isSameType",
		"doc": "Check if the parameters are of the same type."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Concerns\\ValidatesAttributes",
		"fromLink": "Illuminate/Validation/Concerns/ValidatesAttributes.html",
		"link": "Illuminate/Validation/Concerns/ValidatesAttributes.html#method_shouldBeNumeric",
		"name": "Illuminate\\Validation\\Concerns\\ValidatesAttributes::shouldBeNumeric",
		"doc": "Adds the existing rule to the numericRules array if the attribute's value is numeric."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifier.html",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifier",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifier",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifier.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifier.html#method___construct",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifier::__construct",
		"doc": "Create a new database presence verifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifier",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifier.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifier.html#method_getCount",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifier::getCount",
		"doc": "Count the number of objects in a collection having the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifier",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifier.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifier.html#method_getMultiCount",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifier::getMultiCount",
		"doc": "Count the number of objects in a collection with the given values."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifier",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifier.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifier.html#method_addConditions",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifier::addConditions",
		"doc": "Add the given conditions to the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifier",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifier.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifier.html#method_addWhere",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifier::addWhere",
		"doc": "Add a \"where\" clause to the given query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifier",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifier.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifier.html#method_table",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifier::table",
		"doc": "Get a query builder for the given table."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifier",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifier.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifier.html#method_setConnection",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifier::setConnection",
		"doc": "Set the connection to be used."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifierInterface.html",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifierInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\DatabasePresenceVerifierInterface",
		"fromLink": "Illuminate/Validation/DatabasePresenceVerifierInterface.html",
		"link": "Illuminate/Validation/DatabasePresenceVerifierInterface.html#method_setConnection",
		"name": "Illuminate\\Validation\\DatabasePresenceVerifierInterface::setConnection",
		"doc": "Set the connection to be used."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/Factory.html",
		"name": "Illuminate\\Validation\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method___construct",
		"name": "Illuminate\\Validation\\Factory::__construct",
		"doc": "Create a new Validator factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_make",
		"name": "Illuminate\\Validation\\Factory::make",
		"doc": "Create a new Validator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_validate",
		"name": "Illuminate\\Validation\\Factory::validate",
		"doc": "Validate the given data against the provided rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_resolve",
		"name": "Illuminate\\Validation\\Factory::resolve",
		"doc": "Resolve a new Validator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_addExtensions",
		"name": "Illuminate\\Validation\\Factory::addExtensions",
		"doc": "Add the extensions to a validator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_extend",
		"name": "Illuminate\\Validation\\Factory::extend",
		"doc": "Register a custom validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_extendImplicit",
		"name": "Illuminate\\Validation\\Factory::extendImplicit",
		"doc": "Register a custom implicit validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_extendDependent",
		"name": "Illuminate\\Validation\\Factory::extendDependent",
		"doc": "Register a custom dependent validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_replacer",
		"name": "Illuminate\\Validation\\Factory::replacer",
		"doc": "Register a custom validator message replacer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_resolver",
		"name": "Illuminate\\Validation\\Factory::resolver",
		"doc": "Set the Validator instance resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_getTranslator",
		"name": "Illuminate\\Validation\\Factory::getTranslator",
		"doc": "Get the Translator implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_getPresenceVerifier",
		"name": "Illuminate\\Validation\\Factory::getPresenceVerifier",
		"doc": "Get the Presence Verifier implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Factory",
		"fromLink": "Illuminate/Validation/Factory.html",
		"link": "Illuminate/Validation/Factory.html#method_setPresenceVerifier",
		"name": "Illuminate\\Validation\\Factory::setPresenceVerifier",
		"doc": "Set the Presence Verifier implementation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/PresenceVerifierInterface.html",
		"name": "Illuminate\\Validation\\PresenceVerifierInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\PresenceVerifierInterface",
		"fromLink": "Illuminate/Validation/PresenceVerifierInterface.html",
		"link": "Illuminate/Validation/PresenceVerifierInterface.html#method_getCount",
		"name": "Illuminate\\Validation\\PresenceVerifierInterface::getCount",
		"doc": "Count the number of objects in a collection having the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\PresenceVerifierInterface",
		"fromLink": "Illuminate/Validation/PresenceVerifierInterface.html",
		"link": "Illuminate/Validation/PresenceVerifierInterface.html#method_getMultiCount",
		"name": "Illuminate\\Validation\\PresenceVerifierInterface::getMultiCount",
		"doc": "Count the number of objects in a collection with the given values."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/Rule.html",
		"name": "Illuminate\\Validation\\Rule",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rule",
		"fromLink": "Illuminate/Validation/Rule.html",
		"link": "Illuminate/Validation/Rule.html#method_dimensions",
		"name": "Illuminate\\Validation\\Rule::dimensions",
		"doc": "Get a dimensions constraint builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rule",
		"fromLink": "Illuminate/Validation/Rule.html",
		"link": "Illuminate/Validation/Rule.html#method_exists",
		"name": "Illuminate\\Validation\\Rule::exists",
		"doc": "Get an exists constraint builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rule",
		"fromLink": "Illuminate/Validation/Rule.html",
		"link": "Illuminate/Validation/Rule.html#method_in",
		"name": "Illuminate\\Validation\\Rule::in",
		"doc": "Get an in constraint builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rule",
		"fromLink": "Illuminate/Validation/Rule.html",
		"link": "Illuminate/Validation/Rule.html#method_notIn",
		"name": "Illuminate\\Validation\\Rule::notIn",
		"doc": "Get a not_in constraint builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rule",
		"fromLink": "Illuminate/Validation/Rule.html",
		"link": "Illuminate/Validation/Rule.html#method_requiredIf",
		"name": "Illuminate\\Validation\\Rule::requiredIf",
		"doc": "Get a required_if constraint builder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rule",
		"fromLink": "Illuminate/Validation/Rule.html",
		"link": "Illuminate/Validation/Rule.html#method_unique",
		"name": "Illuminate\\Validation\\Rule::unique",
		"doc": "Get a unique constraint builder instance."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Validation\\Rules",
		"fromLink": "Illuminate/Validation/Rules.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method___construct",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::__construct",
		"doc": "Create a new rule instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_resolveTableName",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::resolveTableName",
		"doc": "Resolves the name of the table from the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_where",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::where",
		"doc": "Set a \"where\" constraint on the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_whereNot",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::whereNot",
		"doc": "Set a \"where not\" constraint on the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_whereNull",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::whereNull",
		"doc": "Set a \"where null\" constraint on the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_whereNotNull",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::whereNotNull",
		"doc": "Set a \"where not null\" constraint on the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_whereIn",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::whereIn",
		"doc": "Set a \"where in\" constraint on the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_whereNotIn",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::whereNotIn",
		"doc": "Set a \"where not in\" constraint on the query."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_using",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::using",
		"doc": "Register a custom query callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_queryCallbacks",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::queryCallbacks",
		"doc": "Get the custom query callbacks for the rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\DatabaseRule",
		"fromLink": "Illuminate/Validation/Rules/DatabaseRule.html",
		"link": "Illuminate/Validation/Rules/DatabaseRule.html#method_formatWheres",
		"name": "Illuminate\\Validation\\Rules\\DatabaseRule::formatWheres",
		"doc": "Format the where clauses."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation\\Rules",
		"fromLink": "Illuminate/Validation/Rules.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html",
		"name": "Illuminate\\Validation\\Rules\\Dimensions",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method___construct",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::__construct",
		"doc": "Create a new dimensions rule instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method_width",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::width",
		"doc": "Set the \"width\" constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method_height",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::height",
		"doc": "Set the \"height\" constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method_minWidth",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::minWidth",
		"doc": "Set the \"min width\" constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method_minHeight",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::minHeight",
		"doc": "Set the \"min height\" constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method_maxWidth",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::maxWidth",
		"doc": "Set the \"max width\" constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method_maxHeight",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::maxHeight",
		"doc": "Set the \"max height\" constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method_ratio",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::ratio",
		"doc": "Set the \"ratio\" constraint."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Dimensions",
		"fromLink": "Illuminate/Validation/Rules/Dimensions.html",
		"link": "Illuminate/Validation/Rules/Dimensions.html#method___toString",
		"name": "Illuminate\\Validation\\Rules\\Dimensions::__toString",
		"doc": "Convert the rule to a validation string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation\\Rules",
		"fromLink": "Illuminate/Validation/Rules.html",
		"link": "Illuminate/Validation/Rules/Exists.html",
		"name": "Illuminate\\Validation\\Rules\\Exists",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Exists",
		"fromLink": "Illuminate/Validation/Rules/Exists.html",
		"link": "Illuminate/Validation/Rules/Exists.html#method___toString",
		"name": "Illuminate\\Validation\\Rules\\Exists::__toString",
		"doc": "Convert the rule to a validation string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation\\Rules",
		"fromLink": "Illuminate/Validation/Rules.html",
		"link": "Illuminate/Validation/Rules/In.html",
		"name": "Illuminate\\Validation\\Rules\\In",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\In",
		"fromLink": "Illuminate/Validation/Rules/In.html",
		"link": "Illuminate/Validation/Rules/In.html#method___construct",
		"name": "Illuminate\\Validation\\Rules\\In::__construct",
		"doc": "Create a new in rule instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\In",
		"fromLink": "Illuminate/Validation/Rules/In.html",
		"link": "Illuminate/Validation/Rules/In.html#method___toString",
		"name": "Illuminate\\Validation\\Rules\\In::__toString",
		"doc": "Convert the rule to a validation string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation\\Rules",
		"fromLink": "Illuminate/Validation/Rules.html",
		"link": "Illuminate/Validation/Rules/NotIn.html",
		"name": "Illuminate\\Validation\\Rules\\NotIn",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\NotIn",
		"fromLink": "Illuminate/Validation/Rules/NotIn.html",
		"link": "Illuminate/Validation/Rules/NotIn.html#method___construct",
		"name": "Illuminate\\Validation\\Rules\\NotIn::__construct",
		"doc": "Create a new \"not in\" rule instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\NotIn",
		"fromLink": "Illuminate/Validation/Rules/NotIn.html",
		"link": "Illuminate/Validation/Rules/NotIn.html#method___toString",
		"name": "Illuminate\\Validation\\Rules\\NotIn::__toString",
		"doc": "Convert the rule to a validation string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation\\Rules",
		"fromLink": "Illuminate/Validation/Rules.html",
		"link": "Illuminate/Validation/Rules/RequiredIf.html",
		"name": "Illuminate\\Validation\\Rules\\RequiredIf",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\RequiredIf",
		"fromLink": "Illuminate/Validation/Rules/RequiredIf.html",
		"link": "Illuminate/Validation/Rules/RequiredIf.html#method___construct",
		"name": "Illuminate\\Validation\\Rules\\RequiredIf::__construct",
		"doc": "Create a new required validation rule based on a condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\RequiredIf",
		"fromLink": "Illuminate/Validation/Rules/RequiredIf.html",
		"link": "Illuminate/Validation/Rules/RequiredIf.html#method___toString",
		"name": "Illuminate\\Validation\\Rules\\RequiredIf::__toString",
		"doc": "Convert the rule to a validation string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation\\Rules",
		"fromLink": "Illuminate/Validation/Rules.html",
		"link": "Illuminate/Validation/Rules/Unique.html",
		"name": "Illuminate\\Validation\\Rules\\Unique",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Unique",
		"fromLink": "Illuminate/Validation/Rules/Unique.html",
		"link": "Illuminate/Validation/Rules/Unique.html#method_ignore",
		"name": "Illuminate\\Validation\\Rules\\Unique::ignore",
		"doc": "Ignore the given ID during the unique check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Unique",
		"fromLink": "Illuminate/Validation/Rules/Unique.html",
		"link": "Illuminate/Validation/Rules/Unique.html#method_ignoreModel",
		"name": "Illuminate\\Validation\\Rules\\Unique::ignoreModel",
		"doc": "Ignore the given model during the unique check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Rules\\Unique",
		"fromLink": "Illuminate/Validation/Rules/Unique.html",
		"link": "Illuminate/Validation/Rules/Unique.html#method___toString",
		"name": "Illuminate\\Validation\\Rules\\Unique::__toString",
		"doc": "Convert the rule to a validation string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/UnauthorizedException.html",
		"name": "Illuminate\\Validation\\UnauthorizedException",
		"doc": null
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/ValidatesWhenResolvedTrait.html",
		"name": "Illuminate\\Validation\\ValidatesWhenResolvedTrait",
		"doc": "Provides default implementation of ValidatesWhenResolved contract."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidatesWhenResolvedTrait",
		"fromLink": "Illuminate/Validation/ValidatesWhenResolvedTrait.html",
		"link": "Illuminate/Validation/ValidatesWhenResolvedTrait.html#method_validateResolved",
		"name": "Illuminate\\Validation\\ValidatesWhenResolvedTrait::validateResolved",
		"doc": "Validate the class instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidatesWhenResolvedTrait",
		"fromLink": "Illuminate/Validation/ValidatesWhenResolvedTrait.html",
		"link": "Illuminate/Validation/ValidatesWhenResolvedTrait.html#method_prepareForValidation",
		"name": "Illuminate\\Validation\\ValidatesWhenResolvedTrait::prepareForValidation",
		"doc": "Prepare the data for validation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidatesWhenResolvedTrait",
		"fromLink": "Illuminate/Validation/ValidatesWhenResolvedTrait.html",
		"link": "Illuminate/Validation/ValidatesWhenResolvedTrait.html#method_getValidatorInstance",
		"name": "Illuminate\\Validation\\ValidatesWhenResolvedTrait::getValidatorInstance",
		"doc": "Get the validator instance for the request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidatesWhenResolvedTrait",
		"fromLink": "Illuminate/Validation/ValidatesWhenResolvedTrait.html",
		"link": "Illuminate/Validation/ValidatesWhenResolvedTrait.html#method_passedValidation",
		"name": "Illuminate\\Validation\\ValidatesWhenResolvedTrait::passedValidation",
		"doc": "Handle a passed validation attempt."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidatesWhenResolvedTrait",
		"fromLink": "Illuminate/Validation/ValidatesWhenResolvedTrait.html",
		"link": "Illuminate/Validation/ValidatesWhenResolvedTrait.html#method_failedValidation",
		"name": "Illuminate\\Validation\\ValidatesWhenResolvedTrait::failedValidation",
		"doc": "Handle a failed validation attempt."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidatesWhenResolvedTrait",
		"fromLink": "Illuminate/Validation/ValidatesWhenResolvedTrait.html",
		"link": "Illuminate/Validation/ValidatesWhenResolvedTrait.html#method_passesAuthorization",
		"name": "Illuminate\\Validation\\ValidatesWhenResolvedTrait::passesAuthorization",
		"doc": "Determine if the request passes the authorization check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidatesWhenResolvedTrait",
		"fromLink": "Illuminate/Validation/ValidatesWhenResolvedTrait.html",
		"link": "Illuminate/Validation/ValidatesWhenResolvedTrait.html#method_failedAuthorization",
		"name": "Illuminate\\Validation\\ValidatesWhenResolvedTrait::failedAuthorization",
		"doc": "Handle a failed authorization attempt."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/ValidationData.html",
		"name": "Illuminate\\Validation\\ValidationData",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationData",
		"fromLink": "Illuminate/Validation/ValidationData.html",
		"link": "Illuminate/Validation/ValidationData.html#method_initializeAndGatherData",
		"name": "Illuminate\\Validation\\ValidationData::initializeAndGatherData",
		"doc": "Initialize and gather data for given attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationData",
		"fromLink": "Illuminate/Validation/ValidationData.html",
		"link": "Illuminate/Validation/ValidationData.html#method_initializeAttributeOnData",
		"name": "Illuminate\\Validation\\ValidationData::initializeAttributeOnData",
		"doc": "Gather a copy of the attribute data filled with any missing attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationData",
		"fromLink": "Illuminate/Validation/ValidationData.html",
		"link": "Illuminate/Validation/ValidationData.html#method_extractValuesForWildcards",
		"name": "Illuminate\\Validation\\ValidationData::extractValuesForWildcards",
		"doc": "Get all of the exact attribute values for a given wildcard attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationData",
		"fromLink": "Illuminate/Validation/ValidationData.html",
		"link": "Illuminate/Validation/ValidationData.html#method_extractDataFromPath",
		"name": "Illuminate\\Validation\\ValidationData::extractDataFromPath",
		"doc": "Extract data based on the given dot-notated path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationData",
		"fromLink": "Illuminate/Validation/ValidationData.html",
		"link": "Illuminate/Validation/ValidationData.html#method_getLeadingExplicitAttributePath",
		"name": "Illuminate\\Validation\\ValidationData::getLeadingExplicitAttributePath",
		"doc": "Get the explicit part of the attribute name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/ValidationException.html",
		"name": "Illuminate\\Validation\\ValidationException",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationException",
		"fromLink": "Illuminate/Validation/ValidationException.html",
		"link": "Illuminate/Validation/ValidationException.html#method___construct",
		"name": "Illuminate\\Validation\\ValidationException::__construct",
		"doc": "Create a new exception instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationException",
		"fromLink": "Illuminate/Validation/ValidationException.html",
		"link": "Illuminate/Validation/ValidationException.html#method_withMessages",
		"name": "Illuminate\\Validation\\ValidationException::withMessages",
		"doc": "Create a new validation exception from a plain array of messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationException",
		"fromLink": "Illuminate/Validation/ValidationException.html",
		"link": "Illuminate/Validation/ValidationException.html#method_errors",
		"name": "Illuminate\\Validation\\ValidationException::errors",
		"doc": "Get all of the validation error messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationException",
		"fromLink": "Illuminate/Validation/ValidationException.html",
		"link": "Illuminate/Validation/ValidationException.html#method_status",
		"name": "Illuminate\\Validation\\ValidationException::status",
		"doc": "Set the HTTP status code to be used for the response."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationException",
		"fromLink": "Illuminate/Validation/ValidationException.html",
		"link": "Illuminate/Validation/ValidationException.html#method_errorBag",
		"name": "Illuminate\\Validation\\ValidationException::errorBag",
		"doc": "Set the error bag on the exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationException",
		"fromLink": "Illuminate/Validation/ValidationException.html",
		"link": "Illuminate/Validation/ValidationException.html#method_redirectTo",
		"name": "Illuminate\\Validation\\ValidationException::redirectTo",
		"doc": "Set the URL to redirect to on a validation error."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationException",
		"fromLink": "Illuminate/Validation/ValidationException.html",
		"link": "Illuminate/Validation/ValidationException.html#method_getResponse",
		"name": "Illuminate\\Validation\\ValidationException::getResponse",
		"doc": "Get the underlying response instance."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html",
		"name": "Illuminate\\Validation\\ValidationRuleParser",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method___construct",
		"name": "Illuminate\\Validation\\ValidationRuleParser::__construct",
		"doc": "Create a new validation rule parser."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_explode",
		"name": "Illuminate\\Validation\\ValidationRuleParser::explode",
		"doc": "Parse the human-friendly rules into a full rules array for the validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_explodeRules",
		"name": "Illuminate\\Validation\\ValidationRuleParser::explodeRules",
		"doc": "Explode the rules into an array of explicit rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_explodeExplicitRule",
		"name": "Illuminate\\Validation\\ValidationRuleParser::explodeExplicitRule",
		"doc": "Explode the explicit rule into an array if necessary."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_prepareRule",
		"name": "Illuminate\\Validation\\ValidationRuleParser::prepareRule",
		"doc": "Prepare the given rule for the Validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_explodeWildcardRules",
		"name": "Illuminate\\Validation\\ValidationRuleParser::explodeWildcardRules",
		"doc": "Define a set of rules that apply to each element in an array attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_mergeRules",
		"name": "Illuminate\\Validation\\ValidationRuleParser::mergeRules",
		"doc": "Merge additional rules into a given attribute(s)."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_mergeRulesForAttribute",
		"name": "Illuminate\\Validation\\ValidationRuleParser::mergeRulesForAttribute",
		"doc": "Merge additional rules into a given attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_parse",
		"name": "Illuminate\\Validation\\ValidationRuleParser::parse",
		"doc": "Extract the rule name and parameters from a rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_parseArrayRule",
		"name": "Illuminate\\Validation\\ValidationRuleParser::parseArrayRule",
		"doc": "Parse an array based rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_parseStringRule",
		"name": "Illuminate\\Validation\\ValidationRuleParser::parseStringRule",
		"doc": "Parse a string based rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_parseParameters",
		"name": "Illuminate\\Validation\\ValidationRuleParser::parseParameters",
		"doc": "Parse a parameter list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationRuleParser",
		"fromLink": "Illuminate/Validation/ValidationRuleParser.html",
		"link": "Illuminate/Validation/ValidationRuleParser.html#method_normalizeRule",
		"name": "Illuminate\\Validation\\ValidationRuleParser::normalizeRule",
		"doc": "Normalizes a rule so that we can accept short types."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/ValidationServiceProvider.html",
		"name": "Illuminate\\Validation\\ValidationServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationServiceProvider",
		"fromLink": "Illuminate/Validation/ValidationServiceProvider.html",
		"link": "Illuminate/Validation/ValidationServiceProvider.html#method_register",
		"name": "Illuminate\\Validation\\ValidationServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationServiceProvider",
		"fromLink": "Illuminate/Validation/ValidationServiceProvider.html",
		"link": "Illuminate/Validation/ValidationServiceProvider.html#method_registerValidationFactory",
		"name": "Illuminate\\Validation\\ValidationServiceProvider::registerValidationFactory",
		"doc": "Register the validation factory."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationServiceProvider",
		"fromLink": "Illuminate/Validation/ValidationServiceProvider.html",
		"link": "Illuminate/Validation/ValidationServiceProvider.html#method_registerPresenceVerifier",
		"name": "Illuminate\\Validation\\ValidationServiceProvider::registerPresenceVerifier",
		"doc": "Register the database presence verifier."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\ValidationServiceProvider",
		"fromLink": "Illuminate/Validation/ValidationServiceProvider.html",
		"link": "Illuminate/Validation/ValidationServiceProvider.html#method_provides",
		"name": "Illuminate\\Validation\\ValidationServiceProvider::provides",
		"doc": "Get the services provided by the provider."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\Validation",
		"fromLink": "Illuminate/Validation.html",
		"link": "Illuminate/Validation/Validator.html",
		"name": "Illuminate\\Validation\\Validator",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method___construct",
		"name": "Illuminate\\Validation\\Validator::__construct",
		"doc": "Create a new Validator instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_parseData",
		"name": "Illuminate\\Validation\\Validator::parseData",
		"doc": "Parse the data array, converting dots and asterisks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_replacePlaceholders",
		"name": "Illuminate\\Validation\\Validator::replacePlaceholders",
		"doc": "Replace the placeholders used in data keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_replacePlaceholderInString",
		"name": "Illuminate\\Validation\\Validator::replacePlaceholderInString",
		"doc": "Replace the placeholders in the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_after",
		"name": "Illuminate\\Validation\\Validator::after",
		"doc": "Add an after validation callback."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_passes",
		"name": "Illuminate\\Validation\\Validator::passes",
		"doc": "Determine if the data passes the validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_fails",
		"name": "Illuminate\\Validation\\Validator::fails",
		"doc": "Determine if the data fails the validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_shouldBeExcluded",
		"name": "Illuminate\\Validation\\Validator::shouldBeExcluded",
		"doc": "Determine if the attribute should be excluded."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_removeAttribute",
		"name": "Illuminate\\Validation\\Validator::removeAttribute",
		"doc": "Remove the given attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_validate",
		"name": "Illuminate\\Validation\\Validator::validate",
		"doc": "Run the validator's rules against its data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_validateWithBag",
		"name": "Illuminate\\Validation\\Validator::validateWithBag",
		"doc": "Run the validator's rules against its data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_validated",
		"name": "Illuminate\\Validation\\Validator::validated",
		"doc": "Get the attributes and values that were validated."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_validateAttribute",
		"name": "Illuminate\\Validation\\Validator::validateAttribute",
		"doc": "Validate a given attribute against a rule."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_dependsOnOtherFields",
		"name": "Illuminate\\Validation\\Validator::dependsOnOtherFields",
		"doc": "Determine if the given rule depends on other fields."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getExplicitKeys",
		"name": "Illuminate\\Validation\\Validator::getExplicitKeys",
		"doc": "Get the explicit keys from an attribute flattened with dot notation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getPrimaryAttribute",
		"name": "Illuminate\\Validation\\Validator::getPrimaryAttribute",
		"doc": "Get the primary attribute name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_replaceAsterisksInParameters",
		"name": "Illuminate\\Validation\\Validator::replaceAsterisksInParameters",
		"doc": "Replace each field parameter which has asterisks with the given keys."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_isValidatable",
		"name": "Illuminate\\Validation\\Validator::isValidatable",
		"doc": "Determine if the attribute is validatable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_presentOrRuleIsImplicit",
		"name": "Illuminate\\Validation\\Validator::presentOrRuleIsImplicit",
		"doc": "Determine if the field is present, or the rule implies required."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_isImplicit",
		"name": "Illuminate\\Validation\\Validator::isImplicit",
		"doc": "Determine if a given rule implies the attribute is required."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_passesOptionalCheck",
		"name": "Illuminate\\Validation\\Validator::passesOptionalCheck",
		"doc": "Determine if the attribute passes any optional check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_isNotNullIfMarkedAsNullable",
		"name": "Illuminate\\Validation\\Validator::isNotNullIfMarkedAsNullable",
		"doc": "Determine if the attribute fails the nullable check."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_hasNotFailedPreviousRuleIfPresenceRule",
		"name": "Illuminate\\Validation\\Validator::hasNotFailedPreviousRuleIfPresenceRule",
		"doc": "Determine if it's a necessary presence validation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_validateUsingCustomRule",
		"name": "Illuminate\\Validation\\Validator::validateUsingCustomRule",
		"doc": "Validate an attribute using a custom rule object."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_shouldStopValidating",
		"name": "Illuminate\\Validation\\Validator::shouldStopValidating",
		"doc": "Check if we should stop further validations on a given attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addFailure",
		"name": "Illuminate\\Validation\\Validator::addFailure",
		"doc": "Add a failed rule and error message to the collection."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_excludeAttribute",
		"name": "Illuminate\\Validation\\Validator::excludeAttribute",
		"doc": "Add the given attribute to the list of excluded attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_valid",
		"name": "Illuminate\\Validation\\Validator::valid",
		"doc": "Returns the data which was valid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_invalid",
		"name": "Illuminate\\Validation\\Validator::invalid",
		"doc": "Returns the data which was invalid."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_attributesThatHaveMessages",
		"name": "Illuminate\\Validation\\Validator::attributesThatHaveMessages",
		"doc": "Generate an array of all attributes that have messages."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_failed",
		"name": "Illuminate\\Validation\\Validator::failed",
		"doc": "Get the failed validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_messages",
		"name": "Illuminate\\Validation\\Validator::messages",
		"doc": "Get the message container for the validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_errors",
		"name": "Illuminate\\Validation\\Validator::errors",
		"doc": "An alternative more semantic shortcut to the message container."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getMessageBag",
		"name": "Illuminate\\Validation\\Validator::getMessageBag",
		"doc": "Get the messages for the instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_hasRule",
		"name": "Illuminate\\Validation\\Validator::hasRule",
		"doc": "Determine if the given attribute has a rule in the given set."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getRule",
		"name": "Illuminate\\Validation\\Validator::getRule",
		"doc": "Get a rule and its parameters for a given attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_attributes",
		"name": "Illuminate\\Validation\\Validator::attributes",
		"doc": "Get the data under validation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getData",
		"name": "Illuminate\\Validation\\Validator::getData",
		"doc": "Get the data under validation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setData",
		"name": "Illuminate\\Validation\\Validator::setData",
		"doc": "Set the data under validation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getValue",
		"name": "Illuminate\\Validation\\Validator::getValue",
		"doc": "Get the value of a given attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getRules",
		"name": "Illuminate\\Validation\\Validator::getRules",
		"doc": "Get the validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setRules",
		"name": "Illuminate\\Validation\\Validator::setRules",
		"doc": "Set the validation rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addRules",
		"name": "Illuminate\\Validation\\Validator::addRules",
		"doc": "Parse the given rules and merge them into current rules."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_sometimes",
		"name": "Illuminate\\Validation\\Validator::sometimes",
		"doc": "Add conditions to a given field based on a Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addExtensions",
		"name": "Illuminate\\Validation\\Validator::addExtensions",
		"doc": "Register an array of custom validator extensions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addImplicitExtensions",
		"name": "Illuminate\\Validation\\Validator::addImplicitExtensions",
		"doc": "Register an array of custom implicit validator extensions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addDependentExtensions",
		"name": "Illuminate\\Validation\\Validator::addDependentExtensions",
		"doc": "Register an array of custom dependent validator extensions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addExtension",
		"name": "Illuminate\\Validation\\Validator::addExtension",
		"doc": "Register a custom validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addImplicitExtension",
		"name": "Illuminate\\Validation\\Validator::addImplicitExtension",
		"doc": "Register a custom implicit validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addDependentExtension",
		"name": "Illuminate\\Validation\\Validator::addDependentExtension",
		"doc": "Register a custom dependent validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addReplacers",
		"name": "Illuminate\\Validation\\Validator::addReplacers",
		"doc": "Register an array of custom validator message replacers."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addReplacer",
		"name": "Illuminate\\Validation\\Validator::addReplacer",
		"doc": "Register a custom validator message replacer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setCustomMessages",
		"name": "Illuminate\\Validation\\Validator::setCustomMessages",
		"doc": "Set the custom messages for the validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setAttributeNames",
		"name": "Illuminate\\Validation\\Validator::setAttributeNames",
		"doc": "Set the custom attributes on the validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addCustomAttributes",
		"name": "Illuminate\\Validation\\Validator::addCustomAttributes",
		"doc": "Add custom attributes to the validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setImplicitAttributesFormatter",
		"name": "Illuminate\\Validation\\Validator::setImplicitAttributesFormatter",
		"doc": "Set the callback that used to format an implicit attribute."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setValueNames",
		"name": "Illuminate\\Validation\\Validator::setValueNames",
		"doc": "Set the custom values on the validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_addCustomValues",
		"name": "Illuminate\\Validation\\Validator::addCustomValues",
		"doc": "Add the custom values for the validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setFallbackMessages",
		"name": "Illuminate\\Validation\\Validator::setFallbackMessages",
		"doc": "Set the fallback messages for the validator."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getPresenceVerifier",
		"name": "Illuminate\\Validation\\Validator::getPresenceVerifier",
		"doc": "Get the Presence Verifier implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setPresenceVerifier",
		"name": "Illuminate\\Validation\\Validator::setPresenceVerifier",
		"doc": "Set the Presence Verifier implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_getTranslator",
		"name": "Illuminate\\Validation\\Validator::getTranslator",
		"doc": "Get the Translator implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setTranslator",
		"name": "Illuminate\\Validation\\Validator::setTranslator",
		"doc": "Set the Translator implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_setContainer",
		"name": "Illuminate\\Validation\\Validator::setContainer",
		"doc": "Set the IoC container instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_callExtension",
		"name": "Illuminate\\Validation\\Validator::callExtension",
		"doc": "Call a custom validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method_callClassBasedExtension",
		"name": "Illuminate\\Validation\\Validator::callClassBasedExtension",
		"doc": "Call a class based validator extension."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\Validation\\Validator",
		"fromLink": "Illuminate/Validation/Validator.html",
		"link": "Illuminate/Validation/Validator.html#method___call",
		"name": "Illuminate\\Validation\\Validator::__call",
		"doc": "Handle dynamic calls to class methods."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/AnonymousComponent.html",
		"name": "Illuminate\\View\\AnonymousComponent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\AnonymousComponent",
		"fromLink": "Illuminate/View/AnonymousComponent.html",
		"link": "Illuminate/View/AnonymousComponent.html#method___construct",
		"name": "Illuminate\\View\\AnonymousComponent::__construct",
		"doc": "Create a new anonymous component instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\AnonymousComponent",
		"fromLink": "Illuminate/View/AnonymousComponent.html",
		"link": "Illuminate/View/AnonymousComponent.html#method_render",
		"name": "Illuminate\\View\\AnonymousComponent::render",
		"doc": "Get the view / view contents that represent the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\AnonymousComponent",
		"fromLink": "Illuminate/View/AnonymousComponent.html",
		"link": "Illuminate/View/AnonymousComponent.html#method_data",
		"name": "Illuminate\\View\\AnonymousComponent::data",
		"doc": "Get the data that should be supplied to the view."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/AppendableAttributeValue.html",
		"name": "Illuminate\\View\\AppendableAttributeValue",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\AppendableAttributeValue",
		"fromLink": "Illuminate/View/AppendableAttributeValue.html",
		"link": "Illuminate/View/AppendableAttributeValue.html#method___construct",
		"name": "Illuminate\\View\\AppendableAttributeValue::__construct",
		"doc": "Create a new appendable attribute value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\AppendableAttributeValue",
		"fromLink": "Illuminate/View/AppendableAttributeValue.html",
		"link": "Illuminate/View/AppendableAttributeValue.html#method___toString",
		"name": "Illuminate\\View\\AppendableAttributeValue::__toString",
		"doc": "Get the string value."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Compilers",
		"fromLink": "Illuminate/View/Compilers.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_compile",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::compile",
		"doc": "Compile the view at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_appendFilePath",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::appendFilePath",
		"doc": "Append the file path to the compiled string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_getOpenAndClosingPhpTokens",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::getOpenAndClosingPhpTokens",
		"doc": "Get the open and closing PHP tag tokens from the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_getPath",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::getPath",
		"doc": "Get the path currently being compiled."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_setPath",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::setPath",
		"doc": "Set the path currently being compiled."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_compileString",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::compileString",
		"doc": "Compile the given Blade template contents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_storeUncompiledBlocks",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::storeUncompiledBlocks",
		"doc": "Store the blocks that do not receive compilation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_storeVerbatimBlocks",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::storeVerbatimBlocks",
		"doc": "Store the verbatim blocks and replace them with a temporary placeholder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_storePhpBlocks",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::storePhpBlocks",
		"doc": "Store the PHP blocks and replace them with a temporary placeholder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_storeRawBlock",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::storeRawBlock",
		"doc": "Store a raw block and return a unique raw placeholder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_compileComponentTags",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::compileComponentTags",
		"doc": "Compile the component tags."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_restoreRawContent",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::restoreRawContent",
		"doc": "Replace the raw placeholders with the original code stored in the raw blocks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_getRawPlaceholder",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::getRawPlaceholder",
		"doc": "Get a placeholder to temporary mark the position of raw blocks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_addFooters",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::addFooters",
		"doc": "Add the stored footers onto the given content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_parseToken",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::parseToken",
		"doc": "Parse the tokens from the template."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_compileExtensions",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::compileExtensions",
		"doc": "Execute the user defined extensions."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_compileStatements",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::compileStatements",
		"doc": "Compile Blade statements that start with \"@\"."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_compileStatement",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::compileStatement",
		"doc": "Compile a single Blade @ statement."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_callCustomDirective",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::callCustomDirective",
		"doc": "Call the given directive with the given value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_stripParentheses",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::stripParentheses",
		"doc": "Strip the parentheses from the given expression."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_extend",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::extend",
		"doc": "Register a custom Blade compiler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_getExtensions",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::getExtensions",
		"doc": "Get the extensions used by the compiler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_if",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::if",
		"doc": "Register an \"if\" statement directive."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_check",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::check",
		"doc": "Check the result of a condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_component",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::component",
		"doc": "Register a class-based component alias directive."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_components",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::components",
		"doc": "Register an array of class-based components."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_getClassComponentAliases",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::getClassComponentAliases",
		"doc": "Get the registered class component aliases."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_componentNamespace",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::componentNamespace",
		"doc": "Register a class-based component namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_getClassComponentNamespaces",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::getClassComponentNamespaces",
		"doc": "Get the registered class component namespaces."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_aliasComponent",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::aliasComponent",
		"doc": "Register a component alias directive."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_include",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::include",
		"doc": "Register an include alias directive."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_aliasInclude",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::aliasInclude",
		"doc": "Register an include alias directive."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_directive",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::directive",
		"doc": "Register a handler for custom directives."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_getCustomDirectives",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::getCustomDirectives",
		"doc": "Get the list of custom directives."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_precompiler",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::precompiler",
		"doc": "Register a new precompiler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_setEchoFormat",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::setEchoFormat",
		"doc": "Set the echo format to be used by the compiler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_withDoubleEncoding",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::withDoubleEncoding",
		"doc": "Set the \"echo\" format to double encode entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_withoutDoubleEncoding",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::withoutDoubleEncoding",
		"doc": "Set the \"echo\" format to not double encode entities."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\BladeCompiler",
		"fromLink": "Illuminate/View/Compilers/BladeCompiler.html",
		"link": "Illuminate/View/Compilers/BladeCompiler.html#method_withoutComponentTags",
		"name": "Illuminate\\View\\Compilers\\BladeCompiler::withoutComponentTags",
		"doc": "Indicate that component tags should not be compiled."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Compilers",
		"fromLink": "Illuminate/View/Compilers.html",
		"link": "Illuminate/View/Compilers/Compiler.html",
		"name": "Illuminate\\View\\Compilers\\Compiler",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Compiler",
		"fromLink": "Illuminate/View/Compilers/Compiler.html",
		"link": "Illuminate/View/Compilers/Compiler.html#method___construct",
		"name": "Illuminate\\View\\Compilers\\Compiler::__construct",
		"doc": "Create a new compiler instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Compiler",
		"fromLink": "Illuminate/View/Compilers/Compiler.html",
		"link": "Illuminate/View/Compilers/Compiler.html#method_getCompiledPath",
		"name": "Illuminate\\View\\Compilers\\Compiler::getCompiledPath",
		"doc": "Get the path to the compiled version of a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Compiler",
		"fromLink": "Illuminate/View/Compilers/Compiler.html",
		"link": "Illuminate/View/Compilers/Compiler.html#method_isExpired",
		"name": "Illuminate\\View\\Compilers\\Compiler::isExpired",
		"doc": "Determine if the view at the given path is expired."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Compilers",
		"fromLink": "Illuminate/View/Compilers.html",
		"link": "Illuminate/View/Compilers/CompilerInterface.html",
		"name": "Illuminate\\View\\Compilers\\CompilerInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\CompilerInterface",
		"fromLink": "Illuminate/View/Compilers/CompilerInterface.html",
		"link": "Illuminate/View/Compilers/CompilerInterface.html#method_getCompiledPath",
		"name": "Illuminate\\View\\Compilers\\CompilerInterface::getCompiledPath",
		"doc": "Get the path to the compiled version of a view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\CompilerInterface",
		"fromLink": "Illuminate/View/Compilers/CompilerInterface.html",
		"link": "Illuminate/View/Compilers/CompilerInterface.html#method_isExpired",
		"name": "Illuminate\\View\\Compilers\\CompilerInterface::isExpired",
		"doc": "Determine if the given view is expired."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\CompilerInterface",
		"fromLink": "Illuminate/View/Compilers/CompilerInterface.html",
		"link": "Illuminate/View/Compilers/CompilerInterface.html#method_compile",
		"name": "Illuminate\\View\\Compilers\\CompilerInterface::compile",
		"doc": "Compile the view at the given path."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Compilers",
		"fromLink": "Illuminate/View/Compilers.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"doc": ""
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method___construct",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::__construct",
		"doc": "Create new component tag compiler."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_compile",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::compile",
		"doc": "Compile the component and slot tags within the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_compileTags",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::compileTags",
		"doc": "Compile the tags within the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_compileOpeningTags",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::compileOpeningTags",
		"doc": "Compile the opening tags within the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_compileSelfClosingTags",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::compileSelfClosingTags",
		"doc": "Compile the self-closing tags within the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_componentString",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::componentString",
		"doc": "Compile the Blade component string for the given component and attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_componentClass",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::componentClass",
		"doc": "Get the component class for a given component alias."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_findClassByComponent",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::findClassByComponent",
		"doc": "Find the class for the given component using the registered namespaces."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_guessClassName",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::guessClassName",
		"doc": "Guess the class name for the given component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_formatClassName",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::formatClassName",
		"doc": "Format the class name for the given component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_guessViewName",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::guessViewName",
		"doc": "Guess the view name for the given component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_partitionDataAndAttributes",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::partitionDataAndAttributes",
		"doc": "Partition the data and extra attributes from the given array of attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_compileClosingTags",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::compileClosingTags",
		"doc": "Compile the closing tags within the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_compileSlots",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::compileSlots",
		"doc": "Compile the slot tags within the given string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_getAttributesFromAttributeString",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::getAttributesFromAttributeString",
		"doc": "Get an array of attributes from the given attribute string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_parseAttributeBag",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::parseAttributeBag",
		"doc": "Parse the attribute bag in a given attribute string into it's fully-qualified syntax."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_parseBindAttributes",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::parseBindAttributes",
		"doc": "Parse the \"bind\" attributes in a given attribute string into their fully-qualified syntax."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_compileAttributeEchos",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::compileAttributeEchos",
		"doc": "Compile any Blade echo statements that are present in the attribute string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_escapeSingleQuotesOutsideOfPhpBlocks",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::escapeSingleQuotesOutsideOfPhpBlocks",
		"doc": "Escape the single quotes in the given string that are outside of PHP blocks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_attributesToString",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::attributesToString",
		"doc": "Convert an array of attributes to a string."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\ComponentTagCompiler",
		"fromLink": "Illuminate/View/Compilers/ComponentTagCompiler.html",
		"link": "Illuminate/View/Compilers/ComponentTagCompiler.html#method_stripQuotes",
		"name": "Illuminate\\View\\Compilers\\ComponentTagCompiler::stripQuotes",
		"doc": "Strip any quotes from the given string."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileCan",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileCan",
		"doc": "Compile the can statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileCannot",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileCannot",
		"doc": "Compile the cannot statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileCanany",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileCanany",
		"doc": "Compile the canany statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileElsecan",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileElsecan",
		"doc": "Compile the else-can statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileElsecannot",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileElsecannot",
		"doc": "Compile the else-cannot statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileElsecanany",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileElsecanany",
		"doc": "Compile the else-canany statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileEndcan",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileEndcan",
		"doc": "Compile the end-can statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileEndcannot",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileEndcannot",
		"doc": "Compile the end-cannot statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesAuthorizations.html#method_compileEndcanany",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesAuthorizations::compileEndcanany",
		"doc": "Compile the end-canany statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComments.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComments",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComments",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComments.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComments.html#method_compileComments",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComments::compileComments",
		"doc": "Compile Blade comments into an empty string."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileComponent",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileComponent",
		"doc": "Compile the component statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_newComponentHash",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::newComponentHash",
		"doc": "Get a new component hash for a component name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileClassComponentOpening",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileClassComponentOpening",
		"doc": "Compile a class component opening."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileEndComponent",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileEndComponent",
		"doc": "Compile the end-component statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileEndComponentClass",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileEndComponentClass",
		"doc": "Compile the end-component statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileSlot",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileSlot",
		"doc": "Compile the slot statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileEndSlot",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileEndSlot",
		"doc": "Compile the end-slot statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileComponentFirst",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileComponentFirst",
		"doc": "Compile the component-first statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileEndComponentFirst",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileEndComponentFirst",
		"doc": "Compile the end-component-first statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_compileProps",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::compileProps",
		"doc": "Compile the prop statement into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesComponents.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesComponents.html#method_sanitizeComponentAttribute",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesComponents::sanitizeComponentAttribute",
		"doc": "Sanitize the given component attribute value."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileAuth",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileAuth",
		"doc": "Compile the if-auth statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileElseAuth",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileElseAuth",
		"doc": "Compile the else-auth statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndAuth",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndAuth",
		"doc": "Compile the end-auth statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEnv",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEnv",
		"doc": "Compile the env statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndEnv",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndEnv",
		"doc": "Compile the end-env statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileProduction",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileProduction",
		"doc": "Compile the production statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndProduction",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndProduction",
		"doc": "Compile the end-production statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileGuest",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileGuest",
		"doc": "Compile the if-guest statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileElseGuest",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileElseGuest",
		"doc": "Compile the else-guest statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndGuest",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndGuest",
		"doc": "Compile the end-guest statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileHasSection",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileHasSection",
		"doc": "Compile the has-section statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileSectionMissing",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileSectionMissing",
		"doc": "Compile the section-missing statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileIf",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileIf",
		"doc": "Compile the if statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileUnless",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileUnless",
		"doc": "Compile the unless statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileElseif",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileElseif",
		"doc": "Compile the else-if statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileElse",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileElse",
		"doc": "Compile the else statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndif",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndif",
		"doc": "Compile the end-if statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndunless",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndunless",
		"doc": "Compile the end-unless statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileIsset",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileIsset",
		"doc": "Compile the if-isset statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndIsset",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndIsset",
		"doc": "Compile the end-isset statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileSwitch",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileSwitch",
		"doc": "Compile the switch statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileCase",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileCase",
		"doc": "Compile the case statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileDefault",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileDefault",
		"doc": "Compile the default statements in switch case into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndSwitch",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndSwitch",
		"doc": "Compile the end switch statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileOnce",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileOnce",
		"doc": "Compile an once block into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesConditionals.html#method_compileEndOnce",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesConditionals::compileEndOnce",
		"doc": "Compile an end-once block into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesEchos.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesEchos.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesEchos.html#method_compileEchos",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos::compileEchos",
		"doc": "Compile Blade echos into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesEchos.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesEchos.html#method_getEchoMethods",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos::getEchoMethods",
		"doc": "Get the echo methods in the proper order for compilation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesEchos.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesEchos.html#method_compileRawEchos",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos::compileRawEchos",
		"doc": "Compile the \"raw\" echo statements."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesEchos.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesEchos.html#method_compileRegularEchos",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos::compileRegularEchos",
		"doc": "Compile the \"regular\" echo statements."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesEchos.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesEchos.html#method_compileEscapedEchos",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesEchos::compileEscapedEchos",
		"doc": "Compile the escaped echo statements."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesErrors.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesErrors",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesErrors",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesErrors.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesErrors.html#method_compileError",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesErrors::compileError",
		"doc": "Compile the error statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesErrors",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesErrors.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesErrors.html#method_compileEnderror",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesErrors::compileEnderror",
		"doc": "Compile the enderror statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html#method_compileCsrf",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers::compileCsrf",
		"doc": "Compile the CSRF statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html#method_compileDd",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers::compileDd",
		"doc": "Compile the \"dd\" statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html#method_compileDump",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers::compileDump",
		"doc": "Compile the \"dump\" statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesHelpers.html#method_compileMethod",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesHelpers::compileMethod",
		"doc": "Compile the method statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html#method_compileEach",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes::compileEach",
		"doc": "Compile the each statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html#method_compileInclude",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes::compileInclude",
		"doc": "Compile the include statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html#method_compileIncludeIf",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes::compileIncludeIf",
		"doc": "Compile the include-if statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html#method_compileIncludeWhen",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes::compileIncludeWhen",
		"doc": "Compile the include-when statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html#method_compileIncludeUnless",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes::compileIncludeUnless",
		"doc": "Compile the include-unless statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesIncludes.html#method_compileIncludeFirst",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesIncludes::compileIncludeFirst",
		"doc": "Compile the include-first statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesInjections.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesInjections",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesInjections",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesInjections.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesInjections.html#method_compileInject",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesInjections::compileInject",
		"doc": "Compile the inject statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesJson.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesJson",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesJson",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesJson.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesJson.html#method_compileJson",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesJson::compileJson",
		"doc": "Compile the JSON statement into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileExtends",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileExtends",
		"doc": "Compile the extends statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileExtendsFirst",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileExtendsFirst",
		"doc": "Compile the extends-first statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileSection",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileSection",
		"doc": "Compile the section statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileParent",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileParent",
		"doc": "Replace the @parent directive to a placeholder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileYield",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileYield",
		"doc": "Compile the yield statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileShow",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileShow",
		"doc": "Compile the show statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileAppend",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileAppend",
		"doc": "Compile the append statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileOverwrite",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileOverwrite",
		"doc": "Compile the overwrite statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileStop",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileStop",
		"doc": "Compile the stop statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLayouts.html#method_compileEndsection",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLayouts::compileEndsection",
		"doc": "Compile the end-section statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileForelse",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileForelse",
		"doc": "Compile the for-else statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileEmpty",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileEmpty",
		"doc": "Compile the for-else-empty and empty statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileEndforelse",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileEndforelse",
		"doc": "Compile the end-for-else statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileEndEmpty",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileEndEmpty",
		"doc": "Compile the end-empty statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileFor",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileFor",
		"doc": "Compile the for statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileForeach",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileForeach",
		"doc": "Compile the for-each statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileBreak",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileBreak",
		"doc": "Compile the break statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileContinue",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileContinue",
		"doc": "Compile the continue statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileEndfor",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileEndfor",
		"doc": "Compile the end-for statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileEndforeach",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileEndforeach",
		"doc": "Compile the end-for-each statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileWhile",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileWhile",
		"doc": "Compile the while statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesLoops.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesLoops.html#method_compileEndwhile",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesLoops::compileEndwhile",
		"doc": "Compile the end-while statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesRawPhp.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesRawPhp",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesRawPhp",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesRawPhp.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesRawPhp.html#method_compilePhp",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesRawPhp::compilePhp",
		"doc": "Compile the raw PHP statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesRawPhp",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesRawPhp.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesRawPhp.html#method_compileUnset",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesRawPhp::compileUnset",
		"doc": "Compile the unset statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesStacks.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesStacks.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesStacks.html#method_compileStack",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks::compileStack",
		"doc": "Compile the stack statements into the content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesStacks.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesStacks.html#method_compilePush",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks::compilePush",
		"doc": "Compile the push statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesStacks.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesStacks.html#method_compileEndpush",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks::compileEndpush",
		"doc": "Compile the end-push statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesStacks.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesStacks.html#method_compilePrepend",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks::compilePrepend",
		"doc": "Compile the prepend statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesStacks.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesStacks.html#method_compileEndprepend",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesStacks::compileEndprepend",
		"doc": "Compile the end-prepend statements into valid PHP."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Compilers\\Concerns",
		"fromLink": "Illuminate/View/Compilers/Concerns.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesTranslations.html",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesTranslations",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesTranslations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesTranslations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesTranslations.html#method_compileLang",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesTranslations::compileLang",
		"doc": "Compile the lang statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesTranslations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesTranslations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesTranslations.html#method_compileEndlang",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesTranslations::compileEndlang",
		"doc": "Compile the end-lang statements into valid PHP."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Compilers\\Concerns\\CompilesTranslations",
		"fromLink": "Illuminate/View/Compilers/Concerns/CompilesTranslations.html",
		"link": "Illuminate/View/Compilers/Concerns/CompilesTranslations.html#method_compileChoice",
		"name": "Illuminate\\View\\Compilers\\Concerns\\CompilesTranslations::compileChoice",
		"doc": "Compile the choice statements into valid PHP."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/Component.html",
		"name": "Illuminate\\View\\Component",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_render",
		"name": "Illuminate\\View\\Component::render",
		"doc": "Get the view / view contents that represent the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_resolveView",
		"name": "Illuminate\\View\\Component::resolveView",
		"doc": "Resolve the Blade view or view file that should be used when rendering the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_createBladeViewFromString",
		"name": "Illuminate\\View\\Component::createBladeViewFromString",
		"doc": "Create a Blade view with the raw component string content."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_data",
		"name": "Illuminate\\View\\Component::data",
		"doc": "Get the data that should be supplied to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_extractPublicProperties",
		"name": "Illuminate\\View\\Component::extractPublicProperties",
		"doc": "Extract the public properties for the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_extractPublicMethods",
		"name": "Illuminate\\View\\Component::extractPublicMethods",
		"doc": "Extract the public methods for the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_createVariableFromMethod",
		"name": "Illuminate\\View\\Component::createVariableFromMethod",
		"doc": "Create a callable variable from the given method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_createInvokableVariable",
		"name": "Illuminate\\View\\Component::createInvokableVariable",
		"doc": "Create an invokable, toStringable variable for the given component method."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_shouldIgnore",
		"name": "Illuminate\\View\\Component::shouldIgnore",
		"doc": "Determine if the given property / method should be ignored."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_ignoredMethods",
		"name": "Illuminate\\View\\Component::ignoredMethods",
		"doc": "Get the methods that should be ignored."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_withName",
		"name": "Illuminate\\View\\Component::withName",
		"doc": "Set the component alias name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_withAttributes",
		"name": "Illuminate\\View\\Component::withAttributes",
		"doc": "Set the extra attributes that the component should make available."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Component",
		"fromLink": "Illuminate/View/Component.html",
		"link": "Illuminate/View/Component.html#method_shouldRender",
		"name": "Illuminate\\View\\Component::shouldRender",
		"doc": "Determine if the component should be rendered."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/ComponentAttributeBag.html",
		"name": "Illuminate\\View\\ComponentAttributeBag",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method___construct",
		"name": "Illuminate\\View\\ComponentAttributeBag::__construct",
		"doc": "Create a new component attribute bag instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_first",
		"name": "Illuminate\\View\\ComponentAttributeBag::first",
		"doc": "Get the first attribute's value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_get",
		"name": "Illuminate\\View\\ComponentAttributeBag::get",
		"doc": "Get a given attribute from the attribute array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_only",
		"name": "Illuminate\\View\\ComponentAttributeBag::only",
		"doc": "Only include the given attribute from the attribute array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_except",
		"name": "Illuminate\\View\\ComponentAttributeBag::except",
		"doc": "Exclude the given attribute from the attribute array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_filter",
		"name": "Illuminate\\View\\ComponentAttributeBag::filter",
		"doc": "Filter the attributes, returning a bag of attributes that pass the filter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_whereStartsWith",
		"name": "Illuminate\\View\\ComponentAttributeBag::whereStartsWith",
		"doc": "Return a bag of attributes that have keys starting with the given value / pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_whereDoesntStartWith",
		"name": "Illuminate\\View\\ComponentAttributeBag::whereDoesntStartWith",
		"doc": "Return a bag of attributes with keys that do not start with the given value / pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_thatStartWith",
		"name": "Illuminate\\View\\ComponentAttributeBag::thatStartWith",
		"doc": "Return a bag of attributes that have keys starting with the given value / pattern."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_exceptProps",
		"name": "Illuminate\\View\\ComponentAttributeBag::exceptProps",
		"doc": "Exclude the given attribute from the attribute array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_merge",
		"name": "Illuminate\\View\\ComponentAttributeBag::merge",
		"doc": "Merge additional attributes / values into the attribute bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_shouldEscapeAttributeValue",
		"name": "Illuminate\\View\\ComponentAttributeBag::shouldEscapeAttributeValue",
		"doc": "Determine if the specific attribute value should be escaped."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_prepends",
		"name": "Illuminate\\View\\ComponentAttributeBag::prepends",
		"doc": "Create a new appendable attribute value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_resolveAppendableAttributeDefault",
		"name": "Illuminate\\View\\ComponentAttributeBag::resolveAppendableAttributeDefault",
		"doc": "Resolve an appendable attribute value default value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_getAttributes",
		"name": "Illuminate\\View\\ComponentAttributeBag::getAttributes",
		"doc": "Get all of the raw attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_setAttributes",
		"name": "Illuminate\\View\\ComponentAttributeBag::setAttributes",
		"doc": "Set the underlying attributes."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_toHtml",
		"name": "Illuminate\\View\\ComponentAttributeBag::toHtml",
		"doc": "Get content as a string of HTML."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method___invoke",
		"name": "Illuminate\\View\\ComponentAttributeBag::__invoke",
		"doc": "Merge additional attributes / values into the attribute bag."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_offsetExists",
		"name": "Illuminate\\View\\ComponentAttributeBag::offsetExists",
		"doc": "Determine if the given offset exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_offsetGet",
		"name": "Illuminate\\View\\ComponentAttributeBag::offsetGet",
		"doc": "Get the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_offsetSet",
		"name": "Illuminate\\View\\ComponentAttributeBag::offsetSet",
		"doc": "Set the value at a given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_offsetUnset",
		"name": "Illuminate\\View\\ComponentAttributeBag::offsetUnset",
		"doc": "Remove the value at the given offset."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method_getIterator",
		"name": "Illuminate\\View\\ComponentAttributeBag::getIterator",
		"doc": "Get an iterator for the items."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ComponentAttributeBag",
		"fromLink": "Illuminate/View/ComponentAttributeBag.html",
		"link": "Illuminate/View/ComponentAttributeBag.html#method___toString",
		"name": "Illuminate\\View\\ComponentAttributeBag::__toString",
		"doc": "Implode the attributes into a single HTML ready string."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Concerns",
		"fromLink": "Illuminate/View/Concerns.html",
		"link": "Illuminate/View/Concerns/ManagesComponents.html",
		"name": "Illuminate\\View\\Concerns\\ManagesComponents",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesComponents",
		"fromLink": "Illuminate/View/Concerns/ManagesComponents.html",
		"link": "Illuminate/View/Concerns/ManagesComponents.html#method_startComponent",
		"name": "Illuminate\\View\\Concerns\\ManagesComponents::startComponent",
		"doc": "Start a component rendering process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesComponents",
		"fromLink": "Illuminate/View/Concerns/ManagesComponents.html",
		"link": "Illuminate/View/Concerns/ManagesComponents.html#method_startComponentFirst",
		"name": "Illuminate\\View\\Concerns\\ManagesComponents::startComponentFirst",
		"doc": "Get the first view that actually exists from the given list, and start a component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesComponents",
		"fromLink": "Illuminate/View/Concerns/ManagesComponents.html",
		"link": "Illuminate/View/Concerns/ManagesComponents.html#method_renderComponent",
		"name": "Illuminate\\View\\Concerns\\ManagesComponents::renderComponent",
		"doc": "Render the current component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesComponents",
		"fromLink": "Illuminate/View/Concerns/ManagesComponents.html",
		"link": "Illuminate/View/Concerns/ManagesComponents.html#method_componentData",
		"name": "Illuminate\\View\\Concerns\\ManagesComponents::componentData",
		"doc": "Get the data for the given component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesComponents",
		"fromLink": "Illuminate/View/Concerns/ManagesComponents.html",
		"link": "Illuminate/View/Concerns/ManagesComponents.html#method_slot",
		"name": "Illuminate\\View\\Concerns\\ManagesComponents::slot",
		"doc": "Start the slot rendering process."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesComponents",
		"fromLink": "Illuminate/View/Concerns/ManagesComponents.html",
		"link": "Illuminate/View/Concerns/ManagesComponents.html#method_endSlot",
		"name": "Illuminate\\View\\Concerns\\ManagesComponents::endSlot",
		"doc": "Save the slot content for rendering."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesComponents",
		"fromLink": "Illuminate/View/Concerns/ManagesComponents.html",
		"link": "Illuminate/View/Concerns/ManagesComponents.html#method_currentComponent",
		"name": "Illuminate\\View\\Concerns\\ManagesComponents::currentComponent",
		"doc": "Get the index for the current component."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Concerns",
		"fromLink": "Illuminate/View/Concerns.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_creator",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::creator",
		"doc": "Register a view creator event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_composers",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::composers",
		"doc": "Register multiple view composers via an array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_composer",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::composer",
		"doc": "Register a view composer event."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_addViewEvent",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::addViewEvent",
		"doc": "Add an event for a given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_addClassEvent",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::addClassEvent",
		"doc": "Register a class based view composer."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_buildClassEventCallback",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::buildClassEventCallback",
		"doc": "Build a class based container callback Closure."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_parseClassEvent",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::parseClassEvent",
		"doc": "Parse a class based composer name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_classEventMethodForPrefix",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::classEventMethodForPrefix",
		"doc": "Determine the class event method based on the given prefix."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_addEventListener",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::addEventListener",
		"doc": "Add a listener to the event dispatcher."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_callComposer",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::callComposer",
		"doc": "Call the composer for a given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesEvents",
		"fromLink": "Illuminate/View/Concerns/ManagesEvents.html",
		"link": "Illuminate/View/Concerns/ManagesEvents.html#method_callCreator",
		"name": "Illuminate\\View\\Concerns\\ManagesEvents::callCreator",
		"doc": "Call the creator for a given view."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Concerns",
		"fromLink": "Illuminate/View/Concerns.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_startSection",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::startSection",
		"doc": "Start injecting content into a section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_inject",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::inject",
		"doc": "Inject inline content into a section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_yieldSection",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::yieldSection",
		"doc": "Stop injecting content into a section and return its contents."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_stopSection",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::stopSection",
		"doc": "Stop injecting content into a section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_appendSection",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::appendSection",
		"doc": "Stop injecting content into a section and append it."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_extendSection",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::extendSection",
		"doc": "Append content to a given section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_yieldContent",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::yieldContent",
		"doc": "Get the string contents of a section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_parentPlaceholder",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::parentPlaceholder",
		"doc": "Get the parent placeholder for the current request."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_hasSection",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::hasSection",
		"doc": "Check if section exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_sectionMissing",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::sectionMissing",
		"doc": "Check if section does not exist."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_getSection",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::getSection",
		"doc": "Get the contents of a section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_getSections",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::getSections",
		"doc": "Get the entire array of sections."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLayouts",
		"fromLink": "Illuminate/View/Concerns/ManagesLayouts.html",
		"link": "Illuminate/View/Concerns/ManagesLayouts.html#method_flushSections",
		"name": "Illuminate\\View\\Concerns\\ManagesLayouts::flushSections",
		"doc": "Flush all of the sections."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Concerns",
		"fromLink": "Illuminate/View/Concerns.html",
		"link": "Illuminate/View/Concerns/ManagesLoops.html",
		"name": "Illuminate\\View\\Concerns\\ManagesLoops",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLoops",
		"fromLink": "Illuminate/View/Concerns/ManagesLoops.html",
		"link": "Illuminate/View/Concerns/ManagesLoops.html#method_addLoop",
		"name": "Illuminate\\View\\Concerns\\ManagesLoops::addLoop",
		"doc": "Add new loop to the stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLoops",
		"fromLink": "Illuminate/View/Concerns/ManagesLoops.html",
		"link": "Illuminate/View/Concerns/ManagesLoops.html#method_incrementLoopIndices",
		"name": "Illuminate\\View\\Concerns\\ManagesLoops::incrementLoopIndices",
		"doc": "Increment the top loop's indices."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLoops",
		"fromLink": "Illuminate/View/Concerns/ManagesLoops.html",
		"link": "Illuminate/View/Concerns/ManagesLoops.html#method_popLoop",
		"name": "Illuminate\\View\\Concerns\\ManagesLoops::popLoop",
		"doc": "Pop a loop from the top of the loop stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLoops",
		"fromLink": "Illuminate/View/Concerns/ManagesLoops.html",
		"link": "Illuminate/View/Concerns/ManagesLoops.html#method_getLastLoop",
		"name": "Illuminate\\View\\Concerns\\ManagesLoops::getLastLoop",
		"doc": "Get an instance of the last loop in the stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesLoops",
		"fromLink": "Illuminate/View/Concerns/ManagesLoops.html",
		"link": "Illuminate/View/Concerns/ManagesLoops.html#method_getLoopStack",
		"name": "Illuminate\\View\\Concerns\\ManagesLoops::getLoopStack",
		"doc": "Get the entire loop stack."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Concerns",
		"fromLink": "Illuminate/View/Concerns.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesStacks",
		"fromLink": "Illuminate/View/Concerns/ManagesStacks.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html#method_startPush",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks::startPush",
		"doc": "Start injecting content into a push section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesStacks",
		"fromLink": "Illuminate/View/Concerns/ManagesStacks.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html#method_stopPush",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks::stopPush",
		"doc": "Stop injecting content into a push section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesStacks",
		"fromLink": "Illuminate/View/Concerns/ManagesStacks.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html#method_extendPush",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks::extendPush",
		"doc": "Append content to a given push section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesStacks",
		"fromLink": "Illuminate/View/Concerns/ManagesStacks.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html#method_startPrepend",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks::startPrepend",
		"doc": "Start prepending content into a push section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesStacks",
		"fromLink": "Illuminate/View/Concerns/ManagesStacks.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html#method_stopPrepend",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks::stopPrepend",
		"doc": "Stop prepending content into a push section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesStacks",
		"fromLink": "Illuminate/View/Concerns/ManagesStacks.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html#method_extendPrepend",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks::extendPrepend",
		"doc": "Prepend content to a given stack."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesStacks",
		"fromLink": "Illuminate/View/Concerns/ManagesStacks.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html#method_yieldPushContent",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks::yieldPushContent",
		"doc": "Get the string contents of a push section."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesStacks",
		"fromLink": "Illuminate/View/Concerns/ManagesStacks.html",
		"link": "Illuminate/View/Concerns/ManagesStacks.html#method_flushStacks",
		"name": "Illuminate\\View\\Concerns\\ManagesStacks::flushStacks",
		"doc": "Flush all of the stacks."
	},

	{
		"type": "Trait",
		"fromName": "Illuminate\\View\\Concerns",
		"fromLink": "Illuminate/View/Concerns.html",
		"link": "Illuminate/View/Concerns/ManagesTranslations.html",
		"name": "Illuminate\\View\\Concerns\\ManagesTranslations",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesTranslations",
		"fromLink": "Illuminate/View/Concerns/ManagesTranslations.html",
		"link": "Illuminate/View/Concerns/ManagesTranslations.html#method_startTranslation",
		"name": "Illuminate\\View\\Concerns\\ManagesTranslations::startTranslation",
		"doc": "Start a translation block."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Concerns\\ManagesTranslations",
		"fromLink": "Illuminate/View/Concerns/ManagesTranslations.html",
		"link": "Illuminate/View/Concerns/ManagesTranslations.html#method_renderTranslation",
		"name": "Illuminate\\View\\Concerns\\ManagesTranslations::renderTranslation",
		"doc": "Render the current translation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/DynamicComponent.html",
		"name": "Illuminate\\View\\DynamicComponent",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\DynamicComponent",
		"fromLink": "Illuminate/View/DynamicComponent.html",
		"link": "Illuminate/View/DynamicComponent.html#method___construct",
		"name": "Illuminate\\View\\DynamicComponent::__construct",
		"doc": "Create a new component instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\DynamicComponent",
		"fromLink": "Illuminate/View/DynamicComponent.html",
		"link": "Illuminate/View/DynamicComponent.html#method_render",
		"name": "Illuminate\\View\\DynamicComponent::render",
		"doc": "Get the view / contents that represent the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\DynamicComponent",
		"fromLink": "Illuminate/View/DynamicComponent.html",
		"link": "Illuminate/View/DynamicComponent.html#method_compileProps",
		"name": "Illuminate\\View\\DynamicComponent::compileProps",
		"doc": "Compile the @props directive for the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\DynamicComponent",
		"fromLink": "Illuminate/View/DynamicComponent.html",
		"link": "Illuminate/View/DynamicComponent.html#method_compileBindings",
		"name": "Illuminate\\View\\DynamicComponent::compileBindings",
		"doc": "Compile the bindings for the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\DynamicComponent",
		"fromLink": "Illuminate/View/DynamicComponent.html",
		"link": "Illuminate/View/DynamicComponent.html#method_compileSlots",
		"name": "Illuminate\\View\\DynamicComponent::compileSlots",
		"doc": "Compile the slots for the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\DynamicComponent",
		"fromLink": "Illuminate/View/DynamicComponent.html",
		"link": "Illuminate/View/DynamicComponent.html#method_classForComponent",
		"name": "Illuminate\\View\\DynamicComponent::classForComponent",
		"doc": "Get the class for the current component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\DynamicComponent",
		"fromLink": "Illuminate/View/DynamicComponent.html",
		"link": "Illuminate/View/DynamicComponent.html#method_bindings",
		"name": "Illuminate\\View\\DynamicComponent::bindings",
		"doc": "Get the names of the variables that should be bound to the component."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\DynamicComponent",
		"fromLink": "Illuminate/View/DynamicComponent.html",
		"link": "Illuminate/View/DynamicComponent.html#method_compiler",
		"name": "Illuminate\\View\\DynamicComponent::compiler",
		"doc": "Get an instance of the Blade tag compiler."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Engines",
		"fromLink": "Illuminate/View/Engines.html",
		"link": "Illuminate/View/Engines/CompilerEngine.html",
		"name": "Illuminate\\View\\Engines\\CompilerEngine",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\CompilerEngine",
		"fromLink": "Illuminate/View/Engines/CompilerEngine.html",
		"link": "Illuminate/View/Engines/CompilerEngine.html#method___construct",
		"name": "Illuminate\\View\\Engines\\CompilerEngine::__construct",
		"doc": "Create a new compiler engine instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\CompilerEngine",
		"fromLink": "Illuminate/View/Engines/CompilerEngine.html",
		"link": "Illuminate/View/Engines/CompilerEngine.html#method_get",
		"name": "Illuminate\\View\\Engines\\CompilerEngine::get",
		"doc": "Get the evaluated contents of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\CompilerEngine",
		"fromLink": "Illuminate/View/Engines/CompilerEngine.html",
		"link": "Illuminate/View/Engines/CompilerEngine.html#method_handleViewException",
		"name": "Illuminate\\View\\Engines\\CompilerEngine::handleViewException",
		"doc": "Handle a view exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\CompilerEngine",
		"fromLink": "Illuminate/View/Engines/CompilerEngine.html",
		"link": "Illuminate/View/Engines/CompilerEngine.html#method_getMessage",
		"name": "Illuminate\\View\\Engines\\CompilerEngine::getMessage",
		"doc": "Get the exception message for an exception."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\CompilerEngine",
		"fromLink": "Illuminate/View/Engines/CompilerEngine.html",
		"link": "Illuminate/View/Engines/CompilerEngine.html#method_getCompiler",
		"name": "Illuminate\\View\\Engines\\CompilerEngine::getCompiler",
		"doc": "Get the compiler implementation."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Engines",
		"fromLink": "Illuminate/View/Engines.html",
		"link": "Illuminate/View/Engines/Engine.html",
		"name": "Illuminate\\View\\Engines\\Engine",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\Engine",
		"fromLink": "Illuminate/View/Engines/Engine.html",
		"link": "Illuminate/View/Engines/Engine.html#method_getLastRendered",
		"name": "Illuminate\\View\\Engines\\Engine::getLastRendered",
		"doc": "Get the last view that was rendered."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Engines",
		"fromLink": "Illuminate/View/Engines.html",
		"link": "Illuminate/View/Engines/EngineResolver.html",
		"name": "Illuminate\\View\\Engines\\EngineResolver",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\EngineResolver",
		"fromLink": "Illuminate/View/Engines/EngineResolver.html",
		"link": "Illuminate/View/Engines/EngineResolver.html#method_register",
		"name": "Illuminate\\View\\Engines\\EngineResolver::register",
		"doc": "Register a new engine resolver."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\EngineResolver",
		"fromLink": "Illuminate/View/Engines/EngineResolver.html",
		"link": "Illuminate/View/Engines/EngineResolver.html#method_resolve",
		"name": "Illuminate\\View\\Engines\\EngineResolver::resolve",
		"doc": "Resolve an engine instance by name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Engines",
		"fromLink": "Illuminate/View/Engines.html",
		"link": "Illuminate/View/Engines/FileEngine.html",
		"name": "Illuminate\\View\\Engines\\FileEngine",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\FileEngine",
		"fromLink": "Illuminate/View/Engines/FileEngine.html",
		"link": "Illuminate/View/Engines/FileEngine.html#method___construct",
		"name": "Illuminate\\View\\Engines\\FileEngine::__construct",
		"doc": "Create a new file engine instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\FileEngine",
		"fromLink": "Illuminate/View/Engines/FileEngine.html",
		"link": "Illuminate/View/Engines/FileEngine.html#method_get",
		"name": "Illuminate\\View\\Engines\\FileEngine::get",
		"doc": "Get the evaluated contents of the view."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Engines",
		"fromLink": "Illuminate/View/Engines.html",
		"link": "Illuminate/View/Engines/PhpEngine.html",
		"name": "Illuminate\\View\\Engines\\PhpEngine",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\PhpEngine",
		"fromLink": "Illuminate/View/Engines/PhpEngine.html",
		"link": "Illuminate/View/Engines/PhpEngine.html#method___construct",
		"name": "Illuminate\\View\\Engines\\PhpEngine::__construct",
		"doc": "Create a new file engine instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\PhpEngine",
		"fromLink": "Illuminate/View/Engines/PhpEngine.html",
		"link": "Illuminate/View/Engines/PhpEngine.html#method_get",
		"name": "Illuminate\\View\\Engines\\PhpEngine::get",
		"doc": "Get the evaluated contents of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\PhpEngine",
		"fromLink": "Illuminate/View/Engines/PhpEngine.html",
		"link": "Illuminate/View/Engines/PhpEngine.html#method_evaluatePath",
		"name": "Illuminate\\View\\Engines\\PhpEngine::evaluatePath",
		"doc": "Get the evaluated contents of the view at the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Engines\\PhpEngine",
		"fromLink": "Illuminate/View/Engines/PhpEngine.html",
		"link": "Illuminate/View/Engines/PhpEngine.html#method_handleViewException",
		"name": "Illuminate\\View\\Engines\\PhpEngine::handleViewException",
		"doc": "Handle a view exception."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/Factory.html",
		"name": "Illuminate\\View\\Factory",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method___construct",
		"name": "Illuminate\\View\\Factory::__construct",
		"doc": "Create a new view factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_file",
		"name": "Illuminate\\View\\Factory::file",
		"doc": "Get the evaluated view contents for the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_make",
		"name": "Illuminate\\View\\Factory::make",
		"doc": "Get the evaluated view contents for the given view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_first",
		"name": "Illuminate\\View\\Factory::first",
		"doc": "Get the first view that actually exists from the given list."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_renderWhen",
		"name": "Illuminate\\View\\Factory::renderWhen",
		"doc": "Get the rendered content of the view based on a given condition."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_renderEach",
		"name": "Illuminate\\View\\Factory::renderEach",
		"doc": "Get the rendered contents of a partial from a loop."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_normalizeName",
		"name": "Illuminate\\View\\Factory::normalizeName",
		"doc": "Normalize a view name."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_parseData",
		"name": "Illuminate\\View\\Factory::parseData",
		"doc": "Parse the given data into a raw array."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_viewInstance",
		"name": "Illuminate\\View\\Factory::viewInstance",
		"doc": "Create a new view instance from the given arguments."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_exists",
		"name": "Illuminate\\View\\Factory::exists",
		"doc": "Determine if a given view exists."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_getEngineFromPath",
		"name": "Illuminate\\View\\Factory::getEngineFromPath",
		"doc": "Get the appropriate view engine for the given path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_getExtension",
		"name": "Illuminate\\View\\Factory::getExtension",
		"doc": "Get the extension used by the view file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_share",
		"name": "Illuminate\\View\\Factory::share",
		"doc": "Add a piece of shared data to the environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_incrementRender",
		"name": "Illuminate\\View\\Factory::incrementRender",
		"doc": "Increment the rendering counter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_decrementRender",
		"name": "Illuminate\\View\\Factory::decrementRender",
		"doc": "Decrement the rendering counter."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_doneRendering",
		"name": "Illuminate\\View\\Factory::doneRendering",
		"doc": "Check if there are no active render operations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_hasRenderedOnce",
		"name": "Illuminate\\View\\Factory::hasRenderedOnce",
		"doc": "Determine if the given once token has been rendered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_markAsRenderedOnce",
		"name": "Illuminate\\View\\Factory::markAsRenderedOnce",
		"doc": "Mark the given once token as having been rendered."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_addLocation",
		"name": "Illuminate\\View\\Factory::addLocation",
		"doc": "Add a location to the array of view locations."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_addNamespace",
		"name": "Illuminate\\View\\Factory::addNamespace",
		"doc": "Add a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_prependNamespace",
		"name": "Illuminate\\View\\Factory::prependNamespace",
		"doc": "Prepend a new namespace to the loader."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_replaceNamespace",
		"name": "Illuminate\\View\\Factory::replaceNamespace",
		"doc": "Replace the namespace hints for the given namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_addExtension",
		"name": "Illuminate\\View\\Factory::addExtension",
		"doc": "Register a valid view extension and its engine."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_flushState",
		"name": "Illuminate\\View\\Factory::flushState",
		"doc": "Flush all of the factory state like sections and stacks."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_flushStateIfDoneRendering",
		"name": "Illuminate\\View\\Factory::flushStateIfDoneRendering",
		"doc": "Flush all of the section contents if done rendering."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_getExtensions",
		"name": "Illuminate\\View\\Factory::getExtensions",
		"doc": "Get the extension to engine bindings."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_getEngineResolver",
		"name": "Illuminate\\View\\Factory::getEngineResolver",
		"doc": "Get the engine resolver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_getFinder",
		"name": "Illuminate\\View\\Factory::getFinder",
		"doc": "Get the view finder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_setFinder",
		"name": "Illuminate\\View\\Factory::setFinder",
		"doc": "Set the view finder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_flushFinderCache",
		"name": "Illuminate\\View\\Factory::flushFinderCache",
		"doc": "Flush the cache of views located by the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_getDispatcher",
		"name": "Illuminate\\View\\Factory::getDispatcher",
		"doc": "Get the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_setDispatcher",
		"name": "Illuminate\\View\\Factory::setDispatcher",
		"doc": "Set the event dispatcher instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_getContainer",
		"name": "Illuminate\\View\\Factory::getContainer",
		"doc": "Get the IoC container instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_setContainer",
		"name": "Illuminate\\View\\Factory::setContainer",
		"doc": "Set the IoC container instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_shared",
		"name": "Illuminate\\View\\Factory::shared",
		"doc": "Get an item from the shared data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Factory",
		"fromLink": "Illuminate/View/Factory.html",
		"link": "Illuminate/View/Factory.html#method_getShared",
		"name": "Illuminate\\View\\Factory::getShared",
		"doc": "Get all of the shared data for the environment."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/FileViewFinder.html",
		"name": "Illuminate\\View\\FileViewFinder",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method___construct",
		"name": "Illuminate\\View\\FileViewFinder::__construct",
		"doc": "Create a new file view loader instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_find",
		"name": "Illuminate\\View\\FileViewFinder::find",
		"doc": "Get the fully qualified location of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_findNamespacedView",
		"name": "Illuminate\\View\\FileViewFinder::findNamespacedView",
		"doc": "Get the path to a template with a named path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_parseNamespaceSegments",
		"name": "Illuminate\\View\\FileViewFinder::parseNamespaceSegments",
		"doc": "Get the segments of a template with a named path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_findInPaths",
		"name": "Illuminate\\View\\FileViewFinder::findInPaths",
		"doc": "Find the given view in the list of paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_getPossibleViewFiles",
		"name": "Illuminate\\View\\FileViewFinder::getPossibleViewFiles",
		"doc": "Get an array of possible view files."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_addLocation",
		"name": "Illuminate\\View\\FileViewFinder::addLocation",
		"doc": "Add a location to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_prependLocation",
		"name": "Illuminate\\View\\FileViewFinder::prependLocation",
		"doc": "Prepend a location to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_resolvePath",
		"name": "Illuminate\\View\\FileViewFinder::resolvePath",
		"doc": "Resolve the path."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_addNamespace",
		"name": "Illuminate\\View\\FileViewFinder::addNamespace",
		"doc": "Add a namespace hint to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_prependNamespace",
		"name": "Illuminate\\View\\FileViewFinder::prependNamespace",
		"doc": "Prepend a namespace hint to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_replaceNamespace",
		"name": "Illuminate\\View\\FileViewFinder::replaceNamespace",
		"doc": "Replace the namespace hints for the given namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_addExtension",
		"name": "Illuminate\\View\\FileViewFinder::addExtension",
		"doc": "Register an extension with the view finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_hasHintInformation",
		"name": "Illuminate\\View\\FileViewFinder::hasHintInformation",
		"doc": "Returns whether or not the view name has any hint information."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_flush",
		"name": "Illuminate\\View\\FileViewFinder::flush",
		"doc": "Flush the cache of located views."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_getFilesystem",
		"name": "Illuminate\\View\\FileViewFinder::getFilesystem",
		"doc": "Get the filesystem instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_setPaths",
		"name": "Illuminate\\View\\FileViewFinder::setPaths",
		"doc": "Set the active view paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_getPaths",
		"name": "Illuminate\\View\\FileViewFinder::getPaths",
		"doc": "Get the active view paths."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_getViews",
		"name": "Illuminate\\View\\FileViewFinder::getViews",
		"doc": "Get the views that have been located."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_getHints",
		"name": "Illuminate\\View\\FileViewFinder::getHints",
		"doc": "Get the namespace to file path hints."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\FileViewFinder",
		"fromLink": "Illuminate/View/FileViewFinder.html",
		"link": "Illuminate/View/FileViewFinder.html#method_getExtensions",
		"name": "Illuminate\\View\\FileViewFinder::getExtensions",
		"doc": "Get registered extensions."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/InvokableComponentVariable.html",
		"name": "Illuminate\\View\\InvokableComponentVariable",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\InvokableComponentVariable",
		"fromLink": "Illuminate/View/InvokableComponentVariable.html",
		"link": "Illuminate/View/InvokableComponentVariable.html#method___construct",
		"name": "Illuminate\\View\\InvokableComponentVariable::__construct",
		"doc": "Create a new variable instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\InvokableComponentVariable",
		"fromLink": "Illuminate/View/InvokableComponentVariable.html",
		"link": "Illuminate/View/InvokableComponentVariable.html#method_resolveDisplayableValue",
		"name": "Illuminate\\View\\InvokableComponentVariable::resolveDisplayableValue",
		"doc": "Resolve the displayable value that the class is deferring."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\InvokableComponentVariable",
		"fromLink": "Illuminate/View/InvokableComponentVariable.html",
		"link": "Illuminate/View/InvokableComponentVariable.html#method_getIterator",
		"name": "Illuminate\\View\\InvokableComponentVariable::getIterator",
		"doc": "Get an interator instance for the variable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\InvokableComponentVariable",
		"fromLink": "Illuminate/View/InvokableComponentVariable.html",
		"link": "Illuminate/View/InvokableComponentVariable.html#method___get",
		"name": "Illuminate\\View\\InvokableComponentVariable::__get",
		"doc": "Dynamically proxy attribute access to the variable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\InvokableComponentVariable",
		"fromLink": "Illuminate/View/InvokableComponentVariable.html",
		"link": "Illuminate/View/InvokableComponentVariable.html#method___call",
		"name": "Illuminate\\View\\InvokableComponentVariable::__call",
		"doc": "Dynamically proxy method access to the variable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\InvokableComponentVariable",
		"fromLink": "Illuminate/View/InvokableComponentVariable.html",
		"link": "Illuminate/View/InvokableComponentVariable.html#method___invoke",
		"name": "Illuminate\\View\\InvokableComponentVariable::__invoke",
		"doc": "Resolve the variable."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\InvokableComponentVariable",
		"fromLink": "Illuminate/View/InvokableComponentVariable.html",
		"link": "Illuminate/View/InvokableComponentVariable.html#method___toString",
		"name": "Illuminate\\View\\InvokableComponentVariable::__toString",
		"doc": "Resolve the variable as a string."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View\\Middleware",
		"fromLink": "Illuminate/View/Middleware.html",
		"link": "Illuminate/View/Middleware/ShareErrorsFromSession.html",
		"name": "Illuminate\\View\\Middleware\\ShareErrorsFromSession",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Middleware\\ShareErrorsFromSession",
		"fromLink": "Illuminate/View/Middleware/ShareErrorsFromSession.html",
		"link": "Illuminate/View/Middleware/ShareErrorsFromSession.html#method___construct",
		"name": "Illuminate\\View\\Middleware\\ShareErrorsFromSession::__construct",
		"doc": "Create a new error binder instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\Middleware\\ShareErrorsFromSession",
		"fromLink": "Illuminate/View/Middleware/ShareErrorsFromSession.html",
		"link": "Illuminate/View/Middleware/ShareErrorsFromSession.html#method_handle",
		"name": "Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle",
		"doc": "Handle an incoming request."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/View.html",
		"name": "Illuminate\\View\\View",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method___construct",
		"name": "Illuminate\\View\\View::__construct",
		"doc": "Create a new view instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_render",
		"name": "Illuminate\\View\\View::render",
		"doc": "Get the string contents of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_renderContents",
		"name": "Illuminate\\View\\View::renderContents",
		"doc": "Get the contents of the view instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_getContents",
		"name": "Illuminate\\View\\View::getContents",
		"doc": "Get the evaluated contents of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_gatherData",
		"name": "Illuminate\\View\\View::gatherData",
		"doc": "Get the data bound to the view instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_renderSections",
		"name": "Illuminate\\View\\View::renderSections",
		"doc": "Get the sections of the rendered view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_with",
		"name": "Illuminate\\View\\View::with",
		"doc": "Add a piece of data to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_nest",
		"name": "Illuminate\\View\\View::nest",
		"doc": "Add a view instance to the view data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_withErrors",
		"name": "Illuminate\\View\\View::withErrors",
		"doc": "Add validation errors to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_formatErrors",
		"name": "Illuminate\\View\\View::formatErrors",
		"doc": "Parse the given errors into an appropriate value."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_name",
		"name": "Illuminate\\View\\View::name",
		"doc": "Get the name of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_getName",
		"name": "Illuminate\\View\\View::getName",
		"doc": "Get the name of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_getData",
		"name": "Illuminate\\View\\View::getData",
		"doc": "Get the array of view data."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_getPath",
		"name": "Illuminate\\View\\View::getPath",
		"doc": "Get the path to the view file."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_setPath",
		"name": "Illuminate\\View\\View::setPath",
		"doc": "Set the path to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_getFactory",
		"name": "Illuminate\\View\\View::getFactory",
		"doc": "Get the view factory instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_getEngine",
		"name": "Illuminate\\View\\View::getEngine",
		"doc": "Get the view's rendering engine."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_offsetExists",
		"name": "Illuminate\\View\\View::offsetExists",
		"doc": "Determine if a piece of data is bound."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_offsetGet",
		"name": "Illuminate\\View\\View::offsetGet",
		"doc": "Get a piece of bound data to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_offsetSet",
		"name": "Illuminate\\View\\View::offsetSet",
		"doc": "Set a piece of data on the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_offsetUnset",
		"name": "Illuminate\\View\\View::offsetUnset",
		"doc": "Unset a piece of data from the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method___get",
		"name": "Illuminate\\View\\View::__get",
		"doc": "Get a piece of data from the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method___set",
		"name": "Illuminate\\View\\View::__set",
		"doc": "Set a piece of data on the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method___isset",
		"name": "Illuminate\\View\\View::__isset",
		"doc": "Check if a piece of data is bound to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method___unset",
		"name": "Illuminate\\View\\View::__unset",
		"doc": "Remove a piece of bound data from the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method___call",
		"name": "Illuminate\\View\\View::__call",
		"doc": "Dynamically bind parameters to the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method_toHtml",
		"name": "Illuminate\\View\\View::toHtml",
		"doc": "Get content as a string of HTML."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\View",
		"fromLink": "Illuminate/View/View.html",
		"link": "Illuminate/View/View.html#method___toString",
		"name": "Illuminate\\View\\View::__toString",
		"doc": "Get the string contents of the view."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/ViewFinderInterface.html",
		"name": "Illuminate\\View\\ViewFinderInterface",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_find",
		"name": "Illuminate\\View\\ViewFinderInterface::find",
		"doc": "Get the fully qualified location of the view."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_addLocation",
		"name": "Illuminate\\View\\ViewFinderInterface::addLocation",
		"doc": "Add a location to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_addNamespace",
		"name": "Illuminate\\View\\ViewFinderInterface::addNamespace",
		"doc": "Add a namespace hint to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_prependNamespace",
		"name": "Illuminate\\View\\ViewFinderInterface::prependNamespace",
		"doc": "Prepend a namespace hint to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_replaceNamespace",
		"name": "Illuminate\\View\\ViewFinderInterface::replaceNamespace",
		"doc": "Replace the namespace hints for the given namespace."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_addExtension",
		"name": "Illuminate\\View\\ViewFinderInterface::addExtension",
		"doc": "Add a valid view extension to the finder."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewFinderInterface",
		"fromLink": "Illuminate/View/ViewFinderInterface.html",
		"link": "Illuminate/View/ViewFinderInterface.html#method_flush",
		"name": "Illuminate\\View\\ViewFinderInterface::flush",
		"doc": "Flush the cache of located views."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/ViewName.html",
		"name": "Illuminate\\View\\ViewName",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewName",
		"fromLink": "Illuminate/View/ViewName.html",
		"link": "Illuminate/View/ViewName.html#method_normalize",
		"name": "Illuminate\\View\\ViewName::normalize",
		"doc": "Normalize the given view name."
	},

	{
		"type": "Class",
		"fromName": "Illuminate\\View",
		"fromLink": "Illuminate/View.html",
		"link": "Illuminate/View/ViewServiceProvider.html",
		"name": "Illuminate\\View\\ViewServiceProvider",
		"doc": null
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_register",
		"name": "Illuminate\\View\\ViewServiceProvider::register",
		"doc": "Register the service provider."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_registerFactory",
		"name": "Illuminate\\View\\ViewServiceProvider::registerFactory",
		"doc": "Register the view environment."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_createFactory",
		"name": "Illuminate\\View\\ViewServiceProvider::createFactory",
		"doc": "Create a new Factory Instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_registerViewFinder",
		"name": "Illuminate\\View\\ViewServiceProvider::registerViewFinder",
		"doc": "Register the view finder implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_registerBladeCompiler",
		"name": "Illuminate\\View\\ViewServiceProvider::registerBladeCompiler",
		"doc": "Register the Blade compiler implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_registerEngineResolver",
		"name": "Illuminate\\View\\ViewServiceProvider::registerEngineResolver",
		"doc": "Register the engine resolver instance."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_registerFileEngine",
		"name": "Illuminate\\View\\ViewServiceProvider::registerFileEngine",
		"doc": "Register the file engine implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_registerPhpEngine",
		"name": "Illuminate\\View\\ViewServiceProvider::registerPhpEngine",
		"doc": "Register the PHP engine implementation."
	},
	{
		"type": "Method",
		"fromName": "Illuminate\\View\\ViewServiceProvider",
		"fromLink": "Illuminate/View/ViewServiceProvider.html",
		"link": "Illuminate/View/ViewServiceProvider.html#method_registerBladeEngine",
		"name": "Illuminate\\View\\ViewServiceProvider::registerBladeEngine",
		"doc": "Register the Blade engine implementation."
	}
]
